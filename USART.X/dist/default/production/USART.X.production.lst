

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Sat Jul  1 17:29:05 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    29                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    30                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    31                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    32                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    33  0000                     
    34                           ; Version 1.41
    35                           ; Generated 25/01/2017 GMT
    36                           ; 
    37                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    38                           ; All rights reserved.
    39                           ; 
    40                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    41                           ; 
    42                           ; Redistribution and use in source and binary forms, with or without modification, are
    43                           ; permitted provided that the following conditions are met:
    44                           ; 
    45                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    46                           ;        conditions and the following disclaimer.
    47                           ; 
    48                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    49                           ;        of conditions and the following disclaimer in the documentation and/or other
    50                           ;        materials provided with the distribution.
    51                           ; 
    52                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    53                           ;        software without specific prior written permission.
    54                           ; 
    55                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    56                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    57                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    58                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    59                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    60                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    61                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    62                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    63                           ; 
    64                           ; 
    65                           ; Code-generator required, PIC18F4550 Definitions
    66                           ; 
    67                           ; SFR Addresses
    68  0000                     _ADRES	set	4035
    69  0000                     _PORTCbits	set	3970
    70  0000                     _TRISCbits	set	3988
    71  0000                     _ADCON0bits	set	4034
    72  0000                     _ADCON2	set	4032
    73  0000                     _ADCON1	set	4033
    74  0000                     _ADCON0	set	4034
    75  0000                     _TRISAbits	set	3986
    76  0000                     _RCREG	set	4014
    77  0000                     _TXREG	set	4013
    78  0000                     _SPBRG	set	4015
    79  0000                     _TRISE	set	3990
    80  0000                     _TRISB	set	3987
    81  0000                     _PORTBbits	set	3969
    82  0000                     _PORTD	set	3971
    83  0000                     _PORTEbits	set	3972
    84  0000                     _TMR0L	set	4054
    85  0000                     _TMR0H	set	4055
    86  0000                     _T0CONbits	set	4053
    87  0000                     _TRISD	set	3989
    88  0000                     _INTCON2bits	set	4081
    89  0000                     _TRISBbits	set	3987
    90  0000                     _INTCONbits	set	4082
    91  0000                     _INTCON3bits	set	4080
    92  0000                     _RCIF	set	31989
    93  0000                     _TRMT	set	32097
    94  0000                     _TXEN	set	32101
    95  0000                     _CREN	set	32092
    96  0000                     _TRISC6	set	31910
    97  0000                     _TRISC7	set	31911
    98  0000                     _SPEN	set	32095
    99  0000                     _SYNC	set	32100
   100  0000                     _BRGH	set	32098
   101                           
   102                           	psect	smallconst
   103  000800                     __psmallconst:
   104                           	opt stack 0
   105  000800  00                 	db	0
   106  000801                     STR_1:
   107  000801  42                 	db	66	;'B'
   108  000802  61                 	db	97	;'a'
   109  000803  74                 	db	116	;'t'
   110  000804  61                 	db	97	;'a'
   111  000805  20                 	db	32
   112  000806  6E                 	db	110	;'n'
   113  000807  61                 	db	97	;'a'
   114  000808  20                 	db	32
   115  000809  70                 	db	112	;'p'
   116  00080A  6F                 	db	111	;'o'
   117  00080B  72                 	db	114	;'r'
   118  00080C  74                 	db	116	;'t'
   119  00080D  61                 	db	97	;'a'
   120  00080E  00                 	db	0
   121  00080F                     STR_6:
   122  00080F  6E                 	db	110	;'n'
   123  000810  61                 	db	97	;'a'
   124  000811  6F                 	db	111	;'o'
   125  000812  20                 	db	32
   126  000813  63                 	db	99	;'c'
   127  000814  6F                 	db	111	;'o'
   128  000815  69                 	db	105	;'i'
   129  000816  6E                 	db	110	;'n'
   130  000817  63                 	db	99	;'c'
   131  000818  69                 	db	105	;'i'
   132  000819  64                 	db	100	;'d'
   133  00081A  65                 	db	101	;'e'
   134  00081B  6D                 	db	109	;'m'
   135  00081C  00                 	db	0
   136  00081D                     STR_11:
   137  00081D  43                 	db	67	;'C'
   138  00081E  6F                 	db	111	;'o'
   139  00081F  6E                 	db	110	;'n'
   140  000820  66                 	db	102	;'f'
   141  000821  69                 	db	105	;'i'
   142  000822  72                 	db	114	;'r'
   143  000823  6D                 	db	109	;'m'
   144  000824  65                 	db	101	;'e'
   145  000825  20                 	db	32
   146  000826  73                 	db	115	;'s'
   147  000827  75                 	db	117	;'u'
   148  000828  61                 	db	97	;'a'
   149  000829  00                 	db	0
   150  00082A                     STR_13:
   151  00082A  43                 	db	67	;'C'
   152  00082B  61                 	db	97	;'a'
   153  00082C  64                 	db	100	;'d'
   154  00082D  61                 	db	97	;'a'
   155  00082E  73                 	db	115	;'s'
   156  00082F  74                 	db	116	;'t'
   157  000830  72                 	db	114	;'r'
   158  000831  65                 	db	101	;'e'
   159  000832  20                 	db	32
   160  000833  73                 	db	115	;'s'
   161  000834  75                 	db	117	;'u'
   162  000835  61                 	db	97	;'a'
   163  000836  00                 	db	0
   164  000837                     STR_4:
   165  000837  44                 	db	68	;'D'
   166  000838  65                 	db	101	;'e'
   167  000839  73                 	db	115	;'s'
   168  00083A  74                 	db	116	;'t'
   169  00083B  72                 	db	114	;'r'
   170  00083C  61                 	db	97	;'a'
   171  00083D  76                 	db	118	;'v'
   172  00083E  61                 	db	97	;'a'
   173  00083F  64                 	db	100	;'d'
   174  000840  61                 	db	97	;'a'
   175  000841  21                 	db	33
   176  000842  00                 	db	0
   177  000843                     STR_18:
   178  000843  43                 	db	67	;'C'
   179  000844  61                 	db	97	;'a'
   180  000845  64                 	db	100	;'d'
   181  000846  61                 	db	97	;'a'
   182  000847  73                 	db	115	;'s'
   183  000848  74                 	db	116	;'t'
   184  000849  72                 	db	114	;'r'
   185  00084A  61                 	db	97	;'a'
   186  00084B  64                 	db	100	;'d'
   187  00084C  61                 	db	97	;'a'
   188  00084D  00                 	db	0
   189  00084E                     STR_15:
   190  00084E  52                 	db	82	;'R'
   191  00084F  65                 	db	101	;'e'
   192  000850  70                 	db	112	;'p'
   193  000851  69                 	db	105	;'i'
   194  000852  74                 	db	116	;'t'
   195  000853  61                 	db	97	;'a'
   196  000854  20                 	db	32
   197  000855  73                 	db	115	;'s'
   198  000856  75                 	db	117	;'u'
   199  000857  61                 	db	97	;'a'
   200  000858  00                 	db	0
   201  000859                     STR_5:
   202  000859  41                 	db	65	;'A'
   203  00085A  73                 	db	115	;'s'
   204  00085B  20                 	db	32
   205  00085C  73                 	db	115	;'s'
   206  00085D  65                 	db	101	;'e'
   207  00085E  6E                 	db	110	;'n'
   208  00085F  68                 	db	104	;'h'
   209  000860  61                 	db	97	;'a'
   210  000861  73                 	db	115	;'s'
   211  000862  00                 	db	0
   212  000863                     STR_17:
   213  000863  53                 	db	83	;'S'
   214  000864  65                 	db	101	;'e'
   215  000865  6E                 	db	110	;'n'
   216  000866  68                 	db	104	;'h'
   217  000867  61                 	db	97	;'a'
   218  000868  00                 	db	0
   219  000869                     STR_12:
   220  000869  73                 	db	115	;'s'
   221  00086A  65                 	db	101	;'e'
   222  00086B  6E                 	db	110	;'n'
   223  00086C  68                 	db	104	;'h'
   224  00086D  61                 	db	97	;'a'
   225  00086E  00                 	db	0
   226  00086F                     STR_3:
   227  00086F  50                 	db	80	;'P'
   228  000870  6F                 	db	111	;'o'
   229  000871  72                 	db	114	;'r'
   230  000872  74                 	db	116	;'t'
   231  000873  61                 	db	97	;'a'
   232  000874  00                 	db	0
   233  0000                     
   234                           ; #config settings
   235  000875  00                 	db	0	; dummy byte at the end
   236  0000                     
   237                           	psect	cinit
   238  001214                     __pcinit:
   239                           	opt stack 0
   240  001214                     start_initialization:
   241                           	opt stack 0
   242  001214                     __initialization:
   243                           	opt stack 0
   244                           
   245                           ; Clear objects allocated to COMRAM (2 bytes)
   246  001214  6A34               	clrf	(__pbssCOMRAM+1)& (0+255),c
   247  001216  6A33               	clrf	__pbssCOMRAM& (0+255),c
   248  001218                     end_of_initialization:
   249                           	opt stack 0
   250  001218                     __end_of__initialization:
   251                           	opt stack 0
   252  001218  9035               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   253  00121A  9235               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   254  00121C  0E00               	movlw	low (__Lsmallconst shr (0+16))
   255  00121E  6EF8               	movwf	tblptru,c
   256  001220  0E08               	movlw	high __Lsmallconst
   257  001222  6EF7               	movwf	tblptrh,c
   258  001224  0100               	movlb	0
   259  001226  EF20  F008         	goto	_main	;jump to C main() function
   260                           tblptru	equ	0xFF8
   261                           tblptrh	equ	0xFF7
   262                           
   263                           	psect	bssCOMRAM
   264  000033                     __pbssCOMRAM:
   265                           	opt stack 0
   266  000033                     _button:
   267                           	opt stack 0
   268  000033                     	ds	2
   269                           tblptru	equ	0xFF8
   270                           tblptrh	equ	0xFF7
   271                           
   272                           	psect	cstackCOMRAM
   273  000001                     __pcstackCOMRAM:
   274                           	opt stack 0
   275  000001                     ??_ISR:
   276  000001                     
   277                           ; 1 bytes @ 0x0
   278  000001                     	ds	14
   279  00000F                     ??_ena_pulse:
   280  00000F                     ?_read_ADC:
   281                           	opt stack 0
   282  00000F                     ?_cmpSignal:
   283                           	opt stack 0
   284  00000F                     cmpSignal@pass:
   285                           	opt stack 0
   286  00000F                     bip@rounds:
   287                           	opt stack 0
   288                           
   289                           ; 2 bytes @ 0xE
   290  00000F                     	ds	1
   291  000010                     ??_send_cfg:
   292  000010                     ??_send_msg:
   293                           
   294                           ; 1 bytes @ 0xF
   295  000010                     	ds	1
   296  000011                     send_cfg@cmd:
   297                           	opt stack 0
   298  000011                     send_msg@msg:
   299                           	opt stack 0
   300  000011                     read_ADC@value:
   301                           	opt stack 0
   302  000011                     cmpSignal@toc:
   303                           	opt stack 0
   304  000011                     bip@time:
   305                           	opt stack 0
   306                           
   307                           ; 2 bytes @ 0x10
   308  000011                     	ds	1
   309  000012                     write_LCD@c:
   310                           	opt stack 0
   311  000012                     set_line@line:
   312                           	opt stack 0
   313                           
   314                           ; 2 bytes @ 0x11
   315  000012                     	ds	1
   316  000013                     ??_bip:
   317  000013                     readSignal@signal:
   318                           	opt stack 0
   319                           
   320                           ; 2 bytes @ 0x12
   321  000013                     	ds	1
   322  000014                     ??_write_LCD:
   323  000014                     set_line@pos:
   324                           	opt stack 0
   325                           
   326                           ; 2 bytes @ 0x13
   327  000014                     	ds	1
   328  000015                     readSignal@pos:
   329                           	opt stack 0
   330  000015                     bip@j:
   331                           	opt stack 0
   332                           
   333                           ; 2 bytes @ 0x14
   334  000015                     	ds	1
   335  000016                     set_line@cursor:
   336                           	opt stack 0
   337  000016                     write_LCD@i:
   338                           	opt stack 0
   339                           
   340                           ; 2 bytes @ 0x15
   341  000016                     	ds	1
   342  000017                     ??_readSignal:
   343                           
   344                           ; 1 bytes @ 0x16
   345  000017                     	ds	1
   346  000018                     ?_cmpPass:
   347                           	opt stack 0
   348  000018                     ?_confirmarSenha:
   349                           	opt stack 0
   350  000018                     cmpPass@pass:
   351                           	opt stack 0
   352                           
   353                           ; 2 bytes @ 0x17
   354  000018                     	ds	1
   355  000019                     readSignal@limite:
   356                           	opt stack 0
   357                           
   358                           ; 2 bytes @ 0x18
   359  000019                     	ds	1
   360  00001A                     cmpPass@toque:
   361                           	opt stack 0
   362                           
   363                           ; 2 bytes @ 0x19
   364  00001A                     	ds	1
   365  00001B                     readSignal@i:
   366                           	opt stack 0
   367                           
   368                           ; 2 bytes @ 0x1A
   369  00001B                     	ds	1
   370  00001C                     cmpPass@i:
   371                           	opt stack 0
   372                           
   373                           ; 2 bytes @ 0x1B
   374  00001C                     	ds	1
   375  00001D                     readSignal@j:
   376                           	opt stack 0
   377                           
   378                           ; 2 bytes @ 0x1C
   379  00001D                     	ds	2
   380  00001F                     lerToque@toque:
   381                           	opt stack 0
   382  00001F                     destravarPorta@pass:
   383                           	opt stack 0
   384                           
   385                           ; 2 bytes @ 0x1E
   386  00001F                     	ds	2
   387  000021                     lerToque@i:
   388                           	opt stack 0
   389  000021                     destravarPorta@toque:
   390                           	opt stack 0
   391                           
   392                           ; 2 bytes @ 0x20
   393  000021                     	ds	2
   394  000023                     destravarPorta@i:
   395                           	opt stack 0
   396  000023                     cadastrarSenha@pass:
   397                           	opt stack 0
   398                           
   399                           ; 2 bytes @ 0x22
   400  000023                     	ds	2
   401  000025                     ??_cadastrarSenha:
   402                           
   403                           ; 1 bytes @ 0x24
   404  000025                     	ds	2
   405  000027                     cadastrarSenha@i:
   406                           	opt stack 0
   407                           
   408                           ; 2 bytes @ 0x26
   409  000027                     	ds	2
   410  000029                     cadastrarSenha@j:
   411                           	opt stack 0
   412                           
   413                           ; 2 bytes @ 0x28
   414  000029                     	ds	2
   415  00002B                     cadastrarSenha@temp2:
   416                           	opt stack 0
   417                           
   418                           ; 2 bytes @ 0x2A
   419  00002B                     	ds	2
   420  00002D                     cadastrarSenha@temp1:
   421                           	opt stack 0
   422                           
   423                           ; 2 bytes @ 0x2C
   424  00002D                     	ds	2
   425  00002F                     main@toc:
   426                           	opt stack 0
   427                           
   428                           ; 2 bytes @ 0x2E
   429  00002F                     	ds	2
   430  000031                     main@pass:
   431                           	opt stack 0
   432                           
   433                           ; 2 bytes @ 0x30
   434  000031                     	ds	2
   435                           tblptru	equ	0xFF8
   436                           tblptrh	equ	0xFF7
   437                           
   438 ;;
   439 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   440 ;;
   441 ;; *************** function _main *****************
   442 ;; Defined at:
   443 ;;		line 20 in file "main.c"
   444 ;; Parameters:    Size  Location     Type
   445 ;;		None
   446 ;; Auto vars:     Size  Location     Type
   447 ;;  pass            2   48[COMRAM] unsigned char [2]
   448 ;;  toc             2   46[COMRAM] unsigned char [2]
   449 ;; Return value:  Size  Location     Type
   450 ;;                  1    wreg      void 
   451 ;; Registers used:
   452 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   453 ;; Tracked objects:
   454 ;;		On entry : 0/0
   455 ;;		On exit  : 0/0
   456 ;;		Unchanged: 0/0
   457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   458 ;;      Params:         0       0       0       0       0       0       0       0       0
   459 ;;      Locals:         4       0       0       0       0       0       0       0       0
   460 ;;      Temps:          0       0       0       0       0       0       0       0       0
   461 ;;      Totals:         4       0       0       0       0       0       0       0       0
   462 ;;Total ram usage:        4 bytes
   463 ;; Hardware stack levels required when called:    6
   464 ;; This function calls:
   465 ;;		_cadastrarSenha
   466 ;;		_destravarPorta
   467 ;;		_init_ADC
   468 ;;		_init_INTRB2
   469 ;;		_init_LCD
   470 ;; This function is called by:
   471 ;;		Startup code after reset
   472 ;; This function uses a non-reentrant model
   473 ;;
   474                           
   475                           	psect	text0
   476  001040                     __ptext0:
   477                           	opt stack 0
   478  001040                     _main:
   479                           	opt stack 25
   480                           
   481                           ;main.c: 22: init_INTRB2();
   482                           
   483                           ;incstack = 0
   484  001040  EC1E  F009         	call	_init_INTRB2	;wreg free
   485                           
   486                           ;main.c: 23: init_LCD();
   487  001044  ECCC  F008         	call	_init_LCD	;wreg free
   488                           
   489                           ;main.c: 24: init_ADC();
   490  001048  EC15  F009         	call	_init_ADC	;wreg free
   491                           
   492                           ;main.c: 26: char pass[2];
   493                           ;main.c: 27: pass[0] = 0x00;
   494  00104C  0E00               	movlw	0
   495  00104E  6E31               	movwf	main@pass,c
   496                           
   497                           ;main.c: 28: pass[1] = 0x00;
   498  001050  0E00               	movlw	0
   499  001052  6E32               	movwf	main@pass+1,c
   500                           
   501                           ;main.c: 29: char toc[2];
   502                           ;main.c: 30: toc[0] = 0x00;
   503  001054  0E00               	movlw	0
   504  001056  6E2F               	movwf	main@toc,c
   505                           
   506                           ;main.c: 31: toc[1] = 0x00;
   507  001058  0E00               	movlw	0
   508  00105A  6E30               	movwf	main@toc+1,c
   509                           
   510                           ;main.c: 33: cadastrarSenha(pass);
   511  00105C  0E31               	movlw	low main@pass
   512  00105E  6E23               	movwf	cadastrarSenha@pass,c
   513  001060  0E00               	movlw	high main@pass
   514  001062  6E24               	movwf	cadastrarSenha@pass+1,c
   515  001064  EC2B  F005         	call	_cadastrarSenha	;wreg free
   516  001068                     l1634:
   517                           
   518                           ;main.c: 37: destravarPorta(pass, toc);
   519  001068  0E31               	movlw	low main@pass
   520  00106A  6E1F               	movwf	destravarPorta@pass,c
   521  00106C  0E00               	movlw	high main@pass
   522  00106E  6E20               	movwf	destravarPorta@pass+1,c
   523  001070  0E2F               	movlw	low main@toc
   524  001072  6E21               	movwf	destravarPorta@toque,c
   525  001074  0E00               	movlw	high main@toc
   526  001076  6E22               	movwf	destravarPorta@toque+1,c
   527  001078  EC3B  F004         	call	_destravarPorta	;wreg free
   528                           
   529                           ;main.c: 38: if(button == 1){
   530  00107C  0433               	decf	_button,w,c
   531  00107E  1034               	iorwf	_button+1,w,c
   532  001080  A4D8               	btfss	status,2,c
   533  001082  D7F2               	goto	l1634
   534                           
   535                           ;main.c: 39: button = 0;
   536  001084  0E00               	movlw	0
   537  001086  6E34               	movwf	_button+1,c
   538  001088  0E00               	movlw	0
   539  00108A  6E33               	movwf	_button,c
   540                           
   541                           ;main.c: 40: cadastrarSenha(pass);
   542  00108C  0E31               	movlw	low main@pass
   543  00108E  6E23               	movwf	cadastrarSenha@pass,c
   544  001090  0E00               	movlw	high main@pass
   545  001092  6E24               	movwf	cadastrarSenha@pass+1,c
   546  001094  EC2B  F005         	call	_cadastrarSenha	;wreg free
   547                           
   548                           ;main.c: 41: }
   549                           ;main.c: 43: }while(1);
   550  001098  D7E7               	goto	l1634
   551  00109A                     __end_of_main:
   552                           	opt stack 0
   553                           tblptru	equ	0xFF8
   554                           tblptrh	equ	0xFF7
   555                           status	equ	0xFD8
   556                           
   557 ;; *************** function _init_LCD *****************
   558 ;; Defined at:
   559 ;;		line 45 in file "LCD.c"
   560 ;; Parameters:    Size  Location     Type
   561 ;;		None
   562 ;; Auto vars:     Size  Location     Type
   563 ;;		None
   564 ;; Return value:  Size  Location     Type
   565 ;;                  1    wreg      void 
   566 ;; Registers used:
   567 ;;		wreg, status,2, cstack
   568 ;; Tracked objects:
   569 ;;		On entry : 0/0
   570 ;;		On exit  : 0/0
   571 ;;		Unchanged: 0/0
   572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   573 ;;      Params:         0       0       0       0       0       0       0       0       0
   574 ;;      Locals:         0       0       0       0       0       0       0       0       0
   575 ;;      Temps:          0       0       0       0       0       0       0       0       0
   576 ;;      Totals:         0       0       0       0       0       0       0       0       0
   577 ;;Total ram usage:        0 bytes
   578 ;; Hardware stack levels used:    1
   579 ;; Hardware stack levels required when called:    3
   580 ;; This function calls:
   581 ;;		_send_cfg
   582 ;; This function is called by:
   583 ;;		_main
   584 ;; This function uses a non-reentrant model
   585 ;;
   586                           
   587                           	psect	text1
   588  001198                     __ptext1:
   589                           	opt stack 0
   590  001198                     _init_LCD:
   591                           	opt stack 27
   592                           
   593                           ;LCD.c: 47: TRISB = 0x04;
   594                           
   595                           ;incstack = 0
   596  001198  0E04               	movlw	4
   597  00119A  6E93               	movwf	3987,c	;volatile
   598                           
   599                           ;LCD.c: 48: TRISD = 0x00;
   600  00119C  0E00               	movlw	0
   601  00119E  6E95               	movwf	3989,c	;volatile
   602                           
   603                           ;LCD.c: 49: TRISE = 0x00;
   604  0011A0  0E00               	movlw	0
   605  0011A2  6E96               	movwf	3990,c	;volatile
   606                           
   607                           ;LCD.c: 50: PORTD = 0x00;
   608  0011A4  0E00               	movlw	0
   609  0011A6  6E83               	movwf	3971,c	;volatile
   610                           
   611                           ;LCD.c: 52: send_cfg(0x01);
   612  0011A8  0E01               	movlw	1
   613  0011AA  ECE1  F008         	call	_send_cfg
   614                           
   615                           ;LCD.c: 53: send_cfg(0x38);
   616  0011AE  0E38               	movlw	56
   617  0011B0  ECE1  F008         	call	_send_cfg
   618                           
   619                           ;LCD.c: 54: send_cfg(0x80);
   620  0011B4  0E80               	movlw	128
   621  0011B6  ECE1  F008         	call	_send_cfg
   622                           
   623                           ;LCD.c: 55: send_cfg(0x0F);
   624  0011BA  0E0F               	movlw	15
   625  0011BC  ECE1  F008         	call	_send_cfg
   626  0011C0  0012               	return		;funcret
   627  0011C2                     __end_of_init_LCD:
   628                           	opt stack 0
   629                           tblptru	equ	0xFF8
   630                           tblptrh	equ	0xFF7
   631                           status	equ	0xFD8
   632                           
   633 ;; *************** function _init_INTRB2 *****************
   634 ;; Defined at:
   635 ;;		line 40 in file "Interrupt.c"
   636 ;; Parameters:    Size  Location     Type
   637 ;;		None
   638 ;; Auto vars:     Size  Location     Type
   639 ;;		None
   640 ;; Return value:  Size  Location     Type
   641 ;;                  1    wreg      void 
   642 ;; Registers used:
   643 ;;		None
   644 ;; Tracked objects:
   645 ;;		On entry : 0/0
   646 ;;		On exit  : 0/0
   647 ;;		Unchanged: 0/0
   648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   649 ;;      Params:         0       0       0       0       0       0       0       0       0
   650 ;;      Locals:         0       0       0       0       0       0       0       0       0
   651 ;;      Temps:          0       0       0       0       0       0       0       0       0
   652 ;;      Totals:         0       0       0       0       0       0       0       0       0
   653 ;;Total ram usage:        0 bytes
   654 ;; Hardware stack levels used:    1
   655 ;; Hardware stack levels required when called:    1
   656 ;; This function calls:
   657 ;;		Nothing
   658 ;; This function is called by:
   659 ;;		_main
   660 ;; This function uses a non-reentrant model
   661 ;;
   662                           
   663                           	psect	text2
   664  00123C                     __ptext2:
   665                           	opt stack 0
   666  00123C                     _init_INTRB2:
   667                           	opt stack 29
   668                           
   669                           ;Interrupt.c: 42: INTCONbits.GIE = 0;
   670                           
   671                           ;incstack = 0
   672  00123C  9EF2               	bcf	intcon,7,c	;volatile
   673                           
   674                           ;Interrupt.c: 43: INTCONbits.PEIE = 0;
   675  00123E  9CF2               	bcf	intcon,6,c	;volatile
   676                           
   677                           ;Interrupt.c: 44: TRISBbits.RB2 = 1;
   678  001240  8493               	bsf	3987,2,c	;volatile
   679                           
   680                           ;Interrupt.c: 45: INTCON2bits.INTEDG0 = 1;
   681  001242  8CF1               	bsf	intcon2,6,c	;volatile
   682                           
   683                           ;Interrupt.c: 46: INTCON3bits.INT2IF = 0;
   684  001244  92F0               	bcf	intcon3,1,c	;volatile
   685                           
   686                           ;Interrupt.c: 47: INTCON3bits.INT2IE = 1;
   687  001246  88F0               	bsf	intcon3,4,c	;volatile
   688                           
   689                           ;Interrupt.c: 48: INTCONbits.GIE = 1;
   690  001248  8EF2               	bsf	intcon,7,c	;volatile
   691  00124A  0012               	return		;funcret
   692  00124C                     __end_of_init_INTRB2:
   693                           	opt stack 0
   694                           tblptru	equ	0xFF8
   695                           tblptrh	equ	0xFF7
   696                           intcon	equ	0xFF2
   697                           intcon2	equ	0xFF1
   698                           intcon3	equ	0xFF0
   699                           status	equ	0xFD8
   700                           
   701 ;; *************** function _init_ADC *****************
   702 ;; Defined at:
   703 ;;		line 11 in file "ADC.c"
   704 ;; Parameters:    Size  Location     Type
   705 ;;		None
   706 ;; Auto vars:     Size  Location     Type
   707 ;;		None
   708 ;; Return value:  Size  Location     Type
   709 ;;                  1    wreg      void 
   710 ;; Registers used:
   711 ;;		wreg, status,2
   712 ;; Tracked objects:
   713 ;;		On entry : 0/0
   714 ;;		On exit  : 0/0
   715 ;;		Unchanged: 0/0
   716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   717 ;;      Params:         0       0       0       0       0       0       0       0       0
   718 ;;      Locals:         0       0       0       0       0       0       0       0       0
   719 ;;      Temps:          0       0       0       0       0       0       0       0       0
   720 ;;      Totals:         0       0       0       0       0       0       0       0       0
   721 ;;Total ram usage:        0 bytes
   722 ;; Hardware stack levels used:    1
   723 ;; Hardware stack levels required when called:    1
   724 ;; This function calls:
   725 ;;		Nothing
   726 ;; This function is called by:
   727 ;;		_main
   728 ;; This function uses a non-reentrant model
   729 ;;
   730                           
   731                           	psect	text3
   732  00122A                     __ptext3:
   733                           	opt stack 0
   734  00122A                     _init_ADC:
   735                           	opt stack 29
   736                           
   737                           ;ADC.c: 12: TRISAbits.TRISA0 = 1;
   738                           
   739                           ;incstack = 0
   740  00122A  8092               	bsf	3986,0,c	;volatile
   741                           
   742                           ;ADC.c: 13: ADCON0 = 0;
   743  00122C  0E00               	movlw	0
   744  00122E  6EC2               	movwf	4034,c	;volatile
   745                           
   746                           ;ADC.c: 14: ADCON1 = 0x0e;
   747  001230  0E0E               	movlw	14
   748  001232  6EC1               	movwf	4033,c	;volatile
   749                           
   750                           ;ADC.c: 15: ADCON2 = 0xd9;
   751  001234  0ED9               	movlw	217
   752  001236  6EC0               	movwf	4032,c	;volatile
   753                           
   754                           ;ADC.c: 16: ADCON0bits.ADON = 1;
   755  001238  80C2               	bsf	4034,0,c	;volatile
   756  00123A  0012               	return		;funcret
   757  00123C                     __end_of_init_ADC:
   758                           	opt stack 0
   759                           tblptru	equ	0xFF8
   760                           tblptrh	equ	0xFF7
   761                           intcon	equ	0xFF2
   762                           intcon2	equ	0xFF1
   763                           intcon3	equ	0xFF0
   764                           status	equ	0xFD8
   765                           
   766 ;; *************** function _destravarPorta *****************
   767 ;; Defined at:
   768 ;;		line 49 in file "TOCTOC.c"
   769 ;; Parameters:    Size  Location     Type
   770 ;;  pass            2   30[COMRAM] PTR unsigned char 
   771 ;;		 -> main@pass(2), 
   772 ;;  toque           2   32[COMRAM] PTR unsigned char 
   773 ;;		 -> main@toc(2), 
   774 ;; Auto vars:     Size  Location     Type
   775 ;;  i               2   34[COMRAM] int 
   776 ;; Return value:  Size  Location     Type
   777 ;;                  1    wreg      void 
   778 ;; Registers used:
   779 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   780 ;; Tracked objects:
   781 ;;		On entry : 0/0
   782 ;;		On exit  : 0/0
   783 ;;		Unchanged: 0/0
   784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   785 ;;      Params:         4       0       0       0       0       0       0       0       0
   786 ;;      Locals:         2       0       0       0       0       0       0       0       0
   787 ;;      Temps:          0       0       0       0       0       0       0       0       0
   788 ;;      Totals:         6       0       0       0       0       0       0       0       0
   789 ;;Total ram usage:        6 bytes
   790 ;; Hardware stack levels used:    1
   791 ;; Hardware stack levels required when called:    5
   792 ;; This function calls:
   793 ;;		_bip
   794 ;;		_clearLCD
   795 ;;		_cmpPass
   796 ;;		_readSignal
   797 ;;		_read_ADC
   798 ;;		_send_msg
   799 ;;		_set_line
   800 ;;		_write_LCD
   801 ;; This function is called by:
   802 ;;		_main
   803 ;; This function uses a non-reentrant model
   804 ;;
   805                           
   806                           	psect	text4
   807  000876                     __ptext4:
   808                           	opt stack 0
   809  000876                     _destravarPorta:
   810                           	opt stack 25
   811                           
   812                           ;TOCTOC.c: 51: int i = 0;
   813                           
   814                           ;incstack = 0
   815  000876  0E00               	movlw	0
   816  000878  6E24               	movwf	destravarPorta@i+1,c
   817  00087A  0E00               	movlw	0
   818  00087C  6E23               	movwf	destravarPorta@i,c
   819                           
   820                           ;TOCTOC.c: 53: toque[0] = 0x00;
   821  00087E  C021  FFD9         	movff	destravarPorta@toque,fsr2l
   822  000882  C022  FFDA         	movff	destravarPorta@toque+1,fsr2h
   823  000886  0E00               	movlw	0
   824  000888  6EDF               	movwf	indf2,c
   825                           
   826                           ;TOCTOC.c: 54: toque[1] = 0x00;
   827  00088A  EE20 F001          	lfsr	2,1
   828  00088E  5021               	movf	destravarPorta@toque,w,c
   829  000890  26D9               	addwf	fsr2l,f,c
   830  000892  5022               	movf	destravarPorta@toque+1,w,c
   831  000894  22DA               	addwfc	fsr2h,f,c
   832  000896  0E00               	movlw	0
   833  000898  6EDF               	movwf	indf2,c
   834                           
   835                           ;TOCTOC.c: 56: clearLCD();
   836  00089A  EC26  F009         	call	_clearLCD	;wreg free
   837                           
   838                           ;TOCTOC.c: 57: set_line(0,0);
   839  00089E  0E00               	movlw	0
   840  0008A0  6E13               	movwf	set_line@line+1,c
   841  0008A2  0E00               	movlw	0
   842  0008A4  6E12               	movwf	set_line@line,c
   843  0008A6  0E00               	movlw	0
   844  0008A8  6E15               	movwf	set_line@pos+1,c
   845  0008AA  0E00               	movlw	0
   846  0008AC  6E14               	movwf	set_line@pos,c
   847  0008AE  ECF0  F008         	call	_set_line	;wreg free
   848                           
   849                           ;TOCTOC.c: 58: write_LCD("Bata na porta");
   850  0008B2  0E01               	movlw	low STR_1
   851  0008B4  6E12               	movwf	write_LCD@c,c
   852  0008B6  0E08               	movlw	high STR_1
   853  0008B8  6E13               	movwf	write_LCD@c+1,c
   854  0008BA  EC73  F008         	call	_write_LCD	;wreg free
   855                           
   856                           ;TOCTOC.c: 60: while((int)read_ADC() < 15){
   857  0008BE  D004               	goto	l1570
   858  0008C0                     l1566:
   859                           
   860                           ;TOCTOC.c: 61: if(button == 1)
   861  0008C0  0433               	decf	_button,w,c
   862  0008C2  1034               	iorwf	_button+1,w,c
   863  0008C4  B4D8               	btfsc	status,2,c
   864  0008C6  0012               	return	
   865  0008C8                     l1570:
   866  0008C8  ECFE  F008         	call	_read_ADC	;wreg free
   867  0008CC  BE10               	btfsc	?_read_ADC+1,7,c
   868  0008CE  D7F8               	goto	l1566
   869  0008D0  5010               	movf	?_read_ADC+1,w,c
   870  0008D2  E151               	bnz	l1590
   871  0008D4  0E0F               	movlw	15
   872  0008D6  5C0F               	subwf	?_read_ADC,w,c
   873  0008D8  B0D8               	btfsc	status,0,c
   874  0008DA  D04D               	goto	l1590
   875  0008DC  D7F1               	goto	l1566
   876  0008DE                     l1572:
   877                           
   878                           ;TOCTOC.c: 66: set_line(1,0);
   879  0008DE  0E00               	movlw	0
   880  0008E0  6E13               	movwf	set_line@line+1,c
   881  0008E2  0E01               	movlw	1
   882  0008E4  6E12               	movwf	set_line@line,c
   883  0008E6  0E00               	movlw	0
   884  0008E8  6E15               	movwf	set_line@pos+1,c
   885  0008EA  0E00               	movlw	0
   886  0008EC  6E14               	movwf	set_line@pos,c
   887  0008EE  ECF0  F008         	call	_set_line	;wreg free
   888                           
   889                           ;TOCTOC.c: 67: send_msg('1'+ i);
   890  0008F2  5023               	movf	destravarPorta@i,w,c
   891  0008F4  0F31               	addlw	49
   892  0008F6  ECB4  F008         	call	_send_msg
   893                           
   894                           ;TOCTOC.c: 68: if(i == 0)
   895  0008FA  5023               	movf	destravarPorta@i,w,c
   896  0008FC  1024               	iorwf	destravarPorta@i+1,w,c
   897  0008FE  A4D8               	btfss	status,2,c
   898  000900  D00B               	goto	l1578
   899                           
   900                           ;TOCTOC.c: 69: readSignal(&toque[0], 0);
   901  000902  C021  F013         	movff	destravarPorta@toque,readSignal@signal
   902  000906  C022  F014         	movff	destravarPorta@toque+1,readSignal@signal+1
   903  00090A  0E00               	movlw	0
   904  00090C  6E16               	movwf	readSignal@pos+1,c
   905  00090E  0E00               	movlw	0
   906  000910  6E15               	movwf	readSignal@pos,c
   907  000912  EC58  F007         	call	_readSignal	;wreg free
   908  000916  D02D               	goto	l1588
   909  000918                     l1578:
   910                           
   911                           ;TOCTOC.c: 70: else if(i == 1)
   912  000918  0423               	decf	destravarPorta@i,w,c
   913  00091A  1024               	iorwf	destravarPorta@i+1,w,c
   914  00091C  A4D8               	btfss	status,2,c
   915  00091E  D00B               	goto	l1582
   916                           
   917                           ;TOCTOC.c: 71: readSignal(&toque[0], 1);
   918  000920  C021  F013         	movff	destravarPorta@toque,readSignal@signal
   919  000924  C022  F014         	movff	destravarPorta@toque+1,readSignal@signal+1
   920  000928  0E00               	movlw	0
   921  00092A  6E16               	movwf	readSignal@pos+1,c
   922  00092C  0E01               	movlw	1
   923  00092E  6E15               	movwf	readSignal@pos,c
   924  000930  EC58  F007         	call	_readSignal	;wreg free
   925  000934  D01E               	goto	l1588
   926  000936                     l1582:
   927                           
   928                           ;TOCTOC.c: 72: else if(i == 2)
   929  000936  0E02               	movlw	2
   930  000938  1823               	xorwf	destravarPorta@i,w,c
   931  00093A  1024               	iorwf	destravarPorta@i+1,w,c
   932  00093C  A4D8               	btfss	status,2,c
   933  00093E  D00D               	goto	l1586
   934                           
   935                           ;TOCTOC.c: 73: readSignal(&toque[1], 0);
   936  000940  0E01               	movlw	1
   937  000942  2421               	addwf	destravarPorta@toque,w,c
   938  000944  6E13               	movwf	readSignal@signal,c
   939  000946  0E00               	movlw	0
   940  000948  2022               	addwfc	destravarPorta@toque+1,w,c
   941  00094A  6E14               	movwf	readSignal@signal+1,c
   942  00094C  0E00               	movlw	0
   943  00094E  6E16               	movwf	readSignal@pos+1,c
   944  000950  0E00               	movlw	0
   945  000952  6E15               	movwf	readSignal@pos,c
   946  000954  EC58  F007         	call	_readSignal	;wreg free
   947  000958  D00C               	goto	l1588
   948  00095A                     l1586:
   949                           
   950                           ;TOCTOC.c: 74: else
   951                           ;TOCTOC.c: 75: readSignal(&toque[1], 1);
   952  00095A  0E01               	movlw	1
   953  00095C  2421               	addwf	destravarPorta@toque,w,c
   954  00095E  6E13               	movwf	readSignal@signal,c
   955  000960  0E00               	movlw	0
   956  000962  2022               	addwfc	destravarPorta@toque+1,w,c
   957  000964  6E14               	movwf	readSignal@signal+1,c
   958  000966  0E00               	movlw	0
   959  000968  6E16               	movwf	readSignal@pos+1,c
   960  00096A  0E01               	movlw	1
   961  00096C  6E15               	movwf	readSignal@pos,c
   962  00096E  EC58  F007         	call	_readSignal	;wreg free
   963  000972                     l1588:
   964                           
   965                           ;TOCTOC.c: 76: i++;
   966  000972  4A23               	infsnz	destravarPorta@i,f,c
   967  000974  2A24               	incf	destravarPorta@i+1,f,c
   968  000976                     l1590:
   969  000976  BE24               	btfsc	destravarPorta@i+1,7,c
   970  000978  D7B2               	goto	l1572
   971  00097A  5024               	movf	destravarPorta@i+1,w,c
   972  00097C  E104               	bnz	l1592
   973  00097E  0E04               	movlw	4
   974  000980  5C23               	subwf	destravarPorta@i,w,c
   975  000982  A0D8               	btfss	status,0,c
   976  000984  D7AC               	goto	l1572
   977  000986                     l1592:
   978                           
   979                           ;TOCTOC.c: 77: }
   980                           ;TOCTOC.c: 78: if(cmpPass(pass, toque)){
   981  000986  C01F  F018         	movff	destravarPorta@pass,cmpPass@pass
   982  00098A  C020  F019         	movff	destravarPorta@pass+1,cmpPass@pass+1
   983  00098E  C021  F01A         	movff	destravarPorta@toque,cmpPass@toque
   984  000992  C022  F01B         	movff	destravarPorta@toque+1,cmpPass@toque+1
   985  000996  EC87  F006         	call	_cmpPass	;wreg free
   986  00099A  5018               	movf	?_cmpPass,w,c
   987  00099C  1019               	iorwf	?_cmpPass+1,w,c
   988  00099E  B4D8               	btfsc	status,2,c
   989  0009A0  D02D               	goto	l1606
   990                           
   991                           ;TOCTOC.c: 79: clearLCD();
   992  0009A2  EC26  F009         	call	_clearLCD	;wreg free
   993                           
   994                           ;TOCTOC.c: 80: set_line(0,1);
   995  0009A6  0E00               	movlw	0
   996  0009A8  6E13               	movwf	set_line@line+1,c
   997  0009AA  0E00               	movlw	0
   998  0009AC  6E12               	movwf	set_line@line,c
   999  0009AE  0E00               	movlw	0
  1000  0009B0  6E15               	movwf	set_line@pos+1,c
  1001  0009B2  0E01               	movlw	1
  1002  0009B4  6E14               	movwf	set_line@pos,c
  1003  0009B6  ECF0  F008         	call	_set_line	;wreg free
  1004                           
  1005                           ;TOCTOC.c: 81: write_LCD("Porta");
  1006  0009BA  0E6F               	movlw	low STR_3
  1007  0009BC  6E12               	movwf	write_LCD@c,c
  1008  0009BE  0E08               	movlw	high STR_3
  1009  0009C0  6E13               	movwf	write_LCD@c+1,c
  1010  0009C2  EC73  F008         	call	_write_LCD	;wreg free
  1011                           
  1012                           ;TOCTOC.c: 82: set_line(1,2);
  1013  0009C6  0E00               	movlw	0
  1014  0009C8  6E13               	movwf	set_line@line+1,c
  1015  0009CA  0E01               	movlw	1
  1016  0009CC  6E12               	movwf	set_line@line,c
  1017  0009CE  0E00               	movlw	0
  1018  0009D0  6E15               	movwf	set_line@pos+1,c
  1019  0009D2  0E02               	movlw	2
  1020  0009D4  6E14               	movwf	set_line@pos,c
  1021  0009D6  ECF0  F008         	call	_set_line	;wreg free
  1022                           
  1023                           ;TOCTOC.c: 83: write_LCD("Destravada!");
  1024  0009DA  0E37               	movlw	low STR_4
  1025  0009DC  6E12               	movwf	write_LCD@c,c
  1026  0009DE  0E08               	movlw	high STR_4
  1027  0009E0  6E13               	movwf	write_LCD@c+1,c
  1028  0009E2  EC73  F008         	call	_write_LCD	;wreg free
  1029                           
  1030                           ;TOCTOC.c: 84: bip(2, 1000);
  1031  0009E6  0E00               	movlw	0
  1032  0009E8  6E10               	movwf	bip@rounds+1,c
  1033  0009EA  0E02               	movlw	2
  1034  0009EC  6E0F               	movwf	bip@rounds,c
  1035  0009EE  0E03               	movlw	3
  1036  0009F0  6E12               	movwf	bip@time+1,c
  1037  0009F2  0EE8               	movlw	232
  1038  0009F4  6E11               	movwf	bip@time,c
  1039  0009F6  ECF7  F006         	call	_bip	;wreg free
  1040                           
  1041                           ;TOCTOC.c: 85: }
  1042  0009FA  0012               	return	
  1043  0009FC                     l1606:
  1044                           
  1045                           ;TOCTOC.c: 86: else{
  1046                           ;TOCTOC.c: 87: clearLCD();
  1047  0009FC  EC26  F009         	call	_clearLCD	;wreg free
  1048                           
  1049                           ;TOCTOC.c: 88: set_line(0,3);
  1050  000A00  0E00               	movlw	0
  1051  000A02  6E13               	movwf	set_line@line+1,c
  1052  000A04  0E00               	movlw	0
  1053  000A06  6E12               	movwf	set_line@line,c
  1054  000A08  0E00               	movlw	0
  1055  000A0A  6E15               	movwf	set_line@pos+1,c
  1056  000A0C  0E03               	movlw	3
  1057  000A0E  6E14               	movwf	set_line@pos,c
  1058  000A10  ECF0  F008         	call	_set_line	;wreg free
  1059                           
  1060                           ;TOCTOC.c: 89: write_LCD("As senhas");
  1061  000A14  0E59               	movlw	low STR_5
  1062  000A16  6E12               	movwf	write_LCD@c,c
  1063  000A18  0E08               	movlw	high STR_5
  1064  000A1A  6E13               	movwf	write_LCD@c+1,c
  1065  000A1C  EC73  F008         	call	_write_LCD	;wreg free
  1066                           
  1067                           ;TOCTOC.c: 90: set_line(1,1);
  1068  000A20  0E00               	movlw	0
  1069  000A22  6E13               	movwf	set_line@line+1,c
  1070  000A24  0E01               	movlw	1
  1071  000A26  6E12               	movwf	set_line@line,c
  1072  000A28  0E00               	movlw	0
  1073  000A2A  6E15               	movwf	set_line@pos+1,c
  1074  000A2C  0E01               	movlw	1
  1075  000A2E  6E14               	movwf	set_line@pos,c
  1076  000A30  ECF0  F008         	call	_set_line	;wreg free
  1077                           
  1078                           ;TOCTOC.c: 91: write_LCD("nao coincidem");
  1079  000A34  0E0F               	movlw	low STR_6
  1080  000A36  6E12               	movwf	write_LCD@c,c
  1081  000A38  0E08               	movlw	high STR_6
  1082  000A3A  6E13               	movwf	write_LCD@c+1,c
  1083  000A3C  EC73  F008         	call	_write_LCD	;wreg free
  1084                           
  1085                           ;TOCTOC.c: 92: bip(4, 500);
  1086  000A40  0E00               	movlw	0
  1087  000A42  6E10               	movwf	bip@rounds+1,c
  1088  000A44  0E04               	movlw	4
  1089  000A46  6E0F               	movwf	bip@rounds,c
  1090  000A48  0E01               	movlw	1
  1091  000A4A  6E12               	movwf	bip@time+1,c
  1092  000A4C  0EF4               	movlw	244
  1093  000A4E  6E11               	movwf	bip@time,c
  1094  000A50  ECF7  F006         	call	_bip	;wreg free
  1095  000A54  0012               	return	
  1096  000A56                     __end_of_destravarPorta:
  1097                           	opt stack 0
  1098                           tblptru	equ	0xFF8
  1099                           tblptrh	equ	0xFF7
  1100                           intcon	equ	0xFF2
  1101                           intcon2	equ	0xFF1
  1102                           intcon3	equ	0xFF0
  1103                           indf2	equ	0xFDF
  1104                           fsr2h	equ	0xFDA
  1105                           fsr2l	equ	0xFD9
  1106                           status	equ	0xFD8
  1107                           
  1108 ;; *************** function _cadastrarSenha *****************
  1109 ;; Defined at:
  1110 ;;		line 137 in file "TOCTOC.c"
  1111 ;; Parameters:    Size  Location     Type
  1112 ;;  pass            2   34[COMRAM] PTR unsigned char 
  1113 ;;		 -> main@pass(2), 
  1114 ;; Auto vars:     Size  Location     Type
  1115 ;;  temp1           2   44[COMRAM] unsigned char [2]
  1116 ;;  temp2           2   42[COMRAM] unsigned char [2]
  1117 ;;  j               2   40[COMRAM] int 
  1118 ;;  i               2   38[COMRAM] int 
  1119 ;; Return value:  Size  Location     Type
  1120 ;;                  1    wreg      void 
  1121 ;; Registers used:
  1122 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1123 ;; Tracked objects:
  1124 ;;		On entry : 0/0
  1125 ;;		On exit  : 0/0
  1126 ;;		Unchanged: 0/0
  1127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1128 ;;      Params:         2       0       0       0       0       0       0       0       0
  1129 ;;      Locals:         8       0       0       0       0       0       0       0       0
  1130 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1131 ;;      Totals:        12       0       0       0       0       0       0       0       0
  1132 ;;Total ram usage:       12 bytes
  1133 ;; Hardware stack levels used:    1
  1134 ;; Hardware stack levels required when called:    5
  1135 ;; This function calls:
  1136 ;;		_clearLCD
  1137 ;;		_cmpPass
  1138 ;;		_confirmarSenha
  1139 ;;		_lerToque
  1140 ;;		_set_line
  1141 ;;		_write_LCD
  1142 ;; This function is called by:
  1143 ;;		_main
  1144 ;; This function uses a non-reentrant model
  1145 ;;
  1146                           
  1147                           	psect	text5
  1148  000A56                     __ptext5:
  1149                           	opt stack 0
  1150  000A56                     _cadastrarSenha:
  1151                           	opt stack 25
  1152                           
  1153                           ;TOCTOC.c: 139: TRISBbits.RB4 = 1;
  1154                           
  1155                           ;incstack = 0
  1156  000A56  8893               	bsf	3987,4,c	;volatile
  1157                           
  1158                           ;TOCTOC.c: 141: int i = 0;
  1159  000A58  0E00               	movlw	0
  1160  000A5A  6E28               	movwf	cadastrarSenha@i+1,c
  1161  000A5C  0E00               	movlw	0
  1162  000A5E  6E27               	movwf	cadastrarSenha@i,c
  1163                           
  1164                           ;TOCTOC.c: 142: int j = 0;
  1165  000A60  0E00               	movlw	0
  1166  000A62  6E2A               	movwf	cadastrarSenha@j+1,c
  1167  000A64  0E00               	movlw	0
  1168  000A66  6E29               	movwf	cadastrarSenha@j,c
  1169                           
  1170                           ;TOCTOC.c: 144: char temp1[2];
  1171                           ;TOCTOC.c: 145: temp1[0] = 0x00;
  1172  000A68  0E00               	movlw	0
  1173  000A6A  6E2D               	movwf	cadastrarSenha@temp1,c
  1174                           
  1175                           ;TOCTOC.c: 146: temp1[1] = 0x00;
  1176  000A6C  0E00               	movlw	0
  1177  000A6E  6E2E               	movwf	cadastrarSenha@temp1+1,c
  1178                           
  1179                           ;TOCTOC.c: 148: char temp2[2];
  1180                           ;TOCTOC.c: 149: temp2[0] = 0x00;
  1181  000A70  0E00               	movlw	0
  1182  000A72  6E2B               	movwf	cadastrarSenha@temp2,c
  1183                           
  1184                           ;TOCTOC.c: 150: temp2[1] = 0x00;
  1185  000A74  0E00               	movlw	0
  1186  000A76  6E2C               	movwf	cadastrarSenha@temp2+1,c
  1187                           
  1188                           ;TOCTOC.c: 152: pass[0] = 0x00;
  1189  000A78  C023  FFD9         	movff	cadastrarSenha@pass,fsr2l
  1190  000A7C  C024  FFDA         	movff	cadastrarSenha@pass+1,fsr2h
  1191  000A80  0E00               	movlw	0
  1192  000A82  6EDF               	movwf	indf2,c
  1193                           
  1194                           ;TOCTOC.c: 153: pass[1] = 0x00;
  1195  000A84  EE20 F001          	lfsr	2,1
  1196  000A88  5023               	movf	cadastrarSenha@pass,w,c
  1197  000A8A  26D9               	addwf	fsr2l,f,c
  1198  000A8C  5024               	movf	cadastrarSenha@pass+1,w,c
  1199  000A8E  22DA               	addwfc	fsr2h,f,c
  1200  000A90  0E00               	movlw	0
  1201  000A92  6EDF               	movwf	indf2,c
  1202  000A94                     l1504:
  1203                           
  1204                           ;TOCTOC.c: 156: clearLCD();
  1205  000A94  EC26  F009         	call	_clearLCD	;wreg free
  1206                           
  1207                           ;TOCTOC.c: 157: set_line(0,1);
  1208  000A98  0E00               	movlw	0
  1209  000A9A  6E13               	movwf	set_line@line+1,c
  1210  000A9C  0E00               	movlw	0
  1211  000A9E  6E12               	movwf	set_line@line,c
  1212  000AA0  0E00               	movlw	0
  1213  000AA2  6E15               	movwf	set_line@pos+1,c
  1214  000AA4  0E01               	movlw	1
  1215  000AA6  6E14               	movwf	set_line@pos,c
  1216  000AA8  ECF0  F008         	call	_set_line	;wreg free
  1217                           
  1218                           ;TOCTOC.c: 158: write_LCD("Cadastre sua");
  1219  000AAC  0E2A               	movlw	low STR_13
  1220  000AAE  6E12               	movwf	write_LCD@c,c
  1221  000AB0  0E08               	movlw	high STR_13
  1222  000AB2  6E13               	movwf	write_LCD@c+1,c
  1223  000AB4  EC73  F008         	call	_write_LCD	;wreg free
  1224                           
  1225                           ;TOCTOC.c: 159: set_line(1,5);
  1226  000AB8  0E00               	movlw	0
  1227  000ABA  6E13               	movwf	set_line@line+1,c
  1228  000ABC  0E01               	movlw	1
  1229  000ABE  6E12               	movwf	set_line@line,c
  1230  000AC0  0E00               	movlw	0
  1231  000AC2  6E15               	movwf	set_line@pos+1,c
  1232  000AC4  0E05               	movlw	5
  1233  000AC6  6E14               	movwf	set_line@pos,c
  1234  000AC8  ECF0  F008         	call	_set_line	;wreg free
  1235                           
  1236                           ;TOCTOC.c: 160: write_LCD("senha");
  1237  000ACC  0E69               	movlw	low STR_12
  1238  000ACE  6E12               	movwf	write_LCD@c,c
  1239  000AD0  0E08               	movlw	high STR_12
  1240  000AD2  6E13               	movwf	write_LCD@c+1,c
  1241  000AD4  EC73  F008         	call	_write_LCD	;wreg free
  1242                           
  1243                           ;TOCTOC.c: 161: _delay((unsigned long)((2000)*(16000000/4000.0)));
  1244  000AD8  0E29               	movlw	41
  1245  000ADA  6E26               	movwf	(??_cadastrarSenha+1)& (0+255),c
  1246  000ADC  0E96               	movlw	150
  1247  000ADE  6E25               	movwf	??_cadastrarSenha& (0+255),c
  1248  000AE0  0E7F               	movlw	127
  1249  000AE2                     u787:
  1250  000AE2  2EE8               	decfsz	wreg,f,c
  1251  000AE4  D7FE               	bra	u787
  1252  000AE6  2E25               	decfsz	??_cadastrarSenha& (0+255),f,c
  1253  000AE8  D7FC               	bra	u787
  1254  000AEA  2E26               	decfsz	(??_cadastrarSenha+1)& (0+255),f,c
  1255  000AEC  D7FA               	bra	u787
  1256  000AEE  F000               	nop	
  1257                           
  1258                           ;TOCTOC.c: 163: lerToque(&temp1);
  1259  000AF0  0E2D               	movlw	low cadastrarSenha@temp1
  1260  000AF2  6E1F               	movwf	lerToque@toque,c
  1261  000AF4  0E00               	movlw	high cadastrarSenha@temp1
  1262  000AF6  6E20               	movwf	lerToque@toque+1,c
  1263  000AF8  EC02  F006         	call	_lerToque	;wreg free
  1264                           
  1265                           ;TOCTOC.c: 164: clearLCD();
  1266  000AFC  EC26  F009         	call	_clearLCD	;wreg free
  1267                           
  1268                           ;TOCTOC.c: 165: set_line(0,2);
  1269  000B00  0E00               	movlw	0
  1270  000B02  6E13               	movwf	set_line@line+1,c
  1271  000B04  0E00               	movlw	0
  1272  000B06  6E12               	movwf	set_line@line,c
  1273  000B08  0E00               	movlw	0
  1274  000B0A  6E15               	movwf	set_line@pos+1,c
  1275  000B0C  0E02               	movlw	2
  1276  000B0E  6E14               	movwf	set_line@pos,c
  1277  000B10  ECF0  F008         	call	_set_line	;wreg free
  1278                           
  1279                           ;TOCTOC.c: 166: write_LCD("Repita sua");
  1280  000B14  0E4E               	movlw	low STR_15
  1281  000B16  6E12               	movwf	write_LCD@c,c
  1282  000B18  0E08               	movlw	high STR_15
  1283  000B1A  6E13               	movwf	write_LCD@c+1,c
  1284  000B1C  EC73  F008         	call	_write_LCD	;wreg free
  1285                           
  1286                           ;TOCTOC.c: 167: set_line(1,5);
  1287  000B20  0E00               	movlw	0
  1288  000B22  6E13               	movwf	set_line@line+1,c
  1289  000B24  0E01               	movlw	1
  1290  000B26  6E12               	movwf	set_line@line,c
  1291  000B28  0E00               	movlw	0
  1292  000B2A  6E15               	movwf	set_line@pos+1,c
  1293  000B2C  0E05               	movlw	5
  1294  000B2E  6E14               	movwf	set_line@pos,c
  1295  000B30  ECF0  F008         	call	_set_line	;wreg free
  1296                           
  1297                           ;TOCTOC.c: 168: write_LCD("senha");
  1298  000B34  0E69               	movlw	low STR_12
  1299  000B36  6E12               	movwf	write_LCD@c,c
  1300  000B38  0E08               	movlw	high STR_12
  1301  000B3A  6E13               	movwf	write_LCD@c+1,c
  1302  000B3C  EC73  F008         	call	_write_LCD	;wreg free
  1303                           
  1304                           ;TOCTOC.c: 169: _delay((unsigned long)((2000)*(16000000/4000.0)));
  1305  000B40  0E29               	movlw	41
  1306  000B42  6E26               	movwf	(??_cadastrarSenha+1)& (0+255),c
  1307  000B44  0E96               	movlw	150
  1308  000B46  6E25               	movwf	??_cadastrarSenha& (0+255),c
  1309  000B48  0E7F               	movlw	127
  1310  000B4A                     u797:
  1311  000B4A  2EE8               	decfsz	wreg,f,c
  1312  000B4C  D7FE               	bra	u797
  1313  000B4E  2E25               	decfsz	??_cadastrarSenha& (0+255),f,c
  1314  000B50  D7FC               	bra	u797
  1315  000B52  2E26               	decfsz	(??_cadastrarSenha+1)& (0+255),f,c
  1316  000B54  D7FA               	bra	u797
  1317  000B56  F000               	nop	
  1318                           
  1319                           ;TOCTOC.c: 171: lerToque(&temp2);
  1320  000B58  0E2B               	movlw	low cadastrarSenha@temp2
  1321  000B5A  6E1F               	movwf	lerToque@toque,c
  1322  000B5C  0E00               	movlw	high cadastrarSenha@temp2
  1323  000B5E  6E20               	movwf	lerToque@toque+1,c
  1324  000B60  EC02  F006         	call	_lerToque	;wreg free
  1325                           
  1326                           ;TOCTOC.c: 172: if(cmpPass(temp1, temp2))
  1327  000B64  0E2D               	movlw	low cadastrarSenha@temp1
  1328  000B66  6E18               	movwf	cmpPass@pass,c
  1329  000B68  0E00               	movlw	high cadastrarSenha@temp1
  1330  000B6A  6E19               	movwf	cmpPass@pass+1,c
  1331  000B6C  0E2B               	movlw	low cadastrarSenha@temp2
  1332  000B6E  6E1A               	movwf	cmpPass@toque,c
  1333  000B70  0E00               	movlw	high cadastrarSenha@temp2
  1334  000B72  6E1B               	movwf	cmpPass@toque+1,c
  1335  000B74  EC87  F006         	call	_cmpPass	;wreg free
  1336  000B78  5018               	movf	?_cmpPass,w,c
  1337  000B7A  1019               	iorwf	?_cmpPass+1,w,c
  1338  000B7C  B4D8               	btfsc	status,2,c
  1339  000B7E  D78A               	goto	l1504
  1340                           
  1341                           ;TOCTOC.c: 173: if(confirmarSenha())
  1342  000B80  ECEB  F007         	call	_confirmarSenha	;wreg free
  1343  000B84  5018               	movf	?_confirmarSenha,w,c
  1344  000B86  1019               	iorwf	?_confirmarSenha+1,w,c
  1345  000B88  B4D8               	btfsc	status,2,c
  1346  000B8A  D784               	goto	l1504
  1347                           
  1348                           ;TOCTOC.c: 176: }
  1349                           ;TOCTOC.c: 178: pass[0] = temp1[0];
  1350                           
  1351                           ;TOCTOC.c: 174: break;
  1352  000B8C  C023  FFD9         	movff	cadastrarSenha@pass,fsr2l
  1353  000B90  C024  FFDA         	movff	cadastrarSenha@pass+1,fsr2h
  1354  000B94  C02D  FFDF         	movff	cadastrarSenha@temp1,indf2
  1355                           
  1356                           ;TOCTOC.c: 179: pass[1] = temp1[1];
  1357  000B98  EE20 F001          	lfsr	2,1
  1358  000B9C  5023               	movf	cadastrarSenha@pass,w,c
  1359  000B9E  26D9               	addwf	fsr2l,f,c
  1360  000BA0  5024               	movf	cadastrarSenha@pass+1,w,c
  1361  000BA2  22DA               	addwfc	fsr2h,f,c
  1362  000BA4  C02E  FFDF         	movff	cadastrarSenha@temp1+1,indf2
  1363                           
  1364                           ;TOCTOC.c: 181: clearLCD();
  1365  000BA8  EC26  F009         	call	_clearLCD	;wreg free
  1366                           
  1367                           ;TOCTOC.c: 182: set_line(0,6);
  1368  000BAC  0E00               	movlw	0
  1369  000BAE  6E13               	movwf	set_line@line+1,c
  1370  000BB0  0E00               	movlw	0
  1371  000BB2  6E12               	movwf	set_line@line,c
  1372  000BB4  0E00               	movlw	0
  1373  000BB6  6E15               	movwf	set_line@pos+1,c
  1374  000BB8  0E06               	movlw	6
  1375  000BBA  6E14               	movwf	set_line@pos,c
  1376  000BBC  ECF0  F008         	call	_set_line	;wreg free
  1377                           
  1378                           ;TOCTOC.c: 183: write_LCD("Senha");
  1379  000BC0  0E63               	movlw	low STR_17
  1380  000BC2  6E12               	movwf	write_LCD@c,c
  1381  000BC4  0E08               	movlw	high STR_17
  1382  000BC6  6E13               	movwf	write_LCD@c+1,c
  1383  000BC8  EC73  F008         	call	_write_LCD	;wreg free
  1384                           
  1385                           ;TOCTOC.c: 184: set_line(1,3);
  1386  000BCC  0E00               	movlw	0
  1387  000BCE  6E13               	movwf	set_line@line+1,c
  1388  000BD0  0E01               	movlw	1
  1389  000BD2  6E12               	movwf	set_line@line,c
  1390  000BD4  0E00               	movlw	0
  1391  000BD6  6E15               	movwf	set_line@pos+1,c
  1392  000BD8  0E03               	movlw	3
  1393  000BDA  6E14               	movwf	set_line@pos,c
  1394  000BDC  ECF0  F008         	call	_set_line	;wreg free
  1395                           
  1396                           ;TOCTOC.c: 185: write_LCD("Cadastrada");
  1397  000BE0  0E43               	movlw	low STR_18
  1398  000BE2  6E12               	movwf	write_LCD@c,c
  1399  000BE4  0E08               	movlw	high STR_18
  1400  000BE6  6E13               	movwf	write_LCD@c+1,c
  1401  000BE8  EC73  F008         	call	_write_LCD	;wreg free
  1402                           
  1403                           ;TOCTOC.c: 186: _delay((unsigned long)((3000)*(16000000/4000.0)));
  1404  000BEC  0E3D               	movlw	61
  1405  000BEE  6E26               	movwf	(??_cadastrarSenha+1)& (0+255),c
  1406  000BF0  0EE1               	movlw	225
  1407  000BF2  6E25               	movwf	??_cadastrarSenha& (0+255),c
  1408  000BF4  0E40               	movlw	64
  1409  000BF6                     u807:
  1410  000BF6  2EE8               	decfsz	wreg,f,c
  1411  000BF8  D7FE               	bra	u807
  1412  000BFA  2E25               	decfsz	??_cadastrarSenha& (0+255),f,c
  1413  000BFC  D7FC               	bra	u807
  1414  000BFE  2E26               	decfsz	(??_cadastrarSenha+1)& (0+255),f,c
  1415  000C00  D7FA               	bra	u807
  1416  000C02  0012               	return		;funcret
  1417  000C04                     __end_of_cadastrarSenha:
  1418                           	opt stack 0
  1419                           tblptru	equ	0xFF8
  1420                           tblptrh	equ	0xFF7
  1421                           intcon	equ	0xFF2
  1422                           intcon2	equ	0xFF1
  1423                           intcon3	equ	0xFF0
  1424                           wreg	equ	0xFE8
  1425                           indf2	equ	0xFDF
  1426                           fsr2h	equ	0xFDA
  1427                           fsr2l	equ	0xFD9
  1428                           status	equ	0xFD8
  1429                           
  1430 ;; *************** function _lerToque *****************
  1431 ;; Defined at:
  1432 ;;		line 22 in file "TOCTOC.c"
  1433 ;; Parameters:    Size  Location     Type
  1434 ;;  toque           2   30[COMRAM] PTR unsigned char 
  1435 ;;		 -> cadastrarSenha@temp2(2), cadastrarSenha@temp1(2), 
  1436 ;; Auto vars:     Size  Location     Type
  1437 ;;  i               2   32[COMRAM] int 
  1438 ;; Return value:  Size  Location     Type
  1439 ;;                  1    wreg      void 
  1440 ;; Registers used:
  1441 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1442 ;; Tracked objects:
  1443 ;;		On entry : 0/0
  1444 ;;		On exit  : 0/0
  1445 ;;		Unchanged: 0/0
  1446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1447 ;;      Params:         2       0       0       0       0       0       0       0       0
  1448 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1449 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1450 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1451 ;;Total ram usage:        4 bytes
  1452 ;; Hardware stack levels used:    1
  1453 ;; Hardware stack levels required when called:    4
  1454 ;; This function calls:
  1455 ;;		_clearLCD
  1456 ;;		_readSignal
  1457 ;;		_read_ADC
  1458 ;;		_send_msg
  1459 ;;		_set_line
  1460 ;;		_write_LCD
  1461 ;; This function is called by:
  1462 ;;		_cadastrarSenha
  1463 ;; This function uses a non-reentrant model
  1464 ;;
  1465                           
  1466                           	psect	text6
  1467  000C04                     __ptext6:
  1468                           	opt stack 0
  1469  000C04                     _lerToque:
  1470                           	opt stack 25
  1471                           
  1472                           ;TOCTOC.c: 24: int i = 0;
  1473                           
  1474                           ;incstack = 0
  1475  000C04  0E00               	movlw	0
  1476  000C06  6E22               	movwf	lerToque@i+1,c
  1477  000C08  0E00               	movlw	0
  1478  000C0A  6E21               	movwf	lerToque@i,c
  1479                           
  1480                           ;TOCTOC.c: 26: toque[0] = 0x00;
  1481  000C0C  C01F  FFD9         	movff	lerToque@toque,fsr2l
  1482  000C10  C020  FFDA         	movff	lerToque@toque+1,fsr2h
  1483  000C14  0E00               	movlw	0
  1484  000C16  6EDF               	movwf	indf2,c
  1485                           
  1486                           ;TOCTOC.c: 27: toque[1] = 0x00;
  1487  000C18  EE20 F001          	lfsr	2,1
  1488  000C1C  501F               	movf	lerToque@toque,w,c
  1489  000C1E  26D9               	addwf	fsr2l,f,c
  1490  000C20  5020               	movf	lerToque@toque+1,w,c
  1491  000C22  22DA               	addwfc	fsr2h,f,c
  1492  000C24  0E00               	movlw	0
  1493  000C26  6EDF               	movwf	indf2,c
  1494                           
  1495                           ;TOCTOC.c: 29: clearLCD();
  1496  000C28  EC26  F009         	call	_clearLCD	;wreg free
  1497                           
  1498                           ;TOCTOC.c: 30: set_line(0,0);
  1499  000C2C  0E00               	movlw	0
  1500  000C2E  6E13               	movwf	set_line@line+1,c
  1501  000C30  0E00               	movlw	0
  1502  000C32  6E12               	movwf	set_line@line,c
  1503  000C34  0E00               	movlw	0
  1504  000C36  6E15               	movwf	set_line@pos+1,c
  1505  000C38  0E00               	movlw	0
  1506  000C3A  6E14               	movwf	set_line@pos,c
  1507  000C3C  ECF0  F008         	call	_set_line	;wreg free
  1508                           
  1509                           ;TOCTOC.c: 31: write_LCD("Bata na porta");
  1510  000C40  0E01               	movlw	low STR_1
  1511  000C42  6E12               	movwf	write_LCD@c,c
  1512  000C44  0E08               	movlw	high STR_1
  1513  000C46  6E13               	movwf	write_LCD@c+1,c
  1514  000C48  EC73  F008         	call	_write_LCD	;wreg free
  1515  000C4C                     l1420:
  1516  000C4C  ECFE  F008         	call	_read_ADC	;wreg free
  1517  000C50  BE10               	btfsc	?_read_ADC+1,7,c
  1518  000C52  D7FC               	goto	l1420
  1519  000C54  5010               	movf	?_read_ADC+1,w,c
  1520  000C56  E151               	bnz	l1440
  1521  000C58  0E0F               	movlw	15
  1522  000C5A  5C0F               	subwf	?_read_ADC,w,c
  1523  000C5C  B0D8               	btfsc	status,0,c
  1524  000C5E  D04D               	goto	l1440
  1525  000C60  D7F5               	goto	l1420
  1526  000C62                     l1422:
  1527                           
  1528                           ;TOCTOC.c: 35: set_line(1,0);
  1529  000C62  0E00               	movlw	0
  1530  000C64  6E13               	movwf	set_line@line+1,c
  1531  000C66  0E01               	movlw	1
  1532  000C68  6E12               	movwf	set_line@line,c
  1533  000C6A  0E00               	movlw	0
  1534  000C6C  6E15               	movwf	set_line@pos+1,c
  1535  000C6E  0E00               	movlw	0
  1536  000C70  6E14               	movwf	set_line@pos,c
  1537  000C72  ECF0  F008         	call	_set_line	;wreg free
  1538                           
  1539                           ;TOCTOC.c: 36: send_msg('1'+ i);
  1540  000C76  5021               	movf	lerToque@i,w,c
  1541  000C78  0F31               	addlw	49
  1542  000C7A  ECB4  F008         	call	_send_msg
  1543                           
  1544                           ;TOCTOC.c: 37: if(i == 0)
  1545  000C7E  5021               	movf	lerToque@i,w,c
  1546  000C80  1022               	iorwf	lerToque@i+1,w,c
  1547  000C82  A4D8               	btfss	status,2,c
  1548  000C84  D00B               	goto	l1428
  1549                           
  1550                           ;TOCTOC.c: 38: readSignal(&toque[0], 0);
  1551  000C86  C01F  F013         	movff	lerToque@toque,readSignal@signal
  1552  000C8A  C020  F014         	movff	lerToque@toque+1,readSignal@signal+1
  1553  000C8E  0E00               	movlw	0
  1554  000C90  6E16               	movwf	readSignal@pos+1,c
  1555  000C92  0E00               	movlw	0
  1556  000C94  6E15               	movwf	readSignal@pos,c
  1557  000C96  EC58  F007         	call	_readSignal	;wreg free
  1558  000C9A  D02D               	goto	l1438
  1559  000C9C                     l1428:
  1560                           
  1561                           ;TOCTOC.c: 39: else if(i == 1)
  1562  000C9C  0421               	decf	lerToque@i,w,c
  1563  000C9E  1022               	iorwf	lerToque@i+1,w,c
  1564  000CA0  A4D8               	btfss	status,2,c
  1565  000CA2  D00B               	goto	l1432
  1566                           
  1567                           ;TOCTOC.c: 40: readSignal(&toque[0], 1);
  1568  000CA4  C01F  F013         	movff	lerToque@toque,readSignal@signal
  1569  000CA8  C020  F014         	movff	lerToque@toque+1,readSignal@signal+1
  1570  000CAC  0E00               	movlw	0
  1571  000CAE  6E16               	movwf	readSignal@pos+1,c
  1572  000CB0  0E01               	movlw	1
  1573  000CB2  6E15               	movwf	readSignal@pos,c
  1574  000CB4  EC58  F007         	call	_readSignal	;wreg free
  1575  000CB8  D01E               	goto	l1438
  1576  000CBA                     l1432:
  1577                           
  1578                           ;TOCTOC.c: 41: else if(i == 2)
  1579  000CBA  0E02               	movlw	2
  1580  000CBC  1821               	xorwf	lerToque@i,w,c
  1581  000CBE  1022               	iorwf	lerToque@i+1,w,c
  1582  000CC0  A4D8               	btfss	status,2,c
  1583  000CC2  D00D               	goto	l1436
  1584                           
  1585                           ;TOCTOC.c: 42: readSignal(&toque[1], 0);
  1586  000CC4  0E01               	movlw	1
  1587  000CC6  241F               	addwf	lerToque@toque,w,c
  1588  000CC8  6E13               	movwf	readSignal@signal,c
  1589  000CCA  0E00               	movlw	0
  1590  000CCC  2020               	addwfc	lerToque@toque+1,w,c
  1591  000CCE  6E14               	movwf	readSignal@signal+1,c
  1592  000CD0  0E00               	movlw	0
  1593  000CD2  6E16               	movwf	readSignal@pos+1,c
  1594  000CD4  0E00               	movlw	0
  1595  000CD6  6E15               	movwf	readSignal@pos,c
  1596  000CD8  EC58  F007         	call	_readSignal	;wreg free
  1597  000CDC  D00C               	goto	l1438
  1598  000CDE                     l1436:
  1599                           
  1600                           ;TOCTOC.c: 43: else
  1601                           ;TOCTOC.c: 44: readSignal(&toque[1], 1);
  1602  000CDE  0E01               	movlw	1
  1603  000CE0  241F               	addwf	lerToque@toque,w,c
  1604  000CE2  6E13               	movwf	readSignal@signal,c
  1605  000CE4  0E00               	movlw	0
  1606  000CE6  2020               	addwfc	lerToque@toque+1,w,c
  1607  000CE8  6E14               	movwf	readSignal@signal+1,c
  1608  000CEA  0E00               	movlw	0
  1609  000CEC  6E16               	movwf	readSignal@pos+1,c
  1610  000CEE  0E01               	movlw	1
  1611  000CF0  6E15               	movwf	readSignal@pos,c
  1612  000CF2  EC58  F007         	call	_readSignal	;wreg free
  1613  000CF6                     l1438:
  1614                           
  1615                           ;TOCTOC.c: 45: i++;
  1616  000CF6  4A21               	infsnz	lerToque@i,f,c
  1617  000CF8  2A22               	incf	lerToque@i+1,f,c
  1618  000CFA                     l1440:
  1619  000CFA  BE22               	btfsc	lerToque@i+1,7,c
  1620  000CFC  D7B2               	goto	l1422
  1621  000CFE  5022               	movf	lerToque@i+1,w,c
  1622  000D00  E105               	bnz	l242
  1623  000D02  0E04               	movlw	4
  1624  000D04  5C21               	subwf	lerToque@i,w,c
  1625  000D06  B0D8               	btfsc	status,0,c
  1626  000D08  0012               	return	
  1627  000D0A  D7AB               	goto	l1422
  1628  000D0C                     l242:
  1629  000D0C  0012               	return		;funcret
  1630  000D0E                     __end_of_lerToque:
  1631                           	opt stack 0
  1632                           tblptru	equ	0xFF8
  1633                           tblptrh	equ	0xFF7
  1634                           intcon	equ	0xFF2
  1635                           intcon2	equ	0xFF1
  1636                           intcon3	equ	0xFF0
  1637                           wreg	equ	0xFE8
  1638                           indf2	equ	0xFDF
  1639                           fsr2h	equ	0xFDA
  1640                           fsr2l	equ	0xFD9
  1641                           status	equ	0xFD8
  1642                           
  1643 ;; *************** function _readSignal *****************
  1644 ;; Defined at:
  1645 ;;		line 13 in file "ReadSignal.c"
  1646 ;; Parameters:    Size  Location     Type
  1647 ;;  signal          2   18[COMRAM] PTR unsigned char 
  1648 ;;		 -> cadastrarSenha@temp2(2), cadastrarSenha@temp1(2), main@toc(2), 
  1649 ;;  pos             2   20[COMRAM] int 
  1650 ;; Auto vars:     Size  Location     Type
  1651 ;;  j               2   28[COMRAM] int 
  1652 ;;  i               2   26[COMRAM] int 
  1653 ;;  limite          2   24[COMRAM] int 
  1654 ;; Return value:  Size  Location     Type
  1655 ;;                  1    wreg      void 
  1656 ;; Registers used:
  1657 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1658 ;; Tracked objects:
  1659 ;;		On entry : 0/0
  1660 ;;		On exit  : 0/0
  1661 ;;		Unchanged: 0/0
  1662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1663 ;;      Params:         4       0       0       0       0       0       0       0       0
  1664 ;;      Locals:         6       0       0       0       0       0       0       0       0
  1665 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1666 ;;      Totals:        12       0       0       0       0       0       0       0       0
  1667 ;;Total ram usage:       12 bytes
  1668 ;; Hardware stack levels used:    1
  1669 ;; Hardware stack levels required when called:    2
  1670 ;; This function calls:
  1671 ;;		_read_ADC
  1672 ;; This function is called by:
  1673 ;;		_lerToque
  1674 ;;		_destravarPorta
  1675 ;; This function uses a non-reentrant model
  1676 ;;
  1677                           
  1678                           	psect	text7
  1679  000EB0                     __ptext7:
  1680                           	opt stack 0
  1681  000EB0                     _readSignal:
  1682                           	opt stack 27
  1683                           
  1684                           ;ReadSignal.c: 15: int j = 0;
  1685                           
  1686                           ;incstack = 0
  1687  000EB0  0E00               	movlw	0
  1688  000EB2  6E1E               	movwf	readSignal@j+1,c
  1689  000EB4  0E00               	movlw	0
  1690  000EB6  6E1D               	movwf	readSignal@j,c
  1691                           
  1692                           ;ReadSignal.c: 16: if(pos == 1)
  1693  000EB8  0415               	decf	readSignal@pos,w,c
  1694  000EBA  1016               	iorwf	readSignal@pos+1,w,c
  1695  000EBC  A4D8               	btfss	status,2,c
  1696  000EBE  D004               	goto	l1356
  1697                           
  1698                           ;ReadSignal.c: 17: j = 4;
  1699  000EC0  0E00               	movlw	0
  1700  000EC2  6E1E               	movwf	readSignal@j+1,c
  1701  000EC4  0E04               	movlw	4
  1702  000EC6  6E1D               	movwf	readSignal@j,c
  1703  000EC8                     l1356:
  1704                           
  1705                           ;ReadSignal.c: 18: int limite;
  1706                           ;ReadSignal.c: 19: limite = j + 4;
  1707  000EC8  0E04               	movlw	4
  1708  000ECA  241D               	addwf	readSignal@j,w,c
  1709  000ECC  6E19               	movwf	readSignal@limite,c
  1710  000ECE  0E00               	movlw	0
  1711  000ED0  201E               	addwfc	readSignal@j+1,w,c
  1712  000ED2  6E1A               	movwf	readSignal@limite+1,c
  1713                           
  1714                           ;ReadSignal.c: 20: int i;
  1715                           ;ReadSignal.c: 22: while(j < limite){
  1716  000ED4  D033               	goto	l172
  1717  000ED6                     l1358:
  1718                           
  1719                           ;ReadSignal.c: 24: i = 0;
  1720  000ED6  0E00               	movlw	0
  1721  000ED8  6E1C               	movwf	readSignal@i+1,c
  1722  000EDA  0E00               	movlw	0
  1723  000EDC  6E1B               	movwf	readSignal@i,c
  1724                           
  1725                           ;ReadSignal.c: 25: while(i < 500){
  1726  000EDE  D022               	goto	l1368
  1727  000EE0                     l1360:
  1728                           
  1729                           ;ReadSignal.c: 26: if((int)read_ADC() > 15){
  1730  000EE0  ECFE  F008         	call	_read_ADC	;wreg free
  1731  000EE4  5010               	movf	?_read_ADC+1,w,c
  1732  000EE6  E104               	bnz	u460
  1733  000EE8  0E10               	movlw	16
  1734  000EEA  5C0F               	subwf	?_read_ADC,w,c
  1735  000EEC  A0D8               	btfss	status,0,c
  1736  000EEE  D010               	goto	l1364
  1737  000EF0                     u460:
  1738                           
  1739                           ;ReadSignal.c: 27: *signal |= (0x03<<j);
  1740  000EF0  C01D  F017         	movff	readSignal@j,??_readSignal
  1741  000EF4  0E03               	movlw	3
  1742  000EF6  6E18               	movwf	(??_readSignal+1)& (0+255),c
  1743  000EF8  2A17               	incf	??_readSignal,f,c
  1744  000EFA  D002               	goto	u474
  1745  000EFC                     u475:
  1746  000EFC  90D8               	bcf	status,0,c
  1747  000EFE  3618               	rlcf	??_readSignal+1,f,c
  1748  000F00                     u474:
  1749  000F00  2E17               	decfsz	??_readSignal,f,c
  1750  000F02  D7FC               	goto	u475
  1751  000F04  C013  FFD9         	movff	readSignal@signal,fsr2l
  1752  000F08  C014  FFDA         	movff	readSignal@signal+1,fsr2h
  1753  000F0C  5018               	movf	??_readSignal+1,w,c
  1754  000F0E  12DF               	iorwf	indf2,f,c
  1755  000F10                     l1364:
  1756                           
  1757                           ;ReadSignal.c: 28: }
  1758                           ;ReadSignal.c: 29: _delay((unsigned long)((1)*(16000000/4000.0)));
  1759  000F10  0E06               	movlw	6
  1760  000F12  6E17               	movwf	??_readSignal& (0+255),c
  1761  000F14  0E30               	movlw	48
  1762  000F16                     u817:
  1763  000F16  2EE8               	decfsz	wreg,f,c
  1764  000F18  D7FE               	bra	u817
  1765  000F1A  2E17               	decfsz	??_readSignal& (0+255),f,c
  1766  000F1C  D7FC               	bra	u817
  1767  000F1E  D000               	nop2	
  1768                           
  1769                           ;ReadSignal.c: 30: i++;
  1770  000F20  4A1B               	infsnz	readSignal@i,f,c
  1771  000F22  2A1C               	incf	readSignal@i+1,f,c
  1772  000F24                     l1368:
  1773  000F24  BE1C               	btfsc	readSignal@i+1,7,c
  1774  000F26  D7DC               	goto	l1360
  1775  000F28  0EF4               	movlw	244
  1776  000F2A  5C1B               	subwf	readSignal@i,w,c
  1777  000F2C  0E01               	movlw	1
  1778  000F2E  581C               	subwfb	readSignal@i+1,w,c
  1779  000F30  A0D8               	btfss	status,0,c
  1780  000F32  D7D6               	goto	l1360
  1781                           
  1782                           ;ReadSignal.c: 31: }
  1783                           ;ReadSignal.c: 32: j+=2;
  1784  000F34  0E02               	movlw	2
  1785  000F36  261D               	addwf	readSignal@j,f,c
  1786  000F38  0E00               	movlw	0
  1787  000F3A  221E               	addwfc	readSignal@j+1,f,c
  1788  000F3C                     l172:
  1789  000F3C  5019               	movf	readSignal@limite,w,c
  1790  000F3E  5C1D               	subwf	readSignal@j,w,c
  1791  000F40  501E               	movf	readSignal@j+1,w,c
  1792  000F42  0A80               	xorlw	128
  1793  000F44  6E17               	movwf	??_readSignal& (0+255),c
  1794  000F46  501A               	movf	readSignal@limite+1,w,c
  1795  000F48  0A80               	xorlw	128
  1796  000F4A  5817               	subwfb	??_readSignal& (0+255),w,c
  1797  000F4C  B0D8               	btfsc	status,0,c
  1798  000F4E  0012               	return	
  1799  000F50  D7C2               	goto	l1358
  1800  000F52                     __end_of_readSignal:
  1801                           	opt stack 0
  1802                           tblptru	equ	0xFF8
  1803                           tblptrh	equ	0xFF7
  1804                           intcon	equ	0xFF2
  1805                           intcon2	equ	0xFF1
  1806                           intcon3	equ	0xFF0
  1807                           wreg	equ	0xFE8
  1808                           indf2	equ	0xFDF
  1809                           fsr2h	equ	0xFDA
  1810                           fsr2l	equ	0xFD9
  1811                           status	equ	0xFD8
  1812                           
  1813 ;; *************** function _read_ADC *****************
  1814 ;; Defined at:
  1815 ;;		line 19 in file "ADC.c"
  1816 ;; Parameters:    Size  Location     Type
  1817 ;;		None
  1818 ;; Auto vars:     Size  Location     Type
  1819 ;;  value           2   16[COMRAM] unsigned int 
  1820 ;; Return value:  Size  Location     Type
  1821 ;;                  2   14[COMRAM] unsigned int 
  1822 ;; Registers used:
  1823 ;;		None
  1824 ;; Tracked objects:
  1825 ;;		On entry : 0/0
  1826 ;;		On exit  : 0/0
  1827 ;;		Unchanged: 0/0
  1828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1829 ;;      Params:         2       0       0       0       0       0       0       0       0
  1830 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1831 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1832 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1833 ;;Total ram usage:        4 bytes
  1834 ;; Hardware stack levels used:    1
  1835 ;; Hardware stack levels required when called:    1
  1836 ;; This function calls:
  1837 ;;		Nothing
  1838 ;; This function is called by:
  1839 ;;		_readSignal
  1840 ;;		_lerToque
  1841 ;;		_destravarPorta
  1842 ;; This function uses a non-reentrant model
  1843 ;;
  1844                           
  1845                           	psect	text8
  1846  0011FC                     __ptext8:
  1847                           	opt stack 0
  1848  0011FC                     _read_ADC:
  1849                           	opt stack 28
  1850                           
  1851                           ;ADC.c: 20: unsigned int value;
  1852                           ;ADC.c: 21: ADCON0bits.GO = 1;
  1853                           
  1854                           ;incstack = 0
  1855  0011FC  82C2               	bsf	4034,1,c	;volatile
  1856  0011FE                     l161:
  1857  0011FE  B2C2               	btfsc	4034,1,c	;volatile
  1858  001200  D7FE               	goto	l161
  1859                           
  1860                           ;ADC.c: 24: value = ADRES;
  1861  001202  CFC3 F011          	movff	4035,read_ADC@value	;volatile
  1862  001206  CFC4 F012          	movff	4036,read_ADC@value+1	;volatile
  1863                           
  1864                           ;ADC.c: 26: return value;
  1865  00120A  C011  F00F         	movff	read_ADC@value,?_read_ADC
  1866  00120E  C012  F010         	movff	read_ADC@value+1,?_read_ADC+1
  1867  001212  0012               	return		;funcret
  1868  001214                     __end_of_read_ADC:
  1869                           	opt stack 0
  1870                           tblptru	equ	0xFF8
  1871                           tblptrh	equ	0xFF7
  1872                           intcon	equ	0xFF2
  1873                           intcon2	equ	0xFF1
  1874                           intcon3	equ	0xFF0
  1875                           wreg	equ	0xFE8
  1876                           indf2	equ	0xFDF
  1877                           fsr2h	equ	0xFDA
  1878                           fsr2l	equ	0xFD9
  1879                           status	equ	0xFD8
  1880                           
  1881 ;; *************** function _confirmarSenha *****************
  1882 ;; Defined at:
  1883 ;;		line 121 in file "TOCTOC.c"
  1884 ;; Parameters:    Size  Location     Type
  1885 ;;		None
  1886 ;; Auto vars:     Size  Location     Type
  1887 ;;		None
  1888 ;; Return value:  Size  Location     Type
  1889 ;;                  2   23[COMRAM] int 
  1890 ;; Registers used:
  1891 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1892 ;; Tracked objects:
  1893 ;;		On entry : 0/0
  1894 ;;		On exit  : 0/0
  1895 ;;		Unchanged: 0/0
  1896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1897 ;;      Params:         2       0       0       0       0       0       0       0       0
  1898 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1899 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1900 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1901 ;;Total ram usage:        2 bytes
  1902 ;; Hardware stack levels used:    1
  1903 ;; Hardware stack levels required when called:    4
  1904 ;; This function calls:
  1905 ;;		_clearLCD
  1906 ;;		_set_line
  1907 ;;		_write_LCD
  1908 ;; This function is called by:
  1909 ;;		_cadastrarSenha
  1910 ;; This function uses a non-reentrant model
  1911 ;;
  1912                           
  1913                           	psect	text9
  1914  000FD6                     __ptext9:
  1915                           	opt stack 0
  1916  000FD6                     _confirmarSenha:
  1917                           	opt stack 25
  1918                           
  1919                           ;TOCTOC.c: 122: clearLCD();
  1920                           
  1921                           ;incstack = 0
  1922  000FD6  EC26  F009         	call	_clearLCD	;wreg free
  1923                           
  1924                           ;TOCTOC.c: 123: set_line(0,1);
  1925  000FDA  0E00               	movlw	0
  1926  000FDC  6E13               	movwf	set_line@line+1,c
  1927  000FDE  0E00               	movlw	0
  1928  000FE0  6E12               	movwf	set_line@line,c
  1929  000FE2  0E00               	movlw	0
  1930  000FE4  6E15               	movwf	set_line@pos+1,c
  1931  000FE6  0E01               	movlw	1
  1932  000FE8  6E14               	movwf	set_line@pos,c
  1933  000FEA  ECF0  F008         	call	_set_line	;wreg free
  1934                           
  1935                           ;TOCTOC.c: 124: write_LCD("Confirme sua");
  1936  000FEE  0E1D               	movlw	low STR_11
  1937  000FF0  6E12               	movwf	write_LCD@c,c
  1938  000FF2  0E08               	movlw	high STR_11
  1939  000FF4  6E13               	movwf	write_LCD@c+1,c
  1940  000FF6  EC73  F008         	call	_write_LCD	;wreg free
  1941                           
  1942                           ;TOCTOC.c: 125: set_line(1,5);
  1943  000FFA  0E00               	movlw	0
  1944  000FFC  6E13               	movwf	set_line@line+1,c
  1945  000FFE  0E01               	movlw	1
  1946  001000  6E12               	movwf	set_line@line,c
  1947  001002  0E00               	movlw	0
  1948  001004  6E15               	movwf	set_line@pos+1,c
  1949  001006  0E05               	movlw	5
  1950  001008  6E14               	movwf	set_line@pos,c
  1951  00100A  ECF0  F008         	call	_set_line	;wreg free
  1952                           
  1953                           ;TOCTOC.c: 126: write_LCD("senha");
  1954  00100E  0E69               	movlw	low STR_12
  1955  001010  6E12               	movwf	write_LCD@c,c
  1956  001012  0E08               	movlw	high STR_12
  1957  001014  6E13               	movwf	write_LCD@c+1,c
  1958  001016  EC73  F008         	call	_write_LCD	;wreg free
  1959  00101A                     l1484:
  1960                           
  1961                           ;TOCTOC.c: 128: if(button == 1){
  1962  00101A  0433               	decf	_button,w,c
  1963  00101C  1034               	iorwf	_button+1,w,c
  1964  00101E  A4D8               	btfss	status,2,c
  1965  001020  D009               	goto	l269
  1966                           
  1967                           ;TOCTOC.c: 129: button = 0;
  1968  001022  0E00               	movlw	0
  1969  001024  6E34               	movwf	_button+1,c
  1970  001026  0E00               	movlw	0
  1971  001028  6E33               	movwf	_button,c
  1972                           
  1973                           ;TOCTOC.c: 130: return 1;
  1974  00102A  0E00               	movlw	0
  1975  00102C  6E19               	movwf	?_confirmarSenha+1,c
  1976  00102E  0E01               	movlw	1
  1977  001030  6E18               	movwf	?_confirmarSenha,c
  1978  001032  0012               	return	
  1979  001034                     l269:
  1980                           
  1981                           ;TOCTOC.c: 132: else if(PORTBbits.RB4)
  1982  001034  A881               	btfss	3969,4,c	;volatile
  1983  001036  D7F1               	goto	l1484
  1984                           
  1985                           ;TOCTOC.c: 133: return 0;
  1986  001038  0E00               	movlw	0
  1987  00103A  6E19               	movwf	?_confirmarSenha+1,c
  1988  00103C  0E00               	movlw	0
  1989  00103E  D7F8               	goto	L1
  1990  001040                     __end_of_confirmarSenha:
  1991                           	opt stack 0
  1992                           tblptru	equ	0xFF8
  1993                           tblptrh	equ	0xFF7
  1994                           intcon	equ	0xFF2
  1995                           intcon2	equ	0xFF1
  1996                           intcon3	equ	0xFF0
  1997                           wreg	equ	0xFE8
  1998                           indf2	equ	0xFDF
  1999                           fsr2h	equ	0xFDA
  2000                           fsr2l	equ	0xFD9
  2001                           status	equ	0xFD8
  2002                           
  2003 ;; *************** function _cmpPass *****************
  2004 ;; Defined at:
  2005 ;;		line 97 in file "TOCTOC.c"
  2006 ;; Parameters:    Size  Location     Type
  2007 ;;  pass            2   23[COMRAM] PTR unsigned char 
  2008 ;;		 -> cadastrarSenha@temp1(2), main@pass(2), 
  2009 ;;  toque           2   25[COMRAM] PTR unsigned char 
  2010 ;;		 -> cadastrarSenha@temp2(2), main@toc(2), 
  2011 ;; Auto vars:     Size  Location     Type
  2012 ;;  i               2   27[COMRAM] int 
  2013 ;; Return value:  Size  Location     Type
  2014 ;;                  2   23[COMRAM] int 
  2015 ;; Registers used:
  2016 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2017 ;; Tracked objects:
  2018 ;;		On entry : 0/0
  2019 ;;		On exit  : 0/0
  2020 ;;		Unchanged: 0/0
  2021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2022 ;;      Params:         4       0       0       0       0       0       0       0       0
  2023 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2024 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2025 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2026 ;;Total ram usage:        6 bytes
  2027 ;; Hardware stack levels used:    1
  2028 ;; Hardware stack levels required when called:    4
  2029 ;; This function calls:
  2030 ;;		_bip
  2031 ;;		_clearLCD
  2032 ;;		_cmpSignal
  2033 ;;		_set_line
  2034 ;;		_write_LCD
  2035 ;; This function is called by:
  2036 ;;		_destravarPorta
  2037 ;;		_cadastrarSenha
  2038 ;; This function uses a non-reentrant model
  2039 ;;
  2040                           
  2041                           	psect	text10
  2042  000D0E                     __ptext10:
  2043                           	opt stack 0
  2044  000D0E                     _cmpPass:
  2045                           	opt stack 25
  2046                           
  2047                           ;TOCTOC.c: 99: int i = cmpSignal(pass, toque);
  2048                           
  2049                           ;incstack = 0
  2050  000D0E  C018  F00F         	movff	cmpPass@pass,cmpSignal@pass
  2051  000D12  C019  F010         	movff	cmpPass@pass+1,cmpSignal@pass+1
  2052  000D16  C01A  F011         	movff	cmpPass@toque,cmpSignal@toc
  2053  000D1A  C01B  F012         	movff	cmpPass@toque+1,cmpSignal@toc+1
  2054  000D1E  EC4D  F008         	call	_cmpSignal	;wreg free
  2055  000D22  C00F  F01C         	movff	?_cmpSignal,cmpPass@i
  2056  000D26  C010  F01D         	movff	?_cmpSignal+1,cmpPass@i+1
  2057                           
  2058                           ;TOCTOC.c: 101: if(i == 1){
  2059  000D2A  041C               	decf	cmpPass@i,w,c
  2060  000D2C  101D               	iorwf	cmpPass@i+1,w,c
  2061  000D2E  A4D8               	btfss	status,2,c
  2062  000D30  D02D               	goto	l1458
  2063                           
  2064                           ;TOCTOC.c: 102: clearLCD();
  2065  000D32  EC26  F009         	call	_clearLCD	;wreg free
  2066                           
  2067                           ;TOCTOC.c: 103: set_line(0,3);
  2068  000D36  0E00               	movlw	0
  2069  000D38  6E13               	movwf	set_line@line+1,c
  2070  000D3A  0E00               	movlw	0
  2071  000D3C  6E12               	movwf	set_line@line,c
  2072  000D3E  0E00               	movlw	0
  2073  000D40  6E15               	movwf	set_line@pos+1,c
  2074  000D42  0E03               	movlw	3
  2075  000D44  6E14               	movwf	set_line@pos,c
  2076  000D46  ECF0  F008         	call	_set_line	;wreg free
  2077                           
  2078                           ;TOCTOC.c: 104: write_LCD("As senhas");
  2079  000D4A  0E59               	movlw	low STR_5
  2080  000D4C  6E12               	movwf	write_LCD@c,c
  2081  000D4E  0E08               	movlw	high STR_5
  2082  000D50  6E13               	movwf	write_LCD@c+1,c
  2083  000D52  EC73  F008         	call	_write_LCD	;wreg free
  2084                           
  2085                           ;TOCTOC.c: 105: set_line(1,3);
  2086  000D56  0E00               	movlw	0
  2087  000D58  6E13               	movwf	set_line@line+1,c
  2088  000D5A  0E01               	movlw	1
  2089  000D5C  6E12               	movwf	set_line@line,c
  2090  000D5E  0E00               	movlw	0
  2091  000D60  6E15               	movwf	set_line@pos+1,c
  2092  000D62  0E03               	movlw	3
  2093  000D64  6E14               	movwf	set_line@pos,c
  2094  000D66  ECF0  F008         	call	_set_line	;wreg free
  2095                           
  2096                           ;TOCTOC.c: 106: write_LCD("coincidem");
  2097  000D6A  0E13               	movlw	low (STR_6+4)
  2098  000D6C  6E12               	movwf	write_LCD@c,c
  2099  000D6E  0E08               	movlw	high (STR_6+4)
  2100  000D70  6E13               	movwf	write_LCD@c+1,c
  2101  000D72  EC73  F008         	call	_write_LCD	;wreg free
  2102                           
  2103                           ;TOCTOC.c: 107: bip(2, 1000);
  2104  000D76  0E00               	movlw	0
  2105  000D78  6E10               	movwf	bip@rounds+1,c
  2106  000D7A  0E02               	movlw	2
  2107  000D7C  6E0F               	movwf	bip@rounds,c
  2108  000D7E  0E03               	movlw	3
  2109  000D80  6E12               	movwf	bip@time+1,c
  2110  000D82  0EE8               	movlw	232
  2111  000D84  6E11               	movwf	bip@time,c
  2112  000D86  ECF7  F006         	call	_bip	;wreg free
  2113                           
  2114                           ;TOCTOC.c: 108: }
  2115  000D8A  D02C               	goto	l1470
  2116  000D8C                     l1458:
  2117                           
  2118                           ;TOCTOC.c: 109: else{
  2119                           ;TOCTOC.c: 110: clearLCD();
  2120  000D8C  EC26  F009         	call	_clearLCD	;wreg free
  2121                           
  2122                           ;TOCTOC.c: 111: set_line(0,3);
  2123  000D90  0E00               	movlw	0
  2124  000D92  6E13               	movwf	set_line@line+1,c
  2125  000D94  0E00               	movlw	0
  2126  000D96  6E12               	movwf	set_line@line,c
  2127  000D98  0E00               	movlw	0
  2128  000D9A  6E15               	movwf	set_line@pos+1,c
  2129  000D9C  0E03               	movlw	3
  2130  000D9E  6E14               	movwf	set_line@pos,c
  2131  000DA0  ECF0  F008         	call	_set_line	;wreg free
  2132                           
  2133                           ;TOCTOC.c: 112: write_LCD("As senhas");
  2134  000DA4  0E59               	movlw	low STR_5
  2135  000DA6  6E12               	movwf	write_LCD@c,c
  2136  000DA8  0E08               	movlw	high STR_5
  2137  000DAA  6E13               	movwf	write_LCD@c+1,c
  2138  000DAC  EC73  F008         	call	_write_LCD	;wreg free
  2139                           
  2140                           ;TOCTOC.c: 113: set_line(1,1);
  2141  000DB0  0E00               	movlw	0
  2142  000DB2  6E13               	movwf	set_line@line+1,c
  2143  000DB4  0E01               	movlw	1
  2144  000DB6  6E12               	movwf	set_line@line,c
  2145  000DB8  0E00               	movlw	0
  2146  000DBA  6E15               	movwf	set_line@pos+1,c
  2147  000DBC  0E01               	movlw	1
  2148  000DBE  6E14               	movwf	set_line@pos,c
  2149  000DC0  ECF0  F008         	call	_set_line	;wreg free
  2150                           
  2151                           ;TOCTOC.c: 114: write_LCD("nao coincidem");
  2152  000DC4  0E0F               	movlw	low STR_6
  2153  000DC6  6E12               	movwf	write_LCD@c,c
  2154  000DC8  0E08               	movlw	high STR_6
  2155  000DCA  6E13               	movwf	write_LCD@c+1,c
  2156  000DCC  EC73  F008         	call	_write_LCD	;wreg free
  2157                           
  2158                           ;TOCTOC.c: 115: bip(4, 500);
  2159  000DD0  0E00               	movlw	0
  2160  000DD2  6E10               	movwf	bip@rounds+1,c
  2161  000DD4  0E04               	movlw	4
  2162  000DD6  6E0F               	movwf	bip@rounds,c
  2163  000DD8  0E01               	movlw	1
  2164  000DDA  6E12               	movwf	bip@time+1,c
  2165  000DDC  0EF4               	movlw	244
  2166  000DDE  6E11               	movwf	bip@time,c
  2167  000DE0  ECF7  F006         	call	_bip	;wreg free
  2168  000DE4                     l1470:
  2169                           
  2170                           ;TOCTOC.c: 116: }
  2171                           ;TOCTOC.c: 117: return i;
  2172  000DE4  C01C  F018         	movff	cmpPass@i,?_cmpPass
  2173  000DE8  C01D  F019         	movff	cmpPass@i+1,?_cmpPass+1
  2174  000DEC  0012               	return	
  2175  000DEE                     __end_of_cmpPass:
  2176                           	opt stack 0
  2177                           tblptru	equ	0xFF8
  2178                           tblptrh	equ	0xFF7
  2179                           intcon	equ	0xFF2
  2180                           intcon2	equ	0xFF1
  2181                           intcon3	equ	0xFF0
  2182                           wreg	equ	0xFE8
  2183                           indf2	equ	0xFDF
  2184                           fsr2h	equ	0xFDA
  2185                           fsr2l	equ	0xFD9
  2186                           status	equ	0xFD8
  2187                           
  2188 ;; *************** function _write_LCD *****************
  2189 ;; Defined at:
  2190 ;;		line 59 in file "LCD.c"
  2191 ;; Parameters:    Size  Location     Type
  2192 ;;  c               2   17[COMRAM] PTR unsigned char 
  2193 ;;		 -> STR_18(11), STR_17(6), STR_16(6), STR_15(11), 
  2194 ;;		 -> STR_14(6), STR_13(13), STR_12(6), STR_11(13), 
  2195 ;;		 -> STR_10(14), STR_9(10), STR_8(10), STR_7(10), 
  2196 ;;		 -> STR_6(14), STR_5(10), STR_4(12), STR_3(6), 
  2197 ;;		 -> STR_2(14), STR_1(14), 
  2198 ;; Auto vars:     Size  Location     Type
  2199 ;;  i               2   21[COMRAM] int 
  2200 ;; Return value:  Size  Location     Type
  2201 ;;                  1    wreg      void 
  2202 ;; Registers used:
  2203 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2204 ;; Tracked objects:
  2205 ;;		On entry : 0/0
  2206 ;;		On exit  : 0/0
  2207 ;;		Unchanged: 0/0
  2208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2209 ;;      Params:         2       0       0       0       0       0       0       0       0
  2210 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2211 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2212 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2213 ;;Total ram usage:        6 bytes
  2214 ;; Hardware stack levels used:    1
  2215 ;; Hardware stack levels required when called:    3
  2216 ;; This function calls:
  2217 ;;		_send_msg
  2218 ;; This function is called by:
  2219 ;;		_lerToque
  2220 ;;		_destravarPorta
  2221 ;;		_cmpPass
  2222 ;;		_confirmarSenha
  2223 ;;		_cadastrarSenha
  2224 ;; This function uses a non-reentrant model
  2225 ;;
  2226                           
  2227                           	psect	text11
  2228  0010E6                     __ptext11:
  2229                           	opt stack 0
  2230  0010E6                     _write_LCD:
  2231                           	opt stack 26
  2232                           
  2233                           ;LCD.c: 61: int i = 0;
  2234                           
  2235                           ;incstack = 0
  2236  0010E6  0E00               	movlw	0
  2237  0010E8  6E17               	movwf	write_LCD@i+1,c
  2238  0010EA  0E00               	movlw	0
  2239  0010EC  6E16               	movwf	write_LCD@i,c
  2240                           
  2241                           ;LCD.c: 62: for(; c[i] != '\0'; i++)
  2242  0010EE  D010               	goto	l1340
  2243  0010F0                     l1336:
  2244                           
  2245                           ;LCD.c: 63: send_msg(c[i]);
  2246  0010F0  5016               	movf	write_LCD@i,w,c
  2247  0010F2  2412               	addwf	write_LCD@c,w,c
  2248  0010F4  6E14               	movwf	??_write_LCD& (0+255),c
  2249  0010F6  5017               	movf	write_LCD@i+1,w,c
  2250  0010F8  2013               	addwfc	write_LCD@c+1,w,c
  2251  0010FA  6E15               	movwf	(??_write_LCD+1)& (0+255),c
  2252  0010FC  C014  FFF6         	movff	??_write_LCD,tblptrl
  2253  001100  C015  FFF7         	movff	??_write_LCD+1,tblptrh
  2254  001104                     	if	0	;tblptru may be non-zero
  2255  001104                     	endif
  2256  001104                     	if	0	;tblptru may be non-zero
  2257  001104                     	endif
  2258  001104  0008               	tblrd		*
  2259  001106  50F5               	movf	tablat,w,c
  2260  001108  ECB4  F008         	call	_send_msg
  2261  00110C  4A16               	infsnz	write_LCD@i,f,c
  2262  00110E  2A17               	incf	write_LCD@i+1,f,c
  2263  001110                     l1340:
  2264  001110  5016               	movf	write_LCD@i,w,c
  2265  001112  2412               	addwf	write_LCD@c,w,c
  2266  001114  6E14               	movwf	??_write_LCD& (0+255),c
  2267  001116  5017               	movf	write_LCD@i+1,w,c
  2268  001118  2013               	addwfc	write_LCD@c+1,w,c
  2269  00111A  6E15               	movwf	(??_write_LCD+1)& (0+255),c
  2270  00111C  C014  FFF6         	movff	??_write_LCD,tblptrl
  2271  001120  C015  FFF7         	movff	??_write_LCD+1,tblptrh
  2272  001124                     	if	0	;tblptru may be non-zero
  2273  001124                     	endif
  2274  001124                     	if	0	;tblptru may be non-zero
  2275  001124                     	endif
  2276  001124  0008               	tblrd		*
  2277  001126  50F5               	movf	tablat,w,c
  2278  001128  0900               	iorlw	0
  2279  00112A  B4D8               	btfsc	status,2,c
  2280  00112C  0012               	return	
  2281  00112E  D7E0               	goto	l1336
  2282  001130                     __end_of_write_LCD:
  2283                           	opt stack 0
  2284                           tblptru	equ	0xFF8
  2285                           tblptrh	equ	0xFF7
  2286                           tblptrl	equ	0xFF6
  2287                           tablat	equ	0xFF5
  2288                           intcon	equ	0xFF2
  2289                           intcon2	equ	0xFF1
  2290                           intcon3	equ	0xFF0
  2291                           wreg	equ	0xFE8
  2292                           indf2	equ	0xFDF
  2293                           fsr2h	equ	0xFDA
  2294                           fsr2l	equ	0xFD9
  2295                           status	equ	0xFD8
  2296                           
  2297 ;; *************** function _send_msg *****************
  2298 ;; Defined at:
  2299 ;;		line 35 in file "LCD.c"
  2300 ;; Parameters:    Size  Location     Type
  2301 ;;  msg             1    wreg     unsigned char 
  2302 ;; Auto vars:     Size  Location     Type
  2303 ;;  msg             1   16[COMRAM] unsigned char 
  2304 ;; Return value:  Size  Location     Type
  2305 ;;                  1    wreg      void 
  2306 ;; Registers used:
  2307 ;;		wreg, status,2, cstack
  2308 ;; Tracked objects:
  2309 ;;		On entry : 0/0
  2310 ;;		On exit  : 0/0
  2311 ;;		Unchanged: 0/0
  2312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2313 ;;      Params:         0       0       0       0       0       0       0       0       0
  2314 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2315 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2316 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2317 ;;Total ram usage:        2 bytes
  2318 ;; Hardware stack levels used:    1
  2319 ;; Hardware stack levels required when called:    2
  2320 ;; This function calls:
  2321 ;;		_ena_pulse
  2322 ;; This function is called by:
  2323 ;;		_write_LCD
  2324 ;;		_lerToque
  2325 ;;		_destravarPorta
  2326 ;; This function uses a non-reentrant model
  2327 ;;
  2328                           
  2329                           	psect	text12
  2330  001168                     __ptext12:
  2331                           	opt stack 0
  2332  001168                     _send_msg:
  2333                           	opt stack 26
  2334                           
  2335                           ;incstack = 0
  2336                           ;send_msg@msg stored from wreg
  2337  001168  6E11               	movwf	send_msg@msg,c
  2338                           
  2339                           ;LCD.c: 37: PORTD = msg;
  2340  00116A  C011  FF83         	movff	send_msg@msg,3971	;volatile
  2341                           
  2342                           ;LCD.c: 38: PORTBbits.RB3 = 1;
  2343  00116E  8681               	bsf	3969,3,c	;volatile
  2344                           
  2345                           ;LCD.c: 39: _delay((unsigned long)((1)*(16000000/4000.0)));
  2346  001170  0E06               	movlw	6
  2347  001172  6E10               	movwf	??_send_msg& (0+255),c
  2348  001174  0E30               	movlw	48
  2349  001176                     u827:
  2350  001176  2EE8               	decfsz	wreg,f,c
  2351  001178  D7FE               	bra	u827
  2352  00117A  2E10               	decfsz	??_send_msg& (0+255),f,c
  2353  00117C  D7FC               	bra	u827
  2354  00117E  D000               	nop2	
  2355                           
  2356                           ;LCD.c: 40: ena_pulse();
  2357  001180  EC98  F008         	call	_ena_pulse	;wreg free
  2358                           
  2359                           ;LCD.c: 41: _delay((unsigned long)((1)*(16000000/4000.0)));
  2360  001184  0E06               	movlw	6
  2361  001186  6E10               	movwf	??_send_msg& (0+255),c
  2362  001188  0E30               	movlw	48
  2363  00118A                     u837:
  2364  00118A  2EE8               	decfsz	wreg,f,c
  2365  00118C  D7FE               	bra	u837
  2366  00118E  2E10               	decfsz	??_send_msg& (0+255),f,c
  2367  001190  D7FC               	bra	u837
  2368  001192  D000               	nop2	
  2369                           
  2370                           ;LCD.c: 42: PORTBbits.RB3 = 0;
  2371  001194  9681               	bcf	3969,3,c	;volatile
  2372  001196  0012               	return		;funcret
  2373  001198                     __end_of_send_msg:
  2374                           	opt stack 0
  2375                           tblptru	equ	0xFF8
  2376                           tblptrh	equ	0xFF7
  2377                           tblptrl	equ	0xFF6
  2378                           tablat	equ	0xFF5
  2379                           intcon	equ	0xFF2
  2380                           intcon2	equ	0xFF1
  2381                           intcon3	equ	0xFF0
  2382                           wreg	equ	0xFE8
  2383                           indf2	equ	0xFDF
  2384                           fsr2h	equ	0xFDA
  2385                           fsr2l	equ	0xFD9
  2386                           status	equ	0xFD8
  2387                           
  2388 ;; *************** function _set_line *****************
  2389 ;; Defined at:
  2390 ;;		line 66 in file "LCD.c"
  2391 ;; Parameters:    Size  Location     Type
  2392 ;;  line            2   17[COMRAM] int 
  2393 ;;  pos             2   19[COMRAM] int 
  2394 ;; Auto vars:     Size  Location     Type
  2395 ;;  cursor          1   21[COMRAM] unsigned char 
  2396 ;; Return value:  Size  Location     Type
  2397 ;;                  1    wreg      void 
  2398 ;; Registers used:
  2399 ;;		wreg, status,2, status,0, cstack
  2400 ;; Tracked objects:
  2401 ;;		On entry : 0/0
  2402 ;;		On exit  : 0/0
  2403 ;;		Unchanged: 0/0
  2404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2405 ;;      Params:         4       0       0       0       0       0       0       0       0
  2406 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2407 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2408 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2409 ;;Total ram usage:        5 bytes
  2410 ;; Hardware stack levels used:    1
  2411 ;; Hardware stack levels required when called:    3
  2412 ;; This function calls:
  2413 ;;		_send_cfg
  2414 ;; This function is called by:
  2415 ;;		_lerToque
  2416 ;;		_destravarPorta
  2417 ;;		_cmpPass
  2418 ;;		_confirmarSenha
  2419 ;;		_cadastrarSenha
  2420 ;; This function uses a non-reentrant model
  2421 ;;
  2422                           
  2423                           	psect	text13
  2424  0011E0                     __ptext13:
  2425                           	opt stack 0
  2426  0011E0                     _set_line:
  2427                           	opt stack 26
  2428                           
  2429                           ;LCD.c: 68: char cursor;
  2430                           ;LCD.c: 69: if(line == 0)
  2431                           
  2432                           ;incstack = 0
  2433  0011E0  5012               	movf	set_line@line,w,c
  2434  0011E2  1013               	iorwf	set_line@line+1,w,c
  2435  0011E4  A4D8               	btfss	status,2,c
  2436  0011E6  D003               	goto	l1346
  2437                           
  2438                           ;LCD.c: 70: cursor = 0x80 + pos;
  2439  0011E8  5014               	movf	set_line@pos,w,c
  2440  0011EA  0F80               	addlw	128
  2441  0011EC  D002               	goto	L2
  2442  0011EE                     l1346:
  2443                           
  2444                           ;LCD.c: 71: else
  2445                           ;LCD.c: 72: cursor = 0xC0 + pos;
  2446  0011EE  5014               	movf	set_line@pos,w,c
  2447  0011F0  0FC0               	addlw	192
  2448  0011F2                     L2:
  2449  0011F2  6E16               	movwf	set_line@cursor,c
  2450                           
  2451                           ;LCD.c: 73: send_cfg(cursor);
  2452  0011F4  5016               	movf	set_line@cursor,w,c
  2453  0011F6  ECE1  F008         	call	_send_cfg
  2454  0011FA  0012               	return		;funcret
  2455  0011FC                     __end_of_set_line:
  2456                           	opt stack 0
  2457                           tblptru	equ	0xFF8
  2458                           tblptrh	equ	0xFF7
  2459                           tblptrl	equ	0xFF6
  2460                           tablat	equ	0xFF5
  2461                           intcon	equ	0xFF2
  2462                           intcon2	equ	0xFF1
  2463                           intcon3	equ	0xFF0
  2464                           wreg	equ	0xFE8
  2465                           indf2	equ	0xFDF
  2466                           fsr2h	equ	0xFDA
  2467                           fsr2l	equ	0xFD9
  2468                           status	equ	0xFD8
  2469                           
  2470 ;; *************** function _cmpSignal *****************
  2471 ;; Defined at:
  2472 ;;		line 36 in file "ReadSignal.c"
  2473 ;; Parameters:    Size  Location     Type
  2474 ;;  pass            2   14[COMRAM] PTR unsigned char 
  2475 ;;		 -> cadastrarSenha@temp1(2), main@pass(2), 
  2476 ;;  toc             2   16[COMRAM] PTR unsigned char 
  2477 ;;		 -> cadastrarSenha@temp2(2), main@toc(2), 
  2478 ;; Auto vars:     Size  Location     Type
  2479 ;;		None
  2480 ;; Return value:  Size  Location     Type
  2481 ;;                  2   14[COMRAM] int 
  2482 ;; Registers used:
  2483 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  2484 ;; Tracked objects:
  2485 ;;		On entry : 0/0
  2486 ;;		On exit  : 0/0
  2487 ;;		Unchanged: 0/0
  2488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2489 ;;      Params:         4       0       0       0       0       0       0       0       0
  2490 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2491 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2492 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2493 ;;Total ram usage:        6 bytes
  2494 ;; Hardware stack levels used:    1
  2495 ;; Hardware stack levels required when called:    1
  2496 ;; This function calls:
  2497 ;;		Nothing
  2498 ;; This function is called by:
  2499 ;;		_cmpPass
  2500 ;; This function uses a non-reentrant model
  2501 ;;
  2502                           
  2503                           	psect	text14
  2504  00109A                     __ptext14:
  2505                           	opt stack 0
  2506  00109A                     _cmpSignal:
  2507                           	opt stack 27
  2508                           
  2509                           ;ReadSignal.c: 38: if(pass[0] == toc[0] && pass[1] == toc[1])
  2510                           
  2511                           ;incstack = 0
  2512  00109A  C011  FFD9         	movff	cmpSignal@toc,fsr2l
  2513  00109E  C012  FFDA         	movff	cmpSignal@toc+1,fsr2h
  2514  0010A2  C00F  FFE1         	movff	cmpSignal@pass,fsr1l
  2515  0010A6  C010  FFE2         	movff	cmpSignal@pass+1,fsr1h
  2516  0010AA  50DE               	movf	postinc2,w,c
  2517  0010AC  18E6               	xorwf	postinc1,w,c
  2518  0010AE  A4D8               	btfss	status,2,c
  2519  0010B0  D015               	goto	l1380
  2520  0010B2  EE20 F001          	lfsr	2,1
  2521  0010B6  5011               	movf	cmpSignal@toc,w,c
  2522  0010B8  26D9               	addwf	fsr2l,f,c
  2523  0010BA  5012               	movf	cmpSignal@toc+1,w,c
  2524  0010BC  22DA               	addwfc	fsr2h,f,c
  2525  0010BE  EE10 F001          	lfsr	1,1
  2526  0010C2  500F               	movf	cmpSignal@pass,w,c
  2527  0010C4  26E1               	addwf	fsr1l,f,c
  2528  0010C6  5010               	movf	cmpSignal@pass+1,w,c
  2529  0010C8  22E2               	addwfc	fsr1h,f,c
  2530  0010CA  50DE               	movf	postinc2,w,c
  2531  0010CC  18E6               	xorwf	postinc1,w,c
  2532  0010CE  A4D8               	btfss	status,2,c
  2533  0010D0  D005               	goto	l1380
  2534                           
  2535                           ;ReadSignal.c: 39: return 1;
  2536  0010D2  0E00               	movlw	0
  2537  0010D4  6E10               	movwf	?_cmpSignal+1,c
  2538  0010D6  0E01               	movlw	1
  2539  0010D8  6E0F               	movwf	?_cmpSignal,c
  2540  0010DA  0012               	return	
  2541  0010DC                     l1380:
  2542                           
  2543                           ;ReadSignal.c: 40: return 0;
  2544  0010DC  0E00               	movlw	0
  2545  0010DE  6E10               	movwf	?_cmpSignal+1,c
  2546  0010E0  0E00               	movlw	0
  2547  0010E2  6E0F               	movwf	?_cmpSignal,c
  2548  0010E4  0012               	return	
  2549  0010E6                     __end_of_cmpSignal:
  2550                           	opt stack 0
  2551                           tblptru	equ	0xFF8
  2552                           tblptrh	equ	0xFF7
  2553                           tblptrl	equ	0xFF6
  2554                           tablat	equ	0xFF5
  2555                           intcon	equ	0xFF2
  2556                           intcon2	equ	0xFF1
  2557                           intcon3	equ	0xFF0
  2558                           wreg	equ	0xFE8
  2559                           postinc1	equ	0xFE6
  2560                           fsr1h	equ	0xFE2
  2561                           fsr1l	equ	0xFE1
  2562                           indf2	equ	0xFDF
  2563                           postinc2	equ	0xFDE
  2564                           fsr2h	equ	0xFDA
  2565                           fsr2l	equ	0xFD9
  2566                           status	equ	0xFD8
  2567                           
  2568 ;; *************** function _clearLCD *****************
  2569 ;; Defined at:
  2570 ;;		line 31 in file "LCD.c"
  2571 ;; Parameters:    Size  Location     Type
  2572 ;;		None
  2573 ;; Auto vars:     Size  Location     Type
  2574 ;;		None
  2575 ;; Return value:  Size  Location     Type
  2576 ;;                  1    wreg      void 
  2577 ;; Registers used:
  2578 ;;		wreg, cstack
  2579 ;; Tracked objects:
  2580 ;;		On entry : 0/0
  2581 ;;		On exit  : 0/0
  2582 ;;		Unchanged: 0/0
  2583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2584 ;;      Params:         0       0       0       0       0       0       0       0       0
  2585 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2586 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2587 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2588 ;;Total ram usage:        0 bytes
  2589 ;; Hardware stack levels used:    1
  2590 ;; Hardware stack levels required when called:    3
  2591 ;; This function calls:
  2592 ;;		_send_cfg
  2593 ;; This function is called by:
  2594 ;;		_lerToque
  2595 ;;		_destravarPorta
  2596 ;;		_cmpPass
  2597 ;;		_confirmarSenha
  2598 ;;		_cadastrarSenha
  2599 ;; This function uses a non-reentrant model
  2600 ;;
  2601                           
  2602                           	psect	text15
  2603  00124C                     __ptext15:
  2604                           	opt stack 0
  2605  00124C                     _clearLCD:
  2606                           	opt stack 25
  2607                           
  2608                           ;LCD.c: 32: send_cfg(0x01);
  2609                           
  2610                           ;incstack = 0
  2611  00124C  0E01               	movlw	1
  2612  00124E  ECE1  F008         	call	_send_cfg
  2613  001252  0012               	return		;funcret
  2614  001254                     __end_of_clearLCD:
  2615                           	opt stack 0
  2616                           tblptru	equ	0xFF8
  2617                           tblptrh	equ	0xFF7
  2618                           tblptrl	equ	0xFF6
  2619                           tablat	equ	0xFF5
  2620                           intcon	equ	0xFF2
  2621                           intcon2	equ	0xFF1
  2622                           intcon3	equ	0xFF0
  2623                           wreg	equ	0xFE8
  2624                           postinc1	equ	0xFE6
  2625                           fsr1h	equ	0xFE2
  2626                           fsr1l	equ	0xFE1
  2627                           indf2	equ	0xFDF
  2628                           postinc2	equ	0xFDE
  2629                           fsr2h	equ	0xFDA
  2630                           fsr2l	equ	0xFD9
  2631                           status	equ	0xFD8
  2632                           
  2633 ;; *************** function _send_cfg *****************
  2634 ;; Defined at:
  2635 ;;		line 22 in file "LCD.c"
  2636 ;; Parameters:    Size  Location     Type
  2637 ;;  cmd             1    wreg     unsigned char 
  2638 ;; Auto vars:     Size  Location     Type
  2639 ;;  cmd             1   16[COMRAM] unsigned char 
  2640 ;; Return value:  Size  Location     Type
  2641 ;;                  1    wreg      void 
  2642 ;; Registers used:
  2643 ;;		wreg, cstack
  2644 ;; Tracked objects:
  2645 ;;		On entry : 0/0
  2646 ;;		On exit  : 0/0
  2647 ;;		Unchanged: 0/0
  2648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2649 ;;      Params:         0       0       0       0       0       0       0       0       0
  2650 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2651 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2652 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2653 ;;Total ram usage:        2 bytes
  2654 ;; Hardware stack levels used:    1
  2655 ;; Hardware stack levels required when called:    2
  2656 ;; This function calls:
  2657 ;;		_ena_pulse
  2658 ;; This function is called by:
  2659 ;;		_clearLCD
  2660 ;;		_init_LCD
  2661 ;;		_set_line
  2662 ;; This function uses a non-reentrant model
  2663 ;;
  2664                           
  2665                           	psect	text16
  2666  0011C2                     __ptext16:
  2667                           	opt stack 0
  2668  0011C2                     _send_cfg:
  2669                           	opt stack 27
  2670                           
  2671                           ;incstack = 0
  2672                           ;send_cfg@cmd stored from wreg
  2673  0011C2  6E11               	movwf	send_cfg@cmd,c
  2674                           
  2675                           ;LCD.c: 24: PORTD = cmd;
  2676  0011C4  C011  FF83         	movff	send_cfg@cmd,3971	;volatile
  2677                           
  2678                           ;LCD.c: 25: PORTBbits.RB3 = 0;
  2679  0011C8  9681               	bcf	3969,3,c	;volatile
  2680                           
  2681                           ;LCD.c: 26: ena_pulse();
  2682  0011CA  EC98  F008         	call	_ena_pulse	;wreg free
  2683                           
  2684                           ;LCD.c: 27: _delay((unsigned long)((1)*(16000000/4000.0)));
  2685  0011CE  0E06               	movlw	6
  2686  0011D0  6E10               	movwf	??_send_cfg& (0+255),c
  2687  0011D2  0E30               	movlw	48
  2688  0011D4                     u847:
  2689  0011D4  2EE8               	decfsz	wreg,f,c
  2690  0011D6  D7FE               	bra	u847
  2691  0011D8  2E10               	decfsz	??_send_cfg& (0+255),f,c
  2692  0011DA  D7FC               	bra	u847
  2693  0011DC  D000               	nop2	
  2694  0011DE  0012               	return		;funcret
  2695  0011E0                     __end_of_send_cfg:
  2696                           	opt stack 0
  2697                           tblptru	equ	0xFF8
  2698                           tblptrh	equ	0xFF7
  2699                           tblptrl	equ	0xFF6
  2700                           tablat	equ	0xFF5
  2701                           intcon	equ	0xFF2
  2702                           intcon2	equ	0xFF1
  2703                           intcon3	equ	0xFF0
  2704                           wreg	equ	0xFE8
  2705                           postinc1	equ	0xFE6
  2706                           fsr1h	equ	0xFE2
  2707                           fsr1l	equ	0xFE1
  2708                           indf2	equ	0xFDF
  2709                           postinc2	equ	0xFDE
  2710                           fsr2h	equ	0xFDA
  2711                           fsr2l	equ	0xFD9
  2712                           status	equ	0xFD8
  2713                           
  2714 ;; *************** function _ena_pulse *****************
  2715 ;; Defined at:
  2716 ;;		line 11 in file "LCD.c"
  2717 ;; Parameters:    Size  Location     Type
  2718 ;;		None
  2719 ;; Auto vars:     Size  Location     Type
  2720 ;;		None
  2721 ;; Return value:  Size  Location     Type
  2722 ;;                  1    wreg      void 
  2723 ;; Registers used:
  2724 ;;		wreg
  2725 ;; Tracked objects:
  2726 ;;		On entry : 0/0
  2727 ;;		On exit  : 0/0
  2728 ;;		Unchanged: 0/0
  2729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2730 ;;      Params:         0       0       0       0       0       0       0       0       0
  2731 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2732 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2733 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2734 ;;Total ram usage:        1 bytes
  2735 ;; Hardware stack levels used:    1
  2736 ;; Hardware stack levels required when called:    1
  2737 ;; This function calls:
  2738 ;;		Nothing
  2739 ;; This function is called by:
  2740 ;;		_send_cfg
  2741 ;;		_send_msg
  2742 ;; This function uses a non-reentrant model
  2743 ;;
  2744                           
  2745                           	psect	text17
  2746  001130                     __ptext17:
  2747                           	opt stack 0
  2748  001130                     _ena_pulse:
  2749                           	opt stack 27
  2750                           
  2751                           ;LCD.c: 13: PORTEbits.RE1 = 0;
  2752                           
  2753                           ;incstack = 0
  2754  001130  9284               	bcf	3972,1,c	;volatile
  2755                           
  2756                           ;LCD.c: 14: _delay((unsigned long)((1)*(16000000/4000.0)));
  2757  001132  0E06               	movlw	6
  2758  001134  6E0F               	movwf	??_ena_pulse& (0+255),c
  2759  001136  0E30               	movlw	48
  2760  001138                     u857:
  2761  001138  2EE8               	decfsz	wreg,f,c
  2762  00113A  D7FE               	bra	u857
  2763  00113C  2E0F               	decfsz	??_ena_pulse& (0+255),f,c
  2764  00113E  D7FC               	bra	u857
  2765  001140  D000               	nop2	
  2766                           
  2767                           ;LCD.c: 15: PORTEbits.RE1 = 1;
  2768  001142  8284               	bsf	3972,1,c	;volatile
  2769                           
  2770                           ;LCD.c: 16: _delay((unsigned long)((1)*(16000000/4000.0)));
  2771  001144  0E06               	movlw	6
  2772  001146  6E0F               	movwf	??_ena_pulse& (0+255),c
  2773  001148  0E30               	movlw	48
  2774  00114A                     u867:
  2775  00114A  2EE8               	decfsz	wreg,f,c
  2776  00114C  D7FE               	bra	u867
  2777  00114E  2E0F               	decfsz	??_ena_pulse& (0+255),f,c
  2778  001150  D7FC               	bra	u867
  2779  001152  D000               	nop2	
  2780                           
  2781                           ;LCD.c: 17: PORTEbits.RE1 = 0;
  2782  001154  9284               	bcf	3972,1,c	;volatile
  2783                           
  2784                           ;LCD.c: 18: _delay((unsigned long)((1)*(16000000/4000.0)));
  2785  001156  0E06               	movlw	6
  2786  001158  6E0F               	movwf	??_ena_pulse& (0+255),c
  2787  00115A  0E30               	movlw	48
  2788  00115C                     u877:
  2789  00115C  2EE8               	decfsz	wreg,f,c
  2790  00115E  D7FE               	bra	u877
  2791  001160  2E0F               	decfsz	??_ena_pulse& (0+255),f,c
  2792  001162  D7FC               	bra	u877
  2793  001164  D000               	nop2	
  2794  001166  0012               	return		;funcret
  2795  001168                     __end_of_ena_pulse:
  2796                           	opt stack 0
  2797                           tblptru	equ	0xFF8
  2798                           tblptrh	equ	0xFF7
  2799                           tblptrl	equ	0xFF6
  2800                           tablat	equ	0xFF5
  2801                           intcon	equ	0xFF2
  2802                           intcon2	equ	0xFF1
  2803                           intcon3	equ	0xFF0
  2804                           wreg	equ	0xFE8
  2805                           postinc1	equ	0xFE6
  2806                           fsr1h	equ	0xFE2
  2807                           fsr1l	equ	0xFE1
  2808                           indf2	equ	0xFDF
  2809                           postinc2	equ	0xFDE
  2810                           fsr2h	equ	0xFDA
  2811                           fsr2l	equ	0xFD9
  2812                           status	equ	0xFD8
  2813                           
  2814 ;; *************** function _bip *****************
  2815 ;; Defined at:
  2816 ;;		line 14 in file "Buzzer.c"
  2817 ;; Parameters:    Size  Location     Type
  2818 ;;  rounds          2   14[COMRAM] int 
  2819 ;;  time            2   16[COMRAM] int 
  2820 ;; Auto vars:     Size  Location     Type
  2821 ;;  j               2   20[COMRAM] int 
  2822 ;; Return value:  Size  Location     Type
  2823 ;;                  1    wreg      void 
  2824 ;; Registers used:
  2825 ;;		wreg, status,2, status,0
  2826 ;; Tracked objects:
  2827 ;;		On entry : 0/0
  2828 ;;		On exit  : 0/0
  2829 ;;		Unchanged: 0/0
  2830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2831 ;;      Params:         4       0       0       0       0       0       0       0       0
  2832 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2833 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2834 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2835 ;;Total ram usage:        8 bytes
  2836 ;; Hardware stack levels used:    1
  2837 ;; Hardware stack levels required when called:    1
  2838 ;; This function calls:
  2839 ;;		Nothing
  2840 ;; This function is called by:
  2841 ;;		_destravarPorta
  2842 ;;		_cmpPass
  2843 ;; This function uses a non-reentrant model
  2844 ;;
  2845                           
  2846                           	psect	text18
  2847  000DEE                     __ptext18:
  2848                           	opt stack 0
  2849  000DEE                     _bip:
  2850                           	opt stack 27
  2851                           
  2852                           ;Buzzer.c: 16: TRISCbits.RC2 = 0;
  2853                           
  2854                           ;incstack = 0
  2855  000DEE  9494               	bcf	3988,2,c	;volatile
  2856                           
  2857                           ;Buzzer.c: 17: PORTCbits.RC2 = 0;
  2858  000DF0  9482               	bcf	3970,2,c	;volatile
  2859                           
  2860                           ;Buzzer.c: 19: int j = 0;
  2861  000DF2  0E00               	movlw	0
  2862  000DF4  6E16               	movwf	bip@j+1,c
  2863  000DF6  0E00               	movlw	0
  2864  000DF8  6E15               	movwf	bip@j,c
  2865                           
  2866                           ;Buzzer.c: 20: if(time == 500){
  2867  000DFA  0EF4               	movlw	244
  2868  000DFC  1811               	xorwf	bip@time,w,c
  2869  000DFE  E129               	bnz	l1398
  2870  000E00  0412               	decf	bip@time+1,w,c
  2871  000E02  B4D8               	btfsc	status,2,c
  2872  000E04  D01B               	goto	l1396
  2873  000E06  D025               	goto	l1398
  2874  000E08                     l1392:
  2875                           
  2876                           ;Buzzer.c: 22: PORTCbits.RC2 = !PORTCbits.RC2;
  2877  000E08  B482               	btfsc	3970,2,c	;volatile
  2878  000E0A  D003               	goto	u530
  2879  000E0C  6A13               	clrf	??_bip& (0+255),c
  2880  000E0E  2A13               	incf	??_bip& (0+255),f,c
  2881  000E10  D001               	goto	u548
  2882  000E12                     u530:
  2883  000E12  6A13               	clrf	??_bip& (0+255),c
  2884  000E14                     u548:
  2885  000E14  4613               	rlncf	??_bip,f,c
  2886  000E16  4613               	rlncf	??_bip,f,c
  2887  000E18  5082               	movf	3970,w,c	;volatile
  2888  000E1A  1813               	xorwf	??_bip,w,c
  2889  000E1C  0BFB               	andlw	-5
  2890  000E1E  1813               	xorwf	??_bip,w,c
  2891  000E20  6E82               	movwf	3970,c	;volatile
  2892                           
  2893                           ;Buzzer.c: 23: _delay((unsigned long)((500)*(16000000/4000.0)));
  2894  000E22  0E0B               	movlw	11
  2895  000E24  6E14               	movwf	(??_bip+1)& (0+255),c
  2896  000E26  0E26               	movlw	38
  2897  000E28  6E13               	movwf	??_bip& (0+255),c
  2898  000E2A  0E5E               	movlw	94
  2899  000E2C                     u887:
  2900  000E2C  2EE8               	decfsz	wreg,f,c
  2901  000E2E  D7FE               	bra	u887
  2902  000E30  2E13               	decfsz	??_bip& (0+255),f,c
  2903  000E32  D7FC               	bra	u887
  2904  000E34  2E14               	decfsz	(??_bip+1)& (0+255),f,c
  2905  000E36  D7FA               	bra	u887
  2906                           
  2907                           ;Buzzer.c: 24: j++;
  2908  000E38  4A15               	infsnz	bip@j,f,c
  2909  000E3A  2A16               	incf	bip@j+1,f,c
  2910  000E3C                     l1396:
  2911  000E3C  500F               	movf	bip@rounds,w,c
  2912  000E3E  5C15               	subwf	bip@j,w,c
  2913  000E40  5016               	movf	bip@j+1,w,c
  2914  000E42  0A80               	xorlw	128
  2915  000E44  6E13               	movwf	??_bip& (0+255),c
  2916  000E46  5010               	movf	bip@rounds+1,w,c
  2917  000E48  0A80               	xorlw	128
  2918  000E4A  5813               	subwfb	??_bip& (0+255),w,c
  2919  000E4C  B0D8               	btfsc	status,0,c
  2920  000E4E  0012               	return	
  2921  000E50  D7DB               	goto	l1392
  2922  000E52                     l1398:
  2923                           
  2924                           ;Buzzer.c: 27: else if(time == 1000){
  2925  000E52  0EE8               	movlw	232
  2926  000E54  1811               	xorwf	bip@time,w,c
  2927  000E56  E12B               	bnz	l201
  2928  000E58  0E03               	movlw	3
  2929  000E5A  1812               	xorwf	bip@time+1,w,c
  2930  000E5C  A4D8               	btfss	status,2,c
  2931  000E5E  0012               	return	
  2932  000E60  D01B               	goto	l1406
  2933  000E62                     l1402:
  2934                           
  2935                           ;Buzzer.c: 29: PORTCbits.RC2 = !PORTCbits.RC2;
  2936  000E62  B482               	btfsc	3970,2,c	;volatile
  2937  000E64  D003               	goto	u570
  2938  000E66  6A13               	clrf	??_bip& (0+255),c
  2939  000E68  2A13               	incf	??_bip& (0+255),f,c
  2940  000E6A  D001               	goto	u588
  2941  000E6C                     u570:
  2942  000E6C  6A13               	clrf	??_bip& (0+255),c
  2943  000E6E                     u588:
  2944  000E6E  4613               	rlncf	??_bip,f,c
  2945  000E70  4613               	rlncf	??_bip,f,c
  2946  000E72  5082               	movf	3970,w,c	;volatile
  2947  000E74  1813               	xorwf	??_bip,w,c
  2948  000E76  0BFB               	andlw	-5
  2949  000E78  1813               	xorwf	??_bip,w,c
  2950  000E7A  6E82               	movwf	3970,c	;volatile
  2951                           
  2952                           ;Buzzer.c: 30: _delay((unsigned long)((1000)*(16000000/4000.0)));
  2953  000E7C  0E15               	movlw	21
  2954  000E7E  6E14               	movwf	(??_bip+1)& (0+255),c
  2955  000E80  0E4B               	movlw	75
  2956  000E82  6E13               	movwf	??_bip& (0+255),c
  2957  000E84  0EBE               	movlw	190
  2958  000E86                     u897:
  2959  000E86  2EE8               	decfsz	wreg,f,c
  2960  000E88  D7FE               	bra	u897
  2961  000E8A  2E13               	decfsz	??_bip& (0+255),f,c
  2962  000E8C  D7FC               	bra	u897
  2963  000E8E  2E14               	decfsz	(??_bip+1)& (0+255),f,c
  2964  000E90  D7FA               	bra	u897
  2965  000E92  D000               	nop2	
  2966                           
  2967                           ;Buzzer.c: 31: j++;
  2968  000E94  4A15               	infsnz	bip@j,f,c
  2969  000E96  2A16               	incf	bip@j+1,f,c
  2970  000E98                     l1406:
  2971  000E98  500F               	movf	bip@rounds,w,c
  2972  000E9A  5C15               	subwf	bip@j,w,c
  2973  000E9C  5016               	movf	bip@j+1,w,c
  2974  000E9E  0A80               	xorlw	128
  2975  000EA0  6E13               	movwf	??_bip& (0+255),c
  2976  000EA2  5010               	movf	bip@rounds+1,w,c
  2977  000EA4  0A80               	xorlw	128
  2978  000EA6  5813               	subwfb	??_bip& (0+255),w,c
  2979  000EA8  B0D8               	btfsc	status,0,c
  2980  000EAA  0012               	return	
  2981  000EAC  D7DA               	goto	l1402
  2982  000EAE                     l201:
  2983  000EAE  0012               	return		;funcret
  2984  000EB0                     __end_of_bip:
  2985                           	opt stack 0
  2986                           tblptru	equ	0xFF8
  2987                           tblptrh	equ	0xFF7
  2988                           tblptrl	equ	0xFF6
  2989                           tablat	equ	0xFF5
  2990                           intcon	equ	0xFF2
  2991                           intcon2	equ	0xFF1
  2992                           intcon3	equ	0xFF0
  2993                           wreg	equ	0xFE8
  2994                           postinc1	equ	0xFE6
  2995                           fsr1h	equ	0xFE2
  2996                           fsr1l	equ	0xFE1
  2997                           indf2	equ	0xFDF
  2998                           postinc2	equ	0xFDE
  2999                           fsr2h	equ	0xFDA
  3000                           fsr2l	equ	0xFD9
  3001                           status	equ	0xFD8
  3002                           
  3003 ;; *************** function _ISR *****************
  3004 ;; Defined at:
  3005 ;;		line 32 in file "Interrupt.c"
  3006 ;; Parameters:    Size  Location     Type
  3007 ;;		None
  3008 ;; Auto vars:     Size  Location     Type
  3009 ;;		None
  3010 ;; Return value:  Size  Location     Type
  3011 ;;                  1    wreg      void 
  3012 ;; Registers used:
  3013 ;;		wreg, status,2
  3014 ;; Tracked objects:
  3015 ;;		On entry : 0/0
  3016 ;;		On exit  : 0/0
  3017 ;;		Unchanged: 0/0
  3018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3019 ;;      Params:         0       0       0       0       0       0       0       0       0
  3020 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3021 ;;      Temps:         14       0       0       0       0       0       0       0       0
  3022 ;;      Totals:        14       0       0       0       0       0       0       0       0
  3023 ;;Total ram usage:       14 bytes
  3024 ;; Hardware stack levels used:    1
  3025 ;; This function calls:
  3026 ;;		Nothing
  3027 ;; This function is called by:
  3028 ;;		Interrupt level 2
  3029 ;; This function uses a non-reentrant model
  3030 ;;
  3031                           
  3032                           	psect	intcode
  3033  000008                     __pintcode:
  3034                           	opt stack 0
  3035  000008                     _ISR:
  3036                           	opt stack 25
  3037                           
  3038                           ;incstack = 0
  3039  000008  8235               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3040  00000A  EDA9  F007         	call	int_func,f	;refresh shadow registers
  3041                           tblptru	equ	0xFF8
  3042                           tblptrh	equ	0xFF7
  3043                           tblptrl	equ	0xFF6
  3044                           tablat	equ	0xFF5
  3045                           intcon	equ	0xFF2
  3046                           intcon2	equ	0xFF1
  3047                           intcon3	equ	0xFF0
  3048                           wreg	equ	0xFE8
  3049                           postinc1	equ	0xFE6
  3050                           fsr1h	equ	0xFE2
  3051                           fsr1l	equ	0xFE1
  3052                           indf2	equ	0xFDF
  3053                           postinc2	equ	0xFDE
  3054                           fsr2h	equ	0xFDA
  3055                           fsr2l	equ	0xFD9
  3056                           status	equ	0xFD8
  3057                           
  3058                           	psect	intcode_body
  3059  000F52                     __pintcode_body:
  3060                           	opt stack 25
  3061  000F52                     int_func:
  3062                           	opt stack 25
  3063  000F52  0006               	pop		; remove dummy address from shadow register refresh
  3064  000F54  CFFA F001          	movff	pclath,??_ISR
  3065  000F58  CFFB F002          	movff	pclatu,??_ISR+1
  3066  000F5C  CFE9 F003          	movff	fsr0l,??_ISR+2
  3067  000F60  CFEA F004          	movff	fsr0h,??_ISR+3
  3068  000F64  CFE1 F005          	movff	fsr1l,??_ISR+4
  3069  000F68  CFE2 F006          	movff	fsr1h,??_ISR+5
  3070  000F6C  CFD9 F007          	movff	fsr2l,??_ISR+6
  3071  000F70  CFDA F008          	movff	fsr2h,??_ISR+7
  3072  000F74  CFF3 F009          	movff	prodl,??_ISR+8
  3073  000F78  CFF4 F00A          	movff	prodh,??_ISR+9
  3074  000F7C  CFF6 F00B          	movff	tblptrl,??_ISR+10
  3075  000F80  CFF7 F00C          	movff	tblptrh,??_ISR+11
  3076  000F84  CFF8 F00D          	movff	tblptru,??_ISR+12
  3077  000F88  CFF5 F00E          	movff	tablat,??_ISR+13
  3078                           
  3079                           ;Interrupt.c: 34: if(INTCON3bits.INT2IF){
  3080  000F8C  A2F0               	btfss	intcon3,1,c	;volatile
  3081  000F8E  D005               	goto	i2l22
  3082                           
  3083                           ;Interrupt.c: 35: INTCON3bits.INT2IF = 0;
  3084  000F90  92F0               	bcf	intcon3,1,c	;volatile
  3085                           
  3086                           ;Interrupt.c: 36: button = 1;
  3087  000F92  0E00               	movlw	0
  3088  000F94  6E34               	movwf	_button+1,c
  3089  000F96  0E01               	movlw	1
  3090  000F98  6E33               	movwf	_button,c
  3091  000F9A                     i2l22:
  3092  000F9A  C00E  FFF5         	movff	??_ISR+13,tablat
  3093  000F9E  C00D  FFF8         	movff	??_ISR+12,tblptru
  3094  000FA2  C00C  FFF7         	movff	??_ISR+11,tblptrh
  3095  000FA6  C00B  FFF6         	movff	??_ISR+10,tblptrl
  3096  000FAA  C00A  FFF4         	movff	??_ISR+9,prodh
  3097  000FAE  C009  FFF3         	movff	??_ISR+8,prodl
  3098  000FB2  C008  FFDA         	movff	??_ISR+7,fsr2h
  3099  000FB6  C007  FFD9         	movff	??_ISR+6,fsr2l
  3100  000FBA  C006  FFE2         	movff	??_ISR+5,fsr1h
  3101  000FBE  C005  FFE1         	movff	??_ISR+4,fsr1l
  3102  000FC2  C004  FFEA         	movff	??_ISR+3,fsr0h
  3103  000FC6  C003  FFE9         	movff	??_ISR+2,fsr0l
  3104  000FCA  C002  FFFB         	movff	??_ISR+1,pclatu
  3105  000FCE  C001  FFFA         	movff	??_ISR,pclath
  3106  000FD2  9235               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3107  000FD4  0011               	retfie		f
  3108  000FD6                     __end_of_ISR:
  3109                           	opt stack 0
  3110                           pclatu	equ	0xFFB
  3111                           pclath	equ	0xFFA
  3112                           tblptru	equ	0xFF8
  3113                           tblptrh	equ	0xFF7
  3114                           tblptrl	equ	0xFF6
  3115                           tablat	equ	0xFF5
  3116                           prodh	equ	0xFF4
  3117                           prodl	equ	0xFF3
  3118                           intcon	equ	0xFF2
  3119                           intcon2	equ	0xFF1
  3120                           intcon3	equ	0xFF0
  3121                           fsr0h	equ	0xFEA
  3122                           fsr0l	equ	0xFE9
  3123                           wreg	equ	0xFE8
  3124                           postinc1	equ	0xFE6
  3125                           fsr1h	equ	0xFE2
  3126                           fsr1l	equ	0xFE1
  3127                           indf2	equ	0xFDF
  3128                           postinc2	equ	0xFDE
  3129                           fsr2h	equ	0xFDA
  3130                           fsr2l	equ	0xFD9
  3131                           status	equ	0xFD8
  3132                           pclatu	equ	0xFFB
  3133                           pclath	equ	0xFFA
  3134                           tblptru	equ	0xFF8
  3135                           tblptrh	equ	0xFF7
  3136                           tblptrl	equ	0xFF6
  3137                           tablat	equ	0xFF5
  3138                           prodh	equ	0xFF4
  3139                           prodl	equ	0xFF3
  3140                           intcon	equ	0xFF2
  3141                           intcon2	equ	0xFF1
  3142                           intcon3	equ	0xFF0
  3143                           fsr0h	equ	0xFEA
  3144                           fsr0l	equ	0xFE9
  3145                           wreg	equ	0xFE8
  3146                           postinc1	equ	0xFE6
  3147                           fsr1h	equ	0xFE2
  3148                           fsr1l	equ	0xFE1
  3149                           indf2	equ	0xFDF
  3150                           postinc2	equ	0xFDE
  3151                           fsr2h	equ	0xFDA
  3152                           fsr2l	equ	0xFD9
  3153                           status	equ	0xFD8
  3154                           
  3155                           	psect	rparam
  3156  0000                     pclatu	equ	0xFFB
  3157                           pclath	equ	0xFFA
  3158                           tblptru	equ	0xFF8
  3159                           tblptrh	equ	0xFF7
  3160                           tblptrl	equ	0xFF6
  3161                           tablat	equ	0xFF5
  3162                           prodh	equ	0xFF4
  3163                           prodl	equ	0xFF3
  3164                           intcon	equ	0xFF2
  3165                           intcon2	equ	0xFF1
  3166                           intcon3	equ	0xFF0
  3167                           fsr0h	equ	0xFEA
  3168                           fsr0l	equ	0xFE9
  3169                           wreg	equ	0xFE8
  3170                           postinc1	equ	0xFE6
  3171                           fsr1h	equ	0xFE2
  3172                           fsr1l	equ	0xFE1
  3173                           indf2	equ	0xFDF
  3174                           postinc2	equ	0xFDE
  3175                           fsr2h	equ	0xFDA
  3176                           fsr2l	equ	0xFD9
  3177                           status	equ	0xFD8
  3178                           
  3179                           	psect	temp
  3180  000035                     btemp:
  3181                           	opt stack 0
  3182  000035                     	ds	1
  3183  0000                     int$flags	set	btemp
  3184                           pclatu	equ	0xFFB
  3185                           pclath	equ	0xFFA
  3186                           tblptru	equ	0xFF8
  3187                           tblptrh	equ	0xFF7
  3188                           tblptrl	equ	0xFF6
  3189                           tablat	equ	0xFF5
  3190                           prodh	equ	0xFF4
  3191                           prodl	equ	0xFF3
  3192                           intcon	equ	0xFF2
  3193                           intcon2	equ	0xFF1
  3194                           intcon3	equ	0xFF0
  3195                           fsr0h	equ	0xFEA
  3196                           fsr0l	equ	0xFE9
  3197                           wreg	equ	0xFE8
  3198                           postinc1	equ	0xFE6
  3199                           fsr1h	equ	0xFE2
  3200                           fsr1l	equ	0xFE1
  3201                           indf2	equ	0xFDF
  3202                           postinc2	equ	0xFDE
  3203                           fsr2h	equ	0xFDA
  3204                           fsr2l	equ	0xFD9
  3205                           status	equ	0xFD8


Data Sizes:
    Strings     116
    Constant    0
    Data        0
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     50      52
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    cadastrarSenha@pass	PTR unsigned char  size(2) Largest target is 2
		 -> main@pass(COMRAM[2]), 

    cmpPass@toque	PTR unsigned char  size(2) Largest target is 2
		 -> cadastrarSenha@temp2(COMRAM[2]), main@toc(COMRAM[2]), 

    cmpPass@pass	PTR unsigned char  size(2) Largest target is 2
		 -> cadastrarSenha@temp1(COMRAM[2]), main@pass(COMRAM[2]), 

    destravarPorta@pass	PTR unsigned char  size(2) Largest target is 2
		 -> main@pass(COMRAM[2]), 

    destravarPorta@toque	PTR unsigned char  size(2) Largest target is 2
		 -> main@toc(COMRAM[2]), 

    lerToque@toque	PTR unsigned char  size(2) Largest target is 2
		 -> cadastrarSenha@temp2(COMRAM[2]), cadastrarSenha@temp1(COMRAM[2]), 

    cmpSignal@toc	PTR unsigned char  size(2) Largest target is 2
		 -> cadastrarSenha@temp2(COMRAM[2]), main@toc(COMRAM[2]), 

    cmpSignal@pass	PTR unsigned char  size(2) Largest target is 2
		 -> cadastrarSenha@temp1(COMRAM[2]), main@pass(COMRAM[2]), 

    readSignal@signal	PTR unsigned char  size(2) Largest target is 2
		 -> cadastrarSenha@temp2(COMRAM[2]), cadastrarSenha@temp1(COMRAM[2]), main@toc(COMRAM[2]), 

    write_LCD@c	PTR unsigned char  size(2) Largest target is 14
		 -> STR_18(CODE[11]), STR_17(CODE[6]), STR_16(CODE[6]), STR_15(CODE[11]), 
		 -> STR_14(CODE[6]), STR_13(CODE[13]), STR_12(CODE[6]), STR_11(CODE[13]), 
		 -> STR_10(CODE[14]), STR_9(CODE[10]), STR_8(CODE[10]), STR_7(CODE[10]), 
		 -> STR_6(CODE[14]), STR_5(CODE[10]), STR_4(CODE[12]), STR_3(CODE[6]), 
		 -> STR_2(CODE[14]), STR_1(CODE[14]), 


Critical Paths under _main in COMRAM

    _main->_cadastrarSenha
    _init_LCD->_send_cfg
    _destravarPorta->_readSignal
    _cadastrarSenha->_lerToque
    _lerToque->_readSignal
    _readSignal->_read_ADC
    _confirmarSenha->_write_LCD
    _cmpPass->_write_LCD
    _write_LCD->_send_msg
    _send_msg->_ena_pulse
    _set_line->_send_cfg
    _clearLCD->_send_cfg
    _send_cfg->_ena_pulse

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   30551
                                             46 COMRAM     4     4      0
                     _cadastrarSenha
                     _destravarPorta
                           _init_ADC
                        _init_INTRB2
                           _init_LCD
 ---------------------------------------------------------------------------------
 (1) _init_LCD                                             0     0      0      15
                           _send_cfg
 ---------------------------------------------------------------------------------
 (1) _init_INTRB2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _destravarPorta                                       6     2      4   11390
                                             30 COMRAM     6     2      4
                                _bip
                           _clearLCD
                            _cmpPass
                         _readSignal
                           _read_ADC
                           _send_msg
                           _set_line
                          _write_LCD
 ---------------------------------------------------------------------------------
 (1) _cadastrarSenha                                      12    10      2   18990
                                             34 COMRAM    12    10      2
                           _clearLCD
                            _cmpPass
                     _confirmarSenha
                           _lerToque
                           _set_line
                          _write_LCD
 ---------------------------------------------------------------------------------
 (2) _lerToque                                             4     2      2    5554
                                             30 COMRAM     4     2      2
                           _clearLCD
                         _readSignal
                           _read_ADC
                           _send_msg
                           _set_line
                          _write_LCD
 ---------------------------------------------------------------------------------
 (2) _readSignal                                          12     8      4    1207
                                             18 COMRAM    12     8      4
                           _read_ADC
 ---------------------------------------------------------------------------------
 (2) _read_ADC                                             4     2      2      23
                                             14 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _confirmarSenha                                       2     0      2    3937
                                             23 COMRAM     2     0      2
                           _clearLCD
                           _set_line
                          _write_LCD
 ---------------------------------------------------------------------------------
 (2) _cmpPass                                              6     2      4    5145
                                             23 COMRAM     6     2      4
                                _bip
                           _clearLCD
                          _cmpSignal
                           _set_line
                          _write_LCD
 ---------------------------------------------------------------------------------
 (2) _write_LCD                                            6     4      2    1257
                                             17 COMRAM     6     4      2
                           _send_msg
 ---------------------------------------------------------------------------------
 (3) _send_msg                                             2     2      0      15
                                             15 COMRAM     2     2      0
                          _ena_pulse
 ---------------------------------------------------------------------------------
 (2) _set_line                                             5     1      4    2665
                                             17 COMRAM     5     1      4
                           _send_cfg
 ---------------------------------------------------------------------------------
 (3) _cmpSignal                                            6     2      4     216
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _clearLCD                                             0     0      0      15
                           _send_cfg
 ---------------------------------------------------------------------------------
 (2) _send_cfg                                             2     2      0      15
                                             15 COMRAM     2     2      0
                          _ena_pulse
 ---------------------------------------------------------------------------------
 (3) _ena_pulse                                            1     1      0       0
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _bip                                                  8     4      4     647
                                             14 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                 14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _cadastrarSenha
     _clearLCD
       _send_cfg
         _ena_pulse
     _cmpPass
       _bip
       _clearLCD
         _send_cfg
           _ena_pulse
       _cmpSignal
       _set_line
         _send_cfg
           _ena_pulse
       _write_LCD
         _send_msg
           _ena_pulse
     _confirmarSenha
       _clearLCD
         _send_cfg
           _ena_pulse
       _set_line
         _send_cfg
           _ena_pulse
       _write_LCD
         _send_msg
           _ena_pulse
     _lerToque
       _clearLCD
         _send_cfg
           _ena_pulse
       _readSignal
         _read_ADC
       _read_ADC
       _send_msg
         _ena_pulse
       _set_line
         _send_cfg
           _ena_pulse
       _write_LCD
         _send_msg
           _ena_pulse
     _set_line
       _send_cfg
         _ena_pulse
     _write_LCD
       _send_msg
         _ena_pulse
   _destravarPorta
     _bip
     _clearLCD
       _send_cfg
         _ena_pulse
     _cmpPass
       _bip
       _clearLCD
         _send_cfg
           _ena_pulse
       _cmpSignal
       _set_line
         _send_cfg
           _ena_pulse
       _write_LCD
         _send_msg
           _ena_pulse
     _readSignal
       _read_ADC
     _read_ADC
     _send_msg
       _ena_pulse
     _set_line
       _send_cfg
         _ena_pulse
     _write_LCD
       _send_msg
         _ena_pulse
   _init_ADC
   _init_INTRB2
   _init_LCD
     _send_cfg
       _ena_pulse

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     32      34       1       55.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      34      20        0.0%
DATA                 0      0      34       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Sat Jul  1 17:29:05 2017

            __CFG_BOR$ON 000000              __CFG_BORV$3 000000             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
                    l201 0EAE                      l161 11FE                      l242 0D0C  
                    l172 0F3C                      l269 1034             __CFG_CPB$OFF 000000  
                    u530 0E12             __CFG_CPD$OFF 000000                      u460 0EF0  
                    _ISR 0008                      u570 0E6C                      u474 0F00  
                    u475 0EFC                      u548 0E14                      u807 0BF6  
                    u817 0F16                      u827 1176                      u588 0E6E  
                    u837 118A                      u847 11D4                      u857 1138  
                    u867 114A                      u787 0AE2                      u877 115C  
                    u797 0B4A                      u887 0E2C                      u897 0E86  
                    _bip 0DEE         ??_cadastrarSenha 0025                      wreg 000FE8  
           __CFG_FOSC$HS 000000             __CFG_LVP$OFF 000000                     ?_ISR 0001  
           __CFG_WDT$OFF 000000                     l1402 0E62                     l1340 1110  
                   l1420 0C4C                     l1406 0E98                     l1422 0C62  
                   l1336 10F0                     l1360 0EE0                     l1432 0CBA  
                   l1440 0CFA                     l1504 0A94                     l1346 11EE  
                   ?_bip 000F                     l1380 10DC                     l1364 0F10  
                   l1356 0EC8                     l1436 0CDE                     l1428 0C9C  
                   l1470 0DE4                     l1358 0ED6                     l1438 0CF6  
                   l1606 09FC                     l1392 0E08                     l1368 0F24  
                   l1458 0D8C                     l1570 08C8                     l1634 1068  
                   l1396 0E3C                     l1484 101A                     l1572 08DE  
                   l1398 0E52                     l1582 0936                     l1590 0976  
                   l1566 08C0                     l1592 0986                     l1586 095A  
                   l1578 0918                     l1588 0972          ?_confirmarSenha 0018  
                   STR_1 0801                     STR_2 0801                     STR_3 086F  
                   STR_4 0837                     STR_5 0859                     STR_6 080F  
                   STR_7 0859                     STR_8 0813                     STR_9 0859  
                   _BRGH 007D62                     _CREN 007D5C                     _RCIF 007CF5  
                   i2l22 0F9A                     _SPEN 007D5F                     _TRMT 007D61  
                   _TXEN 007D65                     _SYNC 007D64                     bip@j 0015  
                   _main 1040                     fsr0h 000FEA                     fsr1h 000FE2  
                   fsr2h 000FDA                     fsr0l 000FE9                     indf2 000FDF  
                   fsr1l 000FE1                     fsr2l 000FD9                     btemp 0035  
                   prodh 000FF4                     prodl 000FF3                     start 000E  
          __CFG_IESO$OFF 000000             ?_init_INTRB2 0001            __CFG_MCLRE$ON 000000  
           ___param_bank 000000                    ??_ISR 0001                    ??_bip 0013  
          __CFG_PLLDIV$1 000000           __CFG_CCP2MX$ON 000000                    ?_main 0001  
                  _ADRES 000FC3                    STR_10 080F                    STR_11 081D  
                  STR_12 0869                    STR_13 082A                    STR_14 0869  
                  STR_15 084E                    STR_16 0869                    STR_17 0863  
                  STR_18 0843                    _RCREG 000FAE                    _TMR0H 000FD7  
                  _TMR0L 000FD6                    _SPBRG 000FAF                    _PORTD 000F83  
          __CFG_USBDIV$1 000000                    _TRISB 000F93                    _TRISD 000F95  
                  _TRISE 000F96                    _TXREG 000FAD            __CFG_PWRT$OFF 000000  
          __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000  
          __CFG_WRT3$OFF 000000          __end_of_cmpPass 0DEE           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000  
         __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000  
          __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000                    pclath 000FFA  
                  tablat 000FF5                    status 000FD8           __CFG_ICPRT$OFF 000000  
        __initialization 1214             __end_of_main 109A                   ??_main 002F  
          __activetblptr 000001                   _ADCON0 000FC2                   _ADCON1 000FC1  
                 _ADCON2 000FC0         ??_destravarPorta 0023                   _TRISC6 007CA6  
                 _TRISC7 007CA7         __end_of_clearLCD 1254           __CFG_XINST$OFF 000000  
         __CFG_STVREN$ON 000000         __end_of_init_ADC 123C              readSignal@i 001B  
            readSignal@j 001D         __end_of_lerToque 0D0E         __end_of_init_LCD 11C2  
       __end_of_read_ADC 1214                   _button 0033                ??_cmpPass 001C  
       __end_of_send_cfg 11E0         __end_of_send_msg 1198         __end_of_set_line 11FC  
           __mediumconst 0000                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8               __accesstop 0060  __end_of__initialization 1218  
        __CFG_PBADEN$OFF 000000            ___rparam_used 000001           __pcstackCOMRAM 0001  
   __size_of_init_INTRB2 0010       __size_of_cmpSignal 004C         ??_confirmarSenha 001A  
     __size_of_ena_pulse 0038          destravarPorta@i 0023                ?_clearLCD 0001  
            send_cfg@cmd 0011                ?_init_ADC 0001                ?_lerToque 001F  
              ?_init_LCD 0001          __CFG_VREGEN$OFF 000000                ?_read_ADC 000F  
            send_msg@msg 0011       __size_of_write_LCD 004A        __end_of_cmpSignal 10E6  
              ?_send_cfg 0001                  __Hparam 0000                ?_send_msg 0001  
      __end_of_ena_pulse 1168                  __Lparam 0000                ?_set_line 0012  
             _readSignal 0EB0             __psmallconst 0800                  __pcinit 1214  
                __ramtop 0800                  _cmpPass 0D0E                  __ptext0 1040  
                __ptext1 1198                  __ptext2 123C                  __ptext3 122A  
                __ptext4 0876                  __ptext5 0A56                  __ptext6 0C04  
                __ptext7 0EB0                  __ptext8 11FC                  __ptext9 0FD6  
              _T0CONbits 000FD5       cadastrarSenha@pass 0023             __size_of_ISR 0FCE  
                bip@time 0011             __size_of_bip 00C2               ??_clearLCD 0012  
     destravarPorta@pass 001F              set_line@pos 0014                  main@toc 002F  
         __pintcode_body 0F52     end_of_initialization 1218               ??_init_ADC 000F  
             ??_lerToque 0021               ??_init_LCD 0012               ??_read_ADC 0011  
__size_of_cadastrarSenha 01AE                  int_func 0F52               ??_send_cfg 0010  
             ??_send_msg 0010               ??_set_line 0016           set_line@cursor 0016  
                postinc1 000FE6                  postinc2 000FDE                _PORTBbits 000F81  
              _PORTCbits 000F82                _PORTEbits 000F84        __end_of_write_LCD 1130  
              _TRISAbits 000F92                _TRISBbits 000F93                _TRISCbits 000F94  
            ?_readSignal 0013      start_initialization 1214              __end_of_ISR 0FD6  
            __end_of_bip 0EB0            ??_init_INTRB2 000F  __size_of_destravarPorta 01E0  
          lerToque@toque 001F         __CFG_LPT1OSC$OFF 000000              __pbssCOMRAM 0033  
      __size_of_clearLCD 0008            read_ADC@value 0011      __size_of_readSignal 00A2  
         _cadastrarSenha 0A56        __size_of_init_ADC 0012        __size_of_lerToque 010A  
      __size_of_init_LCD 002A        __size_of_read_ADC 0018                __pintcode 0008  
              _cmpSignal 109A        __size_of_send_cfg 001E        __size_of_send_msg 0030  
      __size_of_set_line 001C                _ena_pulse 1130          cadastrarSenha@i 0027  
        cadastrarSenha@j 0029      __end_of_init_INTRB2 124C                 ?_cmpPass 0018  
            __smallconst 0800         readSignal@limite 0019                bip@rounds 000F  
       readSignal@signal 0013   __end_of_cadastrarSenha 0C04  __size_of_confirmarSenha 006A  
       __CFG_WDTPS$32768 000000               ?_cmpSignal 000F               ?_ena_pulse 0001  
          cmpSignal@pass 000F               _ADCON0bits 000FC2                _write_LCD 10E6  
            _INTCON2bits 000FF1              _INTCON3bits 000FF0          ?_cadastrarSenha 0023  
              lerToque@i 0021              _init_INTRB2 123C                 __Hrparam 0000  
               __Lrparam 0000             __Lsmallconst 0800           _destravarPorta 0876  
           ??_readSignal 0017         __size_of_cmpPass 00E0                 _clearLCD 124C  
           cmpPass@toque 001A               ?_write_LCD 0012                 __ptext10 0D0E  
               __ptext11 10E6                 __ptext12 1168                 __ptext13 11E0  
               __ptext14 109A                 __ptext15 124C                 __ptext16 11C2  
               __ptext17 1130                 __ptext18 0DEE            readSignal@pos 0015  
    cadastrarSenha@temp1 002D      cadastrarSenha@temp2 002B                 _init_ADC 122A  
               _lerToque 0C04                 _init_LCD 1198                 _read_ADC 11FC  
     __end_of_readSignal 0F52            __size_of_main 005A                 _send_cfg 11C2  
               _send_msg 1168      destravarPorta@toque 0021                 cmpPass@i 001C  
 __end_of_destravarPorta 0A56               write_LCD@c 0012               write_LCD@i 0016  
               _set_line 11E0             set_line@line 0012              ??_cmpSignal 0013  
               int$flags 0035             cmpSignal@toc 0011              ??_ena_pulse 000F  
               main@pass 0031    __CFG_CPUDIV$OSC1_PLL2 000000               _INTCONbits 000FF2  
               intlevel2 0000              cmpPass@pass 0018           _confirmarSenha 0FD6  
        ?_destravarPorta 001F              ??_write_LCD 0014   __end_of_confirmarSenha 1040  
