

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Sat Jul  1 03:07:43 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    27                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    28                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    29                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    30                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    31  0000                     
    32                           ; Version 1.41
    33                           ; Generated 25/01/2017 GMT
    34                           ; 
    35                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    36                           ; All rights reserved.
    37                           ; 
    38                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    39                           ; 
    40                           ; Redistribution and use in source and binary forms, with or without modification, are
    41                           ; permitted provided that the following conditions are met:
    42                           ; 
    43                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    44                           ;        conditions and the following disclaimer.
    45                           ; 
    46                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    47                           ;        of conditions and the following disclaimer in the documentation and/or other
    48                           ;        materials provided with the distribution.
    49                           ; 
    50                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    51                           ;        software without specific prior written permission.
    52                           ; 
    53                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    54                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    55                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    56                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    57                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    58                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    59                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    60                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    61                           ; 
    62                           ; 
    63                           ; Code-generator required, PIC18F4550 Definitions
    64                           ; 
    65                           ; SFR Addresses
    66  0000                     _ADRES	set	4035
    67  0000                     _PORTCbits	set	3970
    68  0000                     _TRISCbits	set	3988
    69  0000                     _ADCON0bits	set	4034
    70  0000                     _ADCON2	set	4032
    71  0000                     _ADCON1	set	4033
    72  0000                     _ADCON0	set	4034
    73  0000                     _TRISAbits	set	3986
    74  0000                     _RCREG	set	4014
    75  0000                     _TXREG	set	4013
    76  0000                     _SPBRG	set	4015
    77  0000                     _TRISE	set	3990
    78  0000                     _TRISB	set	3987
    79  0000                     _PORTBbits	set	3969
    80  0000                     _PORTD	set	3971
    81  0000                     _PORTEbits	set	3972
    82  0000                     _TMR0L	set	4054
    83  0000                     _TMR0H	set	4055
    84  0000                     _T0CONbits	set	4053
    85  0000                     _TRISD	set	3989
    86  0000                     _INTCON2bits	set	4081
    87  0000                     _TRISBbits	set	3987
    88  0000                     _INTCONbits	set	4082
    89  0000                     _INTCON3bits	set	4080
    90  0000                     _RCIF	set	31989
    91  0000                     _TRMT	set	32097
    92  0000                     _TXEN	set	32101
    93  0000                     _CREN	set	32092
    94  0000                     _TRISC6	set	31910
    95  0000                     _TRISC7	set	31911
    96  0000                     _SPEN	set	32095
    97  0000                     _SYNC	set	32100
    98  0000                     _BRGH	set	32098
    99                           
   100                           	psect	smallconst
   101  000800                     __psmallconst:
   102                           	opt stack 0
   103  000800  00                 	db	0
   104  000801                     STR_5:
   105  000801  42                 	db	66	;'B'
   106  000802  61                 	db	97	;'a'
   107  000803  74                 	db	116	;'t'
   108  000804  61                 	db	97	;'a'
   109  000805  20                 	db	32
   110  000806  6E                 	db	110	;'n'
   111  000807  61                 	db	97	;'a'
   112  000808  20                 	db	32
   113  000809  70                 	db	112	;'p'
   114  00080A  6F                 	db	111	;'o'
   115  00080B  72                 	db	114	;'r'
   116  00080C  74                 	db	116	;'t'
   117  00080D  61                 	db	97	;'a'
   118  00080E  00                 	db	0
   119  00080F                     STR_9:
   120  00080F  6E                 	db	110	;'n'
   121  000810  61                 	db	97	;'a'
   122  000811  6F                 	db	111	;'o'
   123  000812  20                 	db	32
   124  000813  63                 	db	99	;'c'
   125  000814  6F                 	db	111	;'o'
   126  000815  69                 	db	105	;'i'
   127  000816  6E                 	db	110	;'n'
   128  000817  63                 	db	99	;'c'
   129  000818  69                 	db	105	;'i'
   130  000819  64                 	db	100	;'d'
   131  00081A  65                 	db	101	;'e'
   132  00081B  6D                 	db	109	;'m'
   133  00081C  00                 	db	0
   134  00081D                     STR_1:
   135  00081D  43                 	db	67	;'C'
   136  00081E  61                 	db	97	;'a'
   137  00081F  64                 	db	100	;'d'
   138  000820  61                 	db	97	;'a'
   139  000821  73                 	db	115	;'s'
   140  000822  74                 	db	116	;'t'
   141  000823  72                 	db	114	;'r'
   142  000824  65                 	db	101	;'e'
   143  000825  20                 	db	32
   144  000826  73                 	db	115	;'s'
   145  000827  75                 	db	117	;'u'
   146  000828  61                 	db	97	;'a'
   147  000829  00                 	db	0
   148  00082A                     STR_4:
   149  00082A  46                 	db	70	;'F'
   150  00082B  69                 	db	105	;'i'
   151  00082C  6E                 	db	110	;'n'
   152  00082D  61                 	db	97	;'a'
   153  00082E  6C                 	db	108	;'l'
   154  00082F  69                 	db	105	;'i'
   155  000830  7A                 	db	122	;'z'
   156  000831  61                 	db	97	;'a'
   157  000832  64                 	db	100	;'d'
   158  000833  61                 	db	97	;'a'
   159  000834  00                 	db	0
   160  000835                     STR_6:
   161  000835  41                 	db	65	;'A'
   162  000836  73                 	db	115	;'s'
   163  000837  20                 	db	32
   164  000838  73                 	db	115	;'s'
   165  000839  65                 	db	101	;'e'
   166  00083A  6E                 	db	110	;'n'
   167  00083B  68                 	db	104	;'h'
   168  00083C  61                 	db	97	;'a'
   169  00083D  73                 	db	115	;'s'
   170  00083E  00                 	db	0
   171  00083F                     STR_3:
   172  00083F  4C                 	db	76	;'L'
   173  000840  65                 	db	101	;'e'
   174  000841  69                 	db	105	;'i'
   175  000842  74                 	db	116	;'t'
   176  000843  75                 	db	117	;'u'
   177  000844  72                 	db	114	;'r'
   178  000845  61                 	db	97	;'a'
   179  000846  00                 	db	0
   180  000847                     STR_2:
   181  000847  73                 	db	115	;'s'
   182  000848  65                 	db	101	;'e'
   183  000849  6E                 	db	110	;'n'
   184  00084A  68                 	db	104	;'h'
   185  00084B  61                 	db	97	;'a'
   186  00084C  00                 	db	0
   187  0000                     
   188                           ; #config settings
   189  00084D  00                 	db	0	; dummy byte at the end
   190  0000                     
   191                           	psect	cinit
   192  000F52                     __pcinit:
   193                           	opt stack 0
   194  000F52                     start_initialization:
   195                           	opt stack 0
   196  000F52                     __initialization:
   197                           	opt stack 0
   198                           
   199                           ; Clear objects allocated to COMRAM (2 bytes)
   200  000F52  6A2A               	clrf	(__pbssCOMRAM+1)& (0+255),c
   201  000F54  6A29               	clrf	__pbssCOMRAM& (0+255),c
   202  000F56                     end_of_initialization:
   203                           	opt stack 0
   204  000F56                     __end_of__initialization:
   205                           	opt stack 0
   206  000F56  902B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   207  000F58  922B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   208  000F5A  0E00               	movlw	low (__Lsmallconst shr (0+16))
   209  000F5C  6EF8               	movwf	tblptru,c
   210  000F5E  0E08               	movlw	high __Lsmallconst
   211  000F60  6EF7               	movwf	tblptrh,c
   212  000F62  0100               	movlb	0
   213  000F64  EFB9  F006         	goto	_main	;jump to C main() function
   214                           tblptru	equ	0xFF8
   215                           tblptrh	equ	0xFF7
   216                           
   217                           	psect	bssCOMRAM
   218  000029                     __pbssCOMRAM:
   219                           	opt stack 0
   220  000029                     _button:
   221                           	opt stack 0
   222  000029                     	ds	2
   223                           tblptru	equ	0xFF8
   224                           tblptrh	equ	0xFF7
   225                           
   226                           	psect	cstackCOMRAM
   227  000001                     __pcstackCOMRAM:
   228                           	opt stack 0
   229  000001                     ??_ISR:
   230  000001                     
   231                           ; 1 bytes @ 0x0
   232  000001                     	ds	14
   233  00000F                     ??_ena_pulse:
   234  00000F                     ?_read_ADC:
   235                           	opt stack 0
   236  00000F                     ?_cmpSignal:
   237                           	opt stack 0
   238  00000F                     cmpSignal@pass:
   239                           	opt stack 0
   240  00000F                     bip@rounds:
   241                           	opt stack 0
   242                           
   243                           ; 2 bytes @ 0xE
   244  00000F                     	ds	1
   245  000010                     ??_send_cfg:
   246  000010                     ??_send_msg:
   247                           
   248                           ; 1 bytes @ 0xF
   249  000010                     	ds	1
   250  000011                     send_cfg@cmd:
   251                           	opt stack 0
   252  000011                     send_msg@msg:
   253                           	opt stack 0
   254  000011                     read_ADC@value:
   255                           	opt stack 0
   256  000011                     cmpSignal@toc:
   257                           	opt stack 0
   258  000011                     bip@time:
   259                           	opt stack 0
   260                           
   261                           ; 2 bytes @ 0x10
   262  000011                     	ds	1
   263  000012                     write_LCD@c:
   264                           	opt stack 0
   265  000012                     set_line@line:
   266                           	opt stack 0
   267                           
   268                           ; 2 bytes @ 0x11
   269  000012                     	ds	1
   270  000013                     ??_bip:
   271  000013                     readSignal@signal:
   272                           	opt stack 0
   273                           
   274                           ; 2 bytes @ 0x12
   275  000013                     	ds	1
   276  000014                     ??_write_LCD:
   277  000014                     set_line@pos:
   278                           	opt stack 0
   279                           
   280                           ; 2 bytes @ 0x13
   281  000014                     	ds	1
   282  000015                     readSignal@pos:
   283                           	opt stack 0
   284  000015                     bip@j:
   285                           	opt stack 0
   286                           
   287                           ; 2 bytes @ 0x14
   288  000015                     	ds	1
   289  000016                     set_line@cursor:
   290                           	opt stack 0
   291  000016                     write_LCD@i:
   292                           	opt stack 0
   293                           
   294                           ; 2 bytes @ 0x15
   295  000016                     	ds	1
   296  000017                     ??_readSignal:
   297                           
   298                           ; 1 bytes @ 0x16
   299  000017                     	ds	1
   300  000018                     cmpPass@pass:
   301                           	opt stack 0
   302                           
   303                           ; 2 bytes @ 0x17
   304  000018                     	ds	1
   305  000019                     readSignal@limite:
   306                           	opt stack 0
   307                           
   308                           ; 2 bytes @ 0x18
   309  000019                     	ds	1
   310  00001A                     cmpPass@toque:
   311                           	opt stack 0
   312                           
   313                           ; 2 bytes @ 0x19
   314  00001A                     	ds	1
   315  00001B                     readSignal@i:
   316                           	opt stack 0
   317                           
   318                           ; 2 bytes @ 0x1A
   319  00001B                     	ds	1
   320  00001C                     cmpPass@i:
   321                           	opt stack 0
   322                           
   323                           ; 2 bytes @ 0x1B
   324  00001C                     	ds	1
   325  00001D                     readSignal@j:
   326                           	opt stack 0
   327                           
   328                           ; 2 bytes @ 0x1C
   329  00001D                     	ds	2
   330  00001F                     cadastrarSenha@pass:
   331                           	opt stack 0
   332  00001F                     lerToque@toque:
   333                           	opt stack 0
   334                           
   335                           ; 2 bytes @ 0x1E
   336  00001F                     	ds	2
   337  000021                     ??_cadastrarSenha:
   338  000021                     lerToque@i:
   339                           	opt stack 0
   340                           
   341                           ; 2 bytes @ 0x20
   342  000021                     	ds	2
   343  000023                     cadastrarSenha@i:
   344                           	opt stack 0
   345                           
   346                           ; 2 bytes @ 0x22
   347  000023                     	ds	2
   348  000025                     main@toc:
   349                           	opt stack 0
   350                           
   351                           ; 2 bytes @ 0x24
   352  000025                     	ds	2
   353  000027                     main@pass:
   354                           	opt stack 0
   355                           
   356                           ; 2 bytes @ 0x26
   357  000027                     	ds	2
   358                           tblptru	equ	0xFF8
   359                           tblptrh	equ	0xFF7
   360                           
   361 ;;
   362 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   363 ;;
   364 ;; *************** function _main *****************
   365 ;; Defined at:
   366 ;;		line 20 in file "main.c"
   367 ;; Parameters:    Size  Location     Type
   368 ;;		None
   369 ;; Auto vars:     Size  Location     Type
   370 ;;  pass            2   38[COMRAM] unsigned char [2]
   371 ;;  toc             2   36[COMRAM] unsigned char [2]
   372 ;; Return value:  Size  Location     Type
   373 ;;                  1    wreg      void 
   374 ;; Registers used:
   375 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   376 ;; Tracked objects:
   377 ;;		On entry : 0/0
   378 ;;		On exit  : 0/0
   379 ;;		Unchanged: 0/0
   380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   381 ;;      Params:         0       0       0       0       0       0       0       0       0
   382 ;;      Locals:         4       0       0       0       0       0       0       0       0
   383 ;;      Temps:          0       0       0       0       0       0       0       0       0
   384 ;;      Totals:         4       0       0       0       0       0       0       0       0
   385 ;;Total ram usage:        4 bytes
   386 ;; Hardware stack levels required when called:    5
   387 ;; This function calls:
   388 ;;		_cadastrarSenha
   389 ;;		_cmpPass
   390 ;;		_init_ADC
   391 ;;		_init_INTRB2
   392 ;;		_init_LCD
   393 ;;		_lerToque
   394 ;; This function is called by:
   395 ;;		Startup code after reset
   396 ;; This function uses a non-reentrant model
   397 ;;
   398                           
   399                           	psect	text0
   400  000D72                     __ptext0:
   401                           	opt stack 0
   402  000D72                     _main:
   403                           	opt stack 26
   404                           
   405                           ;main.c: 22: init_INTRB2();
   406                           
   407                           ;incstack = 0
   408  000D72  ECBD  F007         	call	_init_INTRB2	;wreg free
   409                           
   410                           ;main.c: 23: init_LCD();
   411  000D76  EC6B  F007         	call	_init_LCD	;wreg free
   412                           
   413                           ;main.c: 24: init_ADC();
   414  000D7A  ECB4  F007         	call	_init_ADC	;wreg free
   415                           
   416                           ;main.c: 26: char pass[2];
   417                           ;main.c: 27: pass[0] = 0x00;
   418  000D7E  0E00               	movlw	0
   419  000D80  6E27               	movwf	main@pass,c
   420                           
   421                           ;main.c: 28: pass[1] = 0x00;
   422  000D82  0E00               	movlw	0
   423  000D84  6E28               	movwf	main@pass+1,c
   424                           
   425                           ;main.c: 29: char toc[2];
   426                           ;main.c: 30: toc[0] = 0x00;
   427  000D86  0E00               	movlw	0
   428  000D88  6E25               	movwf	main@toc,c
   429                           
   430                           ;main.c: 31: toc[1] = 0x00;
   431  000D8A  0E00               	movlw	0
   432  000D8C  6E26               	movwf	main@toc+1,c
   433                           
   434                           ;main.c: 33: cadastrarSenha(pass);
   435  000D8E  0E27               	movlw	low main@pass
   436  000D90  6E1F               	movwf	cadastrarSenha@pass,c
   437  000D92  0E00               	movlw	high main@pass
   438  000D94  6E20               	movwf	cadastrarSenha@pass+1,c
   439  000D96  EC27  F004         	call	_cadastrarSenha	;wreg free
   440  000D9A                     l1398:
   441                           
   442                           ;main.c: 37: lerToque(toc);
   443  000D9A  0E25               	movlw	low main@toc
   444  000D9C  6E1F               	movwf	lerToque@toque,c
   445  000D9E  0E00               	movlw	high main@toc
   446  000DA0  6E20               	movwf	lerToque@toque+1,c
   447  000DA2  ECDE  F004         	call	_lerToque	;wreg free
   448                           
   449                           ;main.c: 38: cmpPass(pass, toc);
   450  000DA6  0E27               	movlw	low main@pass
   451  000DA8  6E18               	movwf	cmpPass@pass,c
   452  000DAA  0E00               	movlw	high main@pass
   453  000DAC  6E19               	movwf	cmpPass@pass+1,c
   454  000DAE  0E25               	movlw	low main@toc
   455  000DB0  6E1A               	movwf	cmpPass@toque,c
   456  000DB2  0E00               	movlw	high main@toc
   457  000DB4  6E1B               	movwf	cmpPass@toque+1,c
   458  000DB6  EC59  F005         	call	_cmpPass	;wreg free
   459                           
   460                           ;main.c: 40: if(button == 1){
   461  000DBA  0429               	decf	_button,w,c
   462  000DBC  102A               	iorwf	_button+1,w,c
   463  000DBE  A4D8               	btfss	status,2,c
   464  000DC0  D7EC               	goto	l1398
   465                           
   466                           ;main.c: 41: cadastrarSenha(pass);
   467  000DC2  0E27               	movlw	low main@pass
   468  000DC4  6E1F               	movwf	cadastrarSenha@pass,c
   469  000DC6  0E00               	movlw	high main@pass
   470  000DC8  6E20               	movwf	cadastrarSenha@pass+1,c
   471  000DCA  EC27  F004         	call	_cadastrarSenha	;wreg free
   472                           
   473                           ;main.c: 42: button = 0;
   474  000DCE  0E00               	movlw	0
   475  000DD0  6E2A               	movwf	_button+1,c
   476  000DD2  0E00               	movlw	0
   477  000DD4  6E29               	movwf	_button,c
   478                           
   479                           ;main.c: 43: }
   480                           ;main.c: 45: }while(1);
   481  000DD6  D7E1               	goto	l1398
   482  000DD8                     __end_of_main:
   483                           	opt stack 0
   484                           tblptru	equ	0xFF8
   485                           tblptrh	equ	0xFF7
   486                           status	equ	0xFD8
   487                           
   488 ;; *************** function _lerToque *****************
   489 ;; Defined at:
   490 ;;		line 55 in file "TOCTOC.c"
   491 ;; Parameters:    Size  Location     Type
   492 ;;  toque           2   30[COMRAM] PTR unsigned char 
   493 ;;		 -> main@toc(2), 
   494 ;; Auto vars:     Size  Location     Type
   495 ;;  i               2   32[COMRAM] int 
   496 ;; Return value:  Size  Location     Type
   497 ;;                  1    wreg      void 
   498 ;; Registers used:
   499 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   500 ;; Tracked objects:
   501 ;;		On entry : 0/0
   502 ;;		On exit  : 0/0
   503 ;;		Unchanged: 0/0
   504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   505 ;;      Params:         2       0       0       0       0       0       0       0       0
   506 ;;      Locals:         2       0       0       0       0       0       0       0       0
   507 ;;      Temps:          0       0       0       0       0       0       0       0       0
   508 ;;      Totals:         4       0       0       0       0       0       0       0       0
   509 ;;Total ram usage:        4 bytes
   510 ;; Hardware stack levels used:    1
   511 ;; Hardware stack levels required when called:    4
   512 ;; This function calls:
   513 ;;		_clearLCD
   514 ;;		_readSignal
   515 ;;		_send_msg
   516 ;;		_set_line
   517 ;;		_write_LCD
   518 ;; This function is called by:
   519 ;;		_main
   520 ;; This function uses a non-reentrant model
   521 ;;
   522                           
   523                           	psect	text1
   524  0009BC                     __ptext1:
   525                           	opt stack 0
   526  0009BC                     _lerToque:
   527                           	opt stack 26
   528                           
   529                           ;TOCTOC.c: 57: int i = 0;
   530                           
   531                           ;incstack = 0
   532  0009BC  0E00               	movlw	0
   533  0009BE  6E22               	movwf	lerToque@i+1,c
   534  0009C0  0E00               	movlw	0
   535  0009C2  6E21               	movwf	lerToque@i,c
   536                           
   537                           ;TOCTOC.c: 59: toque[0] = 0x00;
   538  0009C4  C01F  FFD9         	movff	lerToque@toque,fsr2l
   539  0009C8  C020  FFDA         	movff	lerToque@toque+1,fsr2h
   540  0009CC  0E00               	movlw	0
   541  0009CE  6EDF               	movwf	indf2,c
   542                           
   543                           ;TOCTOC.c: 60: toque[1] = 0x00;
   544  0009D0  EE20 F001          	lfsr	2,1
   545  0009D4  501F               	movf	lerToque@toque,w,c
   546  0009D6  26D9               	addwf	fsr2l,f,c
   547  0009D8  5020               	movf	lerToque@toque+1,w,c
   548  0009DA  22DA               	addwfc	fsr2h,f,c
   549  0009DC  0E00               	movlw	0
   550  0009DE  6EDF               	movwf	indf2,c
   551                           
   552                           ;TOCTOC.c: 62: clearLCD();
   553  0009E0  ECC5  F007         	call	_clearLCD	;wreg free
   554                           
   555                           ;TOCTOC.c: 63: set_line(0,0);
   556  0009E4  0E00               	movlw	0
   557  0009E6  6E13               	movwf	set_line@line+1,c
   558  0009E8  0E00               	movlw	0
   559  0009EA  6E12               	movwf	set_line@line,c
   560  0009EC  0E00               	movlw	0
   561  0009EE  6E15               	movwf	set_line@pos+1,c
   562  0009F0  0E00               	movlw	0
   563  0009F2  6E14               	movwf	set_line@pos,c
   564  0009F4  EC8F  F007         	call	_set_line	;wreg free
   565                           
   566                           ;TOCTOC.c: 64: write_LCD("Bata na porta");
   567  0009F8  0E01               	movlw	low STR_5
   568  0009FA  6E12               	movwf	write_LCD@c,c
   569  0009FC  0E08               	movlw	high STR_5
   570  0009FE  6E13               	movwf	write_LCD@c+1,c
   571  000A00  EC12  F007         	call	_write_LCD	;wreg free
   572                           
   573                           ;TOCTOC.c: 66: while(i < 4){
   574  000A04  D04C               	goto	l1352
   575  000A06                     l1334:
   576                           
   577                           ;TOCTOC.c: 67: set_line(1,0);
   578  000A06  0E00               	movlw	0
   579  000A08  6E13               	movwf	set_line@line+1,c
   580  000A0A  0E01               	movlw	1
   581  000A0C  6E12               	movwf	set_line@line,c
   582  000A0E  0E00               	movlw	0
   583  000A10  6E15               	movwf	set_line@pos+1,c
   584  000A12  0E00               	movlw	0
   585  000A14  6E14               	movwf	set_line@pos,c
   586  000A16  EC8F  F007         	call	_set_line	;wreg free
   587                           
   588                           ;TOCTOC.c: 68: send_msg('1'+ i);
   589  000A1A  5021               	movf	lerToque@i,w,c
   590  000A1C  0F31               	addlw	49
   591  000A1E  EC53  F007         	call	_send_msg
   592                           
   593                           ;TOCTOC.c: 69: if(i == 0)
   594  000A22  5021               	movf	lerToque@i,w,c
   595  000A24  1022               	iorwf	lerToque@i+1,w,c
   596  000A26  A4D8               	btfss	status,2,c
   597  000A28  D00B               	goto	l1340
   598                           
   599                           ;TOCTOC.c: 70: readSignal(&toque[0], 0);
   600  000A2A  C01F  F013         	movff	lerToque@toque,readSignal@signal
   601  000A2E  C020  F014         	movff	lerToque@toque+1,readSignal@signal+1
   602  000A32  0E00               	movlw	0
   603  000A34  6E16               	movwf	readSignal@pos+1,c
   604  000A36  0E00               	movlw	0
   605  000A38  6E15               	movwf	readSignal@pos,c
   606  000A3A  EC26  F006         	call	_readSignal	;wreg free
   607  000A3E  D02D               	goto	l1350
   608  000A40                     l1340:
   609                           
   610                           ;TOCTOC.c: 71: else if(i == 1)
   611  000A40  0421               	decf	lerToque@i,w,c
   612  000A42  1022               	iorwf	lerToque@i+1,w,c
   613  000A44  A4D8               	btfss	status,2,c
   614  000A46  D00B               	goto	l1344
   615                           
   616                           ;TOCTOC.c: 72: readSignal(&toque[0], 1);
   617  000A48  C01F  F013         	movff	lerToque@toque,readSignal@signal
   618  000A4C  C020  F014         	movff	lerToque@toque+1,readSignal@signal+1
   619  000A50  0E00               	movlw	0
   620  000A52  6E16               	movwf	readSignal@pos+1,c
   621  000A54  0E01               	movlw	1
   622  000A56  6E15               	movwf	readSignal@pos,c
   623  000A58  EC26  F006         	call	_readSignal	;wreg free
   624  000A5C  D01E               	goto	l1350
   625  000A5E                     l1344:
   626                           
   627                           ;TOCTOC.c: 73: else if(i == 2)
   628  000A5E  0E02               	movlw	2
   629  000A60  1821               	xorwf	lerToque@i,w,c
   630  000A62  1022               	iorwf	lerToque@i+1,w,c
   631  000A64  A4D8               	btfss	status,2,c
   632  000A66  D00D               	goto	l1348
   633                           
   634                           ;TOCTOC.c: 74: readSignal(&toque[1], 0);
   635  000A68  0E01               	movlw	1
   636  000A6A  241F               	addwf	lerToque@toque,w,c
   637  000A6C  6E13               	movwf	readSignal@signal,c
   638  000A6E  0E00               	movlw	0
   639  000A70  2020               	addwfc	lerToque@toque+1,w,c
   640  000A72  6E14               	movwf	readSignal@signal+1,c
   641  000A74  0E00               	movlw	0
   642  000A76  6E16               	movwf	readSignal@pos+1,c
   643  000A78  0E00               	movlw	0
   644  000A7A  6E15               	movwf	readSignal@pos,c
   645  000A7C  EC26  F006         	call	_readSignal	;wreg free
   646  000A80  D00C               	goto	l1350
   647  000A82                     l1348:
   648                           
   649                           ;TOCTOC.c: 75: else
   650                           ;TOCTOC.c: 76: readSignal(&toque[1], 1);
   651  000A82  0E01               	movlw	1
   652  000A84  241F               	addwf	lerToque@toque,w,c
   653  000A86  6E13               	movwf	readSignal@signal,c
   654  000A88  0E00               	movlw	0
   655  000A8A  2020               	addwfc	lerToque@toque+1,w,c
   656  000A8C  6E14               	movwf	readSignal@signal+1,c
   657  000A8E  0E00               	movlw	0
   658  000A90  6E16               	movwf	readSignal@pos+1,c
   659  000A92  0E01               	movlw	1
   660  000A94  6E15               	movwf	readSignal@pos,c
   661  000A96  EC26  F006         	call	_readSignal	;wreg free
   662  000A9A                     l1350:
   663                           
   664                           ;TOCTOC.c: 77: i++;
   665  000A9A  4A21               	infsnz	lerToque@i,f,c
   666  000A9C  2A22               	incf	lerToque@i+1,f,c
   667  000A9E                     l1352:
   668  000A9E  BE22               	btfsc	lerToque@i+1,7,c
   669  000AA0  D7B2               	goto	l1334
   670  000AA2  5022               	movf	lerToque@i+1,w,c
   671  000AA4  E105               	bnz	l243
   672  000AA6  0E04               	movlw	4
   673  000AA8  5C21               	subwf	lerToque@i,w,c
   674  000AAA  B0D8               	btfsc	status,0,c
   675  000AAC  0012               	return	
   676  000AAE  D7AB               	goto	l1334
   677  000AB0                     l243:
   678  000AB0  0012               	return		;funcret
   679  000AB2                     __end_of_lerToque:
   680                           	opt stack 0
   681                           tblptru	equ	0xFF8
   682                           tblptrh	equ	0xFF7
   683                           indf2	equ	0xFDF
   684                           fsr2h	equ	0xFDA
   685                           fsr2l	equ	0xFD9
   686                           status	equ	0xFD8
   687                           
   688 ;; *************** function _init_LCD *****************
   689 ;; Defined at:
   690 ;;		line 45 in file "LCD.c"
   691 ;; Parameters:    Size  Location     Type
   692 ;;		None
   693 ;; Auto vars:     Size  Location     Type
   694 ;;		None
   695 ;; Return value:  Size  Location     Type
   696 ;;                  1    wreg      void 
   697 ;; Registers used:
   698 ;;		wreg, status,2, cstack
   699 ;; Tracked objects:
   700 ;;		On entry : 0/0
   701 ;;		On exit  : 0/0
   702 ;;		Unchanged: 0/0
   703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   704 ;;      Params:         0       0       0       0       0       0       0       0       0
   705 ;;      Locals:         0       0       0       0       0       0       0       0       0
   706 ;;      Temps:          0       0       0       0       0       0       0       0       0
   707 ;;      Totals:         0       0       0       0       0       0       0       0       0
   708 ;;Total ram usage:        0 bytes
   709 ;; Hardware stack levels used:    1
   710 ;; Hardware stack levels required when called:    3
   711 ;; This function calls:
   712 ;;		_send_cfg
   713 ;; This function is called by:
   714 ;;		_main
   715 ;; This function uses a non-reentrant model
   716 ;;
   717                           
   718                           	psect	text2
   719  000ED6                     __ptext2:
   720                           	opt stack 0
   721  000ED6                     _init_LCD:
   722                           	opt stack 27
   723                           
   724                           ;LCD.c: 47: TRISB = 0x04;
   725                           
   726                           ;incstack = 0
   727  000ED6  0E04               	movlw	4
   728  000ED8  6E93               	movwf	3987,c	;volatile
   729                           
   730                           ;LCD.c: 48: TRISD = 0x00;
   731  000EDA  0E00               	movlw	0
   732  000EDC  6E95               	movwf	3989,c	;volatile
   733                           
   734                           ;LCD.c: 49: TRISE = 0x00;
   735  000EDE  0E00               	movlw	0
   736  000EE0  6E96               	movwf	3990,c	;volatile
   737                           
   738                           ;LCD.c: 50: PORTD = 0x00;
   739  000EE2  0E00               	movlw	0
   740  000EE4  6E83               	movwf	3971,c	;volatile
   741                           
   742                           ;LCD.c: 52: send_cfg(0x01);
   743  000EE6  0E01               	movlw	1
   744  000EE8  EC80  F007         	call	_send_cfg
   745                           
   746                           ;LCD.c: 53: send_cfg(0x38);
   747  000EEC  0E38               	movlw	56
   748  000EEE  EC80  F007         	call	_send_cfg
   749                           
   750                           ;LCD.c: 54: send_cfg(0x80);
   751  000EF2  0E80               	movlw	128
   752  000EF4  EC80  F007         	call	_send_cfg
   753                           
   754                           ;LCD.c: 55: send_cfg(0x0F);
   755  000EF8  0E0F               	movlw	15
   756  000EFA  EC80  F007         	call	_send_cfg
   757  000EFE  0012               	return		;funcret
   758  000F00                     __end_of_init_LCD:
   759                           	opt stack 0
   760                           tblptru	equ	0xFF8
   761                           tblptrh	equ	0xFF7
   762                           indf2	equ	0xFDF
   763                           fsr2h	equ	0xFDA
   764                           fsr2l	equ	0xFD9
   765                           status	equ	0xFD8
   766                           
   767 ;; *************** function _init_INTRB2 *****************
   768 ;; Defined at:
   769 ;;		line 40 in file "Interrupt.c"
   770 ;; Parameters:    Size  Location     Type
   771 ;;		None
   772 ;; Auto vars:     Size  Location     Type
   773 ;;		None
   774 ;; Return value:  Size  Location     Type
   775 ;;                  1    wreg      void 
   776 ;; Registers used:
   777 ;;		None
   778 ;; Tracked objects:
   779 ;;		On entry : 0/0
   780 ;;		On exit  : 0/0
   781 ;;		Unchanged: 0/0
   782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   783 ;;      Params:         0       0       0       0       0       0       0       0       0
   784 ;;      Locals:         0       0       0       0       0       0       0       0       0
   785 ;;      Temps:          0       0       0       0       0       0       0       0       0
   786 ;;      Totals:         0       0       0       0       0       0       0       0       0
   787 ;;Total ram usage:        0 bytes
   788 ;; Hardware stack levels used:    1
   789 ;; Hardware stack levels required when called:    1
   790 ;; This function calls:
   791 ;;		Nothing
   792 ;; This function is called by:
   793 ;;		_main
   794 ;; This function uses a non-reentrant model
   795 ;;
   796                           
   797                           	psect	text3
   798  000F7A                     __ptext3:
   799                           	opt stack 0
   800  000F7A                     _init_INTRB2:
   801                           	opt stack 29
   802                           
   803                           ;Interrupt.c: 42: INTCONbits.GIE = 0;
   804                           
   805                           ;incstack = 0
   806  000F7A  9EF2               	bcf	intcon,7,c	;volatile
   807                           
   808                           ;Interrupt.c: 43: INTCONbits.PEIE = 0;
   809  000F7C  9CF2               	bcf	intcon,6,c	;volatile
   810                           
   811                           ;Interrupt.c: 44: TRISBbits.RB2 = 1;
   812  000F7E  8493               	bsf	3987,2,c	;volatile
   813                           
   814                           ;Interrupt.c: 45: INTCON2bits.INTEDG0 = 1;
   815  000F80  8CF1               	bsf	intcon2,6,c	;volatile
   816                           
   817                           ;Interrupt.c: 46: INTCON3bits.INT2IF = 0;
   818  000F82  92F0               	bcf	intcon3,1,c	;volatile
   819                           
   820                           ;Interrupt.c: 47: INTCON3bits.INT2IE = 1;
   821  000F84  88F0               	bsf	intcon3,4,c	;volatile
   822                           
   823                           ;Interrupt.c: 48: INTCONbits.GIE = 1;
   824  000F86  8EF2               	bsf	intcon,7,c	;volatile
   825  000F88  0012               	return		;funcret
   826  000F8A                     __end_of_init_INTRB2:
   827                           	opt stack 0
   828                           tblptru	equ	0xFF8
   829                           tblptrh	equ	0xFF7
   830                           intcon	equ	0xFF2
   831                           intcon2	equ	0xFF1
   832                           intcon3	equ	0xFF0
   833                           indf2	equ	0xFDF
   834                           fsr2h	equ	0xFDA
   835                           fsr2l	equ	0xFD9
   836                           status	equ	0xFD8
   837                           
   838 ;; *************** function _init_ADC *****************
   839 ;; Defined at:
   840 ;;		line 11 in file "ADC.c"
   841 ;; Parameters:    Size  Location     Type
   842 ;;		None
   843 ;; Auto vars:     Size  Location     Type
   844 ;;		None
   845 ;; Return value:  Size  Location     Type
   846 ;;                  1    wreg      void 
   847 ;; Registers used:
   848 ;;		wreg, status,2
   849 ;; Tracked objects:
   850 ;;		On entry : 0/0
   851 ;;		On exit  : 0/0
   852 ;;		Unchanged: 0/0
   853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   854 ;;      Params:         0       0       0       0       0       0       0       0       0
   855 ;;      Locals:         0       0       0       0       0       0       0       0       0
   856 ;;      Temps:          0       0       0       0       0       0       0       0       0
   857 ;;      Totals:         0       0       0       0       0       0       0       0       0
   858 ;;Total ram usage:        0 bytes
   859 ;; Hardware stack levels used:    1
   860 ;; Hardware stack levels required when called:    1
   861 ;; This function calls:
   862 ;;		Nothing
   863 ;; This function is called by:
   864 ;;		_main
   865 ;; This function uses a non-reentrant model
   866 ;;
   867                           
   868                           	psect	text4
   869  000F68                     __ptext4:
   870                           	opt stack 0
   871  000F68                     _init_ADC:
   872                           	opt stack 29
   873                           
   874                           ;ADC.c: 12: TRISAbits.TRISA0 = 1;
   875                           
   876                           ;incstack = 0
   877  000F68  8092               	bsf	3986,0,c	;volatile
   878                           
   879                           ;ADC.c: 13: ADCON0 = 0;
   880  000F6A  0E00               	movlw	0
   881  000F6C  6EC2               	movwf	4034,c	;volatile
   882                           
   883                           ;ADC.c: 14: ADCON1 = 0x0e;
   884  000F6E  0E0E               	movlw	14
   885  000F70  6EC1               	movwf	4033,c	;volatile
   886                           
   887                           ;ADC.c: 15: ADCON2 = 0xd9;
   888  000F72  0ED9               	movlw	217
   889  000F74  6EC0               	movwf	4032,c	;volatile
   890                           
   891                           ;ADC.c: 16: ADCON0bits.ADON = 1;
   892  000F76  80C2               	bsf	4034,0,c	;volatile
   893  000F78  0012               	return		;funcret
   894  000F7A                     __end_of_init_ADC:
   895                           	opt stack 0
   896                           tblptru	equ	0xFF8
   897                           tblptrh	equ	0xFF7
   898                           intcon	equ	0xFF2
   899                           intcon2	equ	0xFF1
   900                           intcon3	equ	0xFF0
   901                           indf2	equ	0xFDF
   902                           fsr2h	equ	0xFDA
   903                           fsr2l	equ	0xFD9
   904                           status	equ	0xFD8
   905                           
   906 ;; *************** function _cmpPass *****************
   907 ;; Defined at:
   908 ;;		line 81 in file "TOCTOC.c"
   909 ;; Parameters:    Size  Location     Type
   910 ;;  pass            2   23[COMRAM] PTR unsigned char 
   911 ;;		 -> main@pass(2), 
   912 ;;  toque           2   25[COMRAM] PTR unsigned char 
   913 ;;		 -> main@toc(2), 
   914 ;; Auto vars:     Size  Location     Type
   915 ;;  i               2   27[COMRAM] int 
   916 ;; Return value:  Size  Location     Type
   917 ;;                  1    wreg      void 
   918 ;; Registers used:
   919 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   920 ;; Tracked objects:
   921 ;;		On entry : 0/0
   922 ;;		On exit  : 0/0
   923 ;;		Unchanged: 0/0
   924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   925 ;;      Params:         4       0       0       0       0       0       0       0       0
   926 ;;      Locals:         2       0       0       0       0       0       0       0       0
   927 ;;      Temps:          0       0       0       0       0       0       0       0       0
   928 ;;      Totals:         6       0       0       0       0       0       0       0       0
   929 ;;Total ram usage:        6 bytes
   930 ;; Hardware stack levels used:    1
   931 ;; Hardware stack levels required when called:    4
   932 ;; This function calls:
   933 ;;		_bip
   934 ;;		_clearLCD
   935 ;;		_cmpSignal
   936 ;;		_set_line
   937 ;;		_write_LCD
   938 ;; This function is called by:
   939 ;;		_main
   940 ;; This function uses a non-reentrant model
   941 ;;
   942                           
   943                           	psect	text5
   944  000AB2                     __ptext5:
   945                           	opt stack 0
   946  000AB2                     _cmpPass:
   947                           	opt stack 26
   948                           
   949                           ;TOCTOC.c: 83: int i = cmpSignal(pass, toque);
   950                           
   951                           ;incstack = 0
   952  000AB2  C018  F00F         	movff	cmpPass@pass,cmpSignal@pass
   953  000AB6  C019  F010         	movff	cmpPass@pass+1,cmpSignal@pass+1
   954  000ABA  C01A  F011         	movff	cmpPass@toque,cmpSignal@toc
   955  000ABE  C01B  F012         	movff	cmpPass@toque+1,cmpSignal@toc+1
   956  000AC2  ECEC  F006         	call	_cmpSignal	;wreg free
   957  000AC6  C00F  F01C         	movff	?_cmpSignal,cmpPass@i
   958  000ACA  C010  F01D         	movff	?_cmpSignal+1,cmpPass@i+1
   959                           
   960                           ;TOCTOC.c: 85: if(i == 1){
   961  000ACE  041C               	decf	cmpPass@i,w,c
   962  000AD0  101D               	iorwf	cmpPass@i+1,w,c
   963  000AD2  A4D8               	btfss	status,2,c
   964  000AD4  D02D               	goto	l1370
   965                           
   966                           ;TOCTOC.c: 86: clearLCD();
   967  000AD6  ECC5  F007         	call	_clearLCD	;wreg free
   968                           
   969                           ;TOCTOC.c: 87: set_line(0,3);
   970  000ADA  0E00               	movlw	0
   971  000ADC  6E13               	movwf	set_line@line+1,c
   972  000ADE  0E00               	movlw	0
   973  000AE0  6E12               	movwf	set_line@line,c
   974  000AE2  0E00               	movlw	0
   975  000AE4  6E15               	movwf	set_line@pos+1,c
   976  000AE6  0E03               	movlw	3
   977  000AE8  6E14               	movwf	set_line@pos,c
   978  000AEA  EC8F  F007         	call	_set_line	;wreg free
   979                           
   980                           ;TOCTOC.c: 88: write_LCD("As senhas");
   981  000AEE  0E35               	movlw	low STR_6
   982  000AF0  6E12               	movwf	write_LCD@c,c
   983  000AF2  0E08               	movlw	high STR_6
   984  000AF4  6E13               	movwf	write_LCD@c+1,c
   985  000AF6  EC12  F007         	call	_write_LCD	;wreg free
   986                           
   987                           ;TOCTOC.c: 89: set_line(1,3);
   988  000AFA  0E00               	movlw	0
   989  000AFC  6E13               	movwf	set_line@line+1,c
   990  000AFE  0E01               	movlw	1
   991  000B00  6E12               	movwf	set_line@line,c
   992  000B02  0E00               	movlw	0
   993  000B04  6E15               	movwf	set_line@pos+1,c
   994  000B06  0E03               	movlw	3
   995  000B08  6E14               	movwf	set_line@pos,c
   996  000B0A  EC8F  F007         	call	_set_line	;wreg free
   997                           
   998                           ;TOCTOC.c: 90: write_LCD("coincidem");
   999  000B0E  0E13               	movlw	low (STR_9+4)
  1000  000B10  6E12               	movwf	write_LCD@c,c
  1001  000B12  0E08               	movlw	high (STR_9+4)
  1002  000B14  6E13               	movwf	write_LCD@c+1,c
  1003  000B16  EC12  F007         	call	_write_LCD	;wreg free
  1004                           
  1005                           ;TOCTOC.c: 91: bip(2, 1000);
  1006  000B1A  0E00               	movlw	0
  1007  000B1C  6E10               	movwf	bip@rounds+1,c
  1008  000B1E  0E02               	movlw	2
  1009  000B20  6E0F               	movwf	bip@rounds,c
  1010  000B22  0E03               	movlw	3
  1011  000B24  6E12               	movwf	bip@time+1,c
  1012  000B26  0EE8               	movlw	232
  1013  000B28  6E11               	movwf	bip@time,c
  1014  000B2A  ECC5  F005         	call	_bip	;wreg free
  1015                           
  1016                           ;TOCTOC.c: 92: }
  1017  000B2E  0012               	return	
  1018  000B30                     l1370:
  1019                           
  1020                           ;TOCTOC.c: 93: else{
  1021                           ;TOCTOC.c: 94: clearLCD();
  1022  000B30  ECC5  F007         	call	_clearLCD	;wreg free
  1023                           
  1024                           ;TOCTOC.c: 95: set_line(0,3);
  1025  000B34  0E00               	movlw	0
  1026  000B36  6E13               	movwf	set_line@line+1,c
  1027  000B38  0E00               	movlw	0
  1028  000B3A  6E12               	movwf	set_line@line,c
  1029  000B3C  0E00               	movlw	0
  1030  000B3E  6E15               	movwf	set_line@pos+1,c
  1031  000B40  0E03               	movlw	3
  1032  000B42  6E14               	movwf	set_line@pos,c
  1033  000B44  EC8F  F007         	call	_set_line	;wreg free
  1034                           
  1035                           ;TOCTOC.c: 96: write_LCD("As senhas");
  1036  000B48  0E35               	movlw	low STR_6
  1037  000B4A  6E12               	movwf	write_LCD@c,c
  1038  000B4C  0E08               	movlw	high STR_6
  1039  000B4E  6E13               	movwf	write_LCD@c+1,c
  1040  000B50  EC12  F007         	call	_write_LCD	;wreg free
  1041                           
  1042                           ;TOCTOC.c: 97: set_line(1,1);
  1043  000B54  0E00               	movlw	0
  1044  000B56  6E13               	movwf	set_line@line+1,c
  1045  000B58  0E01               	movlw	1
  1046  000B5A  6E12               	movwf	set_line@line,c
  1047  000B5C  0E00               	movlw	0
  1048  000B5E  6E15               	movwf	set_line@pos+1,c
  1049  000B60  0E01               	movlw	1
  1050  000B62  6E14               	movwf	set_line@pos,c
  1051  000B64  EC8F  F007         	call	_set_line	;wreg free
  1052                           
  1053                           ;TOCTOC.c: 98: write_LCD("nao coincidem");
  1054  000B68  0E0F               	movlw	low STR_9
  1055  000B6A  6E12               	movwf	write_LCD@c,c
  1056  000B6C  0E08               	movlw	high STR_9
  1057  000B6E  6E13               	movwf	write_LCD@c+1,c
  1058  000B70  EC12  F007         	call	_write_LCD	;wreg free
  1059                           
  1060                           ;TOCTOC.c: 99: bip(4, 500);
  1061  000B74  0E00               	movlw	0
  1062  000B76  6E10               	movwf	bip@rounds+1,c
  1063  000B78  0E04               	movlw	4
  1064  000B7A  6E0F               	movwf	bip@rounds,c
  1065  000B7C  0E01               	movlw	1
  1066  000B7E  6E12               	movwf	bip@time+1,c
  1067  000B80  0EF4               	movlw	244
  1068  000B82  6E11               	movwf	bip@time,c
  1069  000B84  ECC5  F005         	call	_bip	;wreg free
  1070  000B88  0012               	return	
  1071  000B8A                     __end_of_cmpPass:
  1072                           	opt stack 0
  1073                           tblptru	equ	0xFF8
  1074                           tblptrh	equ	0xFF7
  1075                           intcon	equ	0xFF2
  1076                           intcon2	equ	0xFF1
  1077                           intcon3	equ	0xFF0
  1078                           indf2	equ	0xFDF
  1079                           fsr2h	equ	0xFDA
  1080                           fsr2l	equ	0xFD9
  1081                           status	equ	0xFD8
  1082                           
  1083 ;; *************** function _cmpSignal *****************
  1084 ;; Defined at:
  1085 ;;		line 36 in file "ReadSignal.c"
  1086 ;; Parameters:    Size  Location     Type
  1087 ;;  pass            2   14[COMRAM] PTR unsigned char 
  1088 ;;		 -> main@pass(2), 
  1089 ;;  toc             2   16[COMRAM] PTR unsigned char 
  1090 ;;		 -> main@toc(2), 
  1091 ;; Auto vars:     Size  Location     Type
  1092 ;;		None
  1093 ;; Return value:  Size  Location     Type
  1094 ;;                  2   14[COMRAM] int 
  1095 ;; Registers used:
  1096 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  1097 ;; Tracked objects:
  1098 ;;		On entry : 0/0
  1099 ;;		On exit  : 0/0
  1100 ;;		Unchanged: 0/0
  1101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1102 ;;      Params:         4       0       0       0       0       0       0       0       0
  1103 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1104 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1105 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1106 ;;Total ram usage:        6 bytes
  1107 ;; Hardware stack levels used:    1
  1108 ;; Hardware stack levels required when called:    1
  1109 ;; This function calls:
  1110 ;;		Nothing
  1111 ;; This function is called by:
  1112 ;;		_cmpPass
  1113 ;; This function uses a non-reentrant model
  1114 ;;
  1115                           
  1116                           	psect	text6
  1117  000DD8                     __ptext6:
  1118                           	opt stack 0
  1119  000DD8                     _cmpSignal:
  1120                           	opt stack 28
  1121                           
  1122                           ;ReadSignal.c: 38: if(pass[0] == toc[0] && pass[1] == toc[1])
  1123                           
  1124                           ;incstack = 0
  1125  000DD8  C011  FFD9         	movff	cmpSignal@toc,fsr2l
  1126  000DDC  C012  FFDA         	movff	cmpSignal@toc+1,fsr2h
  1127  000DE0  C00F  FFE1         	movff	cmpSignal@pass,fsr1l
  1128  000DE4  C010  FFE2         	movff	cmpSignal@pass+1,fsr1h
  1129  000DE8  50DE               	movf	postinc2,w,c
  1130  000DEA  18E6               	xorwf	postinc1,w,c
  1131  000DEC  A4D8               	btfss	status,2,c
  1132  000DEE  D015               	goto	l1246
  1133  000DF0  EE20 F001          	lfsr	2,1
  1134  000DF4  5011               	movf	cmpSignal@toc,w,c
  1135  000DF6  26D9               	addwf	fsr2l,f,c
  1136  000DF8  5012               	movf	cmpSignal@toc+1,w,c
  1137  000DFA  22DA               	addwfc	fsr2h,f,c
  1138  000DFC  EE10 F001          	lfsr	1,1
  1139  000E00  500F               	movf	cmpSignal@pass,w,c
  1140  000E02  26E1               	addwf	fsr1l,f,c
  1141  000E04  5010               	movf	cmpSignal@pass+1,w,c
  1142  000E06  22E2               	addwfc	fsr1h,f,c
  1143  000E08  50DE               	movf	postinc2,w,c
  1144  000E0A  18E6               	xorwf	postinc1,w,c
  1145  000E0C  A4D8               	btfss	status,2,c
  1146  000E0E  D005               	goto	l1246
  1147                           
  1148                           ;ReadSignal.c: 39: return 1;
  1149  000E10  0E00               	movlw	0
  1150  000E12  6E10               	movwf	?_cmpSignal+1,c
  1151  000E14  0E01               	movlw	1
  1152  000E16  6E0F               	movwf	?_cmpSignal,c
  1153  000E18  0012               	return	
  1154  000E1A                     l1246:
  1155                           
  1156                           ;ReadSignal.c: 40: return 0;
  1157  000E1A  0E00               	movlw	0
  1158  000E1C  6E10               	movwf	?_cmpSignal+1,c
  1159  000E1E  0E00               	movlw	0
  1160  000E20  6E0F               	movwf	?_cmpSignal,c
  1161  000E22  0012               	return	
  1162  000E24                     __end_of_cmpSignal:
  1163                           	opt stack 0
  1164                           tblptru	equ	0xFF8
  1165                           tblptrh	equ	0xFF7
  1166                           intcon	equ	0xFF2
  1167                           intcon2	equ	0xFF1
  1168                           intcon3	equ	0xFF0
  1169                           postinc1	equ	0xFE6
  1170                           fsr1h	equ	0xFE2
  1171                           fsr1l	equ	0xFE1
  1172                           indf2	equ	0xFDF
  1173                           postinc2	equ	0xFDE
  1174                           fsr2h	equ	0xFDA
  1175                           fsr2l	equ	0xFD9
  1176                           status	equ	0xFD8
  1177                           
  1178 ;; *************** function _bip *****************
  1179 ;; Defined at:
  1180 ;;		line 14 in file "Buzzer.c"
  1181 ;; Parameters:    Size  Location     Type
  1182 ;;  rounds          2   14[COMRAM] int 
  1183 ;;  time            2   16[COMRAM] int 
  1184 ;; Auto vars:     Size  Location     Type
  1185 ;;  j               2   20[COMRAM] int 
  1186 ;; Return value:  Size  Location     Type
  1187 ;;                  1    wreg      void 
  1188 ;; Registers used:
  1189 ;;		wreg, status,2, status,0
  1190 ;; Tracked objects:
  1191 ;;		On entry : 0/0
  1192 ;;		On exit  : 0/0
  1193 ;;		Unchanged: 0/0
  1194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1195 ;;      Params:         4       0       0       0       0       0       0       0       0
  1196 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1197 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1198 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1199 ;;Total ram usage:        8 bytes
  1200 ;; Hardware stack levels used:    1
  1201 ;; Hardware stack levels required when called:    1
  1202 ;; This function calls:
  1203 ;;		Nothing
  1204 ;; This function is called by:
  1205 ;;		_cmpPass
  1206 ;; This function uses a non-reentrant model
  1207 ;;
  1208                           
  1209                           	psect	text7
  1210  000B8A                     __ptext7:
  1211                           	opt stack 0
  1212  000B8A                     _bip:
  1213                           	opt stack 28
  1214                           
  1215                           ;Buzzer.c: 16: TRISCbits.RC2 = 0;
  1216                           
  1217                           ;incstack = 0
  1218  000B8A  9494               	bcf	3988,2,c	;volatile
  1219                           
  1220                           ;Buzzer.c: 17: PORTCbits.RC2 = 0;
  1221  000B8C  9482               	bcf	3970,2,c	;volatile
  1222                           
  1223                           ;Buzzer.c: 19: int j = 0;
  1224  000B8E  0E00               	movlw	0
  1225  000B90  6E16               	movwf	bip@j+1,c
  1226  000B92  0E00               	movlw	0
  1227  000B94  6E15               	movwf	bip@j,c
  1228                           
  1229                           ;Buzzer.c: 20: if(time == 500){
  1230  000B96  0EF4               	movlw	244
  1231  000B98  1811               	xorwf	bip@time,w,c
  1232  000B9A  E129               	bnz	l1264
  1233  000B9C  0412               	decf	bip@time+1,w,c
  1234  000B9E  B4D8               	btfsc	status,2,c
  1235  000BA0  D01B               	goto	l1262
  1236  000BA2  D025               	goto	l1264
  1237  000BA4                     l1258:
  1238                           
  1239                           ;Buzzer.c: 22: PORTCbits.RC2 = !PORTCbits.RC2;
  1240  000BA4  B482               	btfsc	3970,2,c	;volatile
  1241  000BA6  D003               	goto	u450
  1242  000BA8  6A13               	clrf	??_bip& (0+255),c
  1243  000BAA  2A13               	incf	??_bip& (0+255),f,c
  1244  000BAC  D001               	goto	u468
  1245  000BAE                     u450:
  1246  000BAE  6A13               	clrf	??_bip& (0+255),c
  1247  000BB0                     u468:
  1248  000BB0  4613               	rlncf	??_bip,f,c
  1249  000BB2  4613               	rlncf	??_bip,f,c
  1250  000BB4  5082               	movf	3970,w,c	;volatile
  1251  000BB6  1813               	xorwf	??_bip,w,c
  1252  000BB8  0BFB               	andlw	-5
  1253  000BBA  1813               	xorwf	??_bip,w,c
  1254  000BBC  6E82               	movwf	3970,c	;volatile
  1255                           
  1256                           ;Buzzer.c: 23: _delay((unsigned long)((500)*(16000000/4000.0)));
  1257  000BBE  0E0B               	movlw	11
  1258  000BC0  6E14               	movwf	(??_bip+1)& (0+255),c
  1259  000BC2  0E26               	movlw	38
  1260  000BC4  6E13               	movwf	??_bip& (0+255),c
  1261  000BC6  0E5E               	movlw	94
  1262  000BC8                     u627:
  1263  000BC8  2EE8               	decfsz	wreg,f,c
  1264  000BCA  D7FE               	bra	u627
  1265  000BCC  2E13               	decfsz	??_bip& (0+255),f,c
  1266  000BCE  D7FC               	bra	u627
  1267  000BD0  2E14               	decfsz	(??_bip+1)& (0+255),f,c
  1268  000BD2  D7FA               	bra	u627
  1269                           
  1270                           ;Buzzer.c: 24: j++;
  1271  000BD4  4A15               	infsnz	bip@j,f,c
  1272  000BD6  2A16               	incf	bip@j+1,f,c
  1273  000BD8                     l1262:
  1274  000BD8  500F               	movf	bip@rounds,w,c
  1275  000BDA  5C15               	subwf	bip@j,w,c
  1276  000BDC  5016               	movf	bip@j+1,w,c
  1277  000BDE  0A80               	xorlw	128
  1278  000BE0  6E13               	movwf	??_bip& (0+255),c
  1279  000BE2  5010               	movf	bip@rounds+1,w,c
  1280  000BE4  0A80               	xorlw	128
  1281  000BE6  5813               	subwfb	??_bip& (0+255),w,c
  1282  000BE8  B0D8               	btfsc	status,0,c
  1283  000BEA  0012               	return	
  1284  000BEC  D7DB               	goto	l1258
  1285  000BEE                     l1264:
  1286                           
  1287                           ;Buzzer.c: 27: else if(time == 1000){
  1288  000BEE  0EE8               	movlw	232
  1289  000BF0  1811               	xorwf	bip@time,w,c
  1290  000BF2  E12B               	bnz	l203
  1291  000BF4  0E03               	movlw	3
  1292  000BF6  1812               	xorwf	bip@time+1,w,c
  1293  000BF8  A4D8               	btfss	status,2,c
  1294  000BFA  0012               	return	
  1295  000BFC  D01B               	goto	l1272
  1296  000BFE                     l1268:
  1297                           
  1298                           ;Buzzer.c: 29: PORTCbits.RC2 = !PORTCbits.RC2;
  1299  000BFE  B482               	btfsc	3970,2,c	;volatile
  1300  000C00  D003               	goto	u490
  1301  000C02  6A13               	clrf	??_bip& (0+255),c
  1302  000C04  2A13               	incf	??_bip& (0+255),f,c
  1303  000C06  D001               	goto	u508
  1304  000C08                     u490:
  1305  000C08  6A13               	clrf	??_bip& (0+255),c
  1306  000C0A                     u508:
  1307  000C0A  4613               	rlncf	??_bip,f,c
  1308  000C0C  4613               	rlncf	??_bip,f,c
  1309  000C0E  5082               	movf	3970,w,c	;volatile
  1310  000C10  1813               	xorwf	??_bip,w,c
  1311  000C12  0BFB               	andlw	-5
  1312  000C14  1813               	xorwf	??_bip,w,c
  1313  000C16  6E82               	movwf	3970,c	;volatile
  1314                           
  1315                           ;Buzzer.c: 30: _delay((unsigned long)((1000)*(16000000/4000.0)));
  1316  000C18  0E15               	movlw	21
  1317  000C1A  6E14               	movwf	(??_bip+1)& (0+255),c
  1318  000C1C  0E4B               	movlw	75
  1319  000C1E  6E13               	movwf	??_bip& (0+255),c
  1320  000C20  0EBE               	movlw	190
  1321  000C22                     u637:
  1322  000C22  2EE8               	decfsz	wreg,f,c
  1323  000C24  D7FE               	bra	u637
  1324  000C26  2E13               	decfsz	??_bip& (0+255),f,c
  1325  000C28  D7FC               	bra	u637
  1326  000C2A  2E14               	decfsz	(??_bip+1)& (0+255),f,c
  1327  000C2C  D7FA               	bra	u637
  1328  000C2E  D000               	nop2	
  1329                           
  1330                           ;Buzzer.c: 31: j++;
  1331  000C30  4A15               	infsnz	bip@j,f,c
  1332  000C32  2A16               	incf	bip@j+1,f,c
  1333  000C34                     l1272:
  1334  000C34  500F               	movf	bip@rounds,w,c
  1335  000C36  5C15               	subwf	bip@j,w,c
  1336  000C38  5016               	movf	bip@j+1,w,c
  1337  000C3A  0A80               	xorlw	128
  1338  000C3C  6E13               	movwf	??_bip& (0+255),c
  1339  000C3E  5010               	movf	bip@rounds+1,w,c
  1340  000C40  0A80               	xorlw	128
  1341  000C42  5813               	subwfb	??_bip& (0+255),w,c
  1342  000C44  B0D8               	btfsc	status,0,c
  1343  000C46  0012               	return	
  1344  000C48  D7DA               	goto	l1268
  1345  000C4A                     l203:
  1346  000C4A  0012               	return		;funcret
  1347  000C4C                     __end_of_bip:
  1348                           	opt stack 0
  1349                           tblptru	equ	0xFF8
  1350                           tblptrh	equ	0xFF7
  1351                           intcon	equ	0xFF2
  1352                           intcon2	equ	0xFF1
  1353                           intcon3	equ	0xFF0
  1354                           wreg	equ	0xFE8
  1355                           postinc1	equ	0xFE6
  1356                           fsr1h	equ	0xFE2
  1357                           fsr1l	equ	0xFE1
  1358                           indf2	equ	0xFDF
  1359                           postinc2	equ	0xFDE
  1360                           fsr2h	equ	0xFDA
  1361                           fsr2l	equ	0xFD9
  1362                           status	equ	0xFD8
  1363                           
  1364 ;; *************** function _cadastrarSenha *****************
  1365 ;; Defined at:
  1366 ;;		line 19 in file "TOCTOC.c"
  1367 ;; Parameters:    Size  Location     Type
  1368 ;;  pass            2   30[COMRAM] PTR unsigned char 
  1369 ;;		 -> main@pass(2), 
  1370 ;; Auto vars:     Size  Location     Type
  1371 ;;  i               2   34[COMRAM] int 
  1372 ;; Return value:  Size  Location     Type
  1373 ;;                  1    wreg      void 
  1374 ;; Registers used:
  1375 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1376 ;; Tracked objects:
  1377 ;;		On entry : 0/0
  1378 ;;		On exit  : 0/0
  1379 ;;		Unchanged: 0/0
  1380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1381 ;;      Params:         2       0       0       0       0       0       0       0       0
  1382 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1383 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1384 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1385 ;;Total ram usage:        6 bytes
  1386 ;; Hardware stack levels used:    1
  1387 ;; Hardware stack levels required when called:    4
  1388 ;; This function calls:
  1389 ;;		_clearLCD
  1390 ;;		_readSignal
  1391 ;;		_send_msg
  1392 ;;		_set_line
  1393 ;;		_write_LCD
  1394 ;; This function is called by:
  1395 ;;		_main
  1396 ;; This function uses a non-reentrant model
  1397 ;;
  1398                           
  1399                           	psect	text8
  1400  00084E                     __ptext8:
  1401                           	opt stack 0
  1402  00084E                     _cadastrarSenha:
  1403                           	opt stack 26
  1404                           
  1405                           ;TOCTOC.c: 21: int i = 0;
  1406                           
  1407                           ;incstack = 0
  1408  00084E  0E00               	movlw	0
  1409  000850  6E24               	movwf	cadastrarSenha@i+1,c
  1410  000852  0E00               	movlw	0
  1411  000854  6E23               	movwf	cadastrarSenha@i,c
  1412                           
  1413                           ;TOCTOC.c: 23: pass[0] = 0x00;
  1414  000856  C01F  FFD9         	movff	cadastrarSenha@pass,fsr2l
  1415  00085A  C020  FFDA         	movff	cadastrarSenha@pass+1,fsr2h
  1416  00085E  0E00               	movlw	0
  1417  000860  6EDF               	movwf	indf2,c
  1418                           
  1419                           ;TOCTOC.c: 24: pass[1] = 0x00;
  1420  000862  EE20 F001          	lfsr	2,1
  1421  000866  501F               	movf	cadastrarSenha@pass,w,c
  1422  000868  26D9               	addwf	fsr2l,f,c
  1423  00086A  5020               	movf	cadastrarSenha@pass+1,w,c
  1424  00086C  22DA               	addwfc	fsr2h,f,c
  1425  00086E  0E00               	movlw	0
  1426  000870  6EDF               	movwf	indf2,c
  1427                           
  1428                           ;TOCTOC.c: 26: clearLCD();
  1429  000872  ECC5  F007         	call	_clearLCD	;wreg free
  1430                           
  1431                           ;TOCTOC.c: 27: set_line(0,1);
  1432  000876  0E00               	movlw	0
  1433  000878  6E13               	movwf	set_line@line+1,c
  1434  00087A  0E00               	movlw	0
  1435  00087C  6E12               	movwf	set_line@line,c
  1436  00087E  0E00               	movlw	0
  1437  000880  6E15               	movwf	set_line@pos+1,c
  1438  000882  0E01               	movlw	1
  1439  000884  6E14               	movwf	set_line@pos,c
  1440  000886  EC8F  F007         	call	_set_line	;wreg free
  1441                           
  1442                           ;TOCTOC.c: 28: write_LCD("Cadastre sua");
  1443  00088A  0E1D               	movlw	low STR_1
  1444  00088C  6E12               	movwf	write_LCD@c,c
  1445  00088E  0E08               	movlw	high STR_1
  1446  000890  6E13               	movwf	write_LCD@c+1,c
  1447  000892  EC12  F007         	call	_write_LCD	;wreg free
  1448                           
  1449                           ;TOCTOC.c: 29: set_line(1,5);
  1450  000896  0E00               	movlw	0
  1451  000898  6E13               	movwf	set_line@line+1,c
  1452  00089A  0E01               	movlw	1
  1453  00089C  6E12               	movwf	set_line@line,c
  1454  00089E  0E00               	movlw	0
  1455  0008A0  6E15               	movwf	set_line@pos+1,c
  1456  0008A2  0E05               	movlw	5
  1457  0008A4  6E14               	movwf	set_line@pos,c
  1458  0008A6  EC8F  F007         	call	_set_line	;wreg free
  1459                           
  1460                           ;TOCTOC.c: 30: write_LCD("senha");
  1461  0008AA  0E47               	movlw	low STR_2
  1462  0008AC  6E12               	movwf	write_LCD@c,c
  1463  0008AE  0E08               	movlw	high STR_2
  1464  0008B0  6E13               	movwf	write_LCD@c+1,c
  1465  0008B2  EC12  F007         	call	_write_LCD	;wreg free
  1466                           
  1467                           ;TOCTOC.c: 32: while(i < 4){
  1468  0008B6  D04C               	goto	l1308
  1469  0008B8                     l1290:
  1470                           
  1471                           ;TOCTOC.c: 33: set_line(1,15);
  1472  0008B8  0E00               	movlw	0
  1473  0008BA  6E13               	movwf	set_line@line+1,c
  1474  0008BC  0E01               	movlw	1
  1475  0008BE  6E12               	movwf	set_line@line,c
  1476  0008C0  0E00               	movlw	0
  1477  0008C2  6E15               	movwf	set_line@pos+1,c
  1478  0008C4  0E0F               	movlw	15
  1479  0008C6  6E14               	movwf	set_line@pos,c
  1480  0008C8  EC8F  F007         	call	_set_line	;wreg free
  1481                           
  1482                           ;TOCTOC.c: 34: send_msg('1'+ i);
  1483  0008CC  5023               	movf	cadastrarSenha@i,w,c
  1484  0008CE  0F31               	addlw	49
  1485  0008D0  EC53  F007         	call	_send_msg
  1486                           
  1487                           ;TOCTOC.c: 35: if(i == 0)
  1488  0008D4  5023               	movf	cadastrarSenha@i,w,c
  1489  0008D6  1024               	iorwf	cadastrarSenha@i+1,w,c
  1490  0008D8  A4D8               	btfss	status,2,c
  1491  0008DA  D00B               	goto	l1296
  1492                           
  1493                           ;TOCTOC.c: 36: readSignal(&pass[0], 0);
  1494  0008DC  C01F  F013         	movff	cadastrarSenha@pass,readSignal@signal
  1495  0008E0  C020  F014         	movff	cadastrarSenha@pass+1,readSignal@signal+1
  1496  0008E4  0E00               	movlw	0
  1497  0008E6  6E16               	movwf	readSignal@pos+1,c
  1498  0008E8  0E00               	movlw	0
  1499  0008EA  6E15               	movwf	readSignal@pos,c
  1500  0008EC  EC26  F006         	call	_readSignal	;wreg free
  1501  0008F0  D02D               	goto	l1306
  1502  0008F2                     l1296:
  1503                           
  1504                           ;TOCTOC.c: 37: else if(i == 1)
  1505  0008F2  0423               	decf	cadastrarSenha@i,w,c
  1506  0008F4  1024               	iorwf	cadastrarSenha@i+1,w,c
  1507  0008F6  A4D8               	btfss	status,2,c
  1508  0008F8  D00B               	goto	l1300
  1509                           
  1510                           ;TOCTOC.c: 38: readSignal(&pass[0], 1);
  1511  0008FA  C01F  F013         	movff	cadastrarSenha@pass,readSignal@signal
  1512  0008FE  C020  F014         	movff	cadastrarSenha@pass+1,readSignal@signal+1
  1513  000902  0E00               	movlw	0
  1514  000904  6E16               	movwf	readSignal@pos+1,c
  1515  000906  0E01               	movlw	1
  1516  000908  6E15               	movwf	readSignal@pos,c
  1517  00090A  EC26  F006         	call	_readSignal	;wreg free
  1518  00090E  D01E               	goto	l1306
  1519  000910                     l1300:
  1520                           
  1521                           ;TOCTOC.c: 39: else if(i == 2)
  1522  000910  0E02               	movlw	2
  1523  000912  1823               	xorwf	cadastrarSenha@i,w,c
  1524  000914  1024               	iorwf	cadastrarSenha@i+1,w,c
  1525  000916  A4D8               	btfss	status,2,c
  1526  000918  D00D               	goto	l1304
  1527                           
  1528                           ;TOCTOC.c: 40: readSignal(&pass[1], 0);
  1529  00091A  0E01               	movlw	1
  1530  00091C  241F               	addwf	cadastrarSenha@pass,w,c
  1531  00091E  6E13               	movwf	readSignal@signal,c
  1532  000920  0E00               	movlw	0
  1533  000922  2020               	addwfc	cadastrarSenha@pass+1,w,c
  1534  000924  6E14               	movwf	readSignal@signal+1,c
  1535  000926  0E00               	movlw	0
  1536  000928  6E16               	movwf	readSignal@pos+1,c
  1537  00092A  0E00               	movlw	0
  1538  00092C  6E15               	movwf	readSignal@pos,c
  1539  00092E  EC26  F006         	call	_readSignal	;wreg free
  1540  000932  D00C               	goto	l1306
  1541  000934                     l1304:
  1542                           
  1543                           ;TOCTOC.c: 41: else
  1544                           ;TOCTOC.c: 42: readSignal(&pass[1], 1);
  1545  000934  0E01               	movlw	1
  1546  000936  241F               	addwf	cadastrarSenha@pass,w,c
  1547  000938  6E13               	movwf	readSignal@signal,c
  1548  00093A  0E00               	movlw	0
  1549  00093C  2020               	addwfc	cadastrarSenha@pass+1,w,c
  1550  00093E  6E14               	movwf	readSignal@signal+1,c
  1551  000940  0E00               	movlw	0
  1552  000942  6E16               	movwf	readSignal@pos+1,c
  1553  000944  0E01               	movlw	1
  1554  000946  6E15               	movwf	readSignal@pos,c
  1555  000948  EC26  F006         	call	_readSignal	;wreg free
  1556  00094C                     l1306:
  1557                           
  1558                           ;TOCTOC.c: 43: i++;
  1559  00094C  4A23               	infsnz	cadastrarSenha@i,f,c
  1560  00094E  2A24               	incf	cadastrarSenha@i+1,f,c
  1561  000950                     l1308:
  1562  000950  BE24               	btfsc	cadastrarSenha@i+1,7,c
  1563  000952  D7B2               	goto	l1290
  1564  000954  5024               	movf	cadastrarSenha@i+1,w,c
  1565  000956  E104               	bnz	l1310
  1566  000958  0E04               	movlw	4
  1567  00095A  5C23               	subwf	cadastrarSenha@i,w,c
  1568  00095C  A0D8               	btfss	status,0,c
  1569  00095E  D7AC               	goto	l1290
  1570  000960                     l1310:
  1571                           
  1572                           ;TOCTOC.c: 44: }
  1573                           ;TOCTOC.c: 46: clearLCD();
  1574  000960  ECC5  F007         	call	_clearLCD	;wreg free
  1575                           
  1576                           ;TOCTOC.c: 47: set_line(0,5);
  1577  000964  0E00               	movlw	0
  1578  000966  6E13               	movwf	set_line@line+1,c
  1579  000968  0E00               	movlw	0
  1580  00096A  6E12               	movwf	set_line@line,c
  1581  00096C  0E00               	movlw	0
  1582  00096E  6E15               	movwf	set_line@pos+1,c
  1583  000970  0E05               	movlw	5
  1584  000972  6E14               	movwf	set_line@pos,c
  1585  000974  EC8F  F007         	call	_set_line	;wreg free
  1586                           
  1587                           ;TOCTOC.c: 48: write_LCD("Leitura");
  1588  000978  0E3F               	movlw	low STR_3
  1589  00097A  6E12               	movwf	write_LCD@c,c
  1590  00097C  0E08               	movlw	high STR_3
  1591  00097E  6E13               	movwf	write_LCD@c+1,c
  1592  000980  EC12  F007         	call	_write_LCD	;wreg free
  1593                           
  1594                           ;TOCTOC.c: 49: set_line(1,3);
  1595  000984  0E00               	movlw	0
  1596  000986  6E13               	movwf	set_line@line+1,c
  1597  000988  0E01               	movlw	1
  1598  00098A  6E12               	movwf	set_line@line,c
  1599  00098C  0E00               	movlw	0
  1600  00098E  6E15               	movwf	set_line@pos+1,c
  1601  000990  0E03               	movlw	3
  1602  000992  6E14               	movwf	set_line@pos,c
  1603  000994  EC8F  F007         	call	_set_line	;wreg free
  1604                           
  1605                           ;TOCTOC.c: 50: write_LCD("Finalizada");
  1606  000998  0E2A               	movlw	low STR_4
  1607  00099A  6E12               	movwf	write_LCD@c,c
  1608  00099C  0E08               	movlw	high STR_4
  1609  00099E  6E13               	movwf	write_LCD@c+1,c
  1610  0009A0  EC12  F007         	call	_write_LCD	;wreg free
  1611                           
  1612                           ;TOCTOC.c: 51: _delay((unsigned long)((3000)*(16000000/4000.0)));
  1613  0009A4  0E3D               	movlw	61
  1614  0009A6  6E22               	movwf	(??_cadastrarSenha+1)& (0+255),c
  1615  0009A8  0EE1               	movlw	225
  1616  0009AA  6E21               	movwf	??_cadastrarSenha& (0+255),c
  1617  0009AC  0E40               	movlw	64
  1618  0009AE                     u647:
  1619  0009AE  2EE8               	decfsz	wreg,f,c
  1620  0009B0  D7FE               	bra	u647
  1621  0009B2  2E21               	decfsz	??_cadastrarSenha& (0+255),f,c
  1622  0009B4  D7FC               	bra	u647
  1623  0009B6  2E22               	decfsz	(??_cadastrarSenha+1)& (0+255),f,c
  1624  0009B8  D7FA               	bra	u647
  1625  0009BA  0012               	return		;funcret
  1626  0009BC                     __end_of_cadastrarSenha:
  1627                           	opt stack 0
  1628                           tblptru	equ	0xFF8
  1629                           tblptrh	equ	0xFF7
  1630                           intcon	equ	0xFF2
  1631                           intcon2	equ	0xFF1
  1632                           intcon3	equ	0xFF0
  1633                           wreg	equ	0xFE8
  1634                           postinc1	equ	0xFE6
  1635                           fsr1h	equ	0xFE2
  1636                           fsr1l	equ	0xFE1
  1637                           indf2	equ	0xFDF
  1638                           postinc2	equ	0xFDE
  1639                           fsr2h	equ	0xFDA
  1640                           fsr2l	equ	0xFD9
  1641                           status	equ	0xFD8
  1642                           
  1643 ;; *************** function _write_LCD *****************
  1644 ;; Defined at:
  1645 ;;		line 59 in file "LCD.c"
  1646 ;; Parameters:    Size  Location     Type
  1647 ;;  c               2   17[COMRAM] PTR unsigned char 
  1648 ;;		 -> STR_9(14), STR_8(10), STR_7(10), STR_6(10), 
  1649 ;;		 -> STR_5(14), STR_4(11), STR_3(8), STR_2(6), 
  1650 ;;		 -> STR_1(13), 
  1651 ;; Auto vars:     Size  Location     Type
  1652 ;;  i               2   21[COMRAM] int 
  1653 ;; Return value:  Size  Location     Type
  1654 ;;                  1    wreg      void 
  1655 ;; Registers used:
  1656 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1657 ;; Tracked objects:
  1658 ;;		On entry : 0/0
  1659 ;;		On exit  : 0/0
  1660 ;;		Unchanged: 0/0
  1661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1662 ;;      Params:         2       0       0       0       0       0       0       0       0
  1663 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1664 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1665 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1666 ;;Total ram usage:        6 bytes
  1667 ;; Hardware stack levels used:    1
  1668 ;; Hardware stack levels required when called:    3
  1669 ;; This function calls:
  1670 ;;		_send_msg
  1671 ;; This function is called by:
  1672 ;;		_cadastrarSenha
  1673 ;;		_lerToque
  1674 ;;		_cmpPass
  1675 ;; This function uses a non-reentrant model
  1676 ;;
  1677                           
  1678                           	psect	text9
  1679  000E24                     __ptext9:
  1680                           	opt stack 0
  1681  000E24                     _write_LCD:
  1682                           	opt stack 26
  1683                           
  1684                           ;LCD.c: 61: int i = 0;
  1685                           
  1686                           ;incstack = 0
  1687  000E24  0E00               	movlw	0
  1688  000E26  6E17               	movwf	write_LCD@i+1,c
  1689  000E28  0E00               	movlw	0
  1690  000E2A  6E16               	movwf	write_LCD@i,c
  1691                           
  1692                           ;LCD.c: 62: for(; c[i] != '\0'; i++)
  1693  000E2C  D010               	goto	l1206
  1694  000E2E                     l1202:
  1695                           
  1696                           ;LCD.c: 63: send_msg(c[i]);
  1697  000E2E  5016               	movf	write_LCD@i,w,c
  1698  000E30  2412               	addwf	write_LCD@c,w,c
  1699  000E32  6E14               	movwf	??_write_LCD& (0+255),c
  1700  000E34  5017               	movf	write_LCD@i+1,w,c
  1701  000E36  2013               	addwfc	write_LCD@c+1,w,c
  1702  000E38  6E15               	movwf	(??_write_LCD+1)& (0+255),c
  1703  000E3A  C014  FFF6         	movff	??_write_LCD,tblptrl
  1704  000E3E  C015  FFF7         	movff	??_write_LCD+1,tblptrh
  1705  000E42                     	if	0	;tblptru may be non-zero
  1706  000E42                     	endif
  1707  000E42                     	if	0	;tblptru may be non-zero
  1708  000E42                     	endif
  1709  000E42  0008               	tblrd		*
  1710  000E44  50F5               	movf	tablat,w,c
  1711  000E46  EC53  F007         	call	_send_msg
  1712  000E4A  4A16               	infsnz	write_LCD@i,f,c
  1713  000E4C  2A17               	incf	write_LCD@i+1,f,c
  1714  000E4E                     l1206:
  1715  000E4E  5016               	movf	write_LCD@i,w,c
  1716  000E50  2412               	addwf	write_LCD@c,w,c
  1717  000E52  6E14               	movwf	??_write_LCD& (0+255),c
  1718  000E54  5017               	movf	write_LCD@i+1,w,c
  1719  000E56  2013               	addwfc	write_LCD@c+1,w,c
  1720  000E58  6E15               	movwf	(??_write_LCD+1)& (0+255),c
  1721  000E5A  C014  FFF6         	movff	??_write_LCD,tblptrl
  1722  000E5E  C015  FFF7         	movff	??_write_LCD+1,tblptrh
  1723  000E62                     	if	0	;tblptru may be non-zero
  1724  000E62                     	endif
  1725  000E62                     	if	0	;tblptru may be non-zero
  1726  000E62                     	endif
  1727  000E62  0008               	tblrd		*
  1728  000E64  50F5               	movf	tablat,w,c
  1729  000E66  0900               	iorlw	0
  1730  000E68  B4D8               	btfsc	status,2,c
  1731  000E6A  0012               	return	
  1732  000E6C  D7E0               	goto	l1202
  1733  000E6E                     __end_of_write_LCD:
  1734                           	opt stack 0
  1735                           tblptru	equ	0xFF8
  1736                           tblptrh	equ	0xFF7
  1737                           tblptrl	equ	0xFF6
  1738                           tablat	equ	0xFF5
  1739                           intcon	equ	0xFF2
  1740                           intcon2	equ	0xFF1
  1741                           intcon3	equ	0xFF0
  1742                           wreg	equ	0xFE8
  1743                           postinc1	equ	0xFE6
  1744                           fsr1h	equ	0xFE2
  1745                           fsr1l	equ	0xFE1
  1746                           indf2	equ	0xFDF
  1747                           postinc2	equ	0xFDE
  1748                           fsr2h	equ	0xFDA
  1749                           fsr2l	equ	0xFD9
  1750                           status	equ	0xFD8
  1751                           
  1752 ;; *************** function _send_msg *****************
  1753 ;; Defined at:
  1754 ;;		line 35 in file "LCD.c"
  1755 ;; Parameters:    Size  Location     Type
  1756 ;;  msg             1    wreg     unsigned char 
  1757 ;; Auto vars:     Size  Location     Type
  1758 ;;  msg             1   16[COMRAM] unsigned char 
  1759 ;; Return value:  Size  Location     Type
  1760 ;;                  1    wreg      void 
  1761 ;; Registers used:
  1762 ;;		wreg, status,2, cstack
  1763 ;; Tracked objects:
  1764 ;;		On entry : 0/0
  1765 ;;		On exit  : 0/0
  1766 ;;		Unchanged: 0/0
  1767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1768 ;;      Params:         0       0       0       0       0       0       0       0       0
  1769 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1770 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1771 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1772 ;;Total ram usage:        2 bytes
  1773 ;; Hardware stack levels used:    1
  1774 ;; Hardware stack levels required when called:    2
  1775 ;; This function calls:
  1776 ;;		_ena_pulse
  1777 ;; This function is called by:
  1778 ;;		_write_LCD
  1779 ;;		_cadastrarSenha
  1780 ;;		_lerToque
  1781 ;; This function uses a non-reentrant model
  1782 ;;
  1783                           
  1784                           	psect	text10
  1785  000EA6                     __ptext10:
  1786                           	opt stack 0
  1787  000EA6                     _send_msg:
  1788                           	opt stack 26
  1789                           
  1790                           ;incstack = 0
  1791                           ;send_msg@msg stored from wreg
  1792  000EA6  6E11               	movwf	send_msg@msg,c
  1793                           
  1794                           ;LCD.c: 37: PORTD = msg;
  1795  000EA8  C011  FF83         	movff	send_msg@msg,3971	;volatile
  1796                           
  1797                           ;LCD.c: 38: PORTBbits.RB3 = 1;
  1798  000EAC  8681               	bsf	3969,3,c	;volatile
  1799                           
  1800                           ;LCD.c: 39: _delay((unsigned long)((1)*(16000000/4000.0)));
  1801  000EAE  0E06               	movlw	6
  1802  000EB0  6E10               	movwf	??_send_msg& (0+255),c
  1803  000EB2  0E30               	movlw	48
  1804  000EB4                     u657:
  1805  000EB4  2EE8               	decfsz	wreg,f,c
  1806  000EB6  D7FE               	bra	u657
  1807  000EB8  2E10               	decfsz	??_send_msg& (0+255),f,c
  1808  000EBA  D7FC               	bra	u657
  1809  000EBC  D000               	nop2	
  1810                           
  1811                           ;LCD.c: 40: ena_pulse();
  1812  000EBE  EC37  F007         	call	_ena_pulse	;wreg free
  1813                           
  1814                           ;LCD.c: 41: _delay((unsigned long)((1)*(16000000/4000.0)));
  1815  000EC2  0E06               	movlw	6
  1816  000EC4  6E10               	movwf	??_send_msg& (0+255),c
  1817  000EC6  0E30               	movlw	48
  1818  000EC8                     u667:
  1819  000EC8  2EE8               	decfsz	wreg,f,c
  1820  000ECA  D7FE               	bra	u667
  1821  000ECC  2E10               	decfsz	??_send_msg& (0+255),f,c
  1822  000ECE  D7FC               	bra	u667
  1823  000ED0  D000               	nop2	
  1824                           
  1825                           ;LCD.c: 42: PORTBbits.RB3 = 0;
  1826  000ED2  9681               	bcf	3969,3,c	;volatile
  1827  000ED4  0012               	return		;funcret
  1828  000ED6                     __end_of_send_msg:
  1829                           	opt stack 0
  1830                           tblptru	equ	0xFF8
  1831                           tblptrh	equ	0xFF7
  1832                           tblptrl	equ	0xFF6
  1833                           tablat	equ	0xFF5
  1834                           intcon	equ	0xFF2
  1835                           intcon2	equ	0xFF1
  1836                           intcon3	equ	0xFF0
  1837                           wreg	equ	0xFE8
  1838                           postinc1	equ	0xFE6
  1839                           fsr1h	equ	0xFE2
  1840                           fsr1l	equ	0xFE1
  1841                           indf2	equ	0xFDF
  1842                           postinc2	equ	0xFDE
  1843                           fsr2h	equ	0xFDA
  1844                           fsr2l	equ	0xFD9
  1845                           status	equ	0xFD8
  1846                           
  1847 ;; *************** function _set_line *****************
  1848 ;; Defined at:
  1849 ;;		line 66 in file "LCD.c"
  1850 ;; Parameters:    Size  Location     Type
  1851 ;;  line            2   17[COMRAM] int 
  1852 ;;  pos             2   19[COMRAM] int 
  1853 ;; Auto vars:     Size  Location     Type
  1854 ;;  cursor          1   21[COMRAM] unsigned char 
  1855 ;; Return value:  Size  Location     Type
  1856 ;;                  1    wreg      void 
  1857 ;; Registers used:
  1858 ;;		wreg, status,2, status,0, cstack
  1859 ;; Tracked objects:
  1860 ;;		On entry : 0/0
  1861 ;;		On exit  : 0/0
  1862 ;;		Unchanged: 0/0
  1863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1864 ;;      Params:         4       0       0       0       0       0       0       0       0
  1865 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1866 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1867 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1868 ;;Total ram usage:        5 bytes
  1869 ;; Hardware stack levels used:    1
  1870 ;; Hardware stack levels required when called:    3
  1871 ;; This function calls:
  1872 ;;		_send_cfg
  1873 ;; This function is called by:
  1874 ;;		_cadastrarSenha
  1875 ;;		_lerToque
  1876 ;;		_cmpPass
  1877 ;; This function uses a non-reentrant model
  1878 ;;
  1879                           
  1880                           	psect	text11
  1881  000F1E                     __ptext11:
  1882                           	opt stack 0
  1883  000F1E                     _set_line:
  1884                           	opt stack 26
  1885                           
  1886                           ;LCD.c: 68: char cursor;
  1887                           ;LCD.c: 69: if(line == 0)
  1888                           
  1889                           ;incstack = 0
  1890  000F1E  5012               	movf	set_line@line,w,c
  1891  000F20  1013               	iorwf	set_line@line+1,w,c
  1892  000F22  A4D8               	btfss	status,2,c
  1893  000F24  D003               	goto	l1212
  1894                           
  1895                           ;LCD.c: 70: cursor = 0x80 + pos;
  1896  000F26  5014               	movf	set_line@pos,w,c
  1897  000F28  0F80               	addlw	128
  1898  000F2A  D002               	goto	L1
  1899  000F2C                     l1212:
  1900                           
  1901                           ;LCD.c: 71: else
  1902                           ;LCD.c: 72: cursor = 0xC0 + pos;
  1903  000F2C  5014               	movf	set_line@pos,w,c
  1904  000F2E  0FC0               	addlw	192
  1905  000F30                     L1:
  1906  000F30  6E16               	movwf	set_line@cursor,c
  1907                           
  1908                           ;LCD.c: 73: send_cfg(cursor);
  1909  000F32  5016               	movf	set_line@cursor,w,c
  1910  000F34  EC80  F007         	call	_send_cfg
  1911  000F38  0012               	return		;funcret
  1912  000F3A                     __end_of_set_line:
  1913                           	opt stack 0
  1914                           tblptru	equ	0xFF8
  1915                           tblptrh	equ	0xFF7
  1916                           tblptrl	equ	0xFF6
  1917                           tablat	equ	0xFF5
  1918                           intcon	equ	0xFF2
  1919                           intcon2	equ	0xFF1
  1920                           intcon3	equ	0xFF0
  1921                           wreg	equ	0xFE8
  1922                           postinc1	equ	0xFE6
  1923                           fsr1h	equ	0xFE2
  1924                           fsr1l	equ	0xFE1
  1925                           indf2	equ	0xFDF
  1926                           postinc2	equ	0xFDE
  1927                           fsr2h	equ	0xFDA
  1928                           fsr2l	equ	0xFD9
  1929                           status	equ	0xFD8
  1930                           
  1931 ;; *************** function _readSignal *****************
  1932 ;; Defined at:
  1933 ;;		line 13 in file "ReadSignal.c"
  1934 ;; Parameters:    Size  Location     Type
  1935 ;;  signal          2   18[COMRAM] PTR unsigned char 
  1936 ;;		 -> main@toc(2), main@pass(2), 
  1937 ;;  pos             2   20[COMRAM] int 
  1938 ;; Auto vars:     Size  Location     Type
  1939 ;;  j               2   28[COMRAM] int 
  1940 ;;  i               2   26[COMRAM] int 
  1941 ;;  limite          2   24[COMRAM] int 
  1942 ;; Return value:  Size  Location     Type
  1943 ;;                  1    wreg      void 
  1944 ;; Registers used:
  1945 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1946 ;; Tracked objects:
  1947 ;;		On entry : 0/0
  1948 ;;		On exit  : 0/0
  1949 ;;		Unchanged: 0/0
  1950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1951 ;;      Params:         4       0       0       0       0       0       0       0       0
  1952 ;;      Locals:         6       0       0       0       0       0       0       0       0
  1953 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1954 ;;      Totals:        12       0       0       0       0       0       0       0       0
  1955 ;;Total ram usage:       12 bytes
  1956 ;; Hardware stack levels used:    1
  1957 ;; Hardware stack levels required when called:    2
  1958 ;; This function calls:
  1959 ;;		_read_ADC
  1960 ;; This function is called by:
  1961 ;;		_cadastrarSenha
  1962 ;;		_lerToque
  1963 ;; This function uses a non-reentrant model
  1964 ;;
  1965                           
  1966                           	psect	text12
  1967  000C4C                     __ptext12:
  1968                           	opt stack 0
  1969  000C4C                     _readSignal:
  1970                           	opt stack 27
  1971                           
  1972                           ;ReadSignal.c: 15: int j = 0;
  1973                           
  1974                           ;incstack = 0
  1975  000C4C  0E00               	movlw	0
  1976  000C4E  6E1E               	movwf	readSignal@j+1,c
  1977  000C50  0E00               	movlw	0
  1978  000C52  6E1D               	movwf	readSignal@j,c
  1979                           
  1980                           ;ReadSignal.c: 16: if(pos == 1)
  1981  000C54  0415               	decf	readSignal@pos,w,c
  1982  000C56  1016               	iorwf	readSignal@pos+1,w,c
  1983  000C58  A4D8               	btfss	status,2,c
  1984  000C5A  D004               	goto	l1222
  1985                           
  1986                           ;ReadSignal.c: 17: j = 4;
  1987  000C5C  0E00               	movlw	0
  1988  000C5E  6E1E               	movwf	readSignal@j+1,c
  1989  000C60  0E04               	movlw	4
  1990  000C62  6E1D               	movwf	readSignal@j,c
  1991  000C64                     l1222:
  1992                           
  1993                           ;ReadSignal.c: 18: int limite;
  1994                           ;ReadSignal.c: 19: limite = j + 4;
  1995  000C64  0E04               	movlw	4
  1996  000C66  241D               	addwf	readSignal@j,w,c
  1997  000C68  6E19               	movwf	readSignal@limite,c
  1998  000C6A  0E00               	movlw	0
  1999  000C6C  201E               	addwfc	readSignal@j+1,w,c
  2000  000C6E  6E1A               	movwf	readSignal@limite+1,c
  2001                           
  2002                           ;ReadSignal.c: 20: int i;
  2003                           ;ReadSignal.c: 22: while(j < limite){
  2004  000C70  D033               	goto	l174
  2005  000C72                     l1224:
  2006                           
  2007                           ;ReadSignal.c: 24: i = 0;
  2008  000C72  0E00               	movlw	0
  2009  000C74  6E1C               	movwf	readSignal@i+1,c
  2010  000C76  0E00               	movlw	0
  2011  000C78  6E1B               	movwf	readSignal@i,c
  2012                           
  2013                           ;ReadSignal.c: 25: while(i < 500){
  2014  000C7A  D022               	goto	l1234
  2015  000C7C                     l1226:
  2016                           
  2017                           ;ReadSignal.c: 26: if((int)read_ADC() > 9){
  2018  000C7C  EC9D  F007         	call	_read_ADC	;wreg free
  2019  000C80  5010               	movf	?_read_ADC+1,w,c
  2020  000C82  E104               	bnz	u380
  2021  000C84  0E0A               	movlw	10
  2022  000C86  5C0F               	subwf	?_read_ADC,w,c
  2023  000C88  A0D8               	btfss	status,0,c
  2024  000C8A  D010               	goto	l1230
  2025  000C8C                     u380:
  2026                           
  2027                           ;ReadSignal.c: 27: *signal |= (0x03<<j);
  2028  000C8C  C01D  F017         	movff	readSignal@j,??_readSignal
  2029  000C90  0E03               	movlw	3
  2030  000C92  6E18               	movwf	(??_readSignal+1)& (0+255),c
  2031  000C94  2A17               	incf	??_readSignal,f,c
  2032  000C96  D002               	goto	u394
  2033  000C98                     u395:
  2034  000C98  90D8               	bcf	status,0,c
  2035  000C9A  3618               	rlcf	??_readSignal+1,f,c
  2036  000C9C                     u394:
  2037  000C9C  2E17               	decfsz	??_readSignal,f,c
  2038  000C9E  D7FC               	goto	u395
  2039  000CA0  C013  FFD9         	movff	readSignal@signal,fsr2l
  2040  000CA4  C014  FFDA         	movff	readSignal@signal+1,fsr2h
  2041  000CA8  5018               	movf	??_readSignal+1,w,c
  2042  000CAA  12DF               	iorwf	indf2,f,c
  2043  000CAC                     l1230:
  2044                           
  2045                           ;ReadSignal.c: 28: }
  2046                           ;ReadSignal.c: 29: _delay((unsigned long)((1)*(16000000/4000.0)));
  2047  000CAC  0E06               	movlw	6
  2048  000CAE  6E17               	movwf	??_readSignal& (0+255),c
  2049  000CB0  0E30               	movlw	48
  2050  000CB2                     u677:
  2051  000CB2  2EE8               	decfsz	wreg,f,c
  2052  000CB4  D7FE               	bra	u677
  2053  000CB6  2E17               	decfsz	??_readSignal& (0+255),f,c
  2054  000CB8  D7FC               	bra	u677
  2055  000CBA  D000               	nop2	
  2056                           
  2057                           ;ReadSignal.c: 30: i++;
  2058  000CBC  4A1B               	infsnz	readSignal@i,f,c
  2059  000CBE  2A1C               	incf	readSignal@i+1,f,c
  2060  000CC0                     l1234:
  2061  000CC0  BE1C               	btfsc	readSignal@i+1,7,c
  2062  000CC2  D7DC               	goto	l1226
  2063  000CC4  0EF4               	movlw	244
  2064  000CC6  5C1B               	subwf	readSignal@i,w,c
  2065  000CC8  0E01               	movlw	1
  2066  000CCA  581C               	subwfb	readSignal@i+1,w,c
  2067  000CCC  A0D8               	btfss	status,0,c
  2068  000CCE  D7D6               	goto	l1226
  2069                           
  2070                           ;ReadSignal.c: 31: }
  2071                           ;ReadSignal.c: 32: j+=2;
  2072  000CD0  0E02               	movlw	2
  2073  000CD2  261D               	addwf	readSignal@j,f,c
  2074  000CD4  0E00               	movlw	0
  2075  000CD6  221E               	addwfc	readSignal@j+1,f,c
  2076  000CD8                     l174:
  2077  000CD8  5019               	movf	readSignal@limite,w,c
  2078  000CDA  5C1D               	subwf	readSignal@j,w,c
  2079  000CDC  501E               	movf	readSignal@j+1,w,c
  2080  000CDE  0A80               	xorlw	128
  2081  000CE0  6E17               	movwf	??_readSignal& (0+255),c
  2082  000CE2  501A               	movf	readSignal@limite+1,w,c
  2083  000CE4  0A80               	xorlw	128
  2084  000CE6  5817               	subwfb	??_readSignal& (0+255),w,c
  2085  000CE8  B0D8               	btfsc	status,0,c
  2086  000CEA  0012               	return	
  2087  000CEC  D7C2               	goto	l1224
  2088  000CEE                     __end_of_readSignal:
  2089                           	opt stack 0
  2090                           tblptru	equ	0xFF8
  2091                           tblptrh	equ	0xFF7
  2092                           tblptrl	equ	0xFF6
  2093                           tablat	equ	0xFF5
  2094                           intcon	equ	0xFF2
  2095                           intcon2	equ	0xFF1
  2096                           intcon3	equ	0xFF0
  2097                           wreg	equ	0xFE8
  2098                           postinc1	equ	0xFE6
  2099                           fsr1h	equ	0xFE2
  2100                           fsr1l	equ	0xFE1
  2101                           indf2	equ	0xFDF
  2102                           postinc2	equ	0xFDE
  2103                           fsr2h	equ	0xFDA
  2104                           fsr2l	equ	0xFD9
  2105                           status	equ	0xFD8
  2106                           
  2107 ;; *************** function _read_ADC *****************
  2108 ;; Defined at:
  2109 ;;		line 19 in file "ADC.c"
  2110 ;; Parameters:    Size  Location     Type
  2111 ;;		None
  2112 ;; Auto vars:     Size  Location     Type
  2113 ;;  value           2   16[COMRAM] unsigned int 
  2114 ;; Return value:  Size  Location     Type
  2115 ;;                  2   14[COMRAM] unsigned int 
  2116 ;; Registers used:
  2117 ;;		None
  2118 ;; Tracked objects:
  2119 ;;		On entry : 0/0
  2120 ;;		On exit  : 0/0
  2121 ;;		Unchanged: 0/0
  2122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2123 ;;      Params:         2       0       0       0       0       0       0       0       0
  2124 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2125 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2126 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2127 ;;Total ram usage:        4 bytes
  2128 ;; Hardware stack levels used:    1
  2129 ;; Hardware stack levels required when called:    1
  2130 ;; This function calls:
  2131 ;;		Nothing
  2132 ;; This function is called by:
  2133 ;;		_readSignal
  2134 ;; This function uses a non-reentrant model
  2135 ;;
  2136                           
  2137                           	psect	text13
  2138  000F3A                     __ptext13:
  2139                           	opt stack 0
  2140  000F3A                     _read_ADC:
  2141                           	opt stack 27
  2142                           
  2143                           ;ADC.c: 20: unsigned int value;
  2144                           ;ADC.c: 21: ADCON0bits.GO = 1;
  2145                           
  2146                           ;incstack = 0
  2147  000F3A  82C2               	bsf	4034,1,c	;volatile
  2148  000F3C                     l163:
  2149  000F3C  B2C2               	btfsc	4034,1,c	;volatile
  2150  000F3E  D7FE               	goto	l163
  2151                           
  2152                           ;ADC.c: 24: value = ADRES;
  2153  000F40  CFC3 F011          	movff	4035,read_ADC@value	;volatile
  2154  000F44  CFC4 F012          	movff	4036,read_ADC@value+1	;volatile
  2155                           
  2156                           ;ADC.c: 26: return value;
  2157  000F48  C011  F00F         	movff	read_ADC@value,?_read_ADC
  2158  000F4C  C012  F010         	movff	read_ADC@value+1,?_read_ADC+1
  2159  000F50  0012               	return		;funcret
  2160  000F52                     __end_of_read_ADC:
  2161                           	opt stack 0
  2162                           tblptru	equ	0xFF8
  2163                           tblptrh	equ	0xFF7
  2164                           tblptrl	equ	0xFF6
  2165                           tablat	equ	0xFF5
  2166                           intcon	equ	0xFF2
  2167                           intcon2	equ	0xFF1
  2168                           intcon3	equ	0xFF0
  2169                           wreg	equ	0xFE8
  2170                           postinc1	equ	0xFE6
  2171                           fsr1h	equ	0xFE2
  2172                           fsr1l	equ	0xFE1
  2173                           indf2	equ	0xFDF
  2174                           postinc2	equ	0xFDE
  2175                           fsr2h	equ	0xFDA
  2176                           fsr2l	equ	0xFD9
  2177                           status	equ	0xFD8
  2178                           
  2179 ;; *************** function _clearLCD *****************
  2180 ;; Defined at:
  2181 ;;		line 31 in file "LCD.c"
  2182 ;; Parameters:    Size  Location     Type
  2183 ;;		None
  2184 ;; Auto vars:     Size  Location     Type
  2185 ;;		None
  2186 ;; Return value:  Size  Location     Type
  2187 ;;                  1    wreg      void 
  2188 ;; Registers used:
  2189 ;;		wreg, cstack
  2190 ;; Tracked objects:
  2191 ;;		On entry : 0/0
  2192 ;;		On exit  : 0/0
  2193 ;;		Unchanged: 0/0
  2194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2195 ;;      Params:         0       0       0       0       0       0       0       0       0
  2196 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2197 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2198 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2199 ;;Total ram usage:        0 bytes
  2200 ;; Hardware stack levels used:    1
  2201 ;; Hardware stack levels required when called:    3
  2202 ;; This function calls:
  2203 ;;		_send_cfg
  2204 ;; This function is called by:
  2205 ;;		_cadastrarSenha
  2206 ;;		_lerToque
  2207 ;;		_cmpPass
  2208 ;; This function uses a non-reentrant model
  2209 ;;
  2210                           
  2211                           	psect	text14
  2212  000F8A                     __ptext14:
  2213                           	opt stack 0
  2214  000F8A                     _clearLCD:
  2215                           	opt stack 26
  2216                           
  2217                           ;LCD.c: 32: send_cfg(0x01);
  2218                           
  2219                           ;incstack = 0
  2220  000F8A  0E01               	movlw	1
  2221  000F8C  EC80  F007         	call	_send_cfg
  2222  000F90  0012               	return		;funcret
  2223  000F92                     __end_of_clearLCD:
  2224                           	opt stack 0
  2225                           tblptru	equ	0xFF8
  2226                           tblptrh	equ	0xFF7
  2227                           tblptrl	equ	0xFF6
  2228                           tablat	equ	0xFF5
  2229                           intcon	equ	0xFF2
  2230                           intcon2	equ	0xFF1
  2231                           intcon3	equ	0xFF0
  2232                           wreg	equ	0xFE8
  2233                           postinc1	equ	0xFE6
  2234                           fsr1h	equ	0xFE2
  2235                           fsr1l	equ	0xFE1
  2236                           indf2	equ	0xFDF
  2237                           postinc2	equ	0xFDE
  2238                           fsr2h	equ	0xFDA
  2239                           fsr2l	equ	0xFD9
  2240                           status	equ	0xFD8
  2241                           
  2242 ;; *************** function _send_cfg *****************
  2243 ;; Defined at:
  2244 ;;		line 22 in file "LCD.c"
  2245 ;; Parameters:    Size  Location     Type
  2246 ;;  cmd             1    wreg     unsigned char 
  2247 ;; Auto vars:     Size  Location     Type
  2248 ;;  cmd             1   16[COMRAM] unsigned char 
  2249 ;; Return value:  Size  Location     Type
  2250 ;;                  1    wreg      void 
  2251 ;; Registers used:
  2252 ;;		wreg, cstack
  2253 ;; Tracked objects:
  2254 ;;		On entry : 0/0
  2255 ;;		On exit  : 0/0
  2256 ;;		Unchanged: 0/0
  2257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2258 ;;      Params:         0       0       0       0       0       0       0       0       0
  2259 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2260 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2261 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2262 ;;Total ram usage:        2 bytes
  2263 ;; Hardware stack levels used:    1
  2264 ;; Hardware stack levels required when called:    2
  2265 ;; This function calls:
  2266 ;;		_ena_pulse
  2267 ;; This function is called by:
  2268 ;;		_clearLCD
  2269 ;;		_init_LCD
  2270 ;;		_set_line
  2271 ;; This function uses a non-reentrant model
  2272 ;;
  2273                           
  2274                           	psect	text15
  2275  000F00                     __ptext15:
  2276                           	opt stack 0
  2277  000F00                     _send_cfg:
  2278                           	opt stack 26
  2279                           
  2280                           ;incstack = 0
  2281                           ;send_cfg@cmd stored from wreg
  2282  000F00  6E11               	movwf	send_cfg@cmd,c
  2283                           
  2284                           ;LCD.c: 24: PORTD = cmd;
  2285  000F02  C011  FF83         	movff	send_cfg@cmd,3971	;volatile
  2286                           
  2287                           ;LCD.c: 25: PORTBbits.RB3 = 0;
  2288  000F06  9681               	bcf	3969,3,c	;volatile
  2289                           
  2290                           ;LCD.c: 26: ena_pulse();
  2291  000F08  EC37  F007         	call	_ena_pulse	;wreg free
  2292                           
  2293                           ;LCD.c: 27: _delay((unsigned long)((1)*(16000000/4000.0)));
  2294  000F0C  0E06               	movlw	6
  2295  000F0E  6E10               	movwf	??_send_cfg& (0+255),c
  2296  000F10  0E30               	movlw	48
  2297  000F12                     u687:
  2298  000F12  2EE8               	decfsz	wreg,f,c
  2299  000F14  D7FE               	bra	u687
  2300  000F16  2E10               	decfsz	??_send_cfg& (0+255),f,c
  2301  000F18  D7FC               	bra	u687
  2302  000F1A  D000               	nop2	
  2303  000F1C  0012               	return		;funcret
  2304  000F1E                     __end_of_send_cfg:
  2305                           	opt stack 0
  2306                           tblptru	equ	0xFF8
  2307                           tblptrh	equ	0xFF7
  2308                           tblptrl	equ	0xFF6
  2309                           tablat	equ	0xFF5
  2310                           intcon	equ	0xFF2
  2311                           intcon2	equ	0xFF1
  2312                           intcon3	equ	0xFF0
  2313                           wreg	equ	0xFE8
  2314                           postinc1	equ	0xFE6
  2315                           fsr1h	equ	0xFE2
  2316                           fsr1l	equ	0xFE1
  2317                           indf2	equ	0xFDF
  2318                           postinc2	equ	0xFDE
  2319                           fsr2h	equ	0xFDA
  2320                           fsr2l	equ	0xFD9
  2321                           status	equ	0xFD8
  2322                           
  2323 ;; *************** function _ena_pulse *****************
  2324 ;; Defined at:
  2325 ;;		line 11 in file "LCD.c"
  2326 ;; Parameters:    Size  Location     Type
  2327 ;;		None
  2328 ;; Auto vars:     Size  Location     Type
  2329 ;;		None
  2330 ;; Return value:  Size  Location     Type
  2331 ;;                  1    wreg      void 
  2332 ;; Registers used:
  2333 ;;		wreg
  2334 ;; Tracked objects:
  2335 ;;		On entry : 0/0
  2336 ;;		On exit  : 0/0
  2337 ;;		Unchanged: 0/0
  2338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2339 ;;      Params:         0       0       0       0       0       0       0       0       0
  2340 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2341 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2342 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2343 ;;Total ram usage:        1 bytes
  2344 ;; Hardware stack levels used:    1
  2345 ;; Hardware stack levels required when called:    1
  2346 ;; This function calls:
  2347 ;;		Nothing
  2348 ;; This function is called by:
  2349 ;;		_send_cfg
  2350 ;;		_send_msg
  2351 ;; This function uses a non-reentrant model
  2352 ;;
  2353                           
  2354                           	psect	text16
  2355  000E6E                     __ptext16:
  2356                           	opt stack 0
  2357  000E6E                     _ena_pulse:
  2358                           	opt stack 26
  2359                           
  2360                           ;LCD.c: 13: PORTEbits.RE1 = 0;
  2361                           
  2362                           ;incstack = 0
  2363  000E6E  9284               	bcf	3972,1,c	;volatile
  2364                           
  2365                           ;LCD.c: 14: _delay((unsigned long)((1)*(16000000/4000.0)));
  2366  000E70  0E06               	movlw	6
  2367  000E72  6E0F               	movwf	??_ena_pulse& (0+255),c
  2368  000E74  0E30               	movlw	48
  2369  000E76                     u697:
  2370  000E76  2EE8               	decfsz	wreg,f,c
  2371  000E78  D7FE               	bra	u697
  2372  000E7A  2E0F               	decfsz	??_ena_pulse& (0+255),f,c
  2373  000E7C  D7FC               	bra	u697
  2374  000E7E  D000               	nop2	
  2375                           
  2376                           ;LCD.c: 15: PORTEbits.RE1 = 1;
  2377  000E80  8284               	bsf	3972,1,c	;volatile
  2378                           
  2379                           ;LCD.c: 16: _delay((unsigned long)((1)*(16000000/4000.0)));
  2380  000E82  0E06               	movlw	6
  2381  000E84  6E0F               	movwf	??_ena_pulse& (0+255),c
  2382  000E86  0E30               	movlw	48
  2383  000E88                     u707:
  2384  000E88  2EE8               	decfsz	wreg,f,c
  2385  000E8A  D7FE               	bra	u707
  2386  000E8C  2E0F               	decfsz	??_ena_pulse& (0+255),f,c
  2387  000E8E  D7FC               	bra	u707
  2388  000E90  D000               	nop2	
  2389                           
  2390                           ;LCD.c: 17: PORTEbits.RE1 = 0;
  2391  000E92  9284               	bcf	3972,1,c	;volatile
  2392                           
  2393                           ;LCD.c: 18: _delay((unsigned long)((1)*(16000000/4000.0)));
  2394  000E94  0E06               	movlw	6
  2395  000E96  6E0F               	movwf	??_ena_pulse& (0+255),c
  2396  000E98  0E30               	movlw	48
  2397  000E9A                     u717:
  2398  000E9A  2EE8               	decfsz	wreg,f,c
  2399  000E9C  D7FE               	bra	u717
  2400  000E9E  2E0F               	decfsz	??_ena_pulse& (0+255),f,c
  2401  000EA0  D7FC               	bra	u717
  2402  000EA2  D000               	nop2	
  2403  000EA4  0012               	return		;funcret
  2404  000EA6                     __end_of_ena_pulse:
  2405                           	opt stack 0
  2406                           tblptru	equ	0xFF8
  2407                           tblptrh	equ	0xFF7
  2408                           tblptrl	equ	0xFF6
  2409                           tablat	equ	0xFF5
  2410                           intcon	equ	0xFF2
  2411                           intcon2	equ	0xFF1
  2412                           intcon3	equ	0xFF0
  2413                           wreg	equ	0xFE8
  2414                           postinc1	equ	0xFE6
  2415                           fsr1h	equ	0xFE2
  2416                           fsr1l	equ	0xFE1
  2417                           indf2	equ	0xFDF
  2418                           postinc2	equ	0xFDE
  2419                           fsr2h	equ	0xFDA
  2420                           fsr2l	equ	0xFD9
  2421                           status	equ	0xFD8
  2422                           
  2423 ;; *************** function _ISR *****************
  2424 ;; Defined at:
  2425 ;;		line 32 in file "Interrupt.c"
  2426 ;; Parameters:    Size  Location     Type
  2427 ;;		None
  2428 ;; Auto vars:     Size  Location     Type
  2429 ;;		None
  2430 ;; Return value:  Size  Location     Type
  2431 ;;                  1    wreg      void 
  2432 ;; Registers used:
  2433 ;;		wreg, status,2
  2434 ;; Tracked objects:
  2435 ;;		On entry : 0/0
  2436 ;;		On exit  : 0/0
  2437 ;;		Unchanged: 0/0
  2438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2439 ;;      Params:         0       0       0       0       0       0       0       0       0
  2440 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2441 ;;      Temps:         14       0       0       0       0       0       0       0       0
  2442 ;;      Totals:        14       0       0       0       0       0       0       0       0
  2443 ;;Total ram usage:       14 bytes
  2444 ;; Hardware stack levels used:    1
  2445 ;; This function calls:
  2446 ;;		Nothing
  2447 ;; This function is called by:
  2448 ;;		Interrupt level 2
  2449 ;; This function uses a non-reentrant model
  2450 ;;
  2451                           
  2452                           	psect	intcode
  2453  000008                     __pintcode:
  2454                           	opt stack 0
  2455  000008                     _ISR:
  2456                           	opt stack 26
  2457                           
  2458                           ;incstack = 0
  2459  000008  822B               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2460  00000A  ED77  F006         	call	int_func,f	;refresh shadow registers
  2461                           tblptru	equ	0xFF8
  2462                           tblptrh	equ	0xFF7
  2463                           tblptrl	equ	0xFF6
  2464                           tablat	equ	0xFF5
  2465                           intcon	equ	0xFF2
  2466                           intcon2	equ	0xFF1
  2467                           intcon3	equ	0xFF0
  2468                           wreg	equ	0xFE8
  2469                           postinc1	equ	0xFE6
  2470                           fsr1h	equ	0xFE2
  2471                           fsr1l	equ	0xFE1
  2472                           indf2	equ	0xFDF
  2473                           postinc2	equ	0xFDE
  2474                           fsr2h	equ	0xFDA
  2475                           fsr2l	equ	0xFD9
  2476                           status	equ	0xFD8
  2477                           
  2478                           	psect	intcode_body
  2479  000CEE                     __pintcode_body:
  2480                           	opt stack 26
  2481  000CEE                     int_func:
  2482                           	opt stack 26
  2483  000CEE  0006               	pop		; remove dummy address from shadow register refresh
  2484  000CF0  CFFA F001          	movff	pclath,??_ISR
  2485  000CF4  CFFB F002          	movff	pclatu,??_ISR+1
  2486  000CF8  CFE9 F003          	movff	fsr0l,??_ISR+2
  2487  000CFC  CFEA F004          	movff	fsr0h,??_ISR+3
  2488  000D00  CFE1 F005          	movff	fsr1l,??_ISR+4
  2489  000D04  CFE2 F006          	movff	fsr1h,??_ISR+5
  2490  000D08  CFD9 F007          	movff	fsr2l,??_ISR+6
  2491  000D0C  CFDA F008          	movff	fsr2h,??_ISR+7
  2492  000D10  CFF3 F009          	movff	prodl,??_ISR+8
  2493  000D14  CFF4 F00A          	movff	prodh,??_ISR+9
  2494  000D18  CFF6 F00B          	movff	tblptrl,??_ISR+10
  2495  000D1C  CFF7 F00C          	movff	tblptrh,??_ISR+11
  2496  000D20  CFF8 F00D          	movff	tblptru,??_ISR+12
  2497  000D24  CFF5 F00E          	movff	tablat,??_ISR+13
  2498                           
  2499                           ;Interrupt.c: 34: if(INTCON3bits.INT2IF){
  2500  000D28  A2F0               	btfss	intcon3,1,c	;volatile
  2501  000D2A  D005               	goto	i2l22
  2502                           
  2503                           ;Interrupt.c: 35: INTCON3bits.INT2IF = 0;
  2504  000D2C  92F0               	bcf	intcon3,1,c	;volatile
  2505                           
  2506                           ;Interrupt.c: 36: button = 1;
  2507  000D2E  0E00               	movlw	0
  2508  000D30  6E2A               	movwf	_button+1,c
  2509  000D32  0E01               	movlw	1
  2510  000D34  6E29               	movwf	_button,c
  2511  000D36                     i2l22:
  2512  000D36  C00E  FFF5         	movff	??_ISR+13,tablat
  2513  000D3A  C00D  FFF8         	movff	??_ISR+12,tblptru
  2514  000D3E  C00C  FFF7         	movff	??_ISR+11,tblptrh
  2515  000D42  C00B  FFF6         	movff	??_ISR+10,tblptrl
  2516  000D46  C00A  FFF4         	movff	??_ISR+9,prodh
  2517  000D4A  C009  FFF3         	movff	??_ISR+8,prodl
  2518  000D4E  C008  FFDA         	movff	??_ISR+7,fsr2h
  2519  000D52  C007  FFD9         	movff	??_ISR+6,fsr2l
  2520  000D56  C006  FFE2         	movff	??_ISR+5,fsr1h
  2521  000D5A  C005  FFE1         	movff	??_ISR+4,fsr1l
  2522  000D5E  C004  FFEA         	movff	??_ISR+3,fsr0h
  2523  000D62  C003  FFE9         	movff	??_ISR+2,fsr0l
  2524  000D66  C002  FFFB         	movff	??_ISR+1,pclatu
  2525  000D6A  C001  FFFA         	movff	??_ISR,pclath
  2526  000D6E  922B               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2527  000D70  0011               	retfie		f
  2528  000D72                     __end_of_ISR:
  2529                           	opt stack 0
  2530                           pclatu	equ	0xFFB
  2531                           pclath	equ	0xFFA
  2532                           tblptru	equ	0xFF8
  2533                           tblptrh	equ	0xFF7
  2534                           tblptrl	equ	0xFF6
  2535                           tablat	equ	0xFF5
  2536                           prodh	equ	0xFF4
  2537                           prodl	equ	0xFF3
  2538                           intcon	equ	0xFF2
  2539                           intcon2	equ	0xFF1
  2540                           intcon3	equ	0xFF0
  2541                           fsr0h	equ	0xFEA
  2542                           fsr0l	equ	0xFE9
  2543                           wreg	equ	0xFE8
  2544                           postinc1	equ	0xFE6
  2545                           fsr1h	equ	0xFE2
  2546                           fsr1l	equ	0xFE1
  2547                           indf2	equ	0xFDF
  2548                           postinc2	equ	0xFDE
  2549                           fsr2h	equ	0xFDA
  2550                           fsr2l	equ	0xFD9
  2551                           status	equ	0xFD8
  2552                           pclatu	equ	0xFFB
  2553                           pclath	equ	0xFFA
  2554                           tblptru	equ	0xFF8
  2555                           tblptrh	equ	0xFF7
  2556                           tblptrl	equ	0xFF6
  2557                           tablat	equ	0xFF5
  2558                           prodh	equ	0xFF4
  2559                           prodl	equ	0xFF3
  2560                           intcon	equ	0xFF2
  2561                           intcon2	equ	0xFF1
  2562                           intcon3	equ	0xFF0
  2563                           fsr0h	equ	0xFEA
  2564                           fsr0l	equ	0xFE9
  2565                           wreg	equ	0xFE8
  2566                           postinc1	equ	0xFE6
  2567                           fsr1h	equ	0xFE2
  2568                           fsr1l	equ	0xFE1
  2569                           indf2	equ	0xFDF
  2570                           postinc2	equ	0xFDE
  2571                           fsr2h	equ	0xFDA
  2572                           fsr2l	equ	0xFD9
  2573                           status	equ	0xFD8
  2574                           
  2575                           	psect	rparam
  2576  0000                     pclatu	equ	0xFFB
  2577                           pclath	equ	0xFFA
  2578                           tblptru	equ	0xFF8
  2579                           tblptrh	equ	0xFF7
  2580                           tblptrl	equ	0xFF6
  2581                           tablat	equ	0xFF5
  2582                           prodh	equ	0xFF4
  2583                           prodl	equ	0xFF3
  2584                           intcon	equ	0xFF2
  2585                           intcon2	equ	0xFF1
  2586                           intcon3	equ	0xFF0
  2587                           fsr0h	equ	0xFEA
  2588                           fsr0l	equ	0xFE9
  2589                           wreg	equ	0xFE8
  2590                           postinc1	equ	0xFE6
  2591                           fsr1h	equ	0xFE2
  2592                           fsr1l	equ	0xFE1
  2593                           indf2	equ	0xFDF
  2594                           postinc2	equ	0xFDE
  2595                           fsr2h	equ	0xFDA
  2596                           fsr2l	equ	0xFD9
  2597                           status	equ	0xFD8
  2598                           
  2599                           	psect	temp
  2600  00002B                     btemp:
  2601                           	opt stack 0
  2602  00002B                     	ds	1
  2603  0000                     int$flags	set	btemp
  2604                           pclatu	equ	0xFFB
  2605                           pclath	equ	0xFFA
  2606                           tblptru	equ	0xFF8
  2607                           tblptrh	equ	0xFF7
  2608                           tblptrl	equ	0xFF6
  2609                           tablat	equ	0xFF5
  2610                           prodh	equ	0xFF4
  2611                           prodl	equ	0xFF3
  2612                           intcon	equ	0xFF2
  2613                           intcon2	equ	0xFF1
  2614                           intcon3	equ	0xFF0
  2615                           fsr0h	equ	0xFEA
  2616                           fsr0l	equ	0xFE9
  2617                           wreg	equ	0xFE8
  2618                           postinc1	equ	0xFE6
  2619                           fsr1h	equ	0xFE2
  2620                           fsr1l	equ	0xFE1
  2621                           indf2	equ	0xFDF
  2622                           postinc2	equ	0xFDE
  2623                           fsr2h	equ	0xFDA
  2624                           fsr2l	equ	0xFD9
  2625                           status	equ	0xFD8


Data Sizes:
    Strings     76
    Constant    0
    Data        0
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      42
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    cmpPass@toque	PTR unsigned char  size(2) Largest target is 2
		 -> main@toc(COMRAM[2]), 

    cmpPass@pass	PTR unsigned char  size(2) Largest target is 2
		 -> main@pass(COMRAM[2]), 

    lerToque@toque	PTR unsigned char  size(2) Largest target is 2
		 -> main@toc(COMRAM[2]), 

    cadastrarSenha@pass	PTR unsigned char  size(2) Largest target is 2
		 -> main@pass(COMRAM[2]), 

    cmpSignal@toc	PTR unsigned char  size(2) Largest target is 2
		 -> main@toc(COMRAM[2]), 

    cmpSignal@pass	PTR unsigned char  size(2) Largest target is 2
		 -> main@pass(COMRAM[2]), 

    readSignal@signal	PTR unsigned char  size(2) Largest target is 2
		 -> main@toc(COMRAM[2]), main@pass(COMRAM[2]), 

    write_LCD@c	PTR unsigned char  size(2) Largest target is 14
		 -> STR_9(CODE[14]), STR_8(CODE[10]), STR_7(CODE[10]), STR_6(CODE[10]), 
		 -> STR_5(CODE[14]), STR_4(CODE[11]), STR_3(CODE[8]), STR_2(CODE[6]), 
		 -> STR_1(CODE[13]), 


Critical Paths under _main in COMRAM

    _main->_cadastrarSenha
    _lerToque->_readSignal
    _init_LCD->_send_cfg
    _cmpPass->_write_LCD
    _cadastrarSenha->_readSignal
    _write_LCD->_send_msg
    _send_msg->_ena_pulse
    _set_line->_send_cfg
    _readSignal->_read_ADC
    _clearLCD->_send_cfg
    _send_cfg->_ena_pulse

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   10744
                                             36 COMRAM     4     4      0
                     _cadastrarSenha
                            _cmpPass
                           _init_ADC
                        _init_INTRB2
                           _init_LCD
                           _lerToque
 ---------------------------------------------------------------------------------
 (1) _lerToque                                             4     2      2    3739
                                             30 COMRAM     4     2      2
                           _clearLCD
                         _readSignal
                           _send_msg
                           _set_line
                          _write_LCD
 ---------------------------------------------------------------------------------
 (1) _init_LCD                                             0     0      0      15
                           _send_cfg
 ---------------------------------------------------------------------------------
 (1) _init_INTRB2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _cmpPass                                              6     2      4    3011
                                             23 COMRAM     6     2      4
                                _bip
                           _clearLCD
                          _cmpSignal
                           _set_line
                          _write_LCD
 ---------------------------------------------------------------------------------
 (2) _cmpSignal                                            6     2      4     216
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _bip                                                  8     4      4     391
                                             14 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _cadastrarSenha                                       6     4      2    3803
                                             30 COMRAM     6     4      2
                           _clearLCD
                         _readSignal
                           _send_msg
                           _set_line
                          _write_LCD
 ---------------------------------------------------------------------------------
 (2) _write_LCD                                            6     4      2     681
                                             17 COMRAM     6     4      2
                           _send_msg
 ---------------------------------------------------------------------------------
 (3) _send_msg                                             2     2      0      15
                                             15 COMRAM     2     2      0
                          _ena_pulse
 ---------------------------------------------------------------------------------
 (2) _set_line                                             5     1      4    1513
                                             17 COMRAM     5     1      4
                           _send_cfg
 ---------------------------------------------------------------------------------
 (2) _readSignal                                          12     8      4    1207
                                             18 COMRAM    12     8      4
                           _read_ADC
 ---------------------------------------------------------------------------------
 (3) _read_ADC                                             4     2      2      23
                                             14 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _clearLCD                                             0     0      0      15
                           _send_cfg
 ---------------------------------------------------------------------------------
 (3) _send_cfg                                             2     2      0      15
                                             15 COMRAM     2     2      0
                          _ena_pulse
 ---------------------------------------------------------------------------------
 (4) _ena_pulse                                            1     1      0       0
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                 14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _cadastrarSenha
     _clearLCD
       _send_cfg
         _ena_pulse
     _readSignal
       _read_ADC
     _send_msg
       _ena_pulse
     _set_line
       _send_cfg
         _ena_pulse
     _write_LCD
       _send_msg
         _ena_pulse
   _cmpPass
     _bip
     _clearLCD
       _send_cfg
         _ena_pulse
     _cmpSignal
     _set_line
       _send_cfg
         _ena_pulse
     _write_LCD
       _send_msg
         _ena_pulse
   _init_ADC
   _init_INTRB2
   _init_LCD
     _send_cfg
       _ena_pulse
   _lerToque
     _clearLCD
       _send_cfg
         _ena_pulse
     _readSignal
       _read_ADC
     _send_msg
       _ena_pulse
     _set_line
       _send_cfg
         _ena_pulse
     _write_LCD
       _send_msg
         _ena_pulse

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      2A       1       44.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      2A      20        0.0%
DATA                 0      0      2A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Sat Jul  1 03:07:43 2017

            __CFG_BOR$ON 000000              __CFG_BORV$3 000000             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
                    l203 0C4A                      l163 0F3C                      l243 0AB0  
                    l174 0CD8             __CFG_CPB$OFF 000000                      u450 0BAE  
           __CFG_CPD$OFF 000000                      u380 0C8C                      u508 0C0A  
                    _ISR 0008                      u394 0C9C                      u490 0C08  
                    u707 0E88                      u395 0C98                      u627 0BC8  
                    u468 0BB0                      u717 0E9A                      u637 0C22  
                    u647 09AE                      u657 0EB4                      u667 0EC8  
                    u677 0CB2                      u687 0F12                      u697 0E76  
                    _bip 0B8A         ??_cadastrarSenha 0021                      wreg 000FE8  
           __CFG_FOSC$HS 000000             __CFG_LVP$OFF 000000                     ?_ISR 0001  
           __CFG_WDT$OFF 000000                     l1202 0E2E                     l1212 0F2C  
                   l1300 0910                     l1230 0CAC                     l1222 0C64  
                   l1206 0E4E                     l1310 0960                     l1224 0C72  
                   l1304 0934                     l1226 0C7C                     l1234 0CC0  
                   l1306 094C                     l1308 0950                     l1340 0A40  
                   l1262 0BD8                     l1246 0E1A                     l1350 0A9A  
                   l1334 0A06                     l1272 0C34                     l1264 0BEE  
                   l1344 0A5E                     l1352 0A9E                     l1290 08B8  
                   l1258 0BA4                     l1370 0B30                     ?_bip 000F  
                   l1268 0BFE                     l1348 0A82                     l1296 08F2  
                   l1398 0D9A                     STR_1 081D                     STR_2 0847  
                   STR_3 083F                     STR_4 082A                     STR_5 0801  
                   STR_6 0835                     STR_7 0813                     STR_8 0835  
                   STR_9 080F                     _BRGH 007D62                     _CREN 007D5C  
                   _RCIF 007CF5                     i2l22 0D36                     _SPEN 007D5F  
                   _TRMT 007D61                     _TXEN 007D65                     _SYNC 007D64  
                   bip@j 0015                     _main 0D72                     fsr0h 000FEA  
                   fsr1h 000FE2                     fsr2h 000FDA                     fsr0l 000FE9  
                   indf2 000FDF                     fsr1l 000FE1                     fsr2l 000FD9  
                   btemp 002B                     prodh 000FF4                     prodl 000FF3  
                   start 000E            __CFG_IESO$OFF 000000             ?_init_INTRB2 0001  
          __CFG_MCLRE$ON 000000             ___param_bank 000000                    ??_ISR 0001  
                  ??_bip 0013            __CFG_PLLDIV$1 000000           __CFG_CCP2MX$ON 000000  
                  ?_main 0001                    _ADRES 000FC3                    _RCREG 000FAE  
                  _TMR0H 000FD7                    _TMR0L 000FD6                    _SPBRG 000FAF  
                  _PORTD 000F83            __CFG_USBDIV$1 000000                    _TRISB 000F93  
                  _TRISD 000F95                    _TRISE 000F96                    _TXREG 000FAD  
          __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000  
          __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000          __end_of_cmpPass 0B8A  
         __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000  
         __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000  
                  pclath 000FFA                    tablat 000FF5                    status 000FD8  
         __CFG_ICPRT$OFF 000000          __initialization 0F52             __end_of_main 0DD8  
                 ??_main 0025            __activetblptr 000001                   _ADCON0 000FC2  
                 _ADCON1 000FC1                   _ADCON2 000FC0                   _TRISC6 007CA6  
                 _TRISC7 007CA7         __end_of_clearLCD 0F92           __CFG_XINST$OFF 000000  
         __CFG_STVREN$ON 000000         __end_of_init_ADC 0F7A              readSignal@i 001B  
            readSignal@j 001D         __end_of_lerToque 0AB2         __end_of_init_LCD 0F00  
       __end_of_read_ADC 0F52                   _button 0029                ??_cmpPass 001C  
       __end_of_send_cfg 0F1E         __end_of_send_msg 0ED6         __end_of_set_line 0F3A  
           __mediumconst 0000                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8               __accesstop 0060  __end_of__initialization 0F56  
        __CFG_PBADEN$OFF 000000            ___rparam_used 000001           __pcstackCOMRAM 0001  
   __size_of_init_INTRB2 0010       __size_of_cmpSignal 004C       __size_of_ena_pulse 0038  
              ?_clearLCD 0001              send_cfg@cmd 0011                ?_init_ADC 0001  
              ?_lerToque 001F                ?_init_LCD 0001          __CFG_VREGEN$OFF 000000  
              ?_read_ADC 000F              send_msg@msg 0011       __size_of_write_LCD 004A  
      __end_of_cmpSignal 0E24                ?_send_cfg 0001                  __Hparam 0000  
              ?_send_msg 0001        __end_of_ena_pulse 0EA6                  __Lparam 0000  
              ?_set_line 0012               _readSignal 0C4C             __psmallconst 0800  
                __pcinit 0F52                  __ramtop 0800                  _cmpPass 0AB2  
                __ptext0 0D72                  __ptext1 09BC                  __ptext2 0ED6  
                __ptext3 0F7A                  __ptext4 0F68                  __ptext5 0AB2  
                __ptext6 0DD8                  __ptext7 0B8A                  __ptext8 084E  
                __ptext9 0E24                _T0CONbits 000FD5       cadastrarSenha@pass 001F  
           __size_of_ISR 0D6A                  bip@time 0011             __size_of_bip 00C2  
             ??_clearLCD 0012              set_line@pos 0014                  main@toc 0025  
         __pintcode_body 0CEE     end_of_initialization 0F56               ??_init_ADC 000F  
             ??_lerToque 0021               ??_init_LCD 0012               ??_read_ADC 0011  
__size_of_cadastrarSenha 016E                  int_func 0CEE               ??_send_cfg 0010  
             ??_send_msg 0010               ??_set_line 0016           set_line@cursor 0016  
                postinc1 000FE6                  postinc2 000FDE                _PORTBbits 000F81  
              _PORTCbits 000F82                _PORTEbits 000F84        __end_of_write_LCD 0E6E  
              _TRISAbits 000F92                _TRISBbits 000F93                _TRISCbits 000F94  
            ?_readSignal 0013      start_initialization 0F52              __end_of_ISR 0D72  
            __end_of_bip 0C4C            ??_init_INTRB2 000F            lerToque@toque 001F  
       __CFG_LPT1OSC$OFF 000000              __pbssCOMRAM 0029        __size_of_clearLCD 0008  
          read_ADC@value 0011      __size_of_readSignal 00A2           _cadastrarSenha 084E  
      __size_of_init_ADC 0012        __size_of_lerToque 00F6        __size_of_init_LCD 002A  
      __size_of_read_ADC 0018                __pintcode 0008                _cmpSignal 0DD8  
      __size_of_send_cfg 001E        __size_of_send_msg 0030        __size_of_set_line 001C  
              _ena_pulse 0E6E          cadastrarSenha@i 0023      __end_of_init_INTRB2 0F8A  
               ?_cmpPass 0018              __smallconst 0800         readSignal@limite 0019  
              bip@rounds 000F         readSignal@signal 0013   __end_of_cadastrarSenha 09BC  
       __CFG_WDTPS$32768 000000               ?_cmpSignal 000F               ?_ena_pulse 0001  
          cmpSignal@pass 000F               _ADCON0bits 000FC2                _write_LCD 0E24  
            _INTCON2bits 000FF1              _INTCON3bits 000FF0          ?_cadastrarSenha 001F  
              lerToque@i 0021              _init_INTRB2 0F7A                 __Hrparam 0000  
               __Lrparam 0000             __Lsmallconst 0800             ??_readSignal 0017  
       __size_of_cmpPass 00D8                 _clearLCD 0F8A             cmpPass@toque 001A  
             ?_write_LCD 0012                 __ptext10 0EA6                 __ptext11 0F1E  
               __ptext12 0C4C                 __ptext13 0F3A                 __ptext14 0F8A  
               __ptext15 0F00                 __ptext16 0E6E            readSignal@pos 0015  
               _init_ADC 0F68                 _lerToque 09BC                 _init_LCD 0ED6  
               _read_ADC 0F3A       __end_of_readSignal 0CEE            __size_of_main 0066  
               _send_cfg 0F00                 _send_msg 0EA6                 cmpPass@i 001C  
             write_LCD@c 0012               write_LCD@i 0016                 _set_line 0F1E  
           set_line@line 0012              ??_cmpSignal 0013                 int$flags 002B  
           cmpSignal@toc 0011              ??_ena_pulse 000F                 main@pass 0027  
  __CFG_CPUDIV$OSC1_PLL2 000000               _INTCONbits 000FF2                 intlevel2 0000  
            cmpPass@pass 0018              ??_write_LCD 0014  
