

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Mon Jul  3 18:34:32 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1
    29                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    30                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    33                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    34                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    35  0000                     
    36                           ; Version 1.41
    37                           ; Generated 25/01/2017 GMT
    38                           ; 
    39                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    40                           ; All rights reserved.
    41                           ; 
    42                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    43                           ; 
    44                           ; Redistribution and use in source and binary forms, with or without modification, are
    45                           ; permitted provided that the following conditions are met:
    46                           ; 
    47                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    48                           ;        conditions and the following disclaimer.
    49                           ; 
    50                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    51                           ;        of conditions and the following disclaimer in the documentation and/or other
    52                           ;        materials provided with the distribution.
    53                           ; 
    54                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    55                           ;        software without specific prior written permission.
    56                           ; 
    57                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    58                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    59                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    60                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    61                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    62                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    63                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    64                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    65                           ; 
    66                           ; 
    67                           ; Code-generator required, PIC18F4550 Definitions
    68                           ; 
    69                           ; SFR Addresses
    70  0000                     _ADRES	set	4035
    71  0000                     _CCP1CONbits	set	4029
    72  0000                     _CCPR1L	set	4030
    73  0000                     _CCP1CON	set	4029
    74  0000                     _PR2	set	4043
    75  0000                     _T2CON	set	4042
    76  0000                     _PORTCbits	set	3970
    77  0000                     _TRISCbits	set	3988
    78  0000                     _ADCON0bits	set	4034
    79  0000                     _ADCON2	set	4032
    80  0000                     _ADCON1	set	4033
    81  0000                     _ADCON0	set	4034
    82  0000                     _TRISAbits	set	3986
    83  0000                     _RCREG	set	4014
    84  0000                     _TXREG	set	4013
    85  0000                     _SPBRG	set	4015
    86  0000                     _TRISE	set	3990
    87  0000                     _TRISB	set	3987
    88  0000                     _PORTBbits	set	3969
    89  0000                     _PORTD	set	3971
    90  0000                     _PORTEbits	set	3972
    91  0000                     _TMR0L	set	4054
    92  0000                     _TMR0H	set	4055
    93  0000                     _T0CONbits	set	4053
    94  0000                     _TRISD	set	3989
    95  0000                     _INTCON2bits	set	4081
    96  0000                     _TRISBbits	set	3987
    97  0000                     _INTCONbits	set	4082
    98  0000                     _INTCON3bits	set	4080
    99  0000                     _RCIF	set	31989
   100  0000                     _TRMT	set	32097
   101  0000                     _TXEN	set	32101
   102  0000                     _CREN	set	32092
   103  0000                     _TRISC6	set	31910
   104  0000                     _TRISC7	set	31911
   105  0000                     _SPEN	set	32095
   106  0000                     _SYNC	set	32100
   107  0000                     _BRGH	set	32098
   108                           
   109                           	psect	smallconst
   110  000800                     __psmallconst:
   111                           	opt stack 0
   112  000800  00                 	db	0
   113  000801                     STR_1:
   114  000801  42                 	db	66	;'B'
   115  000802  61                 	db	97	;'a'
   116  000803  74                 	db	116	;'t'
   117  000804  61                 	db	97	;'a'
   118  000805  20                 	db	32
   119  000806  6E                 	db	110	;'n'
   120  000807  61                 	db	97	;'a'
   121  000808  20                 	db	32
   122  000809  70                 	db	112	;'p'
   123  00080A  6F                 	db	111	;'o'
   124  00080B  72                 	db	114	;'r'
   125  00080C  74                 	db	116	;'t'
   126  00080D  61                 	db	97	;'a'
   127  00080E  00                 	db	0
   128  00080F                     STR_6:
   129  00080F  6E                 	db	110	;'n'
   130  000810  61                 	db	97	;'a'
   131  000811  6F                 	db	111	;'o'
   132  000812  20                 	db	32
   133  000813  63                 	db	99	;'c'
   134  000814  6F                 	db	111	;'o'
   135  000815  69                 	db	105	;'i'
   136  000816  6E                 	db	110	;'n'
   137  000817  63                 	db	99	;'c'
   138  000818  69                 	db	105	;'i'
   139  000819  64                 	db	100	;'d'
   140  00081A  65                 	db	101	;'e'
   141  00081B  6D                 	db	109	;'m'
   142  00081C  00                 	db	0
   143  00081D                     STR_11:
   144  00081D  43                 	db	67	;'C'
   145  00081E  6F                 	db	111	;'o'
   146  00081F  6E                 	db	110	;'n'
   147  000820  66                 	db	102	;'f'
   148  000821  69                 	db	105	;'i'
   149  000822  72                 	db	114	;'r'
   150  000823  6D                 	db	109	;'m'
   151  000824  65                 	db	101	;'e'
   152  000825  20                 	db	32
   153  000826  73                 	db	115	;'s'
   154  000827  75                 	db	117	;'u'
   155  000828  61                 	db	97	;'a'
   156  000829  00                 	db	0
   157  00082A                     STR_13:
   158  00082A  43                 	db	67	;'C'
   159  00082B  61                 	db	97	;'a'
   160  00082C  64                 	db	100	;'d'
   161  00082D  61                 	db	97	;'a'
   162  00082E  73                 	db	115	;'s'
   163  00082F  74                 	db	116	;'t'
   164  000830  72                 	db	114	;'r'
   165  000831  65                 	db	101	;'e'
   166  000832  20                 	db	32
   167  000833  73                 	db	115	;'s'
   168  000834  75                 	db	117	;'u'
   169  000835  61                 	db	97	;'a'
   170  000836  00                 	db	0
   171  000837                     STR_4:
   172  000837  44                 	db	68	;'D'
   173  000838  65                 	db	101	;'e'
   174  000839  73                 	db	115	;'s'
   175  00083A  74                 	db	116	;'t'
   176  00083B  72                 	db	114	;'r'
   177  00083C  61                 	db	97	;'a'
   178  00083D  76                 	db	118	;'v'
   179  00083E  61                 	db	97	;'a'
   180  00083F  64                 	db	100	;'d'
   181  000840  61                 	db	97	;'a'
   182  000841  21                 	db	33
   183  000842  00                 	db	0
   184  000843                     STR_18:
   185  000843  43                 	db	67	;'C'
   186  000844  61                 	db	97	;'a'
   187  000845  64                 	db	100	;'d'
   188  000846  61                 	db	97	;'a'
   189  000847  73                 	db	115	;'s'
   190  000848  74                 	db	116	;'t'
   191  000849  72                 	db	114	;'r'
   192  00084A  61                 	db	97	;'a'
   193  00084B  64                 	db	100	;'d'
   194  00084C  61                 	db	97	;'a'
   195  00084D  00                 	db	0
   196  00084E                     STR_15:
   197  00084E  52                 	db	82	;'R'
   198  00084F  65                 	db	101	;'e'
   199  000850  70                 	db	112	;'p'
   200  000851  69                 	db	105	;'i'
   201  000852  74                 	db	116	;'t'
   202  000853  61                 	db	97	;'a'
   203  000854  20                 	db	32
   204  000855  73                 	db	115	;'s'
   205  000856  75                 	db	117	;'u'
   206  000857  61                 	db	97	;'a'
   207  000858  00                 	db	0
   208  000859                     STR_5:
   209  000859  41                 	db	65	;'A'
   210  00085A  73                 	db	115	;'s'
   211  00085B  20                 	db	32
   212  00085C  73                 	db	115	;'s'
   213  00085D  65                 	db	101	;'e'
   214  00085E  6E                 	db	110	;'n'
   215  00085F  68                 	db	104	;'h'
   216  000860  61                 	db	97	;'a'
   217  000861  73                 	db	115	;'s'
   218  000862  00                 	db	0
   219  000863                     STR_17:
   220  000863  53                 	db	83	;'S'
   221  000864  65                 	db	101	;'e'
   222  000865  6E                 	db	110	;'n'
   223  000866  68                 	db	104	;'h'
   224  000867  61                 	db	97	;'a'
   225  000868  00                 	db	0
   226  000869                     STR_12:
   227  000869  73                 	db	115	;'s'
   228  00086A  65                 	db	101	;'e'
   229  00086B  6E                 	db	110	;'n'
   230  00086C  68                 	db	104	;'h'
   231  00086D  61                 	db	97	;'a'
   232  00086E  00                 	db	0
   233  00086F                     STR_3:
   234  00086F  50                 	db	80	;'P'
   235  000870  6F                 	db	111	;'o'
   236  000871  72                 	db	114	;'r'
   237  000872  74                 	db	116	;'t'
   238  000873  61                 	db	97	;'a'
   239  000874  00                 	db	0
   240  0000                     
   241                           ; #config settings
   242  000875  00                 	db	0	; dummy byte at the end
   243  0000                     
   244                           	psect	cinit
   245  0011B2                     __pcinit:
   246                           	opt stack 0
   247  0011B2                     start_initialization:
   248                           	opt stack 0
   249  0011B2                     __initialization:
   250                           	opt stack 0
   251                           
   252                           ; Clear objects allocated to COMRAM (6 bytes)
   253  0011B2  6A3E               	clrf	(__pbssCOMRAM+5)& (0+255),c
   254  0011B4  6A3D               	clrf	(__pbssCOMRAM+4)& (0+255),c
   255  0011B6  6A3C               	clrf	(__pbssCOMRAM+3)& (0+255),c
   256  0011B8  6A3B               	clrf	(__pbssCOMRAM+2)& (0+255),c
   257  0011BA  6A3A               	clrf	(__pbssCOMRAM+1)& (0+255),c
   258  0011BC  6A39               	clrf	__pbssCOMRAM& (0+255),c
   259  0011BE                     end_of_initialization:
   260                           	opt stack 0
   261  0011BE                     __end_of__initialization:
   262                           	opt stack 0
   263  0011BE  903F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   264  0011C0  923F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   265  0011C2  0E00               	movlw	low (__Lsmallconst shr (0+16))
   266  0011C4  6EF8               	movwf	tblptru,c
   267  0011C6  0E08               	movlw	high __Lsmallconst
   268  0011C8  6EF7               	movwf	tblptrh,c
   269  0011CA  0100               	movlb	0
   270  0011CC  EFDA  F007         	goto	_main	;jump to C main() function
   271                           tblptru	equ	0xFF8
   272                           tblptrh	equ	0xFF7
   273                           
   274                           	psect	bssCOMRAM
   275  000039                     __pbssCOMRAM:
   276                           	opt stack 0
   277  000039                     _buttonConfirm_Cad:
   278                           	opt stack 0
   279  000039                     	ds	2
   280  00003B                     _doorState:
   281                           	opt stack 0
   282  00003B                     	ds	2
   283  00003D                     _buttonCancel_Lock:
   284                           	opt stack 0
   285  00003D                     	ds	2
   286                           tblptru	equ	0xFF8
   287                           tblptrh	equ	0xFF7
   288                           
   289                           	psect	cstackCOMRAM
   290  000001                     __pcstackCOMRAM:
   291                           	opt stack 0
   292  000001                     i2DutyCycle_PWM@Valor:
   293                           	opt stack 0
   294                           
   295                           ; 2 bytes @ 0x0
   296  000001                     	ds	2
   297  000003                     ??i2_DutyCycle_PWM:
   298                           
   299                           ; 1 bytes @ 0x2
   300  000003                     	ds	2
   301  000005                     ??_ISR:
   302                           
   303                           ; 1 bytes @ 0x4
   304  000005                     	ds	16
   305  000015                     ??_ena_pulse:
   306  000015                     ?_read_ADC:
   307                           	opt stack 0
   308  000015                     ?_cmpSignal:
   309                           	opt stack 0
   310  000015                     cmpSignal@pass:
   311                           	opt stack 0
   312  000015                     DutyCycle_PWM@Valor:
   313                           	opt stack 0
   314                           
   315                           ; 2 bytes @ 0x14
   316  000015                     	ds	1
   317  000016                     ??_send_cfg:
   318  000016                     ??_send_msg:
   319                           
   320                           ; 1 bytes @ 0x15
   321  000016                     	ds	1
   322  000017                     ??_DutyCycle_PWM:
   323  000017                     send_cfg@cmd:
   324                           	opt stack 0
   325  000017                     send_msg@msg:
   326                           	opt stack 0
   327  000017                     read_ADC@value:
   328                           	opt stack 0
   329  000017                     cmpSignal@toc:
   330                           	opt stack 0
   331                           
   332                           ; 2 bytes @ 0x16
   333  000017                     	ds	1
   334  000018                     write_LCD@c:
   335                           	opt stack 0
   336  000018                     set_line@line:
   337                           	opt stack 0
   338                           
   339                           ; 2 bytes @ 0x17
   340  000018                     	ds	1
   341  000019                     readSignal@signal:
   342                           	opt stack 0
   343                           
   344                           ; 2 bytes @ 0x18
   345  000019                     	ds	1
   346  00001A                     ??_write_LCD:
   347  00001A                     set_line@pos:
   348                           	opt stack 0
   349                           
   350                           ; 2 bytes @ 0x19
   351  00001A                     	ds	1
   352  00001B                     readSignal@pos:
   353                           	opt stack 0
   354                           
   355                           ; 2 bytes @ 0x1A
   356  00001B                     	ds	1
   357  00001C                     set_line@cursor:
   358                           	opt stack 0
   359  00001C                     write_LCD@i:
   360                           	opt stack 0
   361                           
   362                           ; 2 bytes @ 0x1B
   363  00001C                     	ds	1
   364  00001D                     ??_readSignal:
   365                           
   366                           ; 1 bytes @ 0x1C
   367  00001D                     	ds	1
   368  00001E                     ?_cmpPass:
   369                           	opt stack 0
   370  00001E                     ?_confirmarSenha:
   371                           	opt stack 0
   372  00001E                     cmpPass@pass:
   373                           	opt stack 0
   374                           
   375                           ; 2 bytes @ 0x1D
   376  00001E                     	ds	1
   377  00001F                     readSignal@limite:
   378                           	opt stack 0
   379                           
   380                           ; 2 bytes @ 0x1E
   381  00001F                     	ds	1
   382  000020                     cmpPass@toque:
   383                           	opt stack 0
   384                           
   385                           ; 2 bytes @ 0x1F
   386  000020                     	ds	1
   387  000021                     readSignal@i:
   388                           	opt stack 0
   389                           
   390                           ; 2 bytes @ 0x20
   391  000021                     	ds	1
   392  000022                     cmpPass@i:
   393                           	opt stack 0
   394                           
   395                           ; 2 bytes @ 0x21
   396  000022                     	ds	1
   397  000023                     readSignal@j:
   398                           	opt stack 0
   399                           
   400                           ; 2 bytes @ 0x22
   401  000023                     	ds	2
   402  000025                     lerToque@toque:
   403                           	opt stack 0
   404  000025                     destravarPorta@pass:
   405                           	opt stack 0
   406                           
   407                           ; 2 bytes @ 0x24
   408  000025                     	ds	2
   409  000027                     lerToque@i:
   410                           	opt stack 0
   411  000027                     destravarPorta@toque:
   412                           	opt stack 0
   413                           
   414                           ; 2 bytes @ 0x26
   415  000027                     	ds	2
   416  000029                     ??_destravarPorta:
   417  000029                     cadastrarSenha@pass:
   418                           	opt stack 0
   419                           
   420                           ; 2 bytes @ 0x28
   421  000029                     	ds	2
   422  00002B                     ??_cadastrarSenha:
   423  00002B                     destravarPorta@i:
   424                           	opt stack 0
   425                           
   426                           ; 2 bytes @ 0x2A
   427  00002B                     	ds	2
   428  00002D                     cadastrarSenha@i:
   429                           	opt stack 0
   430                           
   431                           ; 2 bytes @ 0x2C
   432  00002D                     	ds	2
   433  00002F                     cadastrarSenha@j:
   434                           	opt stack 0
   435                           
   436                           ; 2 bytes @ 0x2E
   437  00002F                     	ds	2
   438  000031                     cadastrarSenha@temp2:
   439                           	opt stack 0
   440                           
   441                           ; 2 bytes @ 0x30
   442  000031                     	ds	2
   443  000033                     cadastrarSenha@temp1:
   444                           	opt stack 0
   445                           
   446                           ; 2 bytes @ 0x32
   447  000033                     	ds	2
   448  000035                     main@toc:
   449                           	opt stack 0
   450                           
   451                           ; 2 bytes @ 0x34
   452  000035                     	ds	2
   453  000037                     main@pass:
   454                           	opt stack 0
   455                           
   456                           ; 2 bytes @ 0x36
   457  000037                     	ds	2
   458                           tblptru	equ	0xFF8
   459                           tblptrh	equ	0xFF7
   460                           
   461 ;;
   462 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   463 ;;
   464 ;; *************** function _main *****************
   465 ;; Defined at:
   466 ;;		line 23 in file "main.c"
   467 ;; Parameters:    Size  Location     Type
   468 ;;		None
   469 ;; Auto vars:     Size  Location     Type
   470 ;;  pass            2   54[COMRAM] unsigned char [2]
   471 ;;  toc             2   52[COMRAM] unsigned char [2]
   472 ;; Return value:  Size  Location     Type
   473 ;;                  1    wreg      void 
   474 ;; Registers used:
   475 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   476 ;; Tracked objects:
   477 ;;		On entry : 0/0
   478 ;;		On exit  : 0/0
   479 ;;		Unchanged: 0/0
   480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   481 ;;      Params:         0       0       0       0       0       0       0       0       0
   482 ;;      Locals:         4       0       0       0       0       0       0       0       0
   483 ;;      Temps:          0       0       0       0       0       0       0       0       0
   484 ;;      Totals:         4       0       0       0       0       0       0       0       0
   485 ;;Total ram usage:        4 bytes
   486 ;; Hardware stack levels required when called:    7
   487 ;; This function calls:
   488 ;;		_cadastrarSenha
   489 ;;		_destravarPorta
   490 ;;		_init_ADC
   491 ;;		_init_INTRB2
   492 ;;		_init_LCD
   493 ;;		_init_PWM
   494 ;; This function is called by:
   495 ;;		Startup code after reset
   496 ;; This function uses a non-reentrant model
   497 ;;
   498                           
   499                           	psect	text0
   500  000FB4                     __ptext0:
   501                           	opt stack 0
   502  000FB4                     _main:
   503                           	opt stack 24
   504                           
   505                           ;main.c: 25: init_PWM();
   506                           
   507                           ;incstack = 0
   508  000FB4  EC11  F009         	call	_init_PWM	;wreg free
   509                           
   510                           ;main.c: 26: init_INTRB2();
   511  000FB8  EC23  F009         	call	_init_INTRB2	;wreg free
   512                           
   513                           ;main.c: 27: init_LCD();
   514  000FBC  ECC4  F008         	call	_init_LCD	;wreg free
   515                           
   516                           ;main.c: 28: init_ADC();
   517  000FC0  EC1A  F009         	call	_init_ADC	;wreg free
   518                           
   519                           ;main.c: 30: char pass[2];
   520                           ;main.c: 31: pass[0] = 0x00;
   521  000FC4  0E00               	movlw	0
   522  000FC6  6E37               	movwf	main@pass,c
   523                           
   524                           ;main.c: 32: pass[1] = 0x00;
   525  000FC8  0E00               	movlw	0
   526  000FCA  6E38               	movwf	main@pass+1,c
   527                           
   528                           ;main.c: 33: char toc[2];
   529                           ;main.c: 34: toc[0] = 0x00;
   530  000FCC  0E00               	movlw	0
   531  000FCE  6E35               	movwf	main@toc,c
   532                           
   533                           ;main.c: 35: toc[1] = 0x00;
   534  000FD0  0E00               	movlw	0
   535  000FD2  6E36               	movwf	main@toc+1,c
   536                           
   537                           ;main.c: 37: cadastrarSenha(pass);
   538  000FD4  0E37               	movlw	low main@pass
   539  000FD6  6E29               	movwf	cadastrarSenha@pass,c
   540  000FD8  0E00               	movlw	high main@pass
   541  000FDA  6E2A               	movwf	cadastrarSenha@pass+1,c
   542  000FDC  EC3A  F005         	call	_cadastrarSenha	;wreg free
   543  000FE0                     l1685:
   544                           
   545                           ;main.c: 41: destravarPorta(pass, toc);
   546  000FE0  0E37               	movlw	low main@pass
   547  000FE2  6E25               	movwf	destravarPorta@pass,c
   548  000FE4  0E00               	movlw	high main@pass
   549  000FE6  6E26               	movwf	destravarPorta@pass+1,c
   550  000FE8  0E35               	movlw	low main@toc
   551  000FEA  6E27               	movwf	destravarPorta@toque,c
   552  000FEC  0E00               	movlw	high main@toc
   553  000FEE  6E28               	movwf	destravarPorta@toque+1,c
   554  000FF0  EC3B  F004         	call	_destravarPorta	;wreg free
   555                           
   556                           ;main.c: 42: if(buttonConfirm_Cad == 1){
   557  000FF4  0439               	decf	_buttonConfirm_Cad,w,c
   558  000FF6  103A               	iorwf	_buttonConfirm_Cad+1,w,c
   559  000FF8  A4D8               	btfss	status,2,c
   560  000FFA  D7F2               	goto	l1685
   561                           
   562                           ;main.c: 43: buttonConfirm_Cad = 0;
   563  000FFC  0E00               	movlw	0
   564  000FFE  6E3A               	movwf	_buttonConfirm_Cad+1,c
   565  001000  0E00               	movlw	0
   566  001002  6E39               	movwf	_buttonConfirm_Cad,c
   567                           
   568                           ;main.c: 44: cadastrarSenha(pass);
   569  001004  0E37               	movlw	low main@pass
   570  001006  6E29               	movwf	cadastrarSenha@pass,c
   571  001008  0E00               	movlw	high main@pass
   572  00100A  6E2A               	movwf	cadastrarSenha@pass+1,c
   573  00100C  EC3A  F005         	call	_cadastrarSenha	;wreg free
   574                           
   575                           ;main.c: 45: }
   576                           ;main.c: 47: }while(1);
   577  001010  D7E7               	goto	l1685
   578  001012                     __end_of_main:
   579                           	opt stack 0
   580                           tblptru	equ	0xFF8
   581                           tblptrh	equ	0xFF7
   582                           status	equ	0xFD8
   583                           
   584 ;; *************** function _init_PWM *****************
   585 ;; Defined at:
   586 ;;		line 14 in file "PWM.c"
   587 ;; Parameters:    Size  Location     Type
   588 ;;		None
   589 ;; Auto vars:     Size  Location     Type
   590 ;;		None
   591 ;; Return value:  Size  Location     Type
   592 ;;                  1    wreg      void 
   593 ;; Registers used:
   594 ;;		wreg, status,2
   595 ;; Tracked objects:
   596 ;;		On entry : 0/0
   597 ;;		On exit  : 0/0
   598 ;;		Unchanged: 0/0
   599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   600 ;;      Params:         0       0       0       0       0       0       0       0       0
   601 ;;      Locals:         0       0       0       0       0       0       0       0       0
   602 ;;      Temps:          0       0       0       0       0       0       0       0       0
   603 ;;      Totals:         0       0       0       0       0       0       0       0       0
   604 ;;Total ram usage:        0 bytes
   605 ;; Hardware stack levels used:    1
   606 ;; Hardware stack levels required when called:    2
   607 ;; This function calls:
   608 ;;		Nothing
   609 ;; This function is called by:
   610 ;;		_main
   611 ;; This function uses a non-reentrant model
   612 ;;
   613                           
   614                           	psect	text1
   615  001222                     __ptext1:
   616                           	opt stack 0
   617  001222                     _init_PWM:
   618                           	opt stack 28
   619                           
   620                           ;PWM.c: 15: TRISCbits.TRISC2 = 0;
   621                           
   622                           ;incstack = 0
   623  001222  9494               	bcf	3988,2,c	;volatile
   624                           
   625                           ;PWM.c: 16: T2CON = 0x04;
   626  001224  0E04               	movlw	4
   627  001226  6ECA               	movwf	4042,c	;volatile
   628                           
   629                           ;PWM.c: 17: PR2 = 0xFF;
   630  001228  68CB               	setf	4043,c	;volatile
   631                           
   632                           ;PWM.c: 18: CCP1CON = 0x3F;
   633  00122A  0E3F               	movlw	63
   634  00122C  6EBD               	movwf	4029,c	;volatile
   635                           
   636                           ;PWM.c: 19: CCPR1L = 0x00;
   637  00122E  0E00               	movlw	0
   638  001230  6EBE               	movwf	4030,c	;volatile
   639  001232  0012               	return		;funcret
   640  001234                     __end_of_init_PWM:
   641                           	opt stack 0
   642                           tblptru	equ	0xFF8
   643                           tblptrh	equ	0xFF7
   644                           status	equ	0xFD8
   645                           
   646 ;; *************** function _init_LCD *****************
   647 ;; Defined at:
   648 ;;		line 45 in file "LCD.c"
   649 ;; Parameters:    Size  Location     Type
   650 ;;		None
   651 ;; Auto vars:     Size  Location     Type
   652 ;;		None
   653 ;; Return value:  Size  Location     Type
   654 ;;                  1    wreg      void 
   655 ;; Registers used:
   656 ;;		wreg, status,2, cstack
   657 ;; Tracked objects:
   658 ;;		On entry : 0/0
   659 ;;		On exit  : 0/0
   660 ;;		Unchanged: 0/0
   661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   662 ;;      Params:         0       0       0       0       0       0       0       0       0
   663 ;;      Locals:         0       0       0       0       0       0       0       0       0
   664 ;;      Temps:          0       0       0       0       0       0       0       0       0
   665 ;;      Totals:         0       0       0       0       0       0       0       0       0
   666 ;;Total ram usage:        0 bytes
   667 ;; Hardware stack levels used:    1
   668 ;; Hardware stack levels required when called:    4
   669 ;; This function calls:
   670 ;;		_send_cfg
   671 ;; This function is called by:
   672 ;;		_main
   673 ;; This function uses a non-reentrant model
   674 ;;
   675                           
   676                           	psect	text2
   677  001188                     __ptext2:
   678                           	opt stack 0
   679  001188                     _init_LCD:
   680                           	opt stack 26
   681                           
   682                           ;LCD.c: 47: TRISB = 0x04;
   683                           
   684                           ;incstack = 0
   685  001188  0E04               	movlw	4
   686  00118A  6E93               	movwf	3987,c	;volatile
   687                           
   688                           ;LCD.c: 48: TRISD = 0x00;
   689  00118C  0E00               	movlw	0
   690  00118E  6E95               	movwf	3989,c	;volatile
   691                           
   692                           ;LCD.c: 49: TRISE = 0x00;
   693  001190  0E00               	movlw	0
   694  001192  6E96               	movwf	3990,c	;volatile
   695                           
   696                           ;LCD.c: 50: PORTD = 0x00;
   697  001194  0E00               	movlw	0
   698  001196  6E83               	movwf	3971,c	;volatile
   699                           
   700                           ;LCD.c: 52: send_cfg(0x01);
   701  001198  0E01               	movlw	1
   702  00119A  ECE8  F008         	call	_send_cfg
   703                           
   704                           ;LCD.c: 53: send_cfg(0x38);
   705  00119E  0E38               	movlw	56
   706  0011A0  ECE8  F008         	call	_send_cfg
   707                           
   708                           ;LCD.c: 54: send_cfg(0x80);
   709  0011A4  0E80               	movlw	128
   710  0011A6  ECE8  F008         	call	_send_cfg
   711                           
   712                           ;LCD.c: 55: send_cfg(0x0F);
   713  0011AA  0E0F               	movlw	15
   714  0011AC  ECE8  F008         	call	_send_cfg
   715  0011B0  0012               	return		;funcret
   716  0011B2                     __end_of_init_LCD:
   717                           	opt stack 0
   718                           tblptru	equ	0xFF8
   719                           tblptrh	equ	0xFF7
   720                           status	equ	0xFD8
   721                           
   722 ;; *************** function _init_INTRB2 *****************
   723 ;; Defined at:
   724 ;;		line 51 in file "Interrupt.c"
   725 ;; Parameters:    Size  Location     Type
   726 ;;		None
   727 ;; Auto vars:     Size  Location     Type
   728 ;;		None
   729 ;; Return value:  Size  Location     Type
   730 ;;                  1    wreg      void 
   731 ;; Registers used:
   732 ;;		None
   733 ;; Tracked objects:
   734 ;;		On entry : 0/0
   735 ;;		On exit  : 0/0
   736 ;;		Unchanged: 0/0
   737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   738 ;;      Params:         0       0       0       0       0       0       0       0       0
   739 ;;      Locals:         0       0       0       0       0       0       0       0       0
   740 ;;      Temps:          0       0       0       0       0       0       0       0       0
   741 ;;      Totals:         0       0       0       0       0       0       0       0       0
   742 ;;Total ram usage:        0 bytes
   743 ;; Hardware stack levels used:    1
   744 ;; Hardware stack levels required when called:    2
   745 ;; This function calls:
   746 ;;		Nothing
   747 ;; This function is called by:
   748 ;;		_main
   749 ;; This function uses a non-reentrant model
   750 ;;
   751                           
   752                           	psect	text3
   753  001246                     __ptext3:
   754                           	opt stack 0
   755  001246                     _init_INTRB2:
   756                           	opt stack 28
   757                           
   758                           ;Interrupt.c: 53: INTCONbits.GIE = 0;
   759                           
   760                           ;incstack = 0
   761  001246  9EF2               	bcf	intcon,7,c	;volatile
   762                           
   763                           ;Interrupt.c: 54: INTCONbits.PEIE = 0;
   764  001248  9CF2               	bcf	intcon,6,c	;volatile
   765                           
   766                           ;Interrupt.c: 55: TRISBbits.RB2 = 1;
   767  00124A  8493               	bsf	3987,2,c	;volatile
   768                           
   769                           ;Interrupt.c: 56: INTCON2bits.INTEDG0 = 1;
   770  00124C  8CF1               	bsf	intcon2,6,c	;volatile
   771                           
   772                           ;Interrupt.c: 57: INTCON3bits.INT2IF = 0;
   773  00124E  92F0               	bcf	intcon3,1,c	;volatile
   774                           
   775                           ;Interrupt.c: 58: INTCON3bits.INT2IE = 1;
   776  001250  88F0               	bsf	intcon3,4,c	;volatile
   777                           
   778                           ;Interrupt.c: 59: INTCONbits.GIE = 1;
   779  001252  8EF2               	bsf	intcon,7,c	;volatile
   780  001254  0012               	return		;funcret
   781  001256                     __end_of_init_INTRB2:
   782                           	opt stack 0
   783                           tblptru	equ	0xFF8
   784                           tblptrh	equ	0xFF7
   785                           intcon	equ	0xFF2
   786                           intcon2	equ	0xFF1
   787                           intcon3	equ	0xFF0
   788                           status	equ	0xFD8
   789                           
   790 ;; *************** function _init_ADC *****************
   791 ;; Defined at:
   792 ;;		line 11 in file "ADC.c"
   793 ;; Parameters:    Size  Location     Type
   794 ;;		None
   795 ;; Auto vars:     Size  Location     Type
   796 ;;		None
   797 ;; Return value:  Size  Location     Type
   798 ;;                  1    wreg      void 
   799 ;; Registers used:
   800 ;;		wreg, status,2
   801 ;; Tracked objects:
   802 ;;		On entry : 0/0
   803 ;;		On exit  : 0/0
   804 ;;		Unchanged: 0/0
   805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   806 ;;      Params:         0       0       0       0       0       0       0       0       0
   807 ;;      Locals:         0       0       0       0       0       0       0       0       0
   808 ;;      Temps:          0       0       0       0       0       0       0       0       0
   809 ;;      Totals:         0       0       0       0       0       0       0       0       0
   810 ;;Total ram usage:        0 bytes
   811 ;; Hardware stack levels used:    1
   812 ;; Hardware stack levels required when called:    2
   813 ;; This function calls:
   814 ;;		Nothing
   815 ;; This function is called by:
   816 ;;		_main
   817 ;; This function uses a non-reentrant model
   818 ;;
   819                           
   820                           	psect	text4
   821  001234                     __ptext4:
   822                           	opt stack 0
   823  001234                     _init_ADC:
   824                           	opt stack 28
   825                           
   826                           ;ADC.c: 12: TRISAbits.TRISA0 = 1;
   827                           
   828                           ;incstack = 0
   829  001234  8092               	bsf	3986,0,c	;volatile
   830                           
   831                           ;ADC.c: 13: ADCON0 = 0;
   832  001236  0E00               	movlw	0
   833  001238  6EC2               	movwf	4034,c	;volatile
   834                           
   835                           ;ADC.c: 14: ADCON1 = 0x0e;
   836  00123A  0E0E               	movlw	14
   837  00123C  6EC1               	movwf	4033,c	;volatile
   838                           
   839                           ;ADC.c: 15: ADCON2 = 0xd9;
   840  00123E  0ED9               	movlw	217
   841  001240  6EC0               	movwf	4032,c	;volatile
   842                           
   843                           ;ADC.c: 16: ADCON0bits.ADON = 1;
   844  001242  80C2               	bsf	4034,0,c	;volatile
   845  001244  0012               	return		;funcret
   846  001246                     __end_of_init_ADC:
   847                           	opt stack 0
   848                           tblptru	equ	0xFF8
   849                           tblptrh	equ	0xFF7
   850                           intcon	equ	0xFF2
   851                           intcon2	equ	0xFF1
   852                           intcon3	equ	0xFF0
   853                           status	equ	0xFD8
   854                           
   855 ;; *************** function _destravarPorta *****************
   856 ;; Defined at:
   857 ;;		line 52 in file "TOCTOC.c"
   858 ;; Parameters:    Size  Location     Type
   859 ;;  pass            2   36[COMRAM] PTR unsigned char 
   860 ;;		 -> main@pass(2), 
   861 ;;  toque           2   38[COMRAM] PTR unsigned char 
   862 ;;		 -> main@toc(2), 
   863 ;; Auto vars:     Size  Location     Type
   864 ;;  i               2   42[COMRAM] int 
   865 ;; Return value:  Size  Location     Type
   866 ;;                  1    wreg      void 
   867 ;; Registers used:
   868 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   869 ;; Tracked objects:
   870 ;;		On entry : 0/0
   871 ;;		On exit  : 0/0
   872 ;;		Unchanged: 0/0
   873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   874 ;;      Params:         4       0       0       0       0       0       0       0       0
   875 ;;      Locals:         2       0       0       0       0       0       0       0       0
   876 ;;      Temps:          2       0       0       0       0       0       0       0       0
   877 ;;      Totals:         8       0       0       0       0       0       0       0       0
   878 ;;Total ram usage:        8 bytes
   879 ;; Hardware stack levels used:    1
   880 ;; Hardware stack levels required when called:    6
   881 ;; This function calls:
   882 ;;		_DutyCycle_PWM
   883 ;;		_clearLCD
   884 ;;		_cmpPass
   885 ;;		_readSignal
   886 ;;		_read_ADC
   887 ;;		_send_msg
   888 ;;		_set_line
   889 ;;		_write_LCD
   890 ;; This function is called by:
   891 ;;		_main
   892 ;; This function uses a non-reentrant model
   893 ;;
   894                           
   895                           	psect	text5
   896  000876                     __ptext5:
   897                           	opt stack 0
   898  000876                     _destravarPorta:
   899                           	opt stack 24
   900                           
   901                           ;TOCTOC.c: 54: int i = 0;
   902                           
   903                           ;incstack = 0
   904  000876  0E00               	movlw	0
   905  000878  6E2C               	movwf	destravarPorta@i+1,c
   906  00087A  0E00               	movlw	0
   907  00087C  6E2B               	movwf	destravarPorta@i,c
   908                           
   909                           ;TOCTOC.c: 56: toque[0] = 0x00;
   910  00087E  C027  FFD9         	movff	destravarPorta@toque,fsr2l
   911  000882  C028  FFDA         	movff	destravarPorta@toque+1,fsr2h
   912  000886  0E00               	movlw	0
   913  000888  6EDF               	movwf	indf2,c
   914                           
   915                           ;TOCTOC.c: 57: toque[1] = 0x00;
   916  00088A  EE20 F001          	lfsr	2,1
   917  00088E  5027               	movf	destravarPorta@toque,w,c
   918  000890  26D9               	addwf	fsr2l,f,c
   919  000892  5028               	movf	destravarPorta@toque+1,w,c
   920  000894  22DA               	addwfc	fsr2h,f,c
   921  000896  0E00               	movlw	0
   922  000898  6EDF               	movwf	indf2,c
   923                           
   924                           ;TOCTOC.c: 59: clearLCD();
   925  00089A  EC2B  F009         	call	_clearLCD	;wreg free
   926                           
   927                           ;TOCTOC.c: 60: set_line(0,0);
   928  00089E  0E00               	movlw	0
   929  0008A0  6E19               	movwf	set_line@line+1,c
   930  0008A2  0E00               	movlw	0
   931  0008A4  6E18               	movwf	set_line@line,c
   932  0008A6  0E00               	movlw	0
   933  0008A8  6E1B               	movwf	set_line@pos+1,c
   934  0008AA  0E00               	movlw	0
   935  0008AC  6E1A               	movwf	set_line@pos,c
   936  0008AE  ECF7  F008         	call	_set_line	;wreg free
   937                           
   938                           ;TOCTOC.c: 61: write_LCD("Bata na porta");
   939  0008B2  0E01               	movlw	low STR_1
   940  0008B4  6E18               	movwf	write_LCD@c,c
   941  0008B6  0E08               	movlw	high STR_1
   942  0008B8  6E19               	movwf	write_LCD@c+1,c
   943  0008BA  EC2F  F008         	call	_write_LCD	;wreg free
   944                           
   945                           ;TOCTOC.c: 63: while((int)read_ADC() < 15){
   946  0008BE  D007               	goto	l1605
   947  0008C0                     l263:
   948                           
   949                           ;TOCTOC.c: 64: if(PORTBbits.RB4 == 1){
   950  0008C0  A881               	btfss	3969,4,c	;volatile
   951  0008C2  D005               	goto	l1605
   952                           
   953                           ;TOCTOC.c: 65: buttonConfirm_Cad = 1;
   954  0008C4  0E00               	movlw	0
   955  0008C6  6E3A               	movwf	_buttonConfirm_Cad+1,c
   956  0008C8  0E01               	movlw	1
   957  0008CA  6E39               	movwf	_buttonConfirm_Cad,c
   958                           
   959                           ;TOCTOC.c: 66: return;
   960  0008CC  0012               	return	
   961  0008CE                     l1605:
   962  0008CE  EC05  F009         	call	_read_ADC	;wreg free
   963  0008D2  BE16               	btfsc	?_read_ADC+1,7,c
   964  0008D4  D7F5               	goto	l263
   965  0008D6  5016               	movf	?_read_ADC+1,w,c
   966  0008D8  E151               	bnz	l1625
   967  0008DA  0E0F               	movlw	15
   968  0008DC  5C15               	subwf	?_read_ADC,w,c
   969  0008DE  B0D8               	btfsc	status,0,c
   970  0008E0  D04D               	goto	l1625
   971  0008E2  D7EE               	goto	l263
   972  0008E4                     l1607:
   973                           
   974                           ;TOCTOC.c: 71: set_line(1,0);
   975  0008E4  0E00               	movlw	0
   976  0008E6  6E19               	movwf	set_line@line+1,c
   977  0008E8  0E01               	movlw	1
   978  0008EA  6E18               	movwf	set_line@line,c
   979  0008EC  0E00               	movlw	0
   980  0008EE  6E1B               	movwf	set_line@pos+1,c
   981  0008F0  0E00               	movlw	0
   982  0008F2  6E1A               	movwf	set_line@pos,c
   983  0008F4  ECF7  F008         	call	_set_line	;wreg free
   984                           
   985                           ;TOCTOC.c: 72: send_msg('1'+ i);
   986  0008F8  502B               	movf	destravarPorta@i,w,c
   987  0008FA  0F31               	addlw	49
   988  0008FC  ECAC  F008         	call	_send_msg
   989                           
   990                           ;TOCTOC.c: 73: if(i == 0)
   991  000900  502B               	movf	destravarPorta@i,w,c
   992  000902  102C               	iorwf	destravarPorta@i+1,w,c
   993  000904  A4D8               	btfss	status,2,c
   994  000906  D00B               	goto	l1613
   995                           
   996                           ;TOCTOC.c: 74: readSignal(&toque[0], 0);
   997  000908  C027  F019         	movff	destravarPorta@toque,readSignal@signal
   998  00090C  C028  F01A         	movff	destravarPorta@toque+1,readSignal@signal+1
   999  000910  0E00               	movlw	0
  1000  000912  6E1C               	movwf	readSignal@pos+1,c
  1001  000914  0E00               	movlw	0
  1002  000916  6E1B               	movwf	readSignal@pos,c
  1003  000918  EC54  F007         	call	_readSignal	;wreg free
  1004  00091C  D02D               	goto	l1623
  1005  00091E                     l1613:
  1006                           
  1007                           ;TOCTOC.c: 75: else if(i == 1)
  1008  00091E  042B               	decf	destravarPorta@i,w,c
  1009  000920  102C               	iorwf	destravarPorta@i+1,w,c
  1010  000922  A4D8               	btfss	status,2,c
  1011  000924  D00B               	goto	l1617
  1012                           
  1013                           ;TOCTOC.c: 76: readSignal(&toque[0], 1);
  1014  000926  C027  F019         	movff	destravarPorta@toque,readSignal@signal
  1015  00092A  C028  F01A         	movff	destravarPorta@toque+1,readSignal@signal+1
  1016  00092E  0E00               	movlw	0
  1017  000930  6E1C               	movwf	readSignal@pos+1,c
  1018  000932  0E01               	movlw	1
  1019  000934  6E1B               	movwf	readSignal@pos,c
  1020  000936  EC54  F007         	call	_readSignal	;wreg free
  1021  00093A  D01E               	goto	l1623
  1022  00093C                     l1617:
  1023                           
  1024                           ;TOCTOC.c: 77: else if(i == 2)
  1025  00093C  0E02               	movlw	2
  1026  00093E  182B               	xorwf	destravarPorta@i,w,c
  1027  000940  102C               	iorwf	destravarPorta@i+1,w,c
  1028  000942  A4D8               	btfss	status,2,c
  1029  000944  D00D               	goto	l1621
  1030                           
  1031                           ;TOCTOC.c: 78: readSignal(&toque[1], 0);
  1032  000946  0E01               	movlw	1
  1033  000948  2427               	addwf	destravarPorta@toque,w,c
  1034  00094A  6E19               	movwf	readSignal@signal,c
  1035  00094C  0E00               	movlw	0
  1036  00094E  2028               	addwfc	destravarPorta@toque+1,w,c
  1037  000950  6E1A               	movwf	readSignal@signal+1,c
  1038  000952  0E00               	movlw	0
  1039  000954  6E1C               	movwf	readSignal@pos+1,c
  1040  000956  0E00               	movlw	0
  1041  000958  6E1B               	movwf	readSignal@pos,c
  1042  00095A  EC54  F007         	call	_readSignal	;wreg free
  1043  00095E  D00C               	goto	l1623
  1044  000960                     l1621:
  1045                           
  1046                           ;TOCTOC.c: 79: else
  1047                           ;TOCTOC.c: 80: readSignal(&toque[1], 1);
  1048  000960  0E01               	movlw	1
  1049  000962  2427               	addwf	destravarPorta@toque,w,c
  1050  000964  6E19               	movwf	readSignal@signal,c
  1051  000966  0E00               	movlw	0
  1052  000968  2028               	addwfc	destravarPorta@toque+1,w,c
  1053  00096A  6E1A               	movwf	readSignal@signal+1,c
  1054  00096C  0E00               	movlw	0
  1055  00096E  6E1C               	movwf	readSignal@pos+1,c
  1056  000970  0E01               	movlw	1
  1057  000972  6E1B               	movwf	readSignal@pos,c
  1058  000974  EC54  F007         	call	_readSignal	;wreg free
  1059  000978                     l1623:
  1060                           
  1061                           ;TOCTOC.c: 81: i++;
  1062  000978  4A2B               	infsnz	destravarPorta@i,f,c
  1063  00097A  2A2C               	incf	destravarPorta@i+1,f,c
  1064  00097C                     l1625:
  1065  00097C  BE2C               	btfsc	destravarPorta@i+1,7,c
  1066  00097E  D7B2               	goto	l1607
  1067  000980  502C               	movf	destravarPorta@i+1,w,c
  1068  000982  E104               	bnz	l1627
  1069  000984  0E04               	movlw	4
  1070  000986  5C2B               	subwf	destravarPorta@i,w,c
  1071  000988  A0D8               	btfss	status,0,c
  1072  00098A  D7AC               	goto	l1607
  1073  00098C                     l1627:
  1074                           
  1075                           ;TOCTOC.c: 82: }
  1076                           ;TOCTOC.c: 83: if(cmpPass(pass, toque)){
  1077  00098C  C025  F01E         	movff	destravarPorta@pass,cmpPass@pass
  1078  000990  C026  F01F         	movff	destravarPorta@pass+1,cmpPass@pass+1
  1079  000994  C027  F020         	movff	destravarPorta@toque,cmpPass@toque
  1080  000998  C028  F021         	movff	destravarPorta@toque+1,cmpPass@toque+1
  1081  00099C  ECF8  F006         	call	_cmpPass	;wreg free
  1082  0009A0  501E               	movf	?_cmpPass,w,c
  1083  0009A2  101F               	iorwf	?_cmpPass+1,w,c
  1084  0009A4  B4D8               	btfsc	status,2,c
  1085  0009A6  D043               	goto	l1649
  1086                           
  1087                           ;TOCTOC.c: 84: clearLCD();
  1088  0009A8  EC2B  F009         	call	_clearLCD	;wreg free
  1089                           
  1090                           ;TOCTOC.c: 85: set_line(0,4);
  1091  0009AC  0E00               	movlw	0
  1092  0009AE  6E19               	movwf	set_line@line+1,c
  1093  0009B0  0E00               	movlw	0
  1094  0009B2  6E18               	movwf	set_line@line,c
  1095  0009B4  0E00               	movlw	0
  1096  0009B6  6E1B               	movwf	set_line@pos+1,c
  1097  0009B8  0E04               	movlw	4
  1098  0009BA  6E1A               	movwf	set_line@pos,c
  1099  0009BC  ECF7  F008         	call	_set_line	;wreg free
  1100                           
  1101                           ;TOCTOC.c: 86: write_LCD("Porta");
  1102  0009C0  0E6F               	movlw	low STR_3
  1103  0009C2  6E18               	movwf	write_LCD@c,c
  1104  0009C4  0E08               	movlw	high STR_3
  1105  0009C6  6E19               	movwf	write_LCD@c+1,c
  1106  0009C8  EC2F  F008         	call	_write_LCD	;wreg free
  1107                           
  1108                           ;TOCTOC.c: 87: set_line(1,2);
  1109  0009CC  0E00               	movlw	0
  1110  0009CE  6E19               	movwf	set_line@line+1,c
  1111  0009D0  0E01               	movlw	1
  1112  0009D2  6E18               	movwf	set_line@line,c
  1113  0009D4  0E00               	movlw	0
  1114  0009D6  6E1B               	movwf	set_line@pos+1,c
  1115  0009D8  0E02               	movlw	2
  1116  0009DA  6E1A               	movwf	set_line@pos,c
  1117  0009DC  ECF7  F008         	call	_set_line	;wreg free
  1118                           
  1119                           ;TOCTOC.c: 88: write_LCD("Destravada!");
  1120  0009E0  0E37               	movlw	low STR_4
  1121  0009E2  6E18               	movwf	write_LCD@c,c
  1122  0009E4  0E08               	movlw	high STR_4
  1123  0009E6  6E19               	movwf	write_LCD@c+1,c
  1124  0009E8  EC2F  F008         	call	_write_LCD	;wreg free
  1125                           
  1126                           ;TOCTOC.c: 90: if(doorState == 0){
  1127  0009EC  503B               	movf	_doorState,w,c
  1128  0009EE  103C               	iorwf	_doorState+1,w,c
  1129  0009F0  A4D8               	btfss	status,2,c
  1130  0009F2  0012               	return	
  1131                           
  1132                           ;TOCTOC.c: 91: doorState = 1;
  1133  0009F4  0E00               	movlw	0
  1134  0009F6  6E3C               	movwf	_doorState+1,c
  1135  0009F8  0E01               	movlw	1
  1136  0009FA  6E3B               	movwf	_doorState,c
  1137                           
  1138                           ;TOCTOC.c: 92: DutyCycle_PWM(8);
  1139  0009FC  0E00               	movlw	0
  1140  0009FE  6E16               	movwf	DutyCycle_PWM@Valor+1,c
  1141  000A00  0E08               	movlw	8
  1142  000A02  6E15               	movwf	DutyCycle_PWM@Valor,c
  1143  000A04  EC54  F008         	call	_DutyCycle_PWM	;wreg free
  1144                           
  1145                           ;TOCTOC.c: 93: _delay((unsigned long)((1000)*(16000000/4000.0)));
  1146  000A08  0E15               	movlw	21
  1147  000A0A  6E2A               	movwf	(??_destravarPorta+1)& (0+255),c
  1148  000A0C  0E4B               	movlw	75
  1149  000A0E  6E29               	movwf	??_destravarPorta& (0+255),c
  1150  000A10  0EBE               	movlw	190
  1151  000A12                     u777:
  1152  000A12  2EE8               	decfsz	wreg,f,c
  1153  000A14  D7FE               	bra	u777
  1154  000A16  2E29               	decfsz	??_destravarPorta& (0+255),f,c
  1155  000A18  D7FC               	bra	u777
  1156  000A1A  2E2A               	decfsz	(??_destravarPorta+1)& (0+255),f,c
  1157  000A1C  D7FA               	bra	u777
  1158  000A1E  D000               	nop2	
  1159                           
  1160                           ;TOCTOC.c: 94: DutyCycle_PWM(0);
  1161  000A20  0E00               	movlw	0
  1162  000A22  6E16               	movwf	DutyCycle_PWM@Valor+1,c
  1163  000A24  0E00               	movlw	0
  1164  000A26  6E15               	movwf	DutyCycle_PWM@Valor,c
  1165  000A28  EC54  F008         	call	_DutyCycle_PWM	;wreg free
  1166                           
  1167                           ;TOCTOC.c: 95: }
  1168                           ;TOCTOC.c: 97: }
  1169  000A2C  0012               	return	
  1170  000A2E                     l1649:
  1171                           
  1172                           ;TOCTOC.c: 98: else{
  1173                           ;TOCTOC.c: 99: clearLCD();
  1174  000A2E  EC2B  F009         	call	_clearLCD	;wreg free
  1175                           
  1176                           ;TOCTOC.c: 100: set_line(0,3);
  1177  000A32  0E00               	movlw	0
  1178  000A34  6E19               	movwf	set_line@line+1,c
  1179  000A36  0E00               	movlw	0
  1180  000A38  6E18               	movwf	set_line@line,c
  1181  000A3A  0E00               	movlw	0
  1182  000A3C  6E1B               	movwf	set_line@pos+1,c
  1183  000A3E  0E03               	movlw	3
  1184  000A40  6E1A               	movwf	set_line@pos,c
  1185  000A42  ECF7  F008         	call	_set_line	;wreg free
  1186                           
  1187                           ;TOCTOC.c: 101: write_LCD("As senhas");
  1188  000A46  0E59               	movlw	low STR_5
  1189  000A48  6E18               	movwf	write_LCD@c,c
  1190  000A4A  0E08               	movlw	high STR_5
  1191  000A4C  6E19               	movwf	write_LCD@c+1,c
  1192  000A4E  EC2F  F008         	call	_write_LCD	;wreg free
  1193                           
  1194                           ;TOCTOC.c: 102: set_line(1,1);
  1195  000A52  0E00               	movlw	0
  1196  000A54  6E19               	movwf	set_line@line+1,c
  1197  000A56  0E01               	movlw	1
  1198  000A58  6E18               	movwf	set_line@line,c
  1199  000A5A  0E00               	movlw	0
  1200  000A5C  6E1B               	movwf	set_line@pos+1,c
  1201  000A5E  0E01               	movlw	1
  1202  000A60  6E1A               	movwf	set_line@pos,c
  1203  000A62  ECF7  F008         	call	_set_line	;wreg free
  1204                           
  1205                           ;TOCTOC.c: 103: write_LCD("nao coincidem");
  1206  000A66  0E0F               	movlw	low STR_6
  1207  000A68  6E18               	movwf	write_LCD@c,c
  1208  000A6A  0E08               	movlw	high STR_6
  1209  000A6C  6E19               	movwf	write_LCD@c+1,c
  1210  000A6E  EC2F  F008         	call	_write_LCD	;wreg free
  1211  000A72  0012               	return	
  1212  000A74                     __end_of_destravarPorta:
  1213                           	opt stack 0
  1214                           tblptru	equ	0xFF8
  1215                           tblptrh	equ	0xFF7
  1216                           intcon	equ	0xFF2
  1217                           intcon2	equ	0xFF1
  1218                           intcon3	equ	0xFF0
  1219                           wreg	equ	0xFE8
  1220                           indf2	equ	0xFDF
  1221                           fsr2h	equ	0xFDA
  1222                           fsr2l	equ	0xFD9
  1223                           status	equ	0xFD8
  1224                           
  1225 ;; *************** function _DutyCycle_PWM *****************
  1226 ;; Defined at:
  1227 ;;		line 43 in file "PWM.c"
  1228 ;; Parameters:    Size  Location     Type
  1229 ;;  Valor           2   20[COMRAM] unsigned int 
  1230 ;; Auto vars:     Size  Location     Type
  1231 ;;		None
  1232 ;; Return value:  Size  Location     Type
  1233 ;;                  1    wreg      void 
  1234 ;; Registers used:
  1235 ;;		wreg, status,2, status,0
  1236 ;; Tracked objects:
  1237 ;;		On entry : 0/0
  1238 ;;		On exit  : 0/0
  1239 ;;		Unchanged: 0/0
  1240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1241 ;;      Params:         2       0       0       0       0       0       0       0       0
  1242 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1243 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1244 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1245 ;;Total ram usage:        4 bytes
  1246 ;; Hardware stack levels used:    1
  1247 ;; Hardware stack levels required when called:    2
  1248 ;; This function calls:
  1249 ;;		Nothing
  1250 ;; This function is called by:
  1251 ;;		_destravarPorta
  1252 ;; This function uses a non-reentrant model
  1253 ;;
  1254                           
  1255                           	psect	text6
  1256  0010A8                     __ptext6:
  1257                           	opt stack 0
  1258  0010A8                     _DutyCycle_PWM:
  1259                           	opt stack 27
  1260                           
  1261                           ;PWM.c: 44: CCP1CONbits.DC1B0 = Valor;
  1262                           
  1263                           ;incstack = 0
  1264  0010A8  B015               	btfsc	DutyCycle_PWM@Valor,0,c
  1265  0010AA  D002               	bra	u555
  1266  0010AC  98BD               	bcf	4029,4,c	;volatile
  1267  0010AE  D001               	bra	u556
  1268  0010B0                     u555:
  1269  0010B0  88BD               	bsf	4029,4,c	;volatile
  1270  0010B2                     u556:
  1271                           
  1272                           ;PWM.c: 45: CCP1CONbits.DC1B1 = Valor >> 1;
  1273  0010B2  90D8               	bcf	status,0,c
  1274  0010B4  3016               	rrcf	DutyCycle_PWM@Valor+1,w,c
  1275  0010B6  6E18               	movwf	(??_DutyCycle_PWM+1)& (0+255),c
  1276  0010B8  3015               	rrcf	DutyCycle_PWM@Valor,w,c
  1277  0010BA  6E17               	movwf	??_DutyCycle_PWM& (0+255),c
  1278  0010BC  3A17               	swapf	??_DutyCycle_PWM,f,c
  1279  0010BE  4617               	rlncf	??_DutyCycle_PWM,f,c
  1280  0010C0  50BD               	movf	4029,w,c	;volatile
  1281  0010C2  1817               	xorwf	??_DutyCycle_PWM,w,c
  1282  0010C4  0BDF               	andlw	-33
  1283  0010C6  1817               	xorwf	??_DutyCycle_PWM,w,c
  1284  0010C8  6EBD               	movwf	4029,c	;volatile
  1285                           
  1286                           ;PWM.c: 46: CCPR1L = Valor >> 2;
  1287  0010CA  C015  F017         	movff	DutyCycle_PWM@Valor,??_DutyCycle_PWM
  1288  0010CE  C016  F018         	movff	DutyCycle_PWM@Valor+1,??_DutyCycle_PWM+1
  1289  0010D2  90D8               	bcf	status,0,c
  1290  0010D4  3218               	rrcf	??_DutyCycle_PWM+1,f,c
  1291  0010D6  3217               	rrcf	??_DutyCycle_PWM,f,c
  1292  0010D8  90D8               	bcf	status,0,c
  1293  0010DA  3218               	rrcf	??_DutyCycle_PWM+1,f,c
  1294  0010DC  3217               	rrcf	??_DutyCycle_PWM,f,c
  1295  0010DE  5017               	movf	??_DutyCycle_PWM,w,c
  1296  0010E0  6EBE               	movwf	4030,c	;volatile
  1297  0010E2  0012               	return		;funcret
  1298  0010E4                     __end_of_DutyCycle_PWM:
  1299                           	opt stack 0
  1300                           tblptru	equ	0xFF8
  1301                           tblptrh	equ	0xFF7
  1302                           intcon	equ	0xFF2
  1303                           intcon2	equ	0xFF1
  1304                           intcon3	equ	0xFF0
  1305                           wreg	equ	0xFE8
  1306                           indf2	equ	0xFDF
  1307                           fsr2h	equ	0xFDA
  1308                           fsr2l	equ	0xFD9
  1309                           status	equ	0xFD8
  1310                           
  1311 ;; *************** function _cadastrarSenha *****************
  1312 ;; Defined at:
  1313 ;;		line 148 in file "TOCTOC.c"
  1314 ;; Parameters:    Size  Location     Type
  1315 ;;  pass            2   40[COMRAM] PTR unsigned char 
  1316 ;;		 -> main@pass(2), 
  1317 ;; Auto vars:     Size  Location     Type
  1318 ;;  temp1           2   50[COMRAM] unsigned char [2]
  1319 ;;  temp2           2   48[COMRAM] unsigned char [2]
  1320 ;;  j               2   46[COMRAM] int 
  1321 ;;  i               2   44[COMRAM] int 
  1322 ;; Return value:  Size  Location     Type
  1323 ;;                  1    wreg      void 
  1324 ;; Registers used:
  1325 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1326 ;; Tracked objects:
  1327 ;;		On entry : 0/0
  1328 ;;		On exit  : 0/0
  1329 ;;		Unchanged: 0/0
  1330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1331 ;;      Params:         2       0       0       0       0       0       0       0       0
  1332 ;;      Locals:         8       0       0       0       0       0       0       0       0
  1333 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1334 ;;      Totals:        12       0       0       0       0       0       0       0       0
  1335 ;;Total ram usage:       12 bytes
  1336 ;; Hardware stack levels used:    1
  1337 ;; Hardware stack levels required when called:    6
  1338 ;; This function calls:
  1339 ;;		_clearLCD
  1340 ;;		_cmpPass
  1341 ;;		_confirmarSenha
  1342 ;;		_lerToque
  1343 ;;		_set_line
  1344 ;;		_write_LCD
  1345 ;; This function is called by:
  1346 ;;		_main
  1347 ;; This function uses a non-reentrant model
  1348 ;;
  1349                           
  1350                           	psect	text7
  1351  000A74                     __ptext7:
  1352                           	opt stack 0
  1353  000A74                     _cadastrarSenha:
  1354                           	opt stack 24
  1355                           
  1356                           ;TOCTOC.c: 150: TRISBbits.RB4 = 1;
  1357                           
  1358                           ;incstack = 0
  1359  000A74  8893               	bsf	3987,4,c	;volatile
  1360                           
  1361                           ;TOCTOC.c: 152: int i = 0;
  1362  000A76  0E00               	movlw	0
  1363  000A78  6E2E               	movwf	cadastrarSenha@i+1,c
  1364  000A7A  0E00               	movlw	0
  1365  000A7C  6E2D               	movwf	cadastrarSenha@i,c
  1366                           
  1367                           ;TOCTOC.c: 153: int j = 0;
  1368  000A7E  0E00               	movlw	0
  1369  000A80  6E30               	movwf	cadastrarSenha@j+1,c
  1370  000A82  0E00               	movlw	0
  1371  000A84  6E2F               	movwf	cadastrarSenha@j,c
  1372                           
  1373                           ;TOCTOC.c: 155: char temp1[2];
  1374                           ;TOCTOC.c: 156: temp1[0] = 0x00;
  1375  000A86  0E00               	movlw	0
  1376  000A88  6E33               	movwf	cadastrarSenha@temp1,c
  1377                           
  1378                           ;TOCTOC.c: 157: temp1[1] = 0x00;
  1379  000A8A  0E00               	movlw	0
  1380  000A8C  6E34               	movwf	cadastrarSenha@temp1+1,c
  1381                           
  1382                           ;TOCTOC.c: 159: char temp2[2];
  1383                           ;TOCTOC.c: 160: temp2[0] = 0x00;
  1384  000A8E  0E00               	movlw	0
  1385  000A90  6E31               	movwf	cadastrarSenha@temp2,c
  1386                           
  1387                           ;TOCTOC.c: 161: temp2[1] = 0x00;
  1388  000A92  0E00               	movlw	0
  1389  000A94  6E32               	movwf	cadastrarSenha@temp2+1,c
  1390                           
  1391                           ;TOCTOC.c: 163: pass[0] = 0x00;
  1392  000A96  C029  FFD9         	movff	cadastrarSenha@pass,fsr2l
  1393  000A9A  C02A  FFDA         	movff	cadastrarSenha@pass+1,fsr2h
  1394  000A9E  0E00               	movlw	0
  1395  000AA0  6EDF               	movwf	indf2,c
  1396                           
  1397                           ;TOCTOC.c: 164: pass[1] = 0x00;
  1398  000AA2  EE20 F001          	lfsr	2,1
  1399  000AA6  5029               	movf	cadastrarSenha@pass,w,c
  1400  000AA8  26D9               	addwf	fsr2l,f,c
  1401  000AAA  502A               	movf	cadastrarSenha@pass+1,w,c
  1402  000AAC  22DA               	addwfc	fsr2h,f,c
  1403  000AAE  0E00               	movlw	0
  1404  000AB0  6EDF               	movwf	indf2,c
  1405  000AB2                     l1539:
  1406                           
  1407                           ;TOCTOC.c: 167: clearLCD();
  1408  000AB2  EC2B  F009         	call	_clearLCD	;wreg free
  1409                           
  1410                           ;TOCTOC.c: 168: set_line(0,1);
  1411  000AB6  0E00               	movlw	0
  1412  000AB8  6E19               	movwf	set_line@line+1,c
  1413  000ABA  0E00               	movlw	0
  1414  000ABC  6E18               	movwf	set_line@line,c
  1415  000ABE  0E00               	movlw	0
  1416  000AC0  6E1B               	movwf	set_line@pos+1,c
  1417  000AC2  0E01               	movlw	1
  1418  000AC4  6E1A               	movwf	set_line@pos,c
  1419  000AC6  ECF7  F008         	call	_set_line	;wreg free
  1420                           
  1421                           ;TOCTOC.c: 169: write_LCD("Cadastre sua");
  1422  000ACA  0E2A               	movlw	low STR_13
  1423  000ACC  6E18               	movwf	write_LCD@c,c
  1424  000ACE  0E08               	movlw	high STR_13
  1425  000AD0  6E19               	movwf	write_LCD@c+1,c
  1426  000AD2  EC2F  F008         	call	_write_LCD	;wreg free
  1427                           
  1428                           ;TOCTOC.c: 170: set_line(1,5);
  1429  000AD6  0E00               	movlw	0
  1430  000AD8  6E19               	movwf	set_line@line+1,c
  1431  000ADA  0E01               	movlw	1
  1432  000ADC  6E18               	movwf	set_line@line,c
  1433  000ADE  0E00               	movlw	0
  1434  000AE0  6E1B               	movwf	set_line@pos+1,c
  1435  000AE2  0E05               	movlw	5
  1436  000AE4  6E1A               	movwf	set_line@pos,c
  1437  000AE6  ECF7  F008         	call	_set_line	;wreg free
  1438                           
  1439                           ;TOCTOC.c: 171: write_LCD("senha");
  1440  000AEA  0E69               	movlw	low STR_12
  1441  000AEC  6E18               	movwf	write_LCD@c,c
  1442  000AEE  0E08               	movlw	high STR_12
  1443  000AF0  6E19               	movwf	write_LCD@c+1,c
  1444  000AF2  EC2F  F008         	call	_write_LCD	;wreg free
  1445                           
  1446                           ;TOCTOC.c: 172: _delay((unsigned long)((2000)*(16000000/4000.0)));
  1447  000AF6  0E29               	movlw	41
  1448  000AF8  6E2C               	movwf	(??_cadastrarSenha+1)& (0+255),c
  1449  000AFA  0E96               	movlw	150
  1450  000AFC  6E2B               	movwf	??_cadastrarSenha& (0+255),c
  1451  000AFE  0E7F               	movlw	127
  1452  000B00                     u787:
  1453  000B00  2EE8               	decfsz	wreg,f,c
  1454  000B02  D7FE               	bra	u787
  1455  000B04  2E2B               	decfsz	??_cadastrarSenha& (0+255),f,c
  1456  000B06  D7FC               	bra	u787
  1457  000B08  2E2C               	decfsz	(??_cadastrarSenha+1)& (0+255),f,c
  1458  000B0A  D7FA               	bra	u787
  1459  000B0C  F000               	nop	
  1460                           
  1461                           ;TOCTOC.c: 174: lerToque(&temp1);
  1462  000B0E  0E33               	movlw	low cadastrarSenha@temp1
  1463  000B10  6E25               	movwf	lerToque@toque,c
  1464  000B12  0E00               	movlw	high cadastrarSenha@temp1
  1465  000B14  6E26               	movwf	lerToque@toque+1,c
  1466  000B16  EC11  F006         	call	_lerToque	;wreg free
  1467                           
  1468                           ;TOCTOC.c: 175: clearLCD();
  1469  000B1A  EC2B  F009         	call	_clearLCD	;wreg free
  1470                           
  1471                           ;TOCTOC.c: 176: set_line(0,2);
  1472  000B1E  0E00               	movlw	0
  1473  000B20  6E19               	movwf	set_line@line+1,c
  1474  000B22  0E00               	movlw	0
  1475  000B24  6E18               	movwf	set_line@line,c
  1476  000B26  0E00               	movlw	0
  1477  000B28  6E1B               	movwf	set_line@pos+1,c
  1478  000B2A  0E02               	movlw	2
  1479  000B2C  6E1A               	movwf	set_line@pos,c
  1480  000B2E  ECF7  F008         	call	_set_line	;wreg free
  1481                           
  1482                           ;TOCTOC.c: 177: write_LCD("Repita sua");
  1483  000B32  0E4E               	movlw	low STR_15
  1484  000B34  6E18               	movwf	write_LCD@c,c
  1485  000B36  0E08               	movlw	high STR_15
  1486  000B38  6E19               	movwf	write_LCD@c+1,c
  1487  000B3A  EC2F  F008         	call	_write_LCD	;wreg free
  1488                           
  1489                           ;TOCTOC.c: 178: set_line(1,5);
  1490  000B3E  0E00               	movlw	0
  1491  000B40  6E19               	movwf	set_line@line+1,c
  1492  000B42  0E01               	movlw	1
  1493  000B44  6E18               	movwf	set_line@line,c
  1494  000B46  0E00               	movlw	0
  1495  000B48  6E1B               	movwf	set_line@pos+1,c
  1496  000B4A  0E05               	movlw	5
  1497  000B4C  6E1A               	movwf	set_line@pos,c
  1498  000B4E  ECF7  F008         	call	_set_line	;wreg free
  1499                           
  1500                           ;TOCTOC.c: 179: write_LCD("senha");
  1501  000B52  0E69               	movlw	low STR_12
  1502  000B54  6E18               	movwf	write_LCD@c,c
  1503  000B56  0E08               	movlw	high STR_12
  1504  000B58  6E19               	movwf	write_LCD@c+1,c
  1505  000B5A  EC2F  F008         	call	_write_LCD	;wreg free
  1506                           
  1507                           ;TOCTOC.c: 180: _delay((unsigned long)((2000)*(16000000/4000.0)));
  1508  000B5E  0E29               	movlw	41
  1509  000B60  6E2C               	movwf	(??_cadastrarSenha+1)& (0+255),c
  1510  000B62  0E96               	movlw	150
  1511  000B64  6E2B               	movwf	??_cadastrarSenha& (0+255),c
  1512  000B66  0E7F               	movlw	127
  1513  000B68                     u797:
  1514  000B68  2EE8               	decfsz	wreg,f,c
  1515  000B6A  D7FE               	bra	u797
  1516  000B6C  2E2B               	decfsz	??_cadastrarSenha& (0+255),f,c
  1517  000B6E  D7FC               	bra	u797
  1518  000B70  2E2C               	decfsz	(??_cadastrarSenha+1)& (0+255),f,c
  1519  000B72  D7FA               	bra	u797
  1520  000B74  F000               	nop	
  1521                           
  1522                           ;TOCTOC.c: 182: lerToque(&temp2);
  1523  000B76  0E31               	movlw	low cadastrarSenha@temp2
  1524  000B78  6E25               	movwf	lerToque@toque,c
  1525  000B7A  0E00               	movlw	high cadastrarSenha@temp2
  1526  000B7C  6E26               	movwf	lerToque@toque+1,c
  1527  000B7E  EC11  F006         	call	_lerToque	;wreg free
  1528                           
  1529                           ;TOCTOC.c: 183: if(cmpPass(temp1, temp2))
  1530  000B82  0E33               	movlw	low cadastrarSenha@temp1
  1531  000B84  6E1E               	movwf	cmpPass@pass,c
  1532  000B86  0E00               	movlw	high cadastrarSenha@temp1
  1533  000B88  6E1F               	movwf	cmpPass@pass+1,c
  1534  000B8A  0E31               	movlw	low cadastrarSenha@temp2
  1535  000B8C  6E20               	movwf	cmpPass@toque,c
  1536  000B8E  0E00               	movlw	high cadastrarSenha@temp2
  1537  000B90  6E21               	movwf	cmpPass@toque+1,c
  1538  000B92  ECF8  F006         	call	_cmpPass	;wreg free
  1539  000B96  501E               	movf	?_cmpPass,w,c
  1540  000B98  101F               	iorwf	?_cmpPass+1,w,c
  1541  000B9A  B4D8               	btfsc	status,2,c
  1542  000B9C  D78A               	goto	l1539
  1543                           
  1544                           ;TOCTOC.c: 184: if(confirmarSenha())
  1545  000B9E  ECA5  F007         	call	_confirmarSenha	;wreg free
  1546  000BA2  501E               	movf	?_confirmarSenha,w,c
  1547  000BA4  101F               	iorwf	?_confirmarSenha+1,w,c
  1548  000BA6  B4D8               	btfsc	status,2,c
  1549  000BA8  D784               	goto	l1539
  1550                           
  1551                           ;TOCTOC.c: 187: }
  1552                           ;TOCTOC.c: 189: pass[0] = temp1[0];
  1553                           
  1554                           ;TOCTOC.c: 185: break;
  1555  000BAA  C029  FFD9         	movff	cadastrarSenha@pass,fsr2l
  1556  000BAE  C02A  FFDA         	movff	cadastrarSenha@pass+1,fsr2h
  1557  000BB2  C033  FFDF         	movff	cadastrarSenha@temp1,indf2
  1558                           
  1559                           ;TOCTOC.c: 190: pass[1] = temp1[1];
  1560  000BB6  EE20 F001          	lfsr	2,1
  1561  000BBA  5029               	movf	cadastrarSenha@pass,w,c
  1562  000BBC  26D9               	addwf	fsr2l,f,c
  1563  000BBE  502A               	movf	cadastrarSenha@pass+1,w,c
  1564  000BC0  22DA               	addwfc	fsr2h,f,c
  1565  000BC2  C034  FFDF         	movff	cadastrarSenha@temp1+1,indf2
  1566                           
  1567                           ;TOCTOC.c: 192: clearLCD();
  1568  000BC6  EC2B  F009         	call	_clearLCD	;wreg free
  1569                           
  1570                           ;TOCTOC.c: 193: set_line(0,6);
  1571  000BCA  0E00               	movlw	0
  1572  000BCC  6E19               	movwf	set_line@line+1,c
  1573  000BCE  0E00               	movlw	0
  1574  000BD0  6E18               	movwf	set_line@line,c
  1575  000BD2  0E00               	movlw	0
  1576  000BD4  6E1B               	movwf	set_line@pos+1,c
  1577  000BD6  0E06               	movlw	6
  1578  000BD8  6E1A               	movwf	set_line@pos,c
  1579  000BDA  ECF7  F008         	call	_set_line	;wreg free
  1580                           
  1581                           ;TOCTOC.c: 194: write_LCD("Senha");
  1582  000BDE  0E63               	movlw	low STR_17
  1583  000BE0  6E18               	movwf	write_LCD@c,c
  1584  000BE2  0E08               	movlw	high STR_17
  1585  000BE4  6E19               	movwf	write_LCD@c+1,c
  1586  000BE6  EC2F  F008         	call	_write_LCD	;wreg free
  1587                           
  1588                           ;TOCTOC.c: 195: set_line(1,3);
  1589  000BEA  0E00               	movlw	0
  1590  000BEC  6E19               	movwf	set_line@line+1,c
  1591  000BEE  0E01               	movlw	1
  1592  000BF0  6E18               	movwf	set_line@line,c
  1593  000BF2  0E00               	movlw	0
  1594  000BF4  6E1B               	movwf	set_line@pos+1,c
  1595  000BF6  0E03               	movlw	3
  1596  000BF8  6E1A               	movwf	set_line@pos,c
  1597  000BFA  ECF7  F008         	call	_set_line	;wreg free
  1598                           
  1599                           ;TOCTOC.c: 196: write_LCD("Cadastrada");
  1600  000BFE  0E43               	movlw	low STR_18
  1601  000C00  6E18               	movwf	write_LCD@c,c
  1602  000C02  0E08               	movlw	high STR_18
  1603  000C04  6E19               	movwf	write_LCD@c+1,c
  1604  000C06  EC2F  F008         	call	_write_LCD	;wreg free
  1605                           
  1606                           ;TOCTOC.c: 197: _delay((unsigned long)((3000)*(16000000/4000.0)));
  1607  000C0A  0E3D               	movlw	61
  1608  000C0C  6E2C               	movwf	(??_cadastrarSenha+1)& (0+255),c
  1609  000C0E  0EE1               	movlw	225
  1610  000C10  6E2B               	movwf	??_cadastrarSenha& (0+255),c
  1611  000C12  0E40               	movlw	64
  1612  000C14                     u807:
  1613  000C14  2EE8               	decfsz	wreg,f,c
  1614  000C16  D7FE               	bra	u807
  1615  000C18  2E2B               	decfsz	??_cadastrarSenha& (0+255),f,c
  1616  000C1A  D7FC               	bra	u807
  1617  000C1C  2E2C               	decfsz	(??_cadastrarSenha+1)& (0+255),f,c
  1618  000C1E  D7FA               	bra	u807
  1619  000C20  0012               	return		;funcret
  1620  000C22                     __end_of_cadastrarSenha:
  1621                           	opt stack 0
  1622                           tblptru	equ	0xFF8
  1623                           tblptrh	equ	0xFF7
  1624                           intcon	equ	0xFF2
  1625                           intcon2	equ	0xFF1
  1626                           intcon3	equ	0xFF0
  1627                           wreg	equ	0xFE8
  1628                           indf2	equ	0xFDF
  1629                           fsr2h	equ	0xFDA
  1630                           fsr2l	equ	0xFD9
  1631                           status	equ	0xFD8
  1632                           
  1633 ;; *************** function _lerToque *****************
  1634 ;; Defined at:
  1635 ;;		line 25 in file "TOCTOC.c"
  1636 ;; Parameters:    Size  Location     Type
  1637 ;;  toque           2   36[COMRAM] PTR unsigned char 
  1638 ;;		 -> cadastrarSenha@temp2(2), cadastrarSenha@temp1(2), 
  1639 ;; Auto vars:     Size  Location     Type
  1640 ;;  i               2   38[COMRAM] int 
  1641 ;; Return value:  Size  Location     Type
  1642 ;;                  1    wreg      void 
  1643 ;; Registers used:
  1644 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1645 ;; Tracked objects:
  1646 ;;		On entry : 0/0
  1647 ;;		On exit  : 0/0
  1648 ;;		Unchanged: 0/0
  1649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1650 ;;      Params:         2       0       0       0       0       0       0       0       0
  1651 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1652 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1653 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1654 ;;Total ram usage:        4 bytes
  1655 ;; Hardware stack levels used:    1
  1656 ;; Hardware stack levels required when called:    5
  1657 ;; This function calls:
  1658 ;;		_clearLCD
  1659 ;;		_readSignal
  1660 ;;		_read_ADC
  1661 ;;		_send_msg
  1662 ;;		_set_line
  1663 ;;		_write_LCD
  1664 ;; This function is called by:
  1665 ;;		_cadastrarSenha
  1666 ;; This function uses a non-reentrant model
  1667 ;;
  1668                           
  1669                           	psect	text8
  1670  000C22                     __ptext8:
  1671                           	opt stack 0
  1672  000C22                     _lerToque:
  1673                           	opt stack 24
  1674                           
  1675                           ;TOCTOC.c: 27: int i = 0;
  1676                           
  1677                           ;incstack = 0
  1678  000C22  0E00               	movlw	0
  1679  000C24  6E28               	movwf	lerToque@i+1,c
  1680  000C26  0E00               	movlw	0
  1681  000C28  6E27               	movwf	lerToque@i,c
  1682                           
  1683                           ;TOCTOC.c: 29: toque[0] = 0x00;
  1684  000C2A  C025  FFD9         	movff	lerToque@toque,fsr2l
  1685  000C2E  C026  FFDA         	movff	lerToque@toque+1,fsr2h
  1686  000C32  0E00               	movlw	0
  1687  000C34  6EDF               	movwf	indf2,c
  1688                           
  1689                           ;TOCTOC.c: 30: toque[1] = 0x00;
  1690  000C36  EE20 F001          	lfsr	2,1
  1691  000C3A  5025               	movf	lerToque@toque,w,c
  1692  000C3C  26D9               	addwf	fsr2l,f,c
  1693  000C3E  5026               	movf	lerToque@toque+1,w,c
  1694  000C40  22DA               	addwfc	fsr2h,f,c
  1695  000C42  0E00               	movlw	0
  1696  000C44  6EDF               	movwf	indf2,c
  1697                           
  1698                           ;TOCTOC.c: 32: clearLCD();
  1699  000C46  EC2B  F009         	call	_clearLCD	;wreg free
  1700                           
  1701                           ;TOCTOC.c: 33: set_line(0,0);
  1702  000C4A  0E00               	movlw	0
  1703  000C4C  6E19               	movwf	set_line@line+1,c
  1704  000C4E  0E00               	movlw	0
  1705  000C50  6E18               	movwf	set_line@line,c
  1706  000C52  0E00               	movlw	0
  1707  000C54  6E1B               	movwf	set_line@pos+1,c
  1708  000C56  0E00               	movlw	0
  1709  000C58  6E1A               	movwf	set_line@pos,c
  1710  000C5A  ECF7  F008         	call	_set_line	;wreg free
  1711                           
  1712                           ;TOCTOC.c: 34: write_LCD("Bata na porta");
  1713  000C5E  0E01               	movlw	low STR_1
  1714  000C60  6E18               	movwf	write_LCD@c,c
  1715  000C62  0E08               	movlw	high STR_1
  1716  000C64  6E19               	movwf	write_LCD@c+1,c
  1717  000C66  EC2F  F008         	call	_write_LCD	;wreg free
  1718  000C6A                     l1459:
  1719  000C6A  EC05  F009         	call	_read_ADC	;wreg free
  1720  000C6E  BE16               	btfsc	?_read_ADC+1,7,c
  1721  000C70  D7FC               	goto	l1459
  1722  000C72  5016               	movf	?_read_ADC+1,w,c
  1723  000C74  E151               	bnz	l1479
  1724  000C76  0E0F               	movlw	15
  1725  000C78  5C15               	subwf	?_read_ADC,w,c
  1726  000C7A  B0D8               	btfsc	status,0,c
  1727  000C7C  D04D               	goto	l1479
  1728  000C7E  D7F5               	goto	l1459
  1729  000C80                     l1461:
  1730                           
  1731                           ;TOCTOC.c: 38: set_line(1,0);
  1732  000C80  0E00               	movlw	0
  1733  000C82  6E19               	movwf	set_line@line+1,c
  1734  000C84  0E01               	movlw	1
  1735  000C86  6E18               	movwf	set_line@line,c
  1736  000C88  0E00               	movlw	0
  1737  000C8A  6E1B               	movwf	set_line@pos+1,c
  1738  000C8C  0E00               	movlw	0
  1739  000C8E  6E1A               	movwf	set_line@pos,c
  1740  000C90  ECF7  F008         	call	_set_line	;wreg free
  1741                           
  1742                           ;TOCTOC.c: 39: send_msg('1'+ i);
  1743  000C94  5027               	movf	lerToque@i,w,c
  1744  000C96  0F31               	addlw	49
  1745  000C98  ECAC  F008         	call	_send_msg
  1746                           
  1747                           ;TOCTOC.c: 40: if(i == 0)
  1748  000C9C  5027               	movf	lerToque@i,w,c
  1749  000C9E  1028               	iorwf	lerToque@i+1,w,c
  1750  000CA0  A4D8               	btfss	status,2,c
  1751  000CA2  D00B               	goto	l1467
  1752                           
  1753                           ;TOCTOC.c: 41: readSignal(&toque[0], 0);
  1754  000CA4  C025  F019         	movff	lerToque@toque,readSignal@signal
  1755  000CA8  C026  F01A         	movff	lerToque@toque+1,readSignal@signal+1
  1756  000CAC  0E00               	movlw	0
  1757  000CAE  6E1C               	movwf	readSignal@pos+1,c
  1758  000CB0  0E00               	movlw	0
  1759  000CB2  6E1B               	movwf	readSignal@pos,c
  1760  000CB4  EC54  F007         	call	_readSignal	;wreg free
  1761  000CB8  D02D               	goto	l1477
  1762  000CBA                     l1467:
  1763                           
  1764                           ;TOCTOC.c: 42: else if(i == 1)
  1765  000CBA  0427               	decf	lerToque@i,w,c
  1766  000CBC  1028               	iorwf	lerToque@i+1,w,c
  1767  000CBE  A4D8               	btfss	status,2,c
  1768  000CC0  D00B               	goto	l1471
  1769                           
  1770                           ;TOCTOC.c: 43: readSignal(&toque[0], 1);
  1771  000CC2  C025  F019         	movff	lerToque@toque,readSignal@signal
  1772  000CC6  C026  F01A         	movff	lerToque@toque+1,readSignal@signal+1
  1773  000CCA  0E00               	movlw	0
  1774  000CCC  6E1C               	movwf	readSignal@pos+1,c
  1775  000CCE  0E01               	movlw	1
  1776  000CD0  6E1B               	movwf	readSignal@pos,c
  1777  000CD2  EC54  F007         	call	_readSignal	;wreg free
  1778  000CD6  D01E               	goto	l1477
  1779  000CD8                     l1471:
  1780                           
  1781                           ;TOCTOC.c: 44: else if(i == 2)
  1782  000CD8  0E02               	movlw	2
  1783  000CDA  1827               	xorwf	lerToque@i,w,c
  1784  000CDC  1028               	iorwf	lerToque@i+1,w,c
  1785  000CDE  A4D8               	btfss	status,2,c
  1786  000CE0  D00D               	goto	l1475
  1787                           
  1788                           ;TOCTOC.c: 45: readSignal(&toque[1], 0);
  1789  000CE2  0E01               	movlw	1
  1790  000CE4  2425               	addwf	lerToque@toque,w,c
  1791  000CE6  6E19               	movwf	readSignal@signal,c
  1792  000CE8  0E00               	movlw	0
  1793  000CEA  2026               	addwfc	lerToque@toque+1,w,c
  1794  000CEC  6E1A               	movwf	readSignal@signal+1,c
  1795  000CEE  0E00               	movlw	0
  1796  000CF0  6E1C               	movwf	readSignal@pos+1,c
  1797  000CF2  0E00               	movlw	0
  1798  000CF4  6E1B               	movwf	readSignal@pos,c
  1799  000CF6  EC54  F007         	call	_readSignal	;wreg free
  1800  000CFA  D00C               	goto	l1477
  1801  000CFC                     l1475:
  1802                           
  1803                           ;TOCTOC.c: 46: else
  1804                           ;TOCTOC.c: 47: readSignal(&toque[1], 1);
  1805  000CFC  0E01               	movlw	1
  1806  000CFE  2425               	addwf	lerToque@toque,w,c
  1807  000D00  6E19               	movwf	readSignal@signal,c
  1808  000D02  0E00               	movlw	0
  1809  000D04  2026               	addwfc	lerToque@toque+1,w,c
  1810  000D06  6E1A               	movwf	readSignal@signal+1,c
  1811  000D08  0E00               	movlw	0
  1812  000D0A  6E1C               	movwf	readSignal@pos+1,c
  1813  000D0C  0E01               	movlw	1
  1814  000D0E  6E1B               	movwf	readSignal@pos,c
  1815  000D10  EC54  F007         	call	_readSignal	;wreg free
  1816  000D14                     l1477:
  1817                           
  1818                           ;TOCTOC.c: 48: i++;
  1819  000D14  4A27               	infsnz	lerToque@i,f,c
  1820  000D16  2A28               	incf	lerToque@i+1,f,c
  1821  000D18                     l1479:
  1822  000D18  BE28               	btfsc	lerToque@i+1,7,c
  1823  000D1A  D7B2               	goto	l1461
  1824  000D1C  5028               	movf	lerToque@i+1,w,c
  1825  000D1E  E105               	bnz	l259
  1826  000D20  0E04               	movlw	4
  1827  000D22  5C27               	subwf	lerToque@i,w,c
  1828  000D24  B0D8               	btfsc	status,0,c
  1829  000D26  0012               	return	
  1830  000D28  D7AB               	goto	l1461
  1831  000D2A                     l259:
  1832  000D2A  0012               	return		;funcret
  1833  000D2C                     __end_of_lerToque:
  1834                           	opt stack 0
  1835                           tblptru	equ	0xFF8
  1836                           tblptrh	equ	0xFF7
  1837                           intcon	equ	0xFF2
  1838                           intcon2	equ	0xFF1
  1839                           intcon3	equ	0xFF0
  1840                           wreg	equ	0xFE8
  1841                           indf2	equ	0xFDF
  1842                           fsr2h	equ	0xFDA
  1843                           fsr2l	equ	0xFD9
  1844                           status	equ	0xFD8
  1845                           
  1846 ;; *************** function _readSignal *****************
  1847 ;; Defined at:
  1848 ;;		line 13 in file "ReadSignal.c"
  1849 ;; Parameters:    Size  Location     Type
  1850 ;;  signal          2   24[COMRAM] PTR unsigned char 
  1851 ;;		 -> cadastrarSenha@temp2(2), cadastrarSenha@temp1(2), main@toc(2), 
  1852 ;;  pos             2   26[COMRAM] int 
  1853 ;; Auto vars:     Size  Location     Type
  1854 ;;  j               2   34[COMRAM] int 
  1855 ;;  i               2   32[COMRAM] int 
  1856 ;;  limite          2   30[COMRAM] int 
  1857 ;; Return value:  Size  Location     Type
  1858 ;;                  1    wreg      void 
  1859 ;; Registers used:
  1860 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1861 ;; Tracked objects:
  1862 ;;		On entry : 0/0
  1863 ;;		On exit  : 0/0
  1864 ;;		Unchanged: 0/0
  1865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1866 ;;      Params:         4       0       0       0       0       0       0       0       0
  1867 ;;      Locals:         6       0       0       0       0       0       0       0       0
  1868 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1869 ;;      Totals:        12       0       0       0       0       0       0       0       0
  1870 ;;Total ram usage:       12 bytes
  1871 ;; Hardware stack levels used:    1
  1872 ;; Hardware stack levels required when called:    3
  1873 ;; This function calls:
  1874 ;;		_read_ADC
  1875 ;; This function is called by:
  1876 ;;		_lerToque
  1877 ;;		_destravarPorta
  1878 ;; This function uses a non-reentrant model
  1879 ;;
  1880                           
  1881                           	psect	text9
  1882  000EA8                     __ptext9:
  1883                           	opt stack 0
  1884  000EA8                     _readSignal:
  1885                           	opt stack 26
  1886                           
  1887                           ;ReadSignal.c: 15: int j = 0;
  1888                           
  1889                           ;incstack = 0
  1890  000EA8  0E00               	movlw	0
  1891  000EAA  6E24               	movwf	readSignal@j+1,c
  1892  000EAC  0E00               	movlw	0
  1893  000EAE  6E23               	movwf	readSignal@j,c
  1894                           
  1895                           ;ReadSignal.c: 16: if(pos == 1)
  1896  000EB0  041B               	decf	readSignal@pos,w,c
  1897  000EB2  101C               	iorwf	readSignal@pos+1,w,c
  1898  000EB4  A4D8               	btfss	status,2,c
  1899  000EB6  D004               	goto	l1415
  1900                           
  1901                           ;ReadSignal.c: 17: j = 4;
  1902  000EB8  0E00               	movlw	0
  1903  000EBA  6E24               	movwf	readSignal@j+1,c
  1904  000EBC  0E04               	movlw	4
  1905  000EBE  6E23               	movwf	readSignal@j,c
  1906  000EC0                     l1415:
  1907                           
  1908                           ;ReadSignal.c: 18: int limite;
  1909                           ;ReadSignal.c: 19: limite = j + 4;
  1910  000EC0  0E04               	movlw	4
  1911  000EC2  2423               	addwf	readSignal@j,w,c
  1912  000EC4  6E1F               	movwf	readSignal@limite,c
  1913  000EC6  0E00               	movlw	0
  1914  000EC8  2024               	addwfc	readSignal@j+1,w,c
  1915  000ECA  6E20               	movwf	readSignal@limite+1,c
  1916                           
  1917                           ;ReadSignal.c: 20: int i;
  1918                           ;ReadSignal.c: 22: while(j < limite){
  1919  000ECC  D033               	goto	l185
  1920  000ECE                     l1417:
  1921                           
  1922                           ;ReadSignal.c: 24: i = 0;
  1923  000ECE  0E00               	movlw	0
  1924  000ED0  6E22               	movwf	readSignal@i+1,c
  1925  000ED2  0E00               	movlw	0
  1926  000ED4  6E21               	movwf	readSignal@i,c
  1927                           
  1928                           ;ReadSignal.c: 25: while(i < 500){
  1929  000ED6  D022               	goto	l1427
  1930  000ED8                     l1419:
  1931                           
  1932                           ;ReadSignal.c: 26: if((int)read_ADC() > 15){
  1933  000ED8  EC05  F009         	call	_read_ADC	;wreg free
  1934  000EDC  5016               	movf	?_read_ADC+1,w,c
  1935  000EDE  E104               	bnz	u490
  1936  000EE0  0E10               	movlw	16
  1937  000EE2  5C15               	subwf	?_read_ADC,w,c
  1938  000EE4  A0D8               	btfss	status,0,c
  1939  000EE6  D010               	goto	l1423
  1940  000EE8                     u490:
  1941                           
  1942                           ;ReadSignal.c: 27: *signal |= (0x03<<j);
  1943  000EE8  C023  F01D         	movff	readSignal@j,??_readSignal
  1944  000EEC  0E03               	movlw	3
  1945  000EEE  6E1E               	movwf	(??_readSignal+1)& (0+255),c
  1946  000EF0  2A1D               	incf	??_readSignal,f,c
  1947  000EF2  D002               	goto	u504
  1948  000EF4                     u505:
  1949  000EF4  90D8               	bcf	status,0,c
  1950  000EF6  361E               	rlcf	??_readSignal+1,f,c
  1951  000EF8                     u504:
  1952  000EF8  2E1D               	decfsz	??_readSignal,f,c
  1953  000EFA  D7FC               	goto	u505
  1954  000EFC  C019  FFD9         	movff	readSignal@signal,fsr2l
  1955  000F00  C01A  FFDA         	movff	readSignal@signal+1,fsr2h
  1956  000F04  501E               	movf	??_readSignal+1,w,c
  1957  000F06  12DF               	iorwf	indf2,f,c
  1958  000F08                     l1423:
  1959                           
  1960                           ;ReadSignal.c: 28: }
  1961                           ;ReadSignal.c: 29: _delay((unsigned long)((1)*(16000000/4000.0)));
  1962  000F08  0E06               	movlw	6
  1963  000F0A  6E1D               	movwf	??_readSignal& (0+255),c
  1964  000F0C  0E30               	movlw	48
  1965  000F0E                     u817:
  1966  000F0E  2EE8               	decfsz	wreg,f,c
  1967  000F10  D7FE               	bra	u817
  1968  000F12  2E1D               	decfsz	??_readSignal& (0+255),f,c
  1969  000F14  D7FC               	bra	u817
  1970  000F16  D000               	nop2	
  1971                           
  1972                           ;ReadSignal.c: 30: i++;
  1973  000F18  4A21               	infsnz	readSignal@i,f,c
  1974  000F1A  2A22               	incf	readSignal@i+1,f,c
  1975  000F1C                     l1427:
  1976  000F1C  BE22               	btfsc	readSignal@i+1,7,c
  1977  000F1E  D7DC               	goto	l1419
  1978  000F20  0EF4               	movlw	244
  1979  000F22  5C21               	subwf	readSignal@i,w,c
  1980  000F24  0E01               	movlw	1
  1981  000F26  5822               	subwfb	readSignal@i+1,w,c
  1982  000F28  A0D8               	btfss	status,0,c
  1983  000F2A  D7D6               	goto	l1419
  1984                           
  1985                           ;ReadSignal.c: 31: }
  1986                           ;ReadSignal.c: 32: j+=2;
  1987  000F2C  0E02               	movlw	2
  1988  000F2E  2623               	addwf	readSignal@j,f,c
  1989  000F30  0E00               	movlw	0
  1990  000F32  2224               	addwfc	readSignal@j+1,f,c
  1991  000F34                     l185:
  1992  000F34  501F               	movf	readSignal@limite,w,c
  1993  000F36  5C23               	subwf	readSignal@j,w,c
  1994  000F38  5024               	movf	readSignal@j+1,w,c
  1995  000F3A  0A80               	xorlw	128
  1996  000F3C  6E1D               	movwf	??_readSignal& (0+255),c
  1997  000F3E  5020               	movf	readSignal@limite+1,w,c
  1998  000F40  0A80               	xorlw	128
  1999  000F42  581D               	subwfb	??_readSignal& (0+255),w,c
  2000  000F44  B0D8               	btfsc	status,0,c
  2001  000F46  0012               	return	
  2002  000F48  D7C2               	goto	l1417
  2003  000F4A                     __end_of_readSignal:
  2004                           	opt stack 0
  2005                           tblptru	equ	0xFF8
  2006                           tblptrh	equ	0xFF7
  2007                           intcon	equ	0xFF2
  2008                           intcon2	equ	0xFF1
  2009                           intcon3	equ	0xFF0
  2010                           wreg	equ	0xFE8
  2011                           indf2	equ	0xFDF
  2012                           fsr2h	equ	0xFDA
  2013                           fsr2l	equ	0xFD9
  2014                           status	equ	0xFD8
  2015                           
  2016 ;; *************** function _read_ADC *****************
  2017 ;; Defined at:
  2018 ;;		line 19 in file "ADC.c"
  2019 ;; Parameters:    Size  Location     Type
  2020 ;;		None
  2021 ;; Auto vars:     Size  Location     Type
  2022 ;;  value           2   22[COMRAM] unsigned int 
  2023 ;; Return value:  Size  Location     Type
  2024 ;;                  2   20[COMRAM] unsigned int 
  2025 ;; Registers used:
  2026 ;;		None
  2027 ;; Tracked objects:
  2028 ;;		On entry : 0/0
  2029 ;;		On exit  : 0/0
  2030 ;;		Unchanged: 0/0
  2031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2032 ;;      Params:         2       0       0       0       0       0       0       0       0
  2033 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2034 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2035 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2036 ;;Total ram usage:        4 bytes
  2037 ;; Hardware stack levels used:    1
  2038 ;; Hardware stack levels required when called:    2
  2039 ;; This function calls:
  2040 ;;		Nothing
  2041 ;; This function is called by:
  2042 ;;		_readSignal
  2043 ;;		_lerToque
  2044 ;;		_destravarPorta
  2045 ;; This function uses a non-reentrant model
  2046 ;;
  2047                           
  2048                           	psect	text10
  2049  00120A                     __ptext10:
  2050                           	opt stack 0
  2051  00120A                     _read_ADC:
  2052                           	opt stack 27
  2053                           
  2054                           ;ADC.c: 20: unsigned int value;
  2055                           ;ADC.c: 21: ADCON0bits.GO = 1;
  2056                           
  2057                           ;incstack = 0
  2058  00120A  82C2               	bsf	4034,1,c	;volatile
  2059  00120C                     l174:
  2060  00120C  B2C2               	btfsc	4034,1,c	;volatile
  2061  00120E  D7FE               	goto	l174
  2062                           
  2063                           ;ADC.c: 24: value = ADRES;
  2064  001210  CFC3 F017          	movff	4035,read_ADC@value	;volatile
  2065  001214  CFC4 F018          	movff	4036,read_ADC@value+1	;volatile
  2066                           
  2067                           ;ADC.c: 26: return value;
  2068  001218  C017  F015         	movff	read_ADC@value,?_read_ADC
  2069  00121C  C018  F016         	movff	read_ADC@value+1,?_read_ADC+1
  2070  001220  0012               	return		;funcret
  2071  001222                     __end_of_read_ADC:
  2072                           	opt stack 0
  2073                           tblptru	equ	0xFF8
  2074                           tblptrh	equ	0xFF7
  2075                           intcon	equ	0xFF2
  2076                           intcon2	equ	0xFF1
  2077                           intcon3	equ	0xFF0
  2078                           wreg	equ	0xFE8
  2079                           indf2	equ	0xFDF
  2080                           fsr2h	equ	0xFDA
  2081                           fsr2l	equ	0xFD9
  2082                           status	equ	0xFD8
  2083                           
  2084 ;; *************** function _confirmarSenha *****************
  2085 ;; Defined at:
  2086 ;;		line 132 in file "TOCTOC.c"
  2087 ;; Parameters:    Size  Location     Type
  2088 ;;		None
  2089 ;; Auto vars:     Size  Location     Type
  2090 ;;		None
  2091 ;; Return value:  Size  Location     Type
  2092 ;;                  2   29[COMRAM] int 
  2093 ;; Registers used:
  2094 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2095 ;; Tracked objects:
  2096 ;;		On entry : 0/0
  2097 ;;		On exit  : 0/0
  2098 ;;		Unchanged: 0/0
  2099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2100 ;;      Params:         2       0       0       0       0       0       0       0       0
  2101 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2102 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2103 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2104 ;;Total ram usage:        2 bytes
  2105 ;; Hardware stack levels used:    1
  2106 ;; Hardware stack levels required when called:    5
  2107 ;; This function calls:
  2108 ;;		_clearLCD
  2109 ;;		_set_line
  2110 ;;		_write_LCD
  2111 ;; This function is called by:
  2112 ;;		_cadastrarSenha
  2113 ;; This function uses a non-reentrant model
  2114 ;;
  2115                           
  2116                           	psect	text11
  2117  000F4A                     __ptext11:
  2118                           	opt stack 0
  2119  000F4A                     _confirmarSenha:
  2120                           	opt stack 24
  2121                           
  2122                           ;TOCTOC.c: 133: clearLCD();
  2123                           
  2124                           ;incstack = 0
  2125  000F4A  EC2B  F009         	call	_clearLCD	;wreg free
  2126                           
  2127                           ;TOCTOC.c: 134: set_line(0,1);
  2128  000F4E  0E00               	movlw	0
  2129  000F50  6E19               	movwf	set_line@line+1,c
  2130  000F52  0E00               	movlw	0
  2131  000F54  6E18               	movwf	set_line@line,c
  2132  000F56  0E00               	movlw	0
  2133  000F58  6E1B               	movwf	set_line@pos+1,c
  2134  000F5A  0E01               	movlw	1
  2135  000F5C  6E1A               	movwf	set_line@pos,c
  2136  000F5E  ECF7  F008         	call	_set_line	;wreg free
  2137                           
  2138                           ;TOCTOC.c: 135: write_LCD("Confirme sua");
  2139  000F62  0E1D               	movlw	low STR_11
  2140  000F64  6E18               	movwf	write_LCD@c,c
  2141  000F66  0E08               	movlw	high STR_11
  2142  000F68  6E19               	movwf	write_LCD@c+1,c
  2143  000F6A  EC2F  F008         	call	_write_LCD	;wreg free
  2144                           
  2145                           ;TOCTOC.c: 136: set_line(1,5);
  2146  000F6E  0E00               	movlw	0
  2147  000F70  6E19               	movwf	set_line@line+1,c
  2148  000F72  0E01               	movlw	1
  2149  000F74  6E18               	movwf	set_line@line,c
  2150  000F76  0E00               	movlw	0
  2151  000F78  6E1B               	movwf	set_line@pos+1,c
  2152  000F7A  0E05               	movlw	5
  2153  000F7C  6E1A               	movwf	set_line@pos,c
  2154  000F7E  ECF7  F008         	call	_set_line	;wreg free
  2155                           
  2156                           ;TOCTOC.c: 137: write_LCD("senha");
  2157  000F82  0E69               	movlw	low STR_12
  2158  000F84  6E18               	movwf	write_LCD@c,c
  2159  000F86  0E08               	movlw	high STR_12
  2160  000F88  6E19               	movwf	write_LCD@c+1,c
  2161  000F8A  EC2F  F008         	call	_write_LCD	;wreg free
  2162  000F8E                     l1519:
  2163                           
  2164                           ;TOCTOC.c: 139: if(buttonCancel_Lock == 1){
  2165  000F8E  043D               	decf	_buttonCancel_Lock,w,c
  2166  000F90  103E               	iorwf	_buttonCancel_Lock+1,w,c
  2167  000F92  A4D8               	btfss	status,2,c
  2168  000F94  D009               	goto	l287
  2169                           
  2170                           ;TOCTOC.c: 140: buttonCancel_Lock = 0;
  2171  000F96  0E00               	movlw	0
  2172  000F98  6E3E               	movwf	_buttonCancel_Lock+1,c
  2173  000F9A  0E00               	movlw	0
  2174  000F9C  6E3D               	movwf	_buttonCancel_Lock,c
  2175                           
  2176                           ;TOCTOC.c: 141: return 0;
  2177  000F9E  0E00               	movlw	0
  2178  000FA0  6E1F               	movwf	?_confirmarSenha+1,c
  2179  000FA2  0E00               	movlw	0
  2180  000FA4  6E1E               	movwf	?_confirmarSenha,c
  2181  000FA6  0012               	return	
  2182  000FA8                     l287:
  2183                           
  2184                           ;TOCTOC.c: 143: else if(PORTBbits.RB4)
  2185  000FA8  A881               	btfss	3969,4,c	;volatile
  2186  000FAA  D7F1               	goto	l1519
  2187                           
  2188                           ;TOCTOC.c: 144: return 1;
  2189  000FAC  0E00               	movlw	0
  2190  000FAE  6E1F               	movwf	?_confirmarSenha+1,c
  2191  000FB0  0E01               	movlw	1
  2192  000FB2  D7F8               	goto	L1
  2193  000FB4                     __end_of_confirmarSenha:
  2194                           	opt stack 0
  2195                           tblptru	equ	0xFF8
  2196                           tblptrh	equ	0xFF7
  2197                           intcon	equ	0xFF2
  2198                           intcon2	equ	0xFF1
  2199                           intcon3	equ	0xFF0
  2200                           wreg	equ	0xFE8
  2201                           indf2	equ	0xFDF
  2202                           fsr2h	equ	0xFDA
  2203                           fsr2l	equ	0xFD9
  2204                           status	equ	0xFD8
  2205                           
  2206 ;; *************** function _cmpPass *****************
  2207 ;; Defined at:
  2208 ;;		line 108 in file "TOCTOC.c"
  2209 ;; Parameters:    Size  Location     Type
  2210 ;;  pass            2   29[COMRAM] PTR unsigned char 
  2211 ;;		 -> cadastrarSenha@temp1(2), main@pass(2), 
  2212 ;;  toque           2   31[COMRAM] PTR unsigned char 
  2213 ;;		 -> cadastrarSenha@temp2(2), main@toc(2), 
  2214 ;; Auto vars:     Size  Location     Type
  2215 ;;  i               2   33[COMRAM] int 
  2216 ;; Return value:  Size  Location     Type
  2217 ;;                  2   29[COMRAM] int 
  2218 ;; Registers used:
  2219 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2220 ;; Tracked objects:
  2221 ;;		On entry : 0/0
  2222 ;;		On exit  : 0/0
  2223 ;;		Unchanged: 0/0
  2224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2225 ;;      Params:         4       0       0       0       0       0       0       0       0
  2226 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2227 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2228 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2229 ;;Total ram usage:        6 bytes
  2230 ;; Hardware stack levels used:    1
  2231 ;; Hardware stack levels required when called:    5
  2232 ;; This function calls:
  2233 ;;		_clearLCD
  2234 ;;		_cmpSignal
  2235 ;;		_set_line
  2236 ;;		_write_LCD
  2237 ;; This function is called by:
  2238 ;;		_destravarPorta
  2239 ;;		_cadastrarSenha
  2240 ;; This function uses a non-reentrant model
  2241 ;;
  2242                           
  2243                           	psect	text12
  2244  000DF0                     __ptext12:
  2245                           	opt stack 0
  2246  000DF0                     _cmpPass:
  2247                           	opt stack 24
  2248                           
  2249                           ;TOCTOC.c: 110: int i = cmpSignal(pass, toque);
  2250                           
  2251                           ;incstack = 0
  2252  000DF0  C01E  F015         	movff	cmpPass@pass,cmpSignal@pass
  2253  000DF4  C01F  F016         	movff	cmpPass@pass+1,cmpSignal@pass+1
  2254  000DF8  C020  F017         	movff	cmpPass@toque,cmpSignal@toc
  2255  000DFC  C021  F018         	movff	cmpPass@toque+1,cmpSignal@toc+1
  2256  000E00  EC09  F008         	call	_cmpSignal	;wreg free
  2257  000E04  C015  F022         	movff	?_cmpSignal,cmpPass@i
  2258  000E08  C016  F023         	movff	?_cmpSignal+1,cmpPass@i+1
  2259                           
  2260                           ;TOCTOC.c: 112: if(i == 1){
  2261  000E0C  0422               	decf	cmpPass@i,w,c
  2262  000E0E  1023               	iorwf	cmpPass@i+1,w,c
  2263  000E10  A4D8               	btfss	status,2,c
  2264  000E12  D023               	goto	l1495
  2265                           
  2266                           ;TOCTOC.c: 113: clearLCD();
  2267  000E14  EC2B  F009         	call	_clearLCD	;wreg free
  2268                           
  2269                           ;TOCTOC.c: 114: set_line(0,3);
  2270  000E18  0E00               	movlw	0
  2271  000E1A  6E19               	movwf	set_line@line+1,c
  2272  000E1C  0E00               	movlw	0
  2273  000E1E  6E18               	movwf	set_line@line,c
  2274  000E20  0E00               	movlw	0
  2275  000E22  6E1B               	movwf	set_line@pos+1,c
  2276  000E24  0E03               	movlw	3
  2277  000E26  6E1A               	movwf	set_line@pos,c
  2278  000E28  ECF7  F008         	call	_set_line	;wreg free
  2279                           
  2280                           ;TOCTOC.c: 115: write_LCD("As senhas");
  2281  000E2C  0E59               	movlw	low STR_5
  2282  000E2E  6E18               	movwf	write_LCD@c,c
  2283  000E30  0E08               	movlw	high STR_5
  2284  000E32  6E19               	movwf	write_LCD@c+1,c
  2285  000E34  EC2F  F008         	call	_write_LCD	;wreg free
  2286                           
  2287                           ;TOCTOC.c: 116: set_line(1,3);
  2288  000E38  0E00               	movlw	0
  2289  000E3A  6E19               	movwf	set_line@line+1,c
  2290  000E3C  0E01               	movlw	1
  2291  000E3E  6E18               	movwf	set_line@line,c
  2292  000E40  0E00               	movlw	0
  2293  000E42  6E1B               	movwf	set_line@pos+1,c
  2294  000E44  0E03               	movlw	3
  2295  000E46  6E1A               	movwf	set_line@pos,c
  2296  000E48  ECF7  F008         	call	_set_line	;wreg free
  2297                           
  2298                           ;TOCTOC.c: 117: write_LCD("coincidem");
  2299  000E4C  0E13               	movlw	low (STR_6+4)
  2300  000E4E  6E18               	movwf	write_LCD@c,c
  2301  000E50  0E08               	movlw	high (STR_6+4)
  2302  000E52  6E19               	movwf	write_LCD@c+1,c
  2303  000E54  EC2F  F008         	call	_write_LCD	;wreg free
  2304                           
  2305                           ;TOCTOC.c: 119: }
  2306  000E58  D022               	goto	l1505
  2307  000E5A                     l1495:
  2308                           
  2309                           ;TOCTOC.c: 120: else{
  2310                           ;TOCTOC.c: 121: clearLCD();
  2311  000E5A  EC2B  F009         	call	_clearLCD	;wreg free
  2312                           
  2313                           ;TOCTOC.c: 122: set_line(0,3);
  2314  000E5E  0E00               	movlw	0
  2315  000E60  6E19               	movwf	set_line@line+1,c
  2316  000E62  0E00               	movlw	0
  2317  000E64  6E18               	movwf	set_line@line,c
  2318  000E66  0E00               	movlw	0
  2319  000E68  6E1B               	movwf	set_line@pos+1,c
  2320  000E6A  0E03               	movlw	3
  2321  000E6C  6E1A               	movwf	set_line@pos,c
  2322  000E6E  ECF7  F008         	call	_set_line	;wreg free
  2323                           
  2324                           ;TOCTOC.c: 123: write_LCD("As senhas");
  2325  000E72  0E59               	movlw	low STR_5
  2326  000E74  6E18               	movwf	write_LCD@c,c
  2327  000E76  0E08               	movlw	high STR_5
  2328  000E78  6E19               	movwf	write_LCD@c+1,c
  2329  000E7A  EC2F  F008         	call	_write_LCD	;wreg free
  2330                           
  2331                           ;TOCTOC.c: 124: set_line(1,1);
  2332  000E7E  0E00               	movlw	0
  2333  000E80  6E19               	movwf	set_line@line+1,c
  2334  000E82  0E01               	movlw	1
  2335  000E84  6E18               	movwf	set_line@line,c
  2336  000E86  0E00               	movlw	0
  2337  000E88  6E1B               	movwf	set_line@pos+1,c
  2338  000E8A  0E01               	movlw	1
  2339  000E8C  6E1A               	movwf	set_line@pos,c
  2340  000E8E  ECF7  F008         	call	_set_line	;wreg free
  2341                           
  2342                           ;TOCTOC.c: 125: write_LCD("nao coincidem");
  2343  000E92  0E0F               	movlw	low STR_6
  2344  000E94  6E18               	movwf	write_LCD@c,c
  2345  000E96  0E08               	movlw	high STR_6
  2346  000E98  6E19               	movwf	write_LCD@c+1,c
  2347  000E9A  EC2F  F008         	call	_write_LCD	;wreg free
  2348  000E9E                     l1505:
  2349                           
  2350                           ;TOCTOC.c: 127: }
  2351                           ;TOCTOC.c: 128: return i;
  2352  000E9E  C022  F01E         	movff	cmpPass@i,?_cmpPass
  2353  000EA2  C023  F01F         	movff	cmpPass@i+1,?_cmpPass+1
  2354  000EA6  0012               	return	
  2355  000EA8                     __end_of_cmpPass:
  2356                           	opt stack 0
  2357                           tblptru	equ	0xFF8
  2358                           tblptrh	equ	0xFF7
  2359                           intcon	equ	0xFF2
  2360                           intcon2	equ	0xFF1
  2361                           intcon3	equ	0xFF0
  2362                           wreg	equ	0xFE8
  2363                           indf2	equ	0xFDF
  2364                           fsr2h	equ	0xFDA
  2365                           fsr2l	equ	0xFD9
  2366                           status	equ	0xFD8
  2367                           
  2368 ;; *************** function _write_LCD *****************
  2369 ;; Defined at:
  2370 ;;		line 59 in file "LCD.c"
  2371 ;; Parameters:    Size  Location     Type
  2372 ;;  c               2   23[COMRAM] PTR unsigned char 
  2373 ;;		 -> STR_18(11), STR_17(6), STR_16(6), STR_15(11), 
  2374 ;;		 -> STR_14(6), STR_13(13), STR_12(6), STR_11(13), 
  2375 ;;		 -> STR_10(14), STR_9(10), STR_8(10), STR_7(10), 
  2376 ;;		 -> STR_6(14), STR_5(10), STR_4(12), STR_3(6), 
  2377 ;;		 -> STR_2(14), STR_1(14), 
  2378 ;; Auto vars:     Size  Location     Type
  2379 ;;  i               2   27[COMRAM] int 
  2380 ;; Return value:  Size  Location     Type
  2381 ;;                  1    wreg      void 
  2382 ;; Registers used:
  2383 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2384 ;; Tracked objects:
  2385 ;;		On entry : 0/0
  2386 ;;		On exit  : 0/0
  2387 ;;		Unchanged: 0/0
  2388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2389 ;;      Params:         2       0       0       0       0       0       0       0       0
  2390 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2391 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2392 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2393 ;;Total ram usage:        6 bytes
  2394 ;; Hardware stack levels used:    1
  2395 ;; Hardware stack levels required when called:    4
  2396 ;; This function calls:
  2397 ;;		_send_msg
  2398 ;; This function is called by:
  2399 ;;		_lerToque
  2400 ;;		_destravarPorta
  2401 ;;		_cmpPass
  2402 ;;		_confirmarSenha
  2403 ;;		_cadastrarSenha
  2404 ;; This function uses a non-reentrant model
  2405 ;;
  2406                           
  2407                           	psect	text13
  2408  00105E                     __ptext13:
  2409                           	opt stack 0
  2410  00105E                     _write_LCD:
  2411                           	opt stack 25
  2412                           
  2413                           ;LCD.c: 61: int i = 0;
  2414                           
  2415                           ;incstack = 0
  2416  00105E  0E00               	movlw	0
  2417  001060  6E1D               	movwf	write_LCD@i+1,c
  2418  001062  0E00               	movlw	0
  2419  001064  6E1C               	movwf	write_LCD@i,c
  2420                           
  2421                           ;LCD.c: 62: for(; c[i] != '\0'; i++)
  2422  001066  D010               	goto	l1399
  2423  001068                     l1395:
  2424                           
  2425                           ;LCD.c: 63: send_msg(c[i]);
  2426  001068  501C               	movf	write_LCD@i,w,c
  2427  00106A  2418               	addwf	write_LCD@c,w,c
  2428  00106C  6E1A               	movwf	??_write_LCD& (0+255),c
  2429  00106E  501D               	movf	write_LCD@i+1,w,c
  2430  001070  2019               	addwfc	write_LCD@c+1,w,c
  2431  001072  6E1B               	movwf	(??_write_LCD+1)& (0+255),c
  2432  001074  C01A  FFF6         	movff	??_write_LCD,tblptrl
  2433  001078  C01B  FFF7         	movff	??_write_LCD+1,tblptrh
  2434  00107C                     	if	0	;tblptru may be non-zero
  2435  00107C                     	endif
  2436  00107C                     	if	0	;tblptru may be non-zero
  2437  00107C                     	endif
  2438  00107C  0008               	tblrd		*
  2439  00107E  50F5               	movf	tablat,w,c
  2440  001080  ECAC  F008         	call	_send_msg
  2441  001084  4A1C               	infsnz	write_LCD@i,f,c
  2442  001086  2A1D               	incf	write_LCD@i+1,f,c
  2443  001088                     l1399:
  2444  001088  501C               	movf	write_LCD@i,w,c
  2445  00108A  2418               	addwf	write_LCD@c,w,c
  2446  00108C  6E1A               	movwf	??_write_LCD& (0+255),c
  2447  00108E  501D               	movf	write_LCD@i+1,w,c
  2448  001090  2019               	addwfc	write_LCD@c+1,w,c
  2449  001092  6E1B               	movwf	(??_write_LCD+1)& (0+255),c
  2450  001094  C01A  FFF6         	movff	??_write_LCD,tblptrl
  2451  001098  C01B  FFF7         	movff	??_write_LCD+1,tblptrh
  2452  00109C                     	if	0	;tblptru may be non-zero
  2453  00109C                     	endif
  2454  00109C                     	if	0	;tblptru may be non-zero
  2455  00109C                     	endif
  2456  00109C  0008               	tblrd		*
  2457  00109E  50F5               	movf	tablat,w,c
  2458  0010A0  0900               	iorlw	0
  2459  0010A2  B4D8               	btfsc	status,2,c
  2460  0010A4  0012               	return	
  2461  0010A6  D7E0               	goto	l1395
  2462  0010A8                     __end_of_write_LCD:
  2463                           	opt stack 0
  2464                           tblptru	equ	0xFF8
  2465                           tblptrh	equ	0xFF7
  2466                           tblptrl	equ	0xFF6
  2467                           tablat	equ	0xFF5
  2468                           intcon	equ	0xFF2
  2469                           intcon2	equ	0xFF1
  2470                           intcon3	equ	0xFF0
  2471                           wreg	equ	0xFE8
  2472                           indf2	equ	0xFDF
  2473                           fsr2h	equ	0xFDA
  2474                           fsr2l	equ	0xFD9
  2475                           status	equ	0xFD8
  2476                           
  2477 ;; *************** function _send_msg *****************
  2478 ;; Defined at:
  2479 ;;		line 35 in file "LCD.c"
  2480 ;; Parameters:    Size  Location     Type
  2481 ;;  msg             1    wreg     unsigned char 
  2482 ;; Auto vars:     Size  Location     Type
  2483 ;;  msg             1   22[COMRAM] unsigned char 
  2484 ;; Return value:  Size  Location     Type
  2485 ;;                  1    wreg      void 
  2486 ;; Registers used:
  2487 ;;		wreg, status,2, cstack
  2488 ;; Tracked objects:
  2489 ;;		On entry : 0/0
  2490 ;;		On exit  : 0/0
  2491 ;;		Unchanged: 0/0
  2492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2493 ;;      Params:         0       0       0       0       0       0       0       0       0
  2494 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2495 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2496 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2497 ;;Total ram usage:        2 bytes
  2498 ;; Hardware stack levels used:    1
  2499 ;; Hardware stack levels required when called:    3
  2500 ;; This function calls:
  2501 ;;		_ena_pulse
  2502 ;; This function is called by:
  2503 ;;		_write_LCD
  2504 ;;		_lerToque
  2505 ;;		_destravarPorta
  2506 ;; This function uses a non-reentrant model
  2507 ;;
  2508                           
  2509                           	psect	text14
  2510  001158                     __ptext14:
  2511                           	opt stack 0
  2512  001158                     _send_msg:
  2513                           	opt stack 25
  2514                           
  2515                           ;incstack = 0
  2516                           ;send_msg@msg stored from wreg
  2517  001158  6E17               	movwf	send_msg@msg,c
  2518                           
  2519                           ;LCD.c: 37: PORTD = msg;
  2520  00115A  C017  FF83         	movff	send_msg@msg,3971	;volatile
  2521                           
  2522                           ;LCD.c: 38: PORTBbits.RB3 = 1;
  2523  00115E  8681               	bsf	3969,3,c	;volatile
  2524                           
  2525                           ;LCD.c: 39: _delay((unsigned long)((1)*(16000000/4000.0)));
  2526  001160  0E06               	movlw	6
  2527  001162  6E16               	movwf	??_send_msg& (0+255),c
  2528  001164  0E30               	movlw	48
  2529  001166                     u827:
  2530  001166  2EE8               	decfsz	wreg,f,c
  2531  001168  D7FE               	bra	u827
  2532  00116A  2E16               	decfsz	??_send_msg& (0+255),f,c
  2533  00116C  D7FC               	bra	u827
  2534  00116E  D000               	nop2	
  2535                           
  2536                           ;LCD.c: 40: ena_pulse();
  2537  001170  EC90  F008         	call	_ena_pulse	;wreg free
  2538                           
  2539                           ;LCD.c: 41: _delay((unsigned long)((1)*(16000000/4000.0)));
  2540  001174  0E06               	movlw	6
  2541  001176  6E16               	movwf	??_send_msg& (0+255),c
  2542  001178  0E30               	movlw	48
  2543  00117A                     u837:
  2544  00117A  2EE8               	decfsz	wreg,f,c
  2545  00117C  D7FE               	bra	u837
  2546  00117E  2E16               	decfsz	??_send_msg& (0+255),f,c
  2547  001180  D7FC               	bra	u837
  2548  001182  D000               	nop2	
  2549                           
  2550                           ;LCD.c: 42: PORTBbits.RB3 = 0;
  2551  001184  9681               	bcf	3969,3,c	;volatile
  2552  001186  0012               	return		;funcret
  2553  001188                     __end_of_send_msg:
  2554                           	opt stack 0
  2555                           tblptru	equ	0xFF8
  2556                           tblptrh	equ	0xFF7
  2557                           tblptrl	equ	0xFF6
  2558                           tablat	equ	0xFF5
  2559                           intcon	equ	0xFF2
  2560                           intcon2	equ	0xFF1
  2561                           intcon3	equ	0xFF0
  2562                           wreg	equ	0xFE8
  2563                           indf2	equ	0xFDF
  2564                           fsr2h	equ	0xFDA
  2565                           fsr2l	equ	0xFD9
  2566                           status	equ	0xFD8
  2567                           
  2568 ;; *************** function _set_line *****************
  2569 ;; Defined at:
  2570 ;;		line 66 in file "LCD.c"
  2571 ;; Parameters:    Size  Location     Type
  2572 ;;  line            2   23[COMRAM] int 
  2573 ;;  pos             2   25[COMRAM] int 
  2574 ;; Auto vars:     Size  Location     Type
  2575 ;;  cursor          1   27[COMRAM] unsigned char 
  2576 ;; Return value:  Size  Location     Type
  2577 ;;                  1    wreg      void 
  2578 ;; Registers used:
  2579 ;;		wreg, status,2, status,0, cstack
  2580 ;; Tracked objects:
  2581 ;;		On entry : 0/0
  2582 ;;		On exit  : 0/0
  2583 ;;		Unchanged: 0/0
  2584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2585 ;;      Params:         4       0       0       0       0       0       0       0       0
  2586 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2587 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2588 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2589 ;;Total ram usage:        5 bytes
  2590 ;; Hardware stack levels used:    1
  2591 ;; Hardware stack levels required when called:    4
  2592 ;; This function calls:
  2593 ;;		_send_cfg
  2594 ;; This function is called by:
  2595 ;;		_lerToque
  2596 ;;		_destravarPorta
  2597 ;;		_cmpPass
  2598 ;;		_confirmarSenha
  2599 ;;		_cadastrarSenha
  2600 ;; This function uses a non-reentrant model
  2601 ;;
  2602                           
  2603                           	psect	text15
  2604  0011EE                     __ptext15:
  2605                           	opt stack 0
  2606  0011EE                     _set_line:
  2607                           	opt stack 25
  2608                           
  2609                           ;LCD.c: 68: char cursor;
  2610                           ;LCD.c: 69: if(line == 0)
  2611                           
  2612                           ;incstack = 0
  2613  0011EE  5018               	movf	set_line@line,w,c
  2614  0011F0  1019               	iorwf	set_line@line+1,w,c
  2615  0011F2  A4D8               	btfss	status,2,c
  2616  0011F4  D003               	goto	l1405
  2617                           
  2618                           ;LCD.c: 70: cursor = 0x80 + pos;
  2619  0011F6  501A               	movf	set_line@pos,w,c
  2620  0011F8  0F80               	addlw	128
  2621  0011FA  D002               	goto	L2
  2622  0011FC                     l1405:
  2623                           
  2624                           ;LCD.c: 71: else
  2625                           ;LCD.c: 72: cursor = 0xC0 + pos;
  2626  0011FC  501A               	movf	set_line@pos,w,c
  2627  0011FE  0FC0               	addlw	192
  2628  001200                     L2:
  2629  001200  6E1C               	movwf	set_line@cursor,c
  2630                           
  2631                           ;LCD.c: 73: send_cfg(cursor);
  2632  001202  501C               	movf	set_line@cursor,w,c
  2633  001204  ECE8  F008         	call	_send_cfg
  2634  001208  0012               	return		;funcret
  2635  00120A                     __end_of_set_line:
  2636                           	opt stack 0
  2637                           tblptru	equ	0xFF8
  2638                           tblptrh	equ	0xFF7
  2639                           tblptrl	equ	0xFF6
  2640                           tablat	equ	0xFF5
  2641                           intcon	equ	0xFF2
  2642                           intcon2	equ	0xFF1
  2643                           intcon3	equ	0xFF0
  2644                           wreg	equ	0xFE8
  2645                           indf2	equ	0xFDF
  2646                           fsr2h	equ	0xFDA
  2647                           fsr2l	equ	0xFD9
  2648                           status	equ	0xFD8
  2649                           
  2650 ;; *************** function _cmpSignal *****************
  2651 ;; Defined at:
  2652 ;;		line 36 in file "ReadSignal.c"
  2653 ;; Parameters:    Size  Location     Type
  2654 ;;  pass            2   20[COMRAM] PTR unsigned char 
  2655 ;;		 -> cadastrarSenha@temp1(2), main@pass(2), 
  2656 ;;  toc             2   22[COMRAM] PTR unsigned char 
  2657 ;;		 -> cadastrarSenha@temp2(2), main@toc(2), 
  2658 ;; Auto vars:     Size  Location     Type
  2659 ;;		None
  2660 ;; Return value:  Size  Location     Type
  2661 ;;                  2   20[COMRAM] int 
  2662 ;; Registers used:
  2663 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  2664 ;; Tracked objects:
  2665 ;;		On entry : 0/0
  2666 ;;		On exit  : 0/0
  2667 ;;		Unchanged: 0/0
  2668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2669 ;;      Params:         4       0       0       0       0       0       0       0       0
  2670 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2671 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2672 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2673 ;;Total ram usage:        6 bytes
  2674 ;; Hardware stack levels used:    1
  2675 ;; Hardware stack levels required when called:    2
  2676 ;; This function calls:
  2677 ;;		Nothing
  2678 ;; This function is called by:
  2679 ;;		_cmpPass
  2680 ;; This function uses a non-reentrant model
  2681 ;;
  2682                           
  2683                           	psect	text16
  2684  001012                     __ptext16:
  2685                           	opt stack 0
  2686  001012                     _cmpSignal:
  2687                           	opt stack 26
  2688                           
  2689                           ;ReadSignal.c: 38: if(pass[0] == toc[0] && pass[1] == toc[1])
  2690                           
  2691                           ;incstack = 0
  2692  001012  C017  FFD9         	movff	cmpSignal@toc,fsr2l
  2693  001016  C018  FFDA         	movff	cmpSignal@toc+1,fsr2h
  2694  00101A  C015  FFE1         	movff	cmpSignal@pass,fsr1l
  2695  00101E  C016  FFE2         	movff	cmpSignal@pass+1,fsr1h
  2696  001022  50DE               	movf	postinc2,w,c
  2697  001024  18E6               	xorwf	postinc1,w,c
  2698  001026  A4D8               	btfss	status,2,c
  2699  001028  D015               	goto	l1439
  2700  00102A  EE20 F001          	lfsr	2,1
  2701  00102E  5017               	movf	cmpSignal@toc,w,c
  2702  001030  26D9               	addwf	fsr2l,f,c
  2703  001032  5018               	movf	cmpSignal@toc+1,w,c
  2704  001034  22DA               	addwfc	fsr2h,f,c
  2705  001036  EE10 F001          	lfsr	1,1
  2706  00103A  5015               	movf	cmpSignal@pass,w,c
  2707  00103C  26E1               	addwf	fsr1l,f,c
  2708  00103E  5016               	movf	cmpSignal@pass+1,w,c
  2709  001040  22E2               	addwfc	fsr1h,f,c
  2710  001042  50DE               	movf	postinc2,w,c
  2711  001044  18E6               	xorwf	postinc1,w,c
  2712  001046  A4D8               	btfss	status,2,c
  2713  001048  D005               	goto	l1439
  2714                           
  2715                           ;ReadSignal.c: 39: return 1;
  2716  00104A  0E00               	movlw	0
  2717  00104C  6E16               	movwf	?_cmpSignal+1,c
  2718  00104E  0E01               	movlw	1
  2719  001050  6E15               	movwf	?_cmpSignal,c
  2720  001052  0012               	return	
  2721  001054                     l1439:
  2722                           
  2723                           ;ReadSignal.c: 40: return 0;
  2724  001054  0E00               	movlw	0
  2725  001056  6E16               	movwf	?_cmpSignal+1,c
  2726  001058  0E00               	movlw	0
  2727  00105A  6E15               	movwf	?_cmpSignal,c
  2728  00105C  0012               	return	
  2729  00105E                     __end_of_cmpSignal:
  2730                           	opt stack 0
  2731                           tblptru	equ	0xFF8
  2732                           tblptrh	equ	0xFF7
  2733                           tblptrl	equ	0xFF6
  2734                           tablat	equ	0xFF5
  2735                           intcon	equ	0xFF2
  2736                           intcon2	equ	0xFF1
  2737                           intcon3	equ	0xFF0
  2738                           wreg	equ	0xFE8
  2739                           postinc1	equ	0xFE6
  2740                           fsr1h	equ	0xFE2
  2741                           fsr1l	equ	0xFE1
  2742                           indf2	equ	0xFDF
  2743                           postinc2	equ	0xFDE
  2744                           fsr2h	equ	0xFDA
  2745                           fsr2l	equ	0xFD9
  2746                           status	equ	0xFD8
  2747                           
  2748 ;; *************** function _clearLCD *****************
  2749 ;; Defined at:
  2750 ;;		line 31 in file "LCD.c"
  2751 ;; Parameters:    Size  Location     Type
  2752 ;;		None
  2753 ;; Auto vars:     Size  Location     Type
  2754 ;;		None
  2755 ;; Return value:  Size  Location     Type
  2756 ;;                  1    wreg      void 
  2757 ;; Registers used:
  2758 ;;		wreg, cstack
  2759 ;; Tracked objects:
  2760 ;;		On entry : 0/0
  2761 ;;		On exit  : 0/0
  2762 ;;		Unchanged: 0/0
  2763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2764 ;;      Params:         0       0       0       0       0       0       0       0       0
  2765 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2766 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2767 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2768 ;;Total ram usage:        0 bytes
  2769 ;; Hardware stack levels used:    1
  2770 ;; Hardware stack levels required when called:    4
  2771 ;; This function calls:
  2772 ;;		_send_cfg
  2773 ;; This function is called by:
  2774 ;;		_lerToque
  2775 ;;		_destravarPorta
  2776 ;;		_cmpPass
  2777 ;;		_confirmarSenha
  2778 ;;		_cadastrarSenha
  2779 ;; This function uses a non-reentrant model
  2780 ;;
  2781                           
  2782                           	psect	text17
  2783  001256                     __ptext17:
  2784                           	opt stack 0
  2785  001256                     _clearLCD:
  2786                           	opt stack 24
  2787                           
  2788                           ;LCD.c: 32: send_cfg(0x01);
  2789                           
  2790                           ;incstack = 0
  2791  001256  0E01               	movlw	1
  2792  001258  ECE8  F008         	call	_send_cfg
  2793  00125C  0012               	return		;funcret
  2794  00125E                     __end_of_clearLCD:
  2795                           	opt stack 0
  2796                           tblptru	equ	0xFF8
  2797                           tblptrh	equ	0xFF7
  2798                           tblptrl	equ	0xFF6
  2799                           tablat	equ	0xFF5
  2800                           intcon	equ	0xFF2
  2801                           intcon2	equ	0xFF1
  2802                           intcon3	equ	0xFF0
  2803                           wreg	equ	0xFE8
  2804                           postinc1	equ	0xFE6
  2805                           fsr1h	equ	0xFE2
  2806                           fsr1l	equ	0xFE1
  2807                           indf2	equ	0xFDF
  2808                           postinc2	equ	0xFDE
  2809                           fsr2h	equ	0xFDA
  2810                           fsr2l	equ	0xFD9
  2811                           status	equ	0xFD8
  2812                           
  2813 ;; *************** function _send_cfg *****************
  2814 ;; Defined at:
  2815 ;;		line 22 in file "LCD.c"
  2816 ;; Parameters:    Size  Location     Type
  2817 ;;  cmd             1    wreg     unsigned char 
  2818 ;; Auto vars:     Size  Location     Type
  2819 ;;  cmd             1   22[COMRAM] unsigned char 
  2820 ;; Return value:  Size  Location     Type
  2821 ;;                  1    wreg      void 
  2822 ;; Registers used:
  2823 ;;		wreg, cstack
  2824 ;; Tracked objects:
  2825 ;;		On entry : 0/0
  2826 ;;		On exit  : 0/0
  2827 ;;		Unchanged: 0/0
  2828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2829 ;;      Params:         0       0       0       0       0       0       0       0       0
  2830 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2831 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2832 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2833 ;;Total ram usage:        2 bytes
  2834 ;; Hardware stack levels used:    1
  2835 ;; Hardware stack levels required when called:    3
  2836 ;; This function calls:
  2837 ;;		_ena_pulse
  2838 ;; This function is called by:
  2839 ;;		_clearLCD
  2840 ;;		_init_LCD
  2841 ;;		_set_line
  2842 ;; This function uses a non-reentrant model
  2843 ;;
  2844                           
  2845                           	psect	text18
  2846  0011D0                     __ptext18:
  2847                           	opt stack 0
  2848  0011D0                     _send_cfg:
  2849                           	opt stack 26
  2850                           
  2851                           ;incstack = 0
  2852                           ;send_cfg@cmd stored from wreg
  2853  0011D0  6E17               	movwf	send_cfg@cmd,c
  2854                           
  2855                           ;LCD.c: 24: PORTD = cmd;
  2856  0011D2  C017  FF83         	movff	send_cfg@cmd,3971	;volatile
  2857                           
  2858                           ;LCD.c: 25: PORTBbits.RB3 = 0;
  2859  0011D6  9681               	bcf	3969,3,c	;volatile
  2860                           
  2861                           ;LCD.c: 26: ena_pulse();
  2862  0011D8  EC90  F008         	call	_ena_pulse	;wreg free
  2863                           
  2864                           ;LCD.c: 27: _delay((unsigned long)((1)*(16000000/4000.0)));
  2865  0011DC  0E06               	movlw	6
  2866  0011DE  6E16               	movwf	??_send_cfg& (0+255),c
  2867  0011E0  0E30               	movlw	48
  2868  0011E2                     u847:
  2869  0011E2  2EE8               	decfsz	wreg,f,c
  2870  0011E4  D7FE               	bra	u847
  2871  0011E6  2E16               	decfsz	??_send_cfg& (0+255),f,c
  2872  0011E8  D7FC               	bra	u847
  2873  0011EA  D000               	nop2	
  2874  0011EC  0012               	return		;funcret
  2875  0011EE                     __end_of_send_cfg:
  2876                           	opt stack 0
  2877                           tblptru	equ	0xFF8
  2878                           tblptrh	equ	0xFF7
  2879                           tblptrl	equ	0xFF6
  2880                           tablat	equ	0xFF5
  2881                           intcon	equ	0xFF2
  2882                           intcon2	equ	0xFF1
  2883                           intcon3	equ	0xFF0
  2884                           wreg	equ	0xFE8
  2885                           postinc1	equ	0xFE6
  2886                           fsr1h	equ	0xFE2
  2887                           fsr1l	equ	0xFE1
  2888                           indf2	equ	0xFDF
  2889                           postinc2	equ	0xFDE
  2890                           fsr2h	equ	0xFDA
  2891                           fsr2l	equ	0xFD9
  2892                           status	equ	0xFD8
  2893                           
  2894 ;; *************** function _ena_pulse *****************
  2895 ;; Defined at:
  2896 ;;		line 11 in file "LCD.c"
  2897 ;; Parameters:    Size  Location     Type
  2898 ;;		None
  2899 ;; Auto vars:     Size  Location     Type
  2900 ;;		None
  2901 ;; Return value:  Size  Location     Type
  2902 ;;                  1    wreg      void 
  2903 ;; Registers used:
  2904 ;;		wreg
  2905 ;; Tracked objects:
  2906 ;;		On entry : 0/0
  2907 ;;		On exit  : 0/0
  2908 ;;		Unchanged: 0/0
  2909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2910 ;;      Params:         0       0       0       0       0       0       0       0       0
  2911 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2912 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2913 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2914 ;;Total ram usage:        1 bytes
  2915 ;; Hardware stack levels used:    1
  2916 ;; Hardware stack levels required when called:    2
  2917 ;; This function calls:
  2918 ;;		Nothing
  2919 ;; This function is called by:
  2920 ;;		_send_cfg
  2921 ;;		_send_msg
  2922 ;; This function uses a non-reentrant model
  2923 ;;
  2924                           
  2925                           	psect	text19
  2926  001120                     __ptext19:
  2927                           	opt stack 0
  2928  001120                     _ena_pulse:
  2929                           	opt stack 26
  2930                           
  2931                           ;LCD.c: 13: PORTEbits.RE1 = 0;
  2932                           
  2933                           ;incstack = 0
  2934  001120  9284               	bcf	3972,1,c	;volatile
  2935                           
  2936                           ;LCD.c: 14: _delay((unsigned long)((1)*(16000000/4000.0)));
  2937  001122  0E06               	movlw	6
  2938  001124  6E15               	movwf	??_ena_pulse& (0+255),c
  2939  001126  0E30               	movlw	48
  2940  001128                     u857:
  2941  001128  2EE8               	decfsz	wreg,f,c
  2942  00112A  D7FE               	bra	u857
  2943  00112C  2E15               	decfsz	??_ena_pulse& (0+255),f,c
  2944  00112E  D7FC               	bra	u857
  2945  001130  D000               	nop2	
  2946                           
  2947                           ;LCD.c: 15: PORTEbits.RE1 = 1;
  2948  001132  8284               	bsf	3972,1,c	;volatile
  2949                           
  2950                           ;LCD.c: 16: _delay((unsigned long)((1)*(16000000/4000.0)));
  2951  001134  0E06               	movlw	6
  2952  001136  6E15               	movwf	??_ena_pulse& (0+255),c
  2953  001138  0E30               	movlw	48
  2954  00113A                     u867:
  2955  00113A  2EE8               	decfsz	wreg,f,c
  2956  00113C  D7FE               	bra	u867
  2957  00113E  2E15               	decfsz	??_ena_pulse& (0+255),f,c
  2958  001140  D7FC               	bra	u867
  2959  001142  D000               	nop2	
  2960                           
  2961                           ;LCD.c: 17: PORTEbits.RE1 = 0;
  2962  001144  9284               	bcf	3972,1,c	;volatile
  2963                           
  2964                           ;LCD.c: 18: _delay((unsigned long)((1)*(16000000/4000.0)));
  2965  001146  0E06               	movlw	6
  2966  001148  6E15               	movwf	??_ena_pulse& (0+255),c
  2967  00114A  0E30               	movlw	48
  2968  00114C                     u877:
  2969  00114C  2EE8               	decfsz	wreg,f,c
  2970  00114E  D7FE               	bra	u877
  2971  001150  2E15               	decfsz	??_ena_pulse& (0+255),f,c
  2972  001152  D7FC               	bra	u877
  2973  001154  D000               	nop2	
  2974  001156  0012               	return		;funcret
  2975  001158                     __end_of_ena_pulse:
  2976                           	opt stack 0
  2977                           tblptru	equ	0xFF8
  2978                           tblptrh	equ	0xFF7
  2979                           tblptrl	equ	0xFF6
  2980                           tablat	equ	0xFF5
  2981                           intcon	equ	0xFF2
  2982                           intcon2	equ	0xFF1
  2983                           intcon3	equ	0xFF0
  2984                           wreg	equ	0xFE8
  2985                           postinc1	equ	0xFE6
  2986                           fsr1h	equ	0xFE2
  2987                           fsr1l	equ	0xFE1
  2988                           indf2	equ	0xFDF
  2989                           postinc2	equ	0xFDE
  2990                           fsr2h	equ	0xFDA
  2991                           fsr2l	equ	0xFD9
  2992                           status	equ	0xFD8
  2993                           
  2994 ;; *************** function _ISR *****************
  2995 ;; Defined at:
  2996 ;;		line 37 in file "Interrupt.c"
  2997 ;; Parameters:    Size  Location     Type
  2998 ;;		None
  2999 ;; Auto vars:     Size  Location     Type
  3000 ;;		None
  3001 ;; Return value:  Size  Location     Type
  3002 ;;                  1    wreg      void 
  3003 ;; Registers used:
  3004 ;;		wreg, status,2, status,0, cstack
  3005 ;; Tracked objects:
  3006 ;;		On entry : 0/0
  3007 ;;		On exit  : 0/0
  3008 ;;		Unchanged: 0/0
  3009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3010 ;;      Params:         0       0       0       0       0       0       0       0       0
  3011 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3012 ;;      Temps:         16       0       0       0       0       0       0       0       0
  3013 ;;      Totals:        16       0       0       0       0       0       0       0       0
  3014 ;;Total ram usage:       16 bytes
  3015 ;; Hardware stack levels used:    1
  3016 ;; Hardware stack levels required when called:    1
  3017 ;; This function calls:
  3018 ;;		i2_DutyCycle_PWM
  3019 ;; This function is called by:
  3020 ;;		Interrupt level 2
  3021 ;; This function uses a non-reentrant model
  3022 ;;
  3023                           
  3024                           	psect	intcode
  3025  000008                     __pintcode:
  3026                           	opt stack 0
  3027  000008                     _ISR:
  3028                           	opt stack 24
  3029                           
  3030                           ;incstack = 0
  3031  000008  823F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3032  00000A  ED96  F006         	call	int_func,f	;refresh shadow registers
  3033                           tblptru	equ	0xFF8
  3034                           tblptrh	equ	0xFF7
  3035                           tblptrl	equ	0xFF6
  3036                           tablat	equ	0xFF5
  3037                           intcon	equ	0xFF2
  3038                           intcon2	equ	0xFF1
  3039                           intcon3	equ	0xFF0
  3040                           wreg	equ	0xFE8
  3041                           postinc1	equ	0xFE6
  3042                           fsr1h	equ	0xFE2
  3043                           fsr1l	equ	0xFE1
  3044                           indf2	equ	0xFDF
  3045                           postinc2	equ	0xFDE
  3046                           fsr2h	equ	0xFDA
  3047                           fsr2l	equ	0xFD9
  3048                           status	equ	0xFD8
  3049                           
  3050                           	psect	intcode_body
  3051  000D2C                     __pintcode_body:
  3052                           	opt stack 24
  3053  000D2C                     int_func:
  3054                           	opt stack 24
  3055  000D2C  0006               	pop		; remove dummy address from shadow register refresh
  3056  000D2E  CFFA F007          	movff	pclath,??_ISR+2
  3057  000D32  CFFB F008          	movff	pclatu,??_ISR+3
  3058  000D36  CFE9 F009          	movff	fsr0l,??_ISR+4
  3059  000D3A  CFEA F00A          	movff	fsr0h,??_ISR+5
  3060  000D3E  CFE1 F00B          	movff	fsr1l,??_ISR+6
  3061  000D42  CFE2 F00C          	movff	fsr1h,??_ISR+7
  3062  000D46  CFD9 F00D          	movff	fsr2l,??_ISR+8
  3063  000D4A  CFDA F00E          	movff	fsr2h,??_ISR+9
  3064  000D4E  CFF3 F00F          	movff	prodl,??_ISR+10
  3065  000D52  CFF4 F010          	movff	prodh,??_ISR+11
  3066  000D56  CFF6 F011          	movff	tblptrl,??_ISR+12
  3067  000D5A  CFF7 F012          	movff	tblptrh,??_ISR+13
  3068  000D5E  CFF8 F013          	movff	tblptru,??_ISR+14
  3069  000D62  CFF5 F014          	movff	tablat,??_ISR+15
  3070                           
  3071                           ;Interrupt.c: 39: if(INTCON3bits.INT2IF){
  3072  000D66  A2F0               	btfss	intcon3,1,c	;volatile
  3073  000D68  D025               	goto	i2l29
  3074                           
  3075                           ;Interrupt.c: 40: INTCON3bits.INT2IF = 0;
  3076  000D6A  92F0               	bcf	intcon3,1,c	;volatile
  3077                           
  3078                           ;Interrupt.c: 41: buttonCancel_Lock = 1;
  3079  000D6C  0E00               	movlw	0
  3080  000D6E  6E3E               	movwf	_buttonCancel_Lock+1,c
  3081  000D70  0E01               	movlw	1
  3082  000D72  6E3D               	movwf	_buttonCancel_Lock,c
  3083                           
  3084                           ;Interrupt.c: 42: if(doorState = 1){
  3085  000D74  0E00               	movlw	0
  3086  000D76  6E3C               	movwf	_doorState+1,c
  3087  000D78  0E01               	movlw	1
  3088  000D7A  6E3B               	movwf	_doorState,c
  3089                           
  3090                           ;Interrupt.c: 43: doorState = 0;
  3091  000D7C  0E00               	movlw	0
  3092  000D7E  6E3C               	movwf	_doorState+1,c
  3093  000D80  0E00               	movlw	0
  3094  000D82  6E3B               	movwf	_doorState,c
  3095                           
  3096                           ;Interrupt.c: 44: DutyCycle_PWM(600);
  3097  000D84  0E02               	movlw	2
  3098  000D86  6E02               	movwf	i2DutyCycle_PWM@Valor+1,c
  3099  000D88  0E58               	movlw	88
  3100  000D8A  6E01               	movwf	i2DutyCycle_PWM@Valor,c
  3101  000D8C  EC72  F008         	call	i2_DutyCycle_PWM	;wreg free
  3102                           
  3103                           ;Interrupt.c: 45: _delay((unsigned long)((400)*(16000000/4000.0)));
  3104  000D90  0E09               	movlw	9
  3105  000D92  6E06               	movwf	(??_ISR+1)& (0+255),c
  3106  000D94  0E1E               	movlw	30
  3107  000D96  6E05               	movwf	??_ISR& (0+255),c
  3108  000D98  0EE4               	movlw	228
  3109  000D9A                     i2u88_47:
  3110  000D9A  2EE8               	decfsz	wreg,f,c
  3111  000D9C  D7FE               	bra	i2u88_47
  3112  000D9E  2E05               	decfsz	??_ISR& (0+255),f,c
  3113  000DA0  D7FC               	bra	i2u88_47
  3114  000DA2  2E06               	decfsz	(??_ISR+1)& (0+255),f,c
  3115  000DA4  D7FA               	bra	i2u88_47
  3116  000DA6  D000               	nop2	
  3117                           
  3118                           ;Interrupt.c: 46: DutyCycle_PWM(0);
  3119  000DA8  0E00               	movlw	0
  3120  000DAA  6E02               	movwf	i2DutyCycle_PWM@Valor+1,c
  3121  000DAC  0E00               	movlw	0
  3122  000DAE  6E01               	movwf	i2DutyCycle_PWM@Valor,c
  3123  000DB0  EC72  F008         	call	i2_DutyCycle_PWM	;wreg free
  3124  000DB4                     i2l29:
  3125  000DB4  C014  FFF5         	movff	??_ISR+15,tablat
  3126  000DB8  C013  FFF8         	movff	??_ISR+14,tblptru
  3127  000DBC  C012  FFF7         	movff	??_ISR+13,tblptrh
  3128  000DC0  C011  FFF6         	movff	??_ISR+12,tblptrl
  3129  000DC4  C010  FFF4         	movff	??_ISR+11,prodh
  3130  000DC8  C00F  FFF3         	movff	??_ISR+10,prodl
  3131  000DCC  C00E  FFDA         	movff	??_ISR+9,fsr2h
  3132  000DD0  C00D  FFD9         	movff	??_ISR+8,fsr2l
  3133  000DD4  C00C  FFE2         	movff	??_ISR+7,fsr1h
  3134  000DD8  C00B  FFE1         	movff	??_ISR+6,fsr1l
  3135  000DDC  C00A  FFEA         	movff	??_ISR+5,fsr0h
  3136  000DE0  C009  FFE9         	movff	??_ISR+4,fsr0l
  3137  000DE4  C008  FFFB         	movff	??_ISR+3,pclatu
  3138  000DE8  C007  FFFA         	movff	??_ISR+2,pclath
  3139  000DEC  923F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3140  000DEE  0011               	retfie		f
  3141  000DF0                     __end_of_ISR:
  3142                           	opt stack 0
  3143                           pclatu	equ	0xFFB
  3144                           pclath	equ	0xFFA
  3145                           tblptru	equ	0xFF8
  3146                           tblptrh	equ	0xFF7
  3147                           tblptrl	equ	0xFF6
  3148                           tablat	equ	0xFF5
  3149                           prodh	equ	0xFF4
  3150                           prodl	equ	0xFF3
  3151                           intcon	equ	0xFF2
  3152                           intcon2	equ	0xFF1
  3153                           intcon3	equ	0xFF0
  3154                           fsr0h	equ	0xFEA
  3155                           fsr0l	equ	0xFE9
  3156                           wreg	equ	0xFE8
  3157                           postinc1	equ	0xFE6
  3158                           fsr1h	equ	0xFE2
  3159                           fsr1l	equ	0xFE1
  3160                           indf2	equ	0xFDF
  3161                           postinc2	equ	0xFDE
  3162                           fsr2h	equ	0xFDA
  3163                           fsr2l	equ	0xFD9
  3164                           status	equ	0xFD8
  3165                           
  3166 ;; *************** function i2_DutyCycle_PWM *****************
  3167 ;; Defined at:
  3168 ;;		line 43 in file "PWM.c"
  3169 ;; Parameters:    Size  Location     Type
  3170 ;;  Valor           2    0[COMRAM] unsigned int 
  3171 ;; Auto vars:     Size  Location     Type
  3172 ;;		None
  3173 ;; Return value:  Size  Location     Type
  3174 ;;                  1    wreg      void 
  3175 ;; Registers used:
  3176 ;;		wreg, status,2, status,0
  3177 ;; Tracked objects:
  3178 ;;		On entry : 0/0
  3179 ;;		On exit  : 0/0
  3180 ;;		Unchanged: 0/0
  3181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3182 ;;      Params:         2       0       0       0       0       0       0       0       0
  3183 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3184 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3185 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3186 ;;Total ram usage:        4 bytes
  3187 ;; Hardware stack levels used:    1
  3188 ;; This function calls:
  3189 ;;		Nothing
  3190 ;; This function is called by:
  3191 ;;		_ISR
  3192 ;; This function uses a non-reentrant model
  3193 ;;
  3194                           
  3195                           	psect	text21
  3196  0010E4                     __ptext21:
  3197                           	opt stack 0
  3198  0010E4                     i2_DutyCycle_PWM:
  3199                           	opt stack 24
  3200                           
  3201                           ;PWM.c: 44: CCP1CONbits.DC1B0 = Valor;
  3202                           
  3203                           ;incstack = 0
  3204  0010E4  B001               	btfsc	i2DutyCycle_PWM@Valor,0,c
  3205  0010E6  D002               	bra	i2u74_45
  3206  0010E8  98BD               	bcf	4029,4,c	;volatile
  3207  0010EA  D001               	bra	i2u74_46
  3208  0010EC                     i2u74_45:
  3209  0010EC  88BD               	bsf	4029,4,c	;volatile
  3210  0010EE                     i2u74_46:
  3211                           
  3212                           ;PWM.c: 45: CCP1CONbits.DC1B1 = Valor >> 1;
  3213  0010EE  90D8               	bcf	status,0,c
  3214  0010F0  3002               	rrcf	i2DutyCycle_PWM@Valor+1,w,c
  3215  0010F2  6E04               	movwf	(??i2_DutyCycle_PWM+1)& (0+255),c
  3216  0010F4  3001               	rrcf	i2DutyCycle_PWM@Valor,w,c
  3217  0010F6  6E03               	movwf	??i2_DutyCycle_PWM& (0+255),c
  3218  0010F8  3A03               	swapf	??i2_DutyCycle_PWM,f,c
  3219  0010FA  4603               	rlncf	??i2_DutyCycle_PWM,f,c
  3220  0010FC  50BD               	movf	4029,w,c	;volatile
  3221  0010FE  1803               	xorwf	??i2_DutyCycle_PWM,w,c
  3222  001100  0BDF               	andlw	-33
  3223  001102  1803               	xorwf	??i2_DutyCycle_PWM,w,c
  3224  001104  6EBD               	movwf	4029,c	;volatile
  3225                           
  3226                           ;PWM.c: 46: CCPR1L = Valor >> 2;
  3227  001106  C001  F003         	movff	i2DutyCycle_PWM@Valor,??i2_DutyCycle_PWM
  3228  00110A  C002  F004         	movff	i2DutyCycle_PWM@Valor+1,??i2_DutyCycle_PWM+1
  3229  00110E  90D8               	bcf	status,0,c
  3230  001110  3204               	rrcf	??i2_DutyCycle_PWM+1,f,c
  3231  001112  3203               	rrcf	??i2_DutyCycle_PWM,f,c
  3232  001114  90D8               	bcf	status,0,c
  3233  001116  3204               	rrcf	??i2_DutyCycle_PWM+1,f,c
  3234  001118  3203               	rrcf	??i2_DutyCycle_PWM,f,c
  3235  00111A  5003               	movf	??i2_DutyCycle_PWM,w,c
  3236  00111C  6EBE               	movwf	4030,c	;volatile
  3237  00111E  0012               	return		;funcret
  3238  001120                     __end_ofi2_DutyCycle_PWM:
  3239                           	opt stack 0
  3240                           pclatu	equ	0xFFB
  3241                           pclath	equ	0xFFA
  3242                           tblptru	equ	0xFF8
  3243                           tblptrh	equ	0xFF7
  3244                           tblptrl	equ	0xFF6
  3245                           tablat	equ	0xFF5
  3246                           prodh	equ	0xFF4
  3247                           prodl	equ	0xFF3
  3248                           intcon	equ	0xFF2
  3249                           intcon2	equ	0xFF1
  3250                           intcon3	equ	0xFF0
  3251                           fsr0h	equ	0xFEA
  3252                           fsr0l	equ	0xFE9
  3253                           wreg	equ	0xFE8
  3254                           postinc1	equ	0xFE6
  3255                           fsr1h	equ	0xFE2
  3256                           fsr1l	equ	0xFE1
  3257                           indf2	equ	0xFDF
  3258                           postinc2	equ	0xFDE
  3259                           fsr2h	equ	0xFDA
  3260                           fsr2l	equ	0xFD9
  3261                           status	equ	0xFD8
  3262                           pclatu	equ	0xFFB
  3263                           pclath	equ	0xFFA
  3264                           tblptru	equ	0xFF8
  3265                           tblptrh	equ	0xFF7
  3266                           tblptrl	equ	0xFF6
  3267                           tablat	equ	0xFF5
  3268                           prodh	equ	0xFF4
  3269                           prodl	equ	0xFF3
  3270                           intcon	equ	0xFF2
  3271                           intcon2	equ	0xFF1
  3272                           intcon3	equ	0xFF0
  3273                           fsr0h	equ	0xFEA
  3274                           fsr0l	equ	0xFE9
  3275                           wreg	equ	0xFE8
  3276                           postinc1	equ	0xFE6
  3277                           fsr1h	equ	0xFE2
  3278                           fsr1l	equ	0xFE1
  3279                           indf2	equ	0xFDF
  3280                           postinc2	equ	0xFDE
  3281                           fsr2h	equ	0xFDA
  3282                           fsr2l	equ	0xFD9
  3283                           status	equ	0xFD8
  3284                           
  3285                           	psect	rparam
  3286  0000                     pclatu	equ	0xFFB
  3287                           pclath	equ	0xFFA
  3288                           tblptru	equ	0xFF8
  3289                           tblptrh	equ	0xFF7
  3290                           tblptrl	equ	0xFF6
  3291                           tablat	equ	0xFF5
  3292                           prodh	equ	0xFF4
  3293                           prodl	equ	0xFF3
  3294                           intcon	equ	0xFF2
  3295                           intcon2	equ	0xFF1
  3296                           intcon3	equ	0xFF0
  3297                           fsr0h	equ	0xFEA
  3298                           fsr0l	equ	0xFE9
  3299                           wreg	equ	0xFE8
  3300                           postinc1	equ	0xFE6
  3301                           fsr1h	equ	0xFE2
  3302                           fsr1l	equ	0xFE1
  3303                           indf2	equ	0xFDF
  3304                           postinc2	equ	0xFDE
  3305                           fsr2h	equ	0xFDA
  3306                           fsr2l	equ	0xFD9
  3307                           status	equ	0xFD8
  3308                           
  3309                           	psect	temp
  3310  00003F                     btemp:
  3311                           	opt stack 0
  3312  00003F                     	ds	1
  3313  0000                     int$flags	set	btemp
  3314                           pclatu	equ	0xFFB
  3315                           pclath	equ	0xFFA
  3316                           tblptru	equ	0xFF8
  3317                           tblptrh	equ	0xFF7
  3318                           tblptrl	equ	0xFF6
  3319                           tablat	equ	0xFF5
  3320                           prodh	equ	0xFF4
  3321                           prodl	equ	0xFF3
  3322                           intcon	equ	0xFF2
  3323                           intcon2	equ	0xFF1
  3324                           intcon3	equ	0xFF0
  3325                           fsr0h	equ	0xFEA
  3326                           fsr0l	equ	0xFE9
  3327                           wreg	equ	0xFE8
  3328                           postinc1	equ	0xFE6
  3329                           fsr1h	equ	0xFE2
  3330                           fsr1l	equ	0xFE1
  3331                           indf2	equ	0xFDF
  3332                           postinc2	equ	0xFDE
  3333                           fsr2h	equ	0xFDA
  3334                           fsr2l	equ	0xFD9
  3335                           status	equ	0xFD8


Data Sizes:
    Strings     116
    Constant    0
    Data        0
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     56      62
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    cadastrarSenha@pass	PTR unsigned char  size(2) Largest target is 2
		 -> main@pass(COMRAM[2]), 

    cmpPass@toque	PTR unsigned char  size(2) Largest target is 2
		 -> cadastrarSenha@temp2(COMRAM[2]), main@toc(COMRAM[2]), 

    cmpPass@pass	PTR unsigned char  size(2) Largest target is 2
		 -> cadastrarSenha@temp1(COMRAM[2]), main@pass(COMRAM[2]), 

    destravarPorta@pass	PTR unsigned char  size(2) Largest target is 2
		 -> main@pass(COMRAM[2]), 

    destravarPorta@toque	PTR unsigned char  size(2) Largest target is 2
		 -> main@toc(COMRAM[2]), 

    lerToque@toque	PTR unsigned char  size(2) Largest target is 2
		 -> cadastrarSenha@temp2(COMRAM[2]), cadastrarSenha@temp1(COMRAM[2]), 

    cmpSignal@toc	PTR unsigned char  size(2) Largest target is 2
		 -> cadastrarSenha@temp2(COMRAM[2]), main@toc(COMRAM[2]), 

    cmpSignal@pass	PTR unsigned char  size(2) Largest target is 2
		 -> cadastrarSenha@temp1(COMRAM[2]), main@pass(COMRAM[2]), 

    readSignal@signal	PTR unsigned char  size(2) Largest target is 2
		 -> cadastrarSenha@temp2(COMRAM[2]), cadastrarSenha@temp1(COMRAM[2]), main@toc(COMRAM[2]), 

    write_LCD@c	PTR unsigned char  size(2) Largest target is 14
		 -> STR_18(CODE[11]), STR_17(CODE[6]), STR_16(CODE[6]), STR_15(CODE[11]), 
		 -> STR_14(CODE[6]), STR_13(CODE[13]), STR_12(CODE[6]), STR_11(CODE[13]), 
		 -> STR_10(CODE[14]), STR_9(CODE[10]), STR_8(CODE[10]), STR_7(CODE[10]), 
		 -> STR_6(CODE[14]), STR_5(CODE[10]), STR_4(CODE[12]), STR_3(CODE[6]), 
		 -> STR_2(CODE[14]), STR_1(CODE[14]), 


Critical Paths under _main in COMRAM

    _main->_cadastrarSenha
    _init_LCD->_send_cfg
    _destravarPorta->_readSignal
    _cadastrarSenha->_lerToque
    _lerToque->_readSignal
    _readSignal->_read_ADC
    _confirmarSenha->_write_LCD
    _cmpPass->_write_LCD
    _write_LCD->_send_msg
    _send_msg->_ena_pulse
    _set_line->_send_cfg
    _clearLCD->_send_cfg
    _send_cfg->_ena_pulse

Critical Paths under _ISR in COMRAM

    _ISR->i2_DutyCycle_PWM

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   28880
                                             52 COMRAM     4     4      0
                     _cadastrarSenha
                     _destravarPorta
                           _init_ADC
                        _init_INTRB2
                           _init_LCD
                           _init_PWM
 ---------------------------------------------------------------------------------
 (1) _init_PWM                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_LCD                                             0     0      0      15
                           _send_cfg
 ---------------------------------------------------------------------------------
 (1) _init_INTRB2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _destravarPorta                                       8     4      4   10366
                                             36 COMRAM     8     4      4
                      _DutyCycle_PWM
                           _clearLCD
                            _cmpPass
                         _readSignal
                           _read_ADC
                           _send_msg
                           _set_line
                          _write_LCD
 ---------------------------------------------------------------------------------
 (2) _DutyCycle_PWM                                        4     2      2     270
                                             20 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _cadastrarSenha                                      12    10      2   18343
                                             40 COMRAM    12    10      2
                           _clearLCD
                            _cmpPass
                     _confirmarSenha
                           _lerToque
                           _set_line
                          _write_LCD
 ---------------------------------------------------------------------------------
 (2) _lerToque                                             4     2      2    5554
                                             36 COMRAM     4     2      2
                           _clearLCD
                         _readSignal
                           _read_ADC
                           _send_msg
                           _set_line
                          _write_LCD
 ---------------------------------------------------------------------------------
 (2) _readSignal                                          12     8      4    1207
                                             24 COMRAM    12     8      4
                           _read_ADC
 ---------------------------------------------------------------------------------
 (2) _read_ADC                                             4     2      2      23
                                             20 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _confirmarSenha                                       2     0      2    3937
                                             29 COMRAM     2     0      2
                           _clearLCD
                           _set_line
                          _write_LCD
 ---------------------------------------------------------------------------------
 (2) _cmpPass                                              6     2      4    4498
                                             29 COMRAM     6     2      4
                           _clearLCD
                          _cmpSignal
                           _set_line
                          _write_LCD
 ---------------------------------------------------------------------------------
 (2) _write_LCD                                            6     4      2    1257
                                             23 COMRAM     6     4      2
                           _send_msg
 ---------------------------------------------------------------------------------
 (3) _send_msg                                             2     2      0      15
                                             21 COMRAM     2     2      0
                          _ena_pulse
 ---------------------------------------------------------------------------------
 (2) _set_line                                             5     1      4    2665
                                             23 COMRAM     5     1      4
                           _send_cfg
 ---------------------------------------------------------------------------------
 (3) _cmpSignal                                            6     2      4     216
                                             20 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _clearLCD                                             0     0      0      15
                           _send_cfg
 ---------------------------------------------------------------------------------
 (2) _send_cfg                                             2     2      0      15
                                             21 COMRAM     2     2      0
                          _ena_pulse
 ---------------------------------------------------------------------------------
 (3) _ena_pulse                                            1     1      0       0
                                             20 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                 16    16      0     118
                                              4 COMRAM    16    16      0
                    i2_DutyCycle_PWM
 ---------------------------------------------------------------------------------
 (7) i2_DutyCycle_PWM                                      4     2      2     118
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _cadastrarSenha
     _clearLCD
       _send_cfg
         _ena_pulse
     _cmpPass
       _clearLCD
         _send_cfg
           _ena_pulse
       _cmpSignal
       _set_line
         _send_cfg
           _ena_pulse
       _write_LCD
         _send_msg
           _ena_pulse
     _confirmarSenha
       _clearLCD
         _send_cfg
           _ena_pulse
       _set_line
         _send_cfg
           _ena_pulse
       _write_LCD
         _send_msg
           _ena_pulse
     _lerToque
       _clearLCD
         _send_cfg
           _ena_pulse
       _readSignal
         _read_ADC
       _read_ADC
       _send_msg
         _ena_pulse
       _set_line
         _send_cfg
           _ena_pulse
       _write_LCD
         _send_msg
           _ena_pulse
     _set_line
       _send_cfg
         _ena_pulse
     _write_LCD
       _send_msg
         _ena_pulse
   _destravarPorta
     _DutyCycle_PWM
     _clearLCD
       _send_cfg
         _ena_pulse
     _cmpPass
       _clearLCD
         _send_cfg
           _ena_pulse
       _cmpSignal
       _set_line
         _send_cfg
           _ena_pulse
       _write_LCD
         _send_msg
           _ena_pulse
     _readSignal
       _read_ADC
     _read_ADC
     _send_msg
       _ena_pulse
     _set_line
       _send_cfg
         _ena_pulse
     _write_LCD
       _send_msg
         _ena_pulse
   _init_ADC
   _init_INTRB2
   _init_LCD
     _send_cfg
       _ena_pulse
   _init_PWM

 _ISR (ROOT)
   i2_DutyCycle_PWM

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     38      3E       1       66.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      3E      20        0.0%
DATA                 0      0      3E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Mon Jul  3 18:34:32 2017

             __CFG_BOR$ON 000000               __CFG_BORV$3 000000              __CFG_CP0$OFF 000000  
            __CFG_CP1$OFF 000000              __CFG_CP2$OFF 000000              __CFG_CP3$OFF 000000  
                     l174 120C                       l263 08C0                       l185 0F34  
                     l259 0D2A                       l287 0FA8              __CFG_CPB$OFF 000000  
                     _PR2 000FCB                       u504 0EF8                       u505 0EF4  
            __CFG_CPD$OFF 000000                       _ISR 0008                       u490 0EE8  
                     u555 10B0                       u556 10B2                       u807 0C14  
                     u817 0F0E                       u827 1166                       u837 117A  
                     u847 11E2                       u857 1128                       u777 0A12  
                     u867 113A                       u787 0B00                       u877 114C  
                     u797 0B68          ??_cadastrarSenha 002B                       wreg 000FE8  
            __CFG_FOSC$HS 000000              __CFG_LVP$OFF 000000                      ?_ISR 0001  
            __CFG_WDT$OFF 000000                      l1405 11FC                      l1423 0F08  
                    l1415 0EC0                      l1505 0E9E                      l1417 0ECE  
                    l1419 0ED8                      l1427 0F1C                      l1461 0C80  
                    l1621 0960                      l1613 091E                      l1605 08CE  
                    l1439 1054                      l1519 0F8E                      l1471 0CD8  
                    l1623 0978                      l1607 08E4                      l1617 093C  
                    l1625 097C                      l1395 1068                      l1475 0CFC  
                    l1467 0CBA                      l1459 0C6A                      l1539 0AB2  
                    l1627 098C                      l1477 0D14                      l1399 1088  
                    l1495 0E5A                      l1479 0D18                      l1649 0A2E  
                    l1685 0FE0           ?_confirmarSenha 001E                      STR_1 0801  
                    STR_2 0801                      STR_3 086F                      STR_4 0837  
                    STR_5 0859                      STR_6 080F                      STR_7 0859  
                    STR_8 0813                      STR_9 0859                      _BRGH 007D62  
                    _CREN 007D5C                      _RCIF 007CF5                      i2l29 0DB4  
                    _SPEN 007D5F                      _TRMT 007D61                      _TXEN 007D65  
                    _SYNC 007D64                      _main 0FB4                      fsr0h 000FEA  
                    fsr1h 000FE2                      fsr2h 000FDA                      fsr0l 000FE9  
                    indf2 000FDF                      fsr1l 000FE1                      fsr2l 000FD9  
                    btemp 003F                      prodh 000FF4                      prodl 000FF3  
                    start 000E             __CFG_IESO$OFF 000000              ?_init_INTRB2 0001  
           __CFG_MCLRE$ON 000000              ___param_bank 000000    __size_of_DutyCycle_PWM 003C  
                   ??_ISR 0005             __CFG_PLLDIV$1 000000            __CFG_CCP2MX$ON 000000  
                   ?_main 0001                     _ADRES 000FC3                     STR_10 080F  
                   STR_11 081D                     STR_12 0869                     STR_13 082A  
                   STR_14 0869                     STR_15 084E                     STR_16 0869  
                   STR_17 0863                     STR_18 0843                     _T2CON 000FCA  
                   _RCREG 000FAE                     _TMR0H 000FD7                     _TMR0L 000FD6  
                   _SPBRG 000FAF                     _PORTD 000F83             __CFG_USBDIV$1 000000  
                   _TRISB 000F93                     _TRISD 000F95                     _TRISE 000F96  
                   _TXREG 000FAD             __CFG_PWRT$OFF 000000             __CFG_WRT0$OFF 000000  
           __CFG_WRT1$OFF 000000             __CFG_WRT2$OFF 000000             __CFG_WRT3$OFF 000000  
         __end_of_cmpPass 0EA8            __CFG_EBTR0$OFF 000000            __CFG_FCMEN$OFF 000000  
          __CFG_EBTR1$OFF 000000            __CFG_EBTR2$OFF 000000            __CFG_EBTR3$OFF 000000  
           __CFG_WRTB$OFF 000000             __CFG_WRTC$OFF 000000             __CFG_WRTD$OFF 000000  
          __CFG_EBTRB$OFF 000000                     pclath 000FFA                     tablat 000FF5  
                   status 000FD8            __CFG_ICPRT$OFF 000000           __initialization 11B2  
            __end_of_main 1012                    ??_main 0035             __activetblptr 000001  
           _DutyCycle_PWM 10A8                    _ADCON0 000FC2                    _ADCON1 000FC1  
                  _ADCON2 000FC0                    _CCPR1L 000FBE          ??_destravarPorta 0029  
                  _TRISC6 007CA6                    _TRISC7 007CA7          __end_of_clearLCD 125E  
__size_ofi2_DutyCycle_PWM 003C            __CFG_XINST$OFF 000000            __CFG_STVREN$ON 000000  
        __end_of_init_ADC 1246               readSignal@i 0021               readSignal@j 0023  
        __end_of_lerToque 0D2C          __end_of_init_LCD 11B2          __end_of_read_ADC 1222  
        __end_of_init_PWM 1234                 ??_cmpPass 0022          __end_of_send_cfg 11EE  
        __end_of_send_msg 1188          __end_of_set_line 120A              __mediumconst 0000  
                  tblptrh 000FF7                    tblptrl 000FF6            ?_DutyCycle_PWM 0015  
                  tblptru 000FF8                __accesstop 0060   __end_of__initialization 11BE  
         __CFG_PBADEN$OFF 000000             ___rparam_used 000001            __pcstackCOMRAM 0001  
    __size_of_init_INTRB2 0010        __size_of_cmpSignal 004C          ??_confirmarSenha 0020  
      __size_of_ena_pulse 0038           destravarPorta@i 002B         ??i2_DutyCycle_PWM 0003  
                 _CCP1CON 000FBD           ??_DutyCycle_PWM 0017                 ?_clearLCD 0001  
             send_cfg@cmd 0017                   i2u74_45 10EC                   i2u74_46 10EE  
                 i2u88_47 0D9A                 ?_init_ADC 0001                 ?_lerToque 0025  
               ?_init_LCD 0001           __CFG_VREGEN$OFF 000000                 ?_read_ADC 0015  
               ?_init_PWM 0001               send_msg@msg 0017        __size_of_write_LCD 004A  
       __end_of_cmpSignal 105E                 ?_send_cfg 0001                   __Hparam 0000  
               ?_send_msg 0001         __end_of_ena_pulse 1158                   __Lparam 0000  
               ?_set_line 0018                _readSignal 0EA8              __psmallconst 0800  
                 __pcinit 11B2                   __ramtop 0800                   _cmpPass 0DF0  
                 __ptext0 0FB4                   __ptext1 1222                   __ptext2 1188  
                 __ptext3 1246                   __ptext4 1234                   __ptext5 0876  
                 __ptext6 10A8                   __ptext7 0A74                   __ptext8 0C22  
                 __ptext9 0EA8                 _T0CONbits 000FD5        cadastrarSenha@pass 0029  
            __size_of_ISR 0DE8                ??_clearLCD 0018        destravarPorta@pass 0025  
             set_line@pos 001A                   main@toc 0035            __pintcode_body 0D2C  
    end_of_initialization 11BE                ??_init_ADC 0015                ??_lerToque 0027  
              ??_init_LCD 0018                ??_read_ADC 0017                ??_init_PWM 0015  
 __size_of_cadastrarSenha 01AE                   int_func 0D2C                ??_send_cfg 0016  
              ??_send_msg 0016                ??_set_line 001C            set_line@cursor 001C  
                 postinc1 000FE6                   postinc2 000FDE                 _PORTBbits 000F81  
               _PORTCbits 000F82                 _PORTEbits 000F84        DutyCycle_PWM@Valor 0015  
       __end_of_write_LCD 10A8                 _TRISAbits 000F92                 _TRISBbits 000F93  
               _TRISCbits 000F94               _CCP1CONbits 000FBD               ?_readSignal 0019  
     start_initialization 11B2               __end_of_ISR 0DF0           i2_DutyCycle_PWM 10E4  
           ??_init_INTRB2 0015         _buttonCancel_Lock 003D   __size_of_destravarPorta 01FE  
           lerToque@toque 0025          __CFG_LPT1OSC$OFF 000000               __pbssCOMRAM 0039  
       __size_of_clearLCD 0008             read_ADC@value 0017       __size_of_readSignal 00A2  
          _cadastrarSenha 0A74         __size_of_init_ADC 0012         __size_of_lerToque 010A  
       __size_of_init_LCD 002A         __size_of_read_ADC 0018         __size_of_init_PWM 0012  
               __pintcode 0008                 _cmpSignal 1012         __size_of_send_cfg 001E  
       __size_of_send_msg 0030         __size_of_set_line 001C                 _ena_pulse 1120  
         cadastrarSenha@i 002D           cadastrarSenha@j 002F       __end_of_init_INTRB2 1256  
                ?_cmpPass 001E                 _doorState 003B               __smallconst 0800  
        readSignal@limite 001F     __end_of_DutyCycle_PWM 10E4          readSignal@signal 0019  
 __end_ofi2_DutyCycle_PWM 1120    __end_of_cadastrarSenha 0C22   __size_of_confirmarSenha 006A  
       _buttonConfirm_Cad 0039          __CFG_WDTPS$32768 000000                ?_cmpSignal 0015  
              ?_ena_pulse 0001             cmpSignal@pass 0015                _ADCON0bits 000FC2  
               _write_LCD 105E               _INTCON2bits 000FF1               _INTCON3bits 000FF0  
         ?_cadastrarSenha 0029                 lerToque@i 0027               _init_INTRB2 1246  
                __Hrparam 0000                  __Lrparam 0000              __Lsmallconst 0800  
          _destravarPorta 0876              ??_readSignal 001D          __size_of_cmpPass 00B8  
                _clearLCD 1256              cmpPass@toque 0020                ?_write_LCD 0018  
                __ptext10 120A                  __ptext11 0F4A                  __ptext12 0DF0  
                __ptext21 10E4                  __ptext13 105E                  __ptext14 1158  
                __ptext15 11EE                  __ptext16 1012                  __ptext17 1256  
                __ptext18 11D0                  __ptext19 1120             readSignal@pos 001B  
        ?i2_DutyCycle_PWM 0001       cadastrarSenha@temp1 0033       cadastrarSenha@temp2 0031  
                _init_ADC 1234                  _lerToque 0C22                  _init_LCD 1188  
                _read_ADC 120A                  _init_PWM 1222        __end_of_readSignal 0F4A  
           __size_of_main 005E                  _send_cfg 11D0                  _send_msg 1158  
     destravarPorta@toque 0027                  cmpPass@i 0022    __end_of_destravarPorta 0A74  
              write_LCD@c 0018                write_LCD@i 001C                  _set_line 11EE  
            set_line@line 0018               ??_cmpSignal 0019                  int$flags 003F  
            cmpSignal@toc 0017               ??_ena_pulse 0015                  main@pass 0037  
   __CFG_CPUDIV$OSC1_PLL2 000000      i2DutyCycle_PWM@Valor 0001                _INTCONbits 000FF2  
                intlevel2 0000               cmpPass@pass 001E            _confirmarSenha 0F4A  
         ?_destravarPorta 0025               ??_write_LCD 001A    __end_of_confirmarSenha 0FB4  
