

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Fri Jun 30 23:35:29 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    24                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    25                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    26                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    27                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    28  0000                     
    29                           ; Version 1.41
    30                           ; Generated 25/01/2017 GMT
    31                           ; 
    32                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    33                           ; All rights reserved.
    34                           ; 
    35                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    36                           ; 
    37                           ; Redistribution and use in source and binary forms, with or without modification, are
    38                           ; permitted provided that the following conditions are met:
    39                           ; 
    40                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    41                           ;        conditions and the following disclaimer.
    42                           ; 
    43                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    44                           ;        of conditions and the following disclaimer in the documentation and/or other
    45                           ;        materials provided with the distribution.
    46                           ; 
    47                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    48                           ;        software without specific prior written permission.
    49                           ; 
    50                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    51                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    52                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    53                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    54                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    55                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    56                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    57                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    58                           ; 
    59                           ; 
    60                           ; Code-generator required, PIC18F4550 Definitions
    61                           ; 
    62                           ; SFR Addresses
    63  0000                     _ADRES	set	4035
    64  0000                     _ADCON0bits	set	4034
    65  0000                     _ADCON2	set	4032
    66  0000                     _ADCON1	set	4033
    67  0000                     _ADCON0	set	4034
    68  0000                     _TRISAbits	set	3986
    69  0000                     _RCREG	set	4014
    70  0000                     _TXREG	set	4013
    71  0000                     _SPBRG	set	4015
    72  0000                     _PORTCbits	set	3970
    73  0000                     _TRISCbits	set	3988
    74  0000                     _TRISE	set	3990
    75  0000                     _TRISB	set	3987
    76  0000                     _PORTBbits	set	3969
    77  0000                     _PORTD	set	3971
    78  0000                     _PORTEbits	set	3972
    79  0000                     _TMR0L	set	4054
    80  0000                     _TMR0H	set	4055
    81  0000                     _T0CONbits	set	4053
    82  0000                     _TRISD	set	3989
    83  0000                     _INTCON2bits	set	4081
    84  0000                     _TRISBbits	set	3987
    85  0000                     _INTCONbits	set	4082
    86  0000                     _INTCON3bits	set	4080
    87  0000                     _RCIF	set	31989
    88  0000                     _TRMT	set	32097
    89  0000                     _TXEN	set	32101
    90  0000                     _CREN	set	32092
    91  0000                     _TRISC6	set	31910
    92  0000                     _TRISC7	set	31911
    93  0000                     _SPEN	set	32095
    94  0000                     _SYNC	set	32100
    95  0000                     _BRGH	set	32098
    96                           
    97                           	psect	smallconst
    98  000800                     __psmallconst:
    99                           	opt stack 0
   100  000800  00                 	db	0
   101  000801                     STR_2:
   102  000801  75                 	db	117	;'u'
   103  000802  6E                 	db	110	;'n'
   104  000803  64                 	db	100	;'d'
   105  000804  6F                 	db	111	;'o'
   106  000805  73                 	db	115	;'s'
   107  000806  20                 	db	32
   108  000807  70                 	db	112	;'p'
   109  000808  61                 	db	97	;'a'
   110  000809  72                 	db	114	;'r'
   111  00080A  61                 	db	97	;'a'
   112  00080B  20                 	db	32
   113  00080C  62                 	db	98	;'b'
   114  00080D  61                 	db	97	;'a'
   115  00080E  74                 	db	116	;'t'
   116  00080F  65                 	db	101	;'e'
   117  000810  72                 	db	114	;'r'
   118  000811  00                 	db	0
   119  000812                     STR_1:
   120  000812  56                 	db	86	;'V'
   121  000813  6F                 	db	111	;'o'
   122  000814  63                 	db	99	;'c'
   123  000815  65                 	db	101	;'e'
   124  000816  20                 	db	32
   125  000817  74                 	db	116	;'t'
   126  000818  65                 	db	101	;'e'
   127  000819  6D                 	db	109	;'m'
   128  00081A  20                 	db	32
   129  00081B  35                 	db	53	;'5'
   130  00081C  20                 	db	32
   131  00081D  73                 	db	115	;'s'
   132  00081E  65                 	db	101	;'e'
   133  00081F  67                 	db	103	;'g'
   134  000820  2D                 	db	45
   135  000821  00                 	db	0
   136  000822                     STR_10:
   137  000822  42                 	db	66	;'B'
   138  000823  6F                 	db	111	;'o'
   139  000824  74                 	db	116	;'t'
   140  000825  E3                 	db	-29
   141  000826  6F                 	db	111	;'o'
   142  000827  20                 	db	32
   143  000828  61                 	db	97	;'a'
   144  000829  70                 	db	112	;'p'
   145  00082A  65                 	db	101	;'e'
   146  00082B  72                 	db	114	;'r'
   147  00082C  74                 	db	116	;'t'
   148  00082D  61                 	db	97	;'a'
   149  00082E  64                 	db	100	;'d'
   150  00082F  6F                 	db	111	;'o'
   151  000830  00                 	db	0
   152  000831                     STR_5:
   153  000831  42                 	db	66	;'B'
   154  000832  61                 	db	97	;'a'
   155  000833  74                 	db	116	;'t'
   156  000834  61                 	db	97	;'a'
   157  000835  20                 	db	32
   158  000836  6E                 	db	110	;'n'
   159  000837  61                 	db	97	;'a'
   160  000838  20                 	db	32
   161  000839  70                 	db	112	;'p'
   162  00083A  6F                 	db	111	;'o'
   163  00083B  72                 	db	114	;'r'
   164  00083C  74                 	db	116	;'t'
   165  00083D  61                 	db	97	;'a'
   166  00083E  00                 	db	0
   167  00083F                     STR_9:
   168  00083F  6E                 	db	110	;'n'
   169  000840  E3                 	db	-29
   170  000841  6F                 	db	111	;'o'
   171  000842  20                 	db	32
   172  000843  63                 	db	99	;'c'
   173  000844  6F                 	db	111	;'o'
   174  000845  69                 	db	105	;'i'
   175  000846  6E                 	db	110	;'n'
   176  000847  63                 	db	99	;'c'
   177  000848  69                 	db	105	;'i'
   178  000849  64                 	db	100	;'d'
   179  00084A  65                 	db	101	;'e'
   180  00084B  6D                 	db	109	;'m'
   181  00084C  00                 	db	0
   182  00084D                     STR_4:
   183  00084D  46                 	db	70	;'F'
   184  00084E  69                 	db	105	;'i'
   185  00084F  6E                 	db	110	;'n'
   186  000850  61                 	db	97	;'a'
   187  000851  6C                 	db	108	;'l'
   188  000852  69                 	db	105	;'i'
   189  000853  7A                 	db	122	;'z'
   190  000854  61                 	db	97	;'a'
   191  000855  64                 	db	100	;'d'
   192  000856  61                 	db	97	;'a'
   193  000857  00                 	db	0
   194  000858                     STR_6:
   195  000858  41                 	db	65	;'A'
   196  000859  73                 	db	115	;'s'
   197  00085A  20                 	db	32
   198  00085B  73                 	db	115	;'s'
   199  00085C  65                 	db	101	;'e'
   200  00085D  6E                 	db	110	;'n'
   201  00085E  68                 	db	104	;'h'
   202  00085F  61                 	db	97	;'a'
   203  000860  73                 	db	115	;'s'
   204  000861  00                 	db	0
   205  000862                     STR_3:
   206  000862  4C                 	db	76	;'L'
   207  000863  65                 	db	101	;'e'
   208  000864  69                 	db	105	;'i'
   209  000865  74                 	db	116	;'t'
   210  000866  75                 	db	117	;'u'
   211  000867  72                 	db	114	;'r'
   212  000868  61                 	db	97	;'a'
   213  000869  00                 	db	0
   214  0000                     
   215                           ; #config settings
   216  00086A  00                 	db	0	; dummy byte at the end
   217  0000                     
   218                           	psect	cinit
   219  000ED2                     __pcinit:
   220                           	opt stack 0
   221  000ED2                     start_initialization:
   222                           	opt stack 0
   223  000ED2                     __initialization:
   224                           	opt stack 0
   225                           
   226                           ; Clear objects allocated to COMRAM (2 bytes)
   227  000ED2  6A28               	clrf	(__pbssCOMRAM+1)& (0+255),c
   228  000ED4  6A27               	clrf	__pbssCOMRAM& (0+255),c
   229  000ED6                     end_of_initialization:
   230                           	opt stack 0
   231  000ED6                     __end_of__initialization:
   232                           	opt stack 0
   233  000ED6  9029               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   234  000ED8  9229               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   235  000EDA  0E00               	movlw	low (__Lsmallconst shr (0+16))
   236  000EDC  6EF8               	movwf	tblptru,c
   237  000EDE  0E08               	movlw	high __Lsmallconst
   238  000EE0  6EF7               	movwf	tblptrh,c
   239  000EE2  0100               	movlb	0
   240  000EE4  EF36  F004         	goto	_main	;jump to C main() function
   241                           tblptru	equ	0xFF8
   242                           tblptrh	equ	0xFF7
   243                           
   244                           	psect	bssCOMRAM
   245  000027                     __pbssCOMRAM:
   246                           	opt stack 0
   247  000027                     _button:
   248                           	opt stack 0
   249  000027                     	ds	2
   250                           tblptru	equ	0xFF8
   251                           tblptrh	equ	0xFF7
   252                           
   253                           	psect	cstackCOMRAM
   254  000001                     __pcstackCOMRAM:
   255                           	opt stack 0
   256  000001                     ??_ISR:
   257  000001                     
   258                           ; 1 bytes @ 0x0
   259  000001                     	ds	14
   260  00000F                     ??_ena_pulse:
   261  00000F                     ?_cmpSignal:
   262                           	opt stack 0
   263  00000F                     ?_ADCRead:
   264                           	opt stack 0
   265  00000F                     cmpSignal@pass:
   266                           	opt stack 0
   267                           
   268                           ; 2 bytes @ 0xE
   269  00000F                     	ds	1
   270  000010                     ??_send_cfg:
   271  000010                     ??_send_msg:
   272                           
   273                           ; 1 bytes @ 0xF
   274  000010                     	ds	1
   275  000011                     send_cfg@cmd:
   276                           	opt stack 0
   277  000011                     send_msg@msg:
   278                           	opt stack 0
   279  000011                     ADCRead@value:
   280                           	opt stack 0
   281  000011                     cmpSignal@toc:
   282                           	opt stack 0
   283                           
   284                           ; 2 bytes @ 0x10
   285  000011                     	ds	1
   286  000012                     write_LCD@c:
   287                           	opt stack 0
   288  000012                     set_line@line:
   289                           	opt stack 0
   290                           
   291                           ; 2 bytes @ 0x11
   292  000012                     	ds	1
   293  000013                     readSignal@signal:
   294                           	opt stack 0
   295                           
   296                           ; 2 bytes @ 0x12
   297  000013                     	ds	1
   298  000014                     ??_write_LCD:
   299  000014                     set_line@pos:
   300                           	opt stack 0
   301                           
   302                           ; 2 bytes @ 0x13
   303  000014                     	ds	1
   304  000015                     readSignal@pos:
   305                           	opt stack 0
   306                           
   307                           ; 2 bytes @ 0x14
   308  000015                     	ds	1
   309  000016                     set_line@cursor:
   310                           	opt stack 0
   311  000016                     write_LCD@i:
   312                           	opt stack 0
   313                           
   314                           ; 2 bytes @ 0x15
   315  000016                     	ds	1
   316  000017                     ??_readSignal:
   317                           
   318                           ; 1 bytes @ 0x16
   319  000017                     	ds	2
   320  000019                     readSignal@limite:
   321                           	opt stack 0
   322                           
   323                           ; 2 bytes @ 0x18
   324  000019                     	ds	2
   325  00001B                     readSignal@i:
   326                           	opt stack 0
   327                           
   328                           ; 2 bytes @ 0x1A
   329  00001B                     	ds	2
   330  00001D                     readSignal@j:
   331                           	opt stack 0
   332                           
   333                           ; 2 bytes @ 0x1C
   334  00001D                     	ds	2
   335  00001F                     ??_main:
   336                           
   337                           ; 1 bytes @ 0x1E
   338  00001F                     	ds	2
   339  000021                     main@pass:
   340                           	opt stack 0
   341                           
   342                           ; 2 bytes @ 0x20
   343  000021                     	ds	2
   344  000023                     main@toc:
   345                           	opt stack 0
   346                           
   347                           ; 2 bytes @ 0x22
   348  000023                     	ds	2
   349  000025                     main@i:
   350                           	opt stack 0
   351                           
   352                           ; 2 bytes @ 0x24
   353  000025                     	ds	2
   354                           tblptru	equ	0xFF8
   355                           tblptrh	equ	0xFF7
   356                           
   357 ;;
   358 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   359 ;;
   360 ;; *************** function _main *****************
   361 ;; Defined at:
   362 ;;		line 92 in file "main.c"
   363 ;; Parameters:    Size  Location     Type
   364 ;;		None
   365 ;; Auto vars:     Size  Location     Type
   366 ;;  i               2   36[COMRAM] int 
   367 ;;  toc             2   34[COMRAM] unsigned char [2]
   368 ;;  pass            2   32[COMRAM] unsigned char [2]
   369 ;; Return value:  Size  Location     Type
   370 ;;                  1    wreg      void 
   371 ;; Registers used:
   372 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   373 ;; Tracked objects:
   374 ;;		On entry : 0/0
   375 ;;		On exit  : 0/0
   376 ;;		Unchanged: 0/0
   377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   378 ;;      Params:         0       0       0       0       0       0       0       0       0
   379 ;;      Locals:         6       0       0       0       0       0       0       0       0
   380 ;;      Temps:          2       0       0       0       0       0       0       0       0
   381 ;;      Totals:         8       0       0       0       0       0       0       0       0
   382 ;;Total ram usage:        8 bytes
   383 ;; Hardware stack levels required when called:    4
   384 ;; This function calls:
   385 ;;		_ADCInit
   386 ;;		_clearLCD
   387 ;;		_cmpSignal
   388 ;;		_initINT2
   389 ;;		_init_LCD
   390 ;;		_init_UART
   391 ;;		_readSignal
   392 ;;		_send_msg
   393 ;;		_set_line
   394 ;;		_write_LCD
   395 ;; This function is called by:
   396 ;;		Startup code after reset
   397 ;; This function uses a non-reentrant model
   398 ;;
   399                           
   400                           	psect	text0
   401  00086C                     __ptext0:
   402                           	opt stack 0
   403  00086C                     _main:
   404                           	opt stack 27
   405                           
   406                           ;main.c: 94: initINT2();
   407                           
   408                           ;incstack = 0
   409  00086C  EC87  F007         	call	_initINT2	;wreg free
   410                           
   411                           ;main.c: 95: init_LCD();
   412  000870  EC2B  F007         	call	_init_LCD	;wreg free
   413                           
   414                           ;main.c: 96: init_UART();
   415  000874  EC74  F007         	call	_init_UART	;wreg free
   416                           
   417                           ;main.c: 97: ADCInit();
   418  000878  EC7E  F007         	call	_ADCInit	;wreg free
   419                           
   420                           ;main.c: 99: TRISCbits.RC2 = 0;
   421  00087C  9494               	bcf	3988,2,c	;volatile
   422                           
   423                           ;main.c: 101: int i = 0;
   424  00087E  0E00               	movlw	0
   425  000880  6E26               	movwf	main@i+1,c
   426  000882  0E00               	movlw	0
   427  000884  6E25               	movwf	main@i,c
   428                           
   429                           ;main.c: 102: clearLCD();
   430  000886  EC8F  F007         	call	_clearLCD	;wreg free
   431                           
   432                           ;main.c: 104: char pass[2];
   433                           ;main.c: 105: pass[0] = 0x00;
   434  00088A  0E00               	movlw	0
   435  00088C  6E21               	movwf	main@pass,c
   436                           
   437                           ;main.c: 106: pass[1] = 0x00;
   438  00088E  0E00               	movlw	0
   439  000890  6E22               	movwf	main@pass+1,c
   440                           
   441                           ;main.c: 107: char toc[2];
   442                           ;main.c: 108: toc[0] = 0x00;
   443  000892  0E00               	movlw	0
   444  000894  6E23               	movwf	main@toc,c
   445                           
   446                           ;main.c: 109: toc[1] = 0x00;
   447  000896  0E00               	movlw	0
   448  000898  6E24               	movwf	main@toc+1,c
   449                           
   450                           ;main.c: 112: write_LCD("Voce tem 5 seg-");
   451  00089A  0E12               	movlw	low STR_1
   452  00089C  6E12               	movwf	write_LCD@c,c
   453  00089E  0E08               	movlw	high STR_1
   454  0008A0  6E13               	movwf	write_LCD@c+1,c
   455  0008A2  ECD2  F006         	call	_write_LCD	;wreg free
   456                           
   457                           ;main.c: 113: set_line(1,0);
   458  0008A6  0E00               	movlw	0
   459  0008A8  6E13               	movwf	set_line@line+1,c
   460  0008AA  0E01               	movlw	1
   461  0008AC  6E12               	movwf	set_line@line,c
   462  0008AE  0E00               	movlw	0
   463  0008B0  6E15               	movwf	set_line@pos+1,c
   464  0008B2  0E00               	movlw	0
   465  0008B4  6E14               	movwf	set_line@pos,c
   466  0008B6  EC4F  F007         	call	_set_line	;wreg free
   467                           
   468                           ;main.c: 114: write_LCD("undos para bater");
   469  0008BA  0E01               	movlw	low STR_2
   470  0008BC  6E12               	movwf	write_LCD@c,c
   471  0008BE  0E08               	movlw	high STR_2
   472  0008C0  6E13               	movwf	write_LCD@c+1,c
   473  0008C2  ECD2  F006         	call	_write_LCD	;wreg free
   474                           
   475                           ;main.c: 115: _delay((unsigned long)((3000)*(16000000/4000.0)));
   476  0008C6  0E3D               	movlw	61
   477  0008C8  6E20               	movwf	(??_main+1)& (0+255),c
   478  0008CA  0EE1               	movlw	225
   479  0008CC  6E1F               	movwf	??_main& (0+255),c
   480  0008CE  0E40               	movlw	64
   481  0008D0                     u517:
   482  0008D0  2EE8               	decfsz	wreg,f,c
   483  0008D2  D7FE               	bra	u517
   484  0008D4  2E1F               	decfsz	??_main& (0+255),f,c
   485  0008D6  D7FC               	bra	u517
   486  0008D8  2E20               	decfsz	(??_main+1)& (0+255),f,c
   487  0008DA  D7FA               	bra	u517
   488                           
   489                           ;main.c: 117: while(i < 4){
   490  0008DC  D040               	goto	l1325
   491  0008DE                     l1305:
   492                           
   493                           ;main.c: 118: clearLCD();
   494  0008DE  EC8F  F007         	call	_clearLCD	;wreg free
   495                           
   496                           ;main.c: 119: send_msg('1'+ i);
   497  0008E2  5025               	movf	main@i,w,c
   498  0008E4  0F31               	addlw	49
   499  0008E6  EC13  F007         	call	_send_msg
   500                           
   501                           ;main.c: 120: if(i == 0)
   502  0008EA  5025               	movf	main@i,w,c
   503  0008EC  1026               	iorwf	main@i+1,w,c
   504  0008EE  A4D8               	btfss	status,2,c
   505  0008F0  D00B               	goto	l1313
   506                           
   507                           ;main.c: 121: readSignal(&pass[0], 0);
   508  0008F2  0E21               	movlw	low main@pass
   509  0008F4  6E13               	movwf	readSignal@signal,c
   510  0008F6  0E00               	movlw	high main@pass
   511  0008F8  6E14               	movwf	readSignal@signal+1,c
   512  0008FA  0E00               	movlw	0
   513  0008FC  6E16               	movwf	readSignal@pos+1,c
   514  0008FE  0E00               	movlw	0
   515  000900  6E15               	movwf	readSignal@pos,c
   516  000902  EC19  F006         	call	_readSignal	;wreg free
   517  000906  D029               	goto	l1323
   518  000908                     l1313:
   519                           
   520                           ;main.c: 122: else if(i == 1)
   521  000908  0425               	decf	main@i,w,c
   522  00090A  1026               	iorwf	main@i+1,w,c
   523  00090C  A4D8               	btfss	status,2,c
   524  00090E  D00B               	goto	l1317
   525                           
   526                           ;main.c: 123: readSignal(&pass[0], 1);
   527  000910  0E21               	movlw	low main@pass
   528  000912  6E13               	movwf	readSignal@signal,c
   529  000914  0E00               	movlw	high main@pass
   530  000916  6E14               	movwf	readSignal@signal+1,c
   531  000918  0E00               	movlw	0
   532  00091A  6E16               	movwf	readSignal@pos+1,c
   533  00091C  0E01               	movlw	1
   534  00091E  6E15               	movwf	readSignal@pos,c
   535  000920  EC19  F006         	call	_readSignal	;wreg free
   536  000924  D01A               	goto	l1323
   537  000926                     l1317:
   538                           
   539                           ;main.c: 124: else if(i == 2)
   540  000926  0E02               	movlw	2
   541  000928  1825               	xorwf	main@i,w,c
   542  00092A  1026               	iorwf	main@i+1,w,c
   543  00092C  A4D8               	btfss	status,2,c
   544  00092E  D00B               	goto	l1321
   545                           
   546                           ;main.c: 125: readSignal(&pass[1], 0);
   547  000930  0E22               	movlw	low (main@pass+1)
   548  000932  6E13               	movwf	readSignal@signal,c
   549  000934  0E00               	movlw	high (main@pass+1)
   550  000936  6E14               	movwf	readSignal@signal+1,c
   551  000938  0E00               	movlw	0
   552  00093A  6E16               	movwf	readSignal@pos+1,c
   553  00093C  0E00               	movlw	0
   554  00093E  6E15               	movwf	readSignal@pos,c
   555  000940  EC19  F006         	call	_readSignal	;wreg free
   556  000944  D00A               	goto	l1323
   557  000946                     l1321:
   558                           
   559                           ;main.c: 126: else
   560                           ;main.c: 127: readSignal(&pass[1], 1);
   561  000946  0E22               	movlw	low (main@pass+1)
   562  000948  6E13               	movwf	readSignal@signal,c
   563  00094A  0E00               	movlw	high (main@pass+1)
   564  00094C  6E14               	movwf	readSignal@signal+1,c
   565  00094E  0E00               	movlw	0
   566  000950  6E16               	movwf	readSignal@pos+1,c
   567  000952  0E01               	movlw	1
   568  000954  6E15               	movwf	readSignal@pos,c
   569  000956  EC19  F006         	call	_readSignal	;wreg free
   570  00095A                     l1323:
   571                           
   572                           ;main.c: 128: i++;
   573  00095A  4A25               	infsnz	main@i,f,c
   574  00095C  2A26               	incf	main@i+1,f,c
   575  00095E                     l1325:
   576  00095E  BE26               	btfsc	main@i+1,7,c
   577  000960  D7BE               	goto	l1305
   578  000962  5026               	movf	main@i+1,w,c
   579  000964  E104               	bnz	l1327
   580  000966  0E04               	movlw	4
   581  000968  5C25               	subwf	main@i,w,c
   582  00096A  A0D8               	btfss	status,0,c
   583  00096C  D7B8               	goto	l1305
   584  00096E                     l1327:
   585                           
   586                           ;main.c: 129: }
   587                           ;main.c: 130: i = 0;
   588  00096E  0E00               	movlw	0
   589  000970  6E26               	movwf	main@i+1,c
   590  000972  0E00               	movlw	0
   591  000974  6E25               	movwf	main@i,c
   592                           
   593                           ;main.c: 132: clearLCD();
   594  000976  EC8F  F007         	call	_clearLCD	;wreg free
   595                           
   596                           ;main.c: 133: set_line(0,5);
   597  00097A  0E00               	movlw	0
   598  00097C  6E13               	movwf	set_line@line+1,c
   599  00097E  0E00               	movlw	0
   600  000980  6E12               	movwf	set_line@line,c
   601  000982  0E00               	movlw	0
   602  000984  6E15               	movwf	set_line@pos+1,c
   603  000986  0E05               	movlw	5
   604  000988  6E14               	movwf	set_line@pos,c
   605  00098A  EC4F  F007         	call	_set_line	;wreg free
   606                           
   607                           ;main.c: 134: write_LCD("Leitura");
   608  00098E  0E62               	movlw	low STR_3
   609  000990  6E12               	movwf	write_LCD@c,c
   610  000992  0E08               	movlw	high STR_3
   611  000994  6E13               	movwf	write_LCD@c+1,c
   612  000996  ECD2  F006         	call	_write_LCD	;wreg free
   613                           
   614                           ;main.c: 135: set_line(1,3);
   615  00099A  0E00               	movlw	0
   616  00099C  6E13               	movwf	set_line@line+1,c
   617  00099E  0E01               	movlw	1
   618  0009A0  6E12               	movwf	set_line@line,c
   619  0009A2  0E00               	movlw	0
   620  0009A4  6E15               	movwf	set_line@pos+1,c
   621  0009A6  0E03               	movlw	3
   622  0009A8  6E14               	movwf	set_line@pos,c
   623  0009AA  EC4F  F007         	call	_set_line	;wreg free
   624                           
   625                           ;main.c: 136: write_LCD("Finalizada");
   626  0009AE  0E4D               	movlw	low STR_4
   627  0009B0  6E12               	movwf	write_LCD@c,c
   628  0009B2  0E08               	movlw	high STR_4
   629  0009B4  6E13               	movwf	write_LCD@c+1,c
   630  0009B6  ECD2  F006         	call	_write_LCD	;wreg free
   631                           
   632                           ;main.c: 137: _delay((unsigned long)((3000)*(16000000/4000.0)));
   633  0009BA  0E3D               	movlw	61
   634  0009BC  6E20               	movwf	(??_main+1)& (0+255),c
   635  0009BE  0EE1               	movlw	225
   636  0009C0  6E1F               	movwf	??_main& (0+255),c
   637  0009C2  0E40               	movlw	64
   638  0009C4                     u527:
   639  0009C4  2EE8               	decfsz	wreg,f,c
   640  0009C6  D7FE               	bra	u527
   641  0009C8  2E1F               	decfsz	??_main& (0+255),f,c
   642  0009CA  D7FC               	bra	u527
   643  0009CC  2E20               	decfsz	(??_main+1)& (0+255),f,c
   644  0009CE  D7FA               	bra	u527
   645  0009D0                     l1341:
   646                           
   647                           ;main.c: 140: clearLCD();
   648  0009D0  EC8F  F007         	call	_clearLCD	;wreg free
   649                           
   650                           ;main.c: 141: set_line(0,0);
   651  0009D4  0E00               	movlw	0
   652  0009D6  6E13               	movwf	set_line@line+1,c
   653  0009D8  0E00               	movlw	0
   654  0009DA  6E12               	movwf	set_line@line,c
   655  0009DC  0E00               	movlw	0
   656  0009DE  6E15               	movwf	set_line@pos+1,c
   657  0009E0  0E00               	movlw	0
   658  0009E2  6E14               	movwf	set_line@pos,c
   659  0009E4  EC4F  F007         	call	_set_line	;wreg free
   660                           
   661                           ;main.c: 142: write_LCD("Bata na porta");
   662  0009E8  0E31               	movlw	low STR_5
   663  0009EA  6E12               	movwf	write_LCD@c,c
   664  0009EC  0E08               	movlw	high STR_5
   665  0009EE  6E13               	movwf	write_LCD@c+1,c
   666  0009F0  ECD2  F006         	call	_write_LCD	;wreg free
   667                           
   668                           ;main.c: 143: _delay((unsigned long)((3000)*(16000000/4000.0)));
   669  0009F4  0E3D               	movlw	61
   670  0009F6  6E20               	movwf	(??_main+1)& (0+255),c
   671  0009F8  0EE1               	movlw	225
   672  0009FA  6E1F               	movwf	??_main& (0+255),c
   673  0009FC  0E40               	movlw	64
   674  0009FE                     u537:
   675  0009FE  2EE8               	decfsz	wreg,f,c
   676  000A00  D7FE               	bra	u537
   677  000A02  2E1F               	decfsz	??_main& (0+255),f,c
   678  000A04  D7FC               	bra	u537
   679  000A06  2E20               	decfsz	(??_main+1)& (0+255),f,c
   680  000A08  D7FA               	bra	u537
   681                           
   682                           ;main.c: 144: toc[0] = 0x00;
   683  000A0A  0E00               	movlw	0
   684  000A0C  6E23               	movwf	main@toc,c
   685                           
   686                           ;main.c: 145: toc[1] = 0x00;
   687  000A0E  0E00               	movlw	0
   688  000A10  6E24               	movwf	main@toc+1,c
   689                           
   690                           ;main.c: 147: while(i < 4){
   691  000A12  D040               	goto	l1373
   692  000A14                     l1353:
   693                           
   694                           ;main.c: 148: clearLCD();
   695  000A14  EC8F  F007         	call	_clearLCD	;wreg free
   696                           
   697                           ;main.c: 149: send_msg('1'+ i);
   698  000A18  5025               	movf	main@i,w,c
   699  000A1A  0F31               	addlw	49
   700  000A1C  EC13  F007         	call	_send_msg
   701                           
   702                           ;main.c: 150: if(i == 0)
   703  000A20  5025               	movf	main@i,w,c
   704  000A22  1026               	iorwf	main@i+1,w,c
   705  000A24  A4D8               	btfss	status,2,c
   706  000A26  D00B               	goto	l1361
   707                           
   708                           ;main.c: 151: readSignal(&toc[0], 0);
   709  000A28  0E23               	movlw	low main@toc
   710  000A2A  6E13               	movwf	readSignal@signal,c
   711  000A2C  0E00               	movlw	high main@toc
   712  000A2E  6E14               	movwf	readSignal@signal+1,c
   713  000A30  0E00               	movlw	0
   714  000A32  6E16               	movwf	readSignal@pos+1,c
   715  000A34  0E00               	movlw	0
   716  000A36  6E15               	movwf	readSignal@pos,c
   717  000A38  EC19  F006         	call	_readSignal	;wreg free
   718  000A3C  D029               	goto	l1371
   719  000A3E                     l1361:
   720                           
   721                           ;main.c: 152: else if(i == 1)
   722  000A3E  0425               	decf	main@i,w,c
   723  000A40  1026               	iorwf	main@i+1,w,c
   724  000A42  A4D8               	btfss	status,2,c
   725  000A44  D00B               	goto	l1365
   726                           
   727                           ;main.c: 153: readSignal(&toc[0], 1);
   728  000A46  0E23               	movlw	low main@toc
   729  000A48  6E13               	movwf	readSignal@signal,c
   730  000A4A  0E00               	movlw	high main@toc
   731  000A4C  6E14               	movwf	readSignal@signal+1,c
   732  000A4E  0E00               	movlw	0
   733  000A50  6E16               	movwf	readSignal@pos+1,c
   734  000A52  0E01               	movlw	1
   735  000A54  6E15               	movwf	readSignal@pos,c
   736  000A56  EC19  F006         	call	_readSignal	;wreg free
   737  000A5A  D01A               	goto	l1371
   738  000A5C                     l1365:
   739                           
   740                           ;main.c: 154: else if(i == 2)
   741  000A5C  0E02               	movlw	2
   742  000A5E  1825               	xorwf	main@i,w,c
   743  000A60  1026               	iorwf	main@i+1,w,c
   744  000A62  A4D8               	btfss	status,2,c
   745  000A64  D00B               	goto	l1369
   746                           
   747                           ;main.c: 155: readSignal(&toc[1], 0);
   748  000A66  0E24               	movlw	low (main@toc+1)
   749  000A68  6E13               	movwf	readSignal@signal,c
   750  000A6A  0E00               	movlw	high (main@toc+1)
   751  000A6C  6E14               	movwf	readSignal@signal+1,c
   752  000A6E  0E00               	movlw	0
   753  000A70  6E16               	movwf	readSignal@pos+1,c
   754  000A72  0E00               	movlw	0
   755  000A74  6E15               	movwf	readSignal@pos,c
   756  000A76  EC19  F006         	call	_readSignal	;wreg free
   757  000A7A  D00A               	goto	l1371
   758  000A7C                     l1369:
   759                           
   760                           ;main.c: 156: else
   761                           ;main.c: 157: readSignal(&toc[1], 1);
   762  000A7C  0E24               	movlw	low (main@toc+1)
   763  000A7E  6E13               	movwf	readSignal@signal,c
   764  000A80  0E00               	movlw	high (main@toc+1)
   765  000A82  6E14               	movwf	readSignal@signal+1,c
   766  000A84  0E00               	movlw	0
   767  000A86  6E16               	movwf	readSignal@pos+1,c
   768  000A88  0E01               	movlw	1
   769  000A8A  6E15               	movwf	readSignal@pos,c
   770  000A8C  EC19  F006         	call	_readSignal	;wreg free
   771  000A90                     l1371:
   772                           
   773                           ;main.c: 158: i++;
   774  000A90  4A25               	infsnz	main@i,f,c
   775  000A92  2A26               	incf	main@i+1,f,c
   776  000A94                     l1373:
   777  000A94  BE26               	btfsc	main@i+1,7,c
   778  000A96  D7BE               	goto	l1353
   779  000A98  5026               	movf	main@i+1,w,c
   780  000A9A  E104               	bnz	l1375
   781  000A9C  0E04               	movlw	4
   782  000A9E  5C25               	subwf	main@i,w,c
   783  000AA0  A0D8               	btfss	status,0,c
   784  000AA2  D7B8               	goto	l1353
   785  000AA4                     l1375:
   786                           
   787                           ;main.c: 159: }
   788                           ;main.c: 160: i = 0;
   789  000AA4  0E00               	movlw	0
   790  000AA6  6E26               	movwf	main@i+1,c
   791  000AA8  0E00               	movlw	0
   792  000AAA  6E25               	movwf	main@i,c
   793                           
   794                           ;main.c: 162: i = cmpSignal(pass, toc);
   795  000AAC  0E21               	movlw	low main@pass
   796  000AAE  6E0F               	movwf	cmpSignal@pass,c
   797  000AB0  0E00               	movlw	high main@pass
   798  000AB2  6E10               	movwf	cmpSignal@pass+1,c
   799  000AB4  0E23               	movlw	low main@toc
   800  000AB6  6E11               	movwf	cmpSignal@toc,c
   801  000AB8  0E00               	movlw	high main@toc
   802  000ABA  6E12               	movwf	cmpSignal@toc+1,c
   803  000ABC  ECAC  F006         	call	_cmpSignal	;wreg free
   804  000AC0  C00F  F025         	movff	?_cmpSignal,main@i
   805  000AC4  C010  F026         	movff	?_cmpSignal+1,main@i+1
   806                           
   807                           ;main.c: 164: if(i == 1){
   808  000AC8  0425               	decf	main@i,w,c
   809  000ACA  1026               	iorwf	main@i+1,w,c
   810  000ACC  A4D8               	btfss	status,2,c
   811  000ACE  D03D               	goto	l1399
   812                           
   813                           ;main.c: 165: clearLCD();
   814  000AD0  EC8F  F007         	call	_clearLCD	;wreg free
   815                           
   816                           ;main.c: 166: set_line(0,3);
   817  000AD4  0E00               	movlw	0
   818  000AD6  6E13               	movwf	set_line@line+1,c
   819  000AD8  0E00               	movlw	0
   820  000ADA  6E12               	movwf	set_line@line,c
   821  000ADC  0E00               	movlw	0
   822  000ADE  6E15               	movwf	set_line@pos+1,c
   823  000AE0  0E03               	movlw	3
   824  000AE2  6E14               	movwf	set_line@pos,c
   825  000AE4  EC4F  F007         	call	_set_line	;wreg free
   826                           
   827                           ;main.c: 167: write_LCD("As senhas");
   828  000AE8  0E58               	movlw	low STR_6
   829  000AEA  6E12               	movwf	write_LCD@c,c
   830  000AEC  0E08               	movlw	high STR_6
   831  000AEE  6E13               	movwf	write_LCD@c+1,c
   832  000AF0  ECD2  F006         	call	_write_LCD	;wreg free
   833                           
   834                           ;main.c: 168: set_line(1,3);
   835  000AF4  0E00               	movlw	0
   836  000AF6  6E13               	movwf	set_line@line+1,c
   837  000AF8  0E01               	movlw	1
   838  000AFA  6E12               	movwf	set_line@line,c
   839  000AFC  0E00               	movlw	0
   840  000AFE  6E15               	movwf	set_line@pos+1,c
   841  000B00  0E03               	movlw	3
   842  000B02  6E14               	movwf	set_line@pos,c
   843  000B04  EC4F  F007         	call	_set_line	;wreg free
   844                           
   845                           ;main.c: 169: write_LCD("coincidem");
   846  000B08  0E43               	movlw	low (STR_9+4)
   847  000B0A  6E12               	movwf	write_LCD@c,c
   848  000B0C  0E08               	movlw	high (STR_9+4)
   849  000B0E  6E13               	movwf	write_LCD@c+1,c
   850  000B10  ECD2  F006         	call	_write_LCD	;wreg free
   851                           
   852                           ;main.c: 170: PORTCbits.RC2 = 1;
   853  000B14  8482               	bsf	3970,2,c	;volatile
   854                           
   855                           ;main.c: 171: _delay((unsigned long)((1000)*(16000000/4000.0)));
   856  000B16  0E15               	movlw	21
   857  000B18  6E20               	movwf	(??_main+1)& (0+255),c
   858  000B1A  0E4B               	movlw	75
   859  000B1C  6E1F               	movwf	??_main& (0+255),c
   860  000B1E  0EBE               	movlw	190
   861  000B20                     u547:
   862  000B20  2EE8               	decfsz	wreg,f,c
   863  000B22  D7FE               	bra	u547
   864  000B24  2E1F               	decfsz	??_main& (0+255),f,c
   865  000B26  D7FC               	bra	u547
   866  000B28  2E20               	decfsz	(??_main+1)& (0+255),f,c
   867  000B2A  D7FA               	bra	u547
   868  000B2C  D000               	nop2	
   869                           
   870                           ;main.c: 172: PORTCbits.RC2 = 0;
   871  000B2E  9482               	bcf	3970,2,c	;volatile
   872                           
   873                           ;main.c: 173: _delay((unsigned long)((1000)*(16000000/4000.0)));
   874  000B30  0E15               	movlw	21
   875  000B32  6E20               	movwf	(??_main+1)& (0+255),c
   876  000B34  0E4B               	movlw	75
   877  000B36  6E1F               	movwf	??_main& (0+255),c
   878  000B38  0EBE               	movlw	190
   879  000B3A                     u557:
   880  000B3A  2EE8               	decfsz	wreg,f,c
   881  000B3C  D7FE               	bra	u557
   882  000B3E  2E1F               	decfsz	??_main& (0+255),f,c
   883  000B40  D7FC               	bra	u557
   884  000B42  2E20               	decfsz	(??_main+1)& (0+255),f,c
   885  000B44  D7FA               	bra	u557
   886  000B46  D000               	nop2	
   887                           
   888                           ;main.c: 174: }
   889  000B48  D052               	goto	l1425
   890  000B4A                     l1399:
   891                           
   892                           ;main.c: 175: else{
   893                           ;main.c: 176: clearLCD();
   894  000B4A  EC8F  F007         	call	_clearLCD	;wreg free
   895                           
   896                           ;main.c: 177: set_line(0,3);
   897  000B4E  0E00               	movlw	0
   898  000B50  6E13               	movwf	set_line@line+1,c
   899  000B52  0E00               	movlw	0
   900  000B54  6E12               	movwf	set_line@line,c
   901  000B56  0E00               	movlw	0
   902  000B58  6E15               	movwf	set_line@pos+1,c
   903  000B5A  0E03               	movlw	3
   904  000B5C  6E14               	movwf	set_line@pos,c
   905  000B5E  EC4F  F007         	call	_set_line	;wreg free
   906                           
   907                           ;main.c: 178: write_LCD("As senhas");
   908  000B62  0E58               	movlw	low STR_6
   909  000B64  6E12               	movwf	write_LCD@c,c
   910  000B66  0E08               	movlw	high STR_6
   911  000B68  6E13               	movwf	write_LCD@c+1,c
   912  000B6A  ECD2  F006         	call	_write_LCD	;wreg free
   913                           
   914                           ;main.c: 179: set_line(1,2);
   915  000B6E  0E00               	movlw	0
   916  000B70  6E13               	movwf	set_line@line+1,c
   917  000B72  0E01               	movlw	1
   918  000B74  6E12               	movwf	set_line@line,c
   919  000B76  0E00               	movlw	0
   920  000B78  6E15               	movwf	set_line@pos+1,c
   921  000B7A  0E02               	movlw	2
   922  000B7C  6E14               	movwf	set_line@pos,c
   923  000B7E  EC4F  F007         	call	_set_line	;wreg free
   924                           
   925                           ;main.c: 180: write_LCD("não coincidem");
   926  000B82  0E3F               	movlw	low STR_9
   927  000B84  6E12               	movwf	write_LCD@c,c
   928  000B86  0E08               	movlw	high STR_9
   929  000B88  6E13               	movwf	write_LCD@c+1,c
   930  000B8A  ECD2  F006         	call	_write_LCD	;wreg free
   931                           
   932                           ;main.c: 181: PORTCbits.RC2 = 1;
   933  000B8E  8482               	bsf	3970,2,c	;volatile
   934                           
   935                           ;main.c: 182: _delay((unsigned long)((500)*(16000000/4000.0)));
   936  000B90  0E0B               	movlw	11
   937  000B92  6E20               	movwf	(??_main+1)& (0+255),c
   938  000B94  0E26               	movlw	38
   939  000B96  6E1F               	movwf	??_main& (0+255),c
   940  000B98  0E5E               	movlw	94
   941  000B9A                     u567:
   942  000B9A  2EE8               	decfsz	wreg,f,c
   943  000B9C  D7FE               	bra	u567
   944  000B9E  2E1F               	decfsz	??_main& (0+255),f,c
   945  000BA0  D7FC               	bra	u567
   946  000BA2  2E20               	decfsz	(??_main+1)& (0+255),f,c
   947  000BA4  D7FA               	bra	u567
   948                           
   949                           ;main.c: 183: PORTCbits.RC2 = 0;
   950  000BA6  9482               	bcf	3970,2,c	;volatile
   951                           
   952                           ;main.c: 184: _delay((unsigned long)((500)*(16000000/4000.0)));
   953  000BA8  0E0B               	movlw	11
   954  000BAA  6E20               	movwf	(??_main+1)& (0+255),c
   955  000BAC  0E26               	movlw	38
   956  000BAE  6E1F               	movwf	??_main& (0+255),c
   957  000BB0  0E5E               	movlw	94
   958  000BB2                     u577:
   959  000BB2  2EE8               	decfsz	wreg,f,c
   960  000BB4  D7FE               	bra	u577
   961  000BB6  2E1F               	decfsz	??_main& (0+255),f,c
   962  000BB8  D7FC               	bra	u577
   963  000BBA  2E20               	decfsz	(??_main+1)& (0+255),f,c
   964  000BBC  D7FA               	bra	u577
   965                           
   966                           ;main.c: 185: PORTCbits.RC2 = 1;
   967  000BBE  8482               	bsf	3970,2,c	;volatile
   968                           
   969                           ;main.c: 186: _delay((unsigned long)((500)*(16000000/4000.0)));
   970  000BC0  0E0B               	movlw	11
   971  000BC2  6E20               	movwf	(??_main+1)& (0+255),c
   972  000BC4  0E26               	movlw	38
   973  000BC6  6E1F               	movwf	??_main& (0+255),c
   974  000BC8  0E5E               	movlw	94
   975  000BCA                     u587:
   976  000BCA  2EE8               	decfsz	wreg,f,c
   977  000BCC  D7FE               	bra	u587
   978  000BCE  2E1F               	decfsz	??_main& (0+255),f,c
   979  000BD0  D7FC               	bra	u587
   980  000BD2  2E20               	decfsz	(??_main+1)& (0+255),f,c
   981  000BD4  D7FA               	bra	u587
   982                           
   983                           ;main.c: 187: PORTCbits.RC2 = 0;
   984  000BD6  9482               	bcf	3970,2,c	;volatile
   985                           
   986                           ;main.c: 188: _delay((unsigned long)((500)*(16000000/4000.0)));
   987  000BD8  0E0B               	movlw	11
   988  000BDA  6E20               	movwf	(??_main+1)& (0+255),c
   989  000BDC  0E26               	movlw	38
   990  000BDE  6E1F               	movwf	??_main& (0+255),c
   991  000BE0  0E5E               	movlw	94
   992  000BE2                     u597:
   993  000BE2  2EE8               	decfsz	wreg,f,c
   994  000BE4  D7FE               	bra	u597
   995  000BE6  2E1F               	decfsz	??_main& (0+255),f,c
   996  000BE8  D7FC               	bra	u597
   997  000BEA  2E20               	decfsz	(??_main+1)& (0+255),f,c
   998  000BEC  D7FA               	bra	u597
   999  000BEE                     l1425:
  1000                           
  1001                           ;main.c: 189: }
  1002                           ;main.c: 191: PORTCbits.RC2 = 0;
  1003  000BEE  9482               	bcf	3970,2,c	;volatile
  1004                           
  1005                           ;main.c: 193: i = 0;
  1006  000BF0  0E00               	movlw	0
  1007  000BF2  6E26               	movwf	main@i+1,c
  1008  000BF4  0E00               	movlw	0
  1009  000BF6  6E25               	movwf	main@i,c
  1010                           
  1011                           ;main.c: 194: if(button == 1){
  1012  000BF8  0427               	decf	_button,w,c
  1013  000BFA  1028               	iorwf	_button+1,w,c
  1014  000BFC  A4D8               	btfss	status,2,c
  1015  000BFE  D6E8               	goto	l1341
  1016                           
  1017                           ;main.c: 195: clearLCD();
  1018  000C00  EC8F  F007         	call	_clearLCD	;wreg free
  1019                           
  1020                           ;main.c: 196: write_LCD("Botão apertado");
  1021  000C04  0E22               	movlw	low STR_10
  1022  000C06  6E12               	movwf	write_LCD@c,c
  1023  000C08  0E08               	movlw	high STR_10
  1024  000C0A  6E13               	movwf	write_LCD@c+1,c
  1025  000C0C  ECD2  F006         	call	_write_LCD	;wreg free
  1026                           
  1027                           ;main.c: 197: _delay((unsigned long)((2000)*(16000000/4000.0)));
  1028  000C10  0E29               	movlw	41
  1029  000C12  6E20               	movwf	(??_main+1)& (0+255),c
  1030  000C14  0E96               	movlw	150
  1031  000C16  6E1F               	movwf	??_main& (0+255),c
  1032  000C18  0E7F               	movlw	127
  1033  000C1A                     u607:
  1034  000C1A  2EE8               	decfsz	wreg,f,c
  1035  000C1C  D7FE               	bra	u607
  1036  000C1E  2E1F               	decfsz	??_main& (0+255),f,c
  1037  000C20  D7FC               	bra	u607
  1038  000C22  2E20               	decfsz	(??_main+1)& (0+255),f,c
  1039  000C24  D7FA               	bra	u607
  1040  000C26  F000               	nop	
  1041                           
  1042                           ;main.c: 198: button = 0;
  1043  000C28  0E00               	movlw	0
  1044  000C2A  6E28               	movwf	_button+1,c
  1045  000C2C  0E00               	movlw	0
  1046  000C2E  6E27               	movwf	_button,c
  1047                           
  1048                           ;main.c: 199: }
  1049                           ;main.c: 201: }while(1);
  1050  000C30  D6CF               	goto	l1341
  1051  000C32                     __end_of_main:
  1052                           	opt stack 0
  1053                           tblptru	equ	0xFF8
  1054                           tblptrh	equ	0xFF7
  1055                           wreg	equ	0xFE8
  1056                           status	equ	0xFD8
  1057                           
  1058 ;; *************** function _write_LCD *****************
  1059 ;; Defined at:
  1060 ;;		line 59 in file "LCD.c"
  1061 ;; Parameters:    Size  Location     Type
  1062 ;;  c               2   17[COMRAM] PTR unsigned char 
  1063 ;;		 -> STR_10(15), STR_9(14), STR_8(10), STR_7(10), 
  1064 ;;		 -> STR_6(10), STR_5(14), STR_4(11), STR_3(8), 
  1065 ;;		 -> STR_2(17), STR_1(16), 
  1066 ;; Auto vars:     Size  Location     Type
  1067 ;;  i               2   21[COMRAM] int 
  1068 ;; Return value:  Size  Location     Type
  1069 ;;                  1    wreg      void 
  1070 ;; Registers used:
  1071 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1072 ;; Tracked objects:
  1073 ;;		On entry : 0/0
  1074 ;;		On exit  : 0/0
  1075 ;;		Unchanged: 0/0
  1076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1077 ;;      Params:         2       0       0       0       0       0       0       0       0
  1078 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1079 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1080 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1081 ;;Total ram usage:        6 bytes
  1082 ;; Hardware stack levels used:    1
  1083 ;; Hardware stack levels required when called:    3
  1084 ;; This function calls:
  1085 ;;		_send_msg
  1086 ;; This function is called by:
  1087 ;;		_main
  1088 ;; This function uses a non-reentrant model
  1089 ;;
  1090                           
  1091                           	psect	text1
  1092  000DA4                     __ptext1:
  1093                           	opt stack 0
  1094  000DA4                     _write_LCD:
  1095                           	opt stack 27
  1096                           
  1097                           ;LCD.c: 61: int i = 0;
  1098                           
  1099                           ;incstack = 0
  1100  000DA4  0E00               	movlw	0
  1101  000DA6  6E17               	movwf	write_LCD@i+1,c
  1102  000DA8  0E00               	movlw	0
  1103  000DAA  6E16               	movwf	write_LCD@i,c
  1104                           
  1105                           ;LCD.c: 62: for(; c[i] != '\0'; i++)
  1106  000DAC  D010               	goto	l1233
  1107  000DAE                     l1229:
  1108                           
  1109                           ;LCD.c: 63: send_msg(c[i]);
  1110  000DAE  5016               	movf	write_LCD@i,w,c
  1111  000DB0  2412               	addwf	write_LCD@c,w,c
  1112  000DB2  6E14               	movwf	??_write_LCD& (0+255),c
  1113  000DB4  5017               	movf	write_LCD@i+1,w,c
  1114  000DB6  2013               	addwfc	write_LCD@c+1,w,c
  1115  000DB8  6E15               	movwf	(??_write_LCD+1)& (0+255),c
  1116  000DBA  C014  FFF6         	movff	??_write_LCD,tblptrl
  1117  000DBE  C015  FFF7         	movff	??_write_LCD+1,tblptrh
  1118  000DC2                     	if	0	;tblptru may be non-zero
  1119  000DC2                     	endif
  1120  000DC2                     	if	0	;tblptru may be non-zero
  1121  000DC2                     	endif
  1122  000DC2  0008               	tblrd		*
  1123  000DC4  50F5               	movf	tablat,w,c
  1124  000DC6  EC13  F007         	call	_send_msg
  1125  000DCA  4A16               	infsnz	write_LCD@i,f,c
  1126  000DCC  2A17               	incf	write_LCD@i+1,f,c
  1127  000DCE                     l1233:
  1128  000DCE  5016               	movf	write_LCD@i,w,c
  1129  000DD0  2412               	addwf	write_LCD@c,w,c
  1130  000DD2  6E14               	movwf	??_write_LCD& (0+255),c
  1131  000DD4  5017               	movf	write_LCD@i+1,w,c
  1132  000DD6  2013               	addwfc	write_LCD@c+1,w,c
  1133  000DD8  6E15               	movwf	(??_write_LCD+1)& (0+255),c
  1134  000DDA  C014  FFF6         	movff	??_write_LCD,tblptrl
  1135  000DDE  C015  FFF7         	movff	??_write_LCD+1,tblptrh
  1136  000DE2                     	if	0	;tblptru may be non-zero
  1137  000DE2                     	endif
  1138  000DE2                     	if	0	;tblptru may be non-zero
  1139  000DE2                     	endif
  1140  000DE2  0008               	tblrd		*
  1141  000DE4  50F5               	movf	tablat,w,c
  1142  000DE6  0900               	iorlw	0
  1143  000DE8  B4D8               	btfsc	status,2,c
  1144  000DEA  0012               	return	
  1145  000DEC  D7E0               	goto	l1229
  1146  000DEE                     __end_of_write_LCD:
  1147                           	opt stack 0
  1148                           tblptru	equ	0xFF8
  1149                           tblptrh	equ	0xFF7
  1150                           tblptrl	equ	0xFF6
  1151                           tablat	equ	0xFF5
  1152                           wreg	equ	0xFE8
  1153                           status	equ	0xFD8
  1154                           
  1155 ;; *************** function _send_msg *****************
  1156 ;; Defined at:
  1157 ;;		line 35 in file "LCD.c"
  1158 ;; Parameters:    Size  Location     Type
  1159 ;;  msg             1    wreg     unsigned char 
  1160 ;; Auto vars:     Size  Location     Type
  1161 ;;  msg             1   16[COMRAM] unsigned char 
  1162 ;; Return value:  Size  Location     Type
  1163 ;;                  1    wreg      void 
  1164 ;; Registers used:
  1165 ;;		wreg, status,2, cstack
  1166 ;; Tracked objects:
  1167 ;;		On entry : 0/0
  1168 ;;		On exit  : 0/0
  1169 ;;		Unchanged: 0/0
  1170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1171 ;;      Params:         0       0       0       0       0       0       0       0       0
  1172 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1173 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1174 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1175 ;;Total ram usage:        2 bytes
  1176 ;; Hardware stack levels used:    1
  1177 ;; Hardware stack levels required when called:    2
  1178 ;; This function calls:
  1179 ;;		_ena_pulse
  1180 ;; This function is called by:
  1181 ;;		_write_LCD
  1182 ;;		_main
  1183 ;; This function uses a non-reentrant model
  1184 ;;
  1185                           
  1186                           	psect	text2
  1187  000E26                     __ptext2:
  1188                           	opt stack 0
  1189  000E26                     _send_msg:
  1190                           	opt stack 27
  1191                           
  1192                           ;incstack = 0
  1193                           ;send_msg@msg stored from wreg
  1194  000E26  6E11               	movwf	send_msg@msg,c
  1195                           
  1196                           ;LCD.c: 37: PORTD = msg;
  1197  000E28  C011  FF83         	movff	send_msg@msg,3971	;volatile
  1198                           
  1199                           ;LCD.c: 38: PORTBbits.RB3 = 1;
  1200  000E2C  8681               	bsf	3969,3,c	;volatile
  1201                           
  1202                           ;LCD.c: 39: _delay((unsigned long)((1)*(16000000/4000.0)));
  1203  000E2E  0E06               	movlw	6
  1204  000E30  6E10               	movwf	??_send_msg& (0+255),c
  1205  000E32  0E30               	movlw	48
  1206  000E34                     u617:
  1207  000E34  2EE8               	decfsz	wreg,f,c
  1208  000E36  D7FE               	bra	u617
  1209  000E38  2E10               	decfsz	??_send_msg& (0+255),f,c
  1210  000E3A  D7FC               	bra	u617
  1211  000E3C  D000               	nop2	
  1212                           
  1213                           ;LCD.c: 40: ena_pulse();
  1214  000E3E  ECF7  F006         	call	_ena_pulse	;wreg free
  1215                           
  1216                           ;LCD.c: 41: _delay((unsigned long)((1)*(16000000/4000.0)));
  1217  000E42  0E06               	movlw	6
  1218  000E44  6E10               	movwf	??_send_msg& (0+255),c
  1219  000E46  0E30               	movlw	48
  1220  000E48                     u627:
  1221  000E48  2EE8               	decfsz	wreg,f,c
  1222  000E4A  D7FE               	bra	u627
  1223  000E4C  2E10               	decfsz	??_send_msg& (0+255),f,c
  1224  000E4E  D7FC               	bra	u627
  1225  000E50  D000               	nop2	
  1226                           
  1227                           ;LCD.c: 42: PORTBbits.RB3 = 0;
  1228  000E52  9681               	bcf	3969,3,c	;volatile
  1229  000E54  0012               	return		;funcret
  1230  000E56                     __end_of_send_msg:
  1231                           	opt stack 0
  1232                           tblptru	equ	0xFF8
  1233                           tblptrh	equ	0xFF7
  1234                           tblptrl	equ	0xFF6
  1235                           tablat	equ	0xFF5
  1236                           wreg	equ	0xFE8
  1237                           status	equ	0xFD8
  1238                           
  1239 ;; *************** function _set_line *****************
  1240 ;; Defined at:
  1241 ;;		line 66 in file "LCD.c"
  1242 ;; Parameters:    Size  Location     Type
  1243 ;;  line            2   17[COMRAM] int 
  1244 ;;  pos             2   19[COMRAM] int 
  1245 ;; Auto vars:     Size  Location     Type
  1246 ;;  cursor          1   21[COMRAM] unsigned char 
  1247 ;; Return value:  Size  Location     Type
  1248 ;;                  1    wreg      void 
  1249 ;; Registers used:
  1250 ;;		wreg, status,2, status,0, cstack
  1251 ;; Tracked objects:
  1252 ;;		On entry : 0/0
  1253 ;;		On exit  : 0/0
  1254 ;;		Unchanged: 0/0
  1255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1256 ;;      Params:         4       0       0       0       0       0       0       0       0
  1257 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1258 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1259 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1260 ;;Total ram usage:        5 bytes
  1261 ;; Hardware stack levels used:    1
  1262 ;; Hardware stack levels required when called:    3
  1263 ;; This function calls:
  1264 ;;		_send_cfg
  1265 ;; This function is called by:
  1266 ;;		_main
  1267 ;; This function uses a non-reentrant model
  1268 ;;
  1269                           
  1270                           	psect	text3
  1271  000E9E                     __ptext3:
  1272                           	opt stack 0
  1273  000E9E                     _set_line:
  1274                           	opt stack 27
  1275                           
  1276                           ;LCD.c: 68: char cursor;
  1277                           ;LCD.c: 69: if(line == 0)
  1278                           
  1279                           ;incstack = 0
  1280  000E9E  5012               	movf	set_line@line,w,c
  1281  000EA0  1013               	iorwf	set_line@line+1,w,c
  1282  000EA2  A4D8               	btfss	status,2,c
  1283  000EA4  D003               	goto	l1239
  1284                           
  1285                           ;LCD.c: 70: cursor = 0x80 + pos;
  1286  000EA6  5014               	movf	set_line@pos,w,c
  1287  000EA8  0F80               	addlw	128
  1288  000EAA  D002               	goto	L1
  1289  000EAC                     l1239:
  1290                           
  1291                           ;LCD.c: 71: else
  1292                           ;LCD.c: 72: cursor = 0xC0 + pos;
  1293  000EAC  5014               	movf	set_line@pos,w,c
  1294  000EAE  0FC0               	addlw	192
  1295  000EB0                     L1:
  1296  000EB0  6E16               	movwf	set_line@cursor,c
  1297                           
  1298                           ;LCD.c: 73: send_cfg(cursor);
  1299  000EB2  5016               	movf	set_line@cursor,w,c
  1300  000EB4  EC40  F007         	call	_send_cfg
  1301  000EB8  0012               	return		;funcret
  1302  000EBA                     __end_of_set_line:
  1303                           	opt stack 0
  1304                           tblptru	equ	0xFF8
  1305                           tblptrh	equ	0xFF7
  1306                           tblptrl	equ	0xFF6
  1307                           tablat	equ	0xFF5
  1308                           wreg	equ	0xFE8
  1309                           status	equ	0xFD8
  1310                           
  1311 ;; *************** function _readSignal *****************
  1312 ;; Defined at:
  1313 ;;		line 13 in file "ReadSignal.c"
  1314 ;; Parameters:    Size  Location     Type
  1315 ;;  signal          2   18[COMRAM] PTR unsigned char 
  1316 ;;		 -> main@toc(2), main@pass(2), 
  1317 ;;  pos             2   20[COMRAM] int 
  1318 ;; Auto vars:     Size  Location     Type
  1319 ;;  j               2   28[COMRAM] int 
  1320 ;;  i               2   26[COMRAM] int 
  1321 ;;  limite          2   24[COMRAM] int 
  1322 ;; Return value:  Size  Location     Type
  1323 ;;                  1    wreg      void 
  1324 ;; Registers used:
  1325 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1326 ;; Tracked objects:
  1327 ;;		On entry : 0/0
  1328 ;;		On exit  : 0/0
  1329 ;;		Unchanged: 0/0
  1330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1331 ;;      Params:         4       0       0       0       0       0       0       0       0
  1332 ;;      Locals:         6       0       0       0       0       0       0       0       0
  1333 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1334 ;;      Totals:        12       0       0       0       0       0       0       0       0
  1335 ;;Total ram usage:       12 bytes
  1336 ;; Hardware stack levels used:    1
  1337 ;; Hardware stack levels required when called:    2
  1338 ;; This function calls:
  1339 ;;		_ADCRead
  1340 ;; This function is called by:
  1341 ;;		_main
  1342 ;; This function uses a non-reentrant model
  1343 ;;
  1344                           
  1345                           	psect	text4
  1346  000C32                     __ptext4:
  1347                           	opt stack 0
  1348  000C32                     _readSignal:
  1349                           	opt stack 28
  1350                           
  1351                           ;ReadSignal.c: 15: int j = 0;
  1352                           
  1353                           ;incstack = 0
  1354  000C32  0E00               	movlw	0
  1355  000C34  6E1E               	movwf	readSignal@j+1,c
  1356  000C36  0E00               	movlw	0
  1357  000C38  6E1D               	movwf	readSignal@j,c
  1358                           
  1359                           ;ReadSignal.c: 16: if(pos == 1)
  1360  000C3A  0415               	decf	readSignal@pos,w,c
  1361  000C3C  1016               	iorwf	readSignal@pos+1,w,c
  1362  000C3E  A4D8               	btfss	status,2,c
  1363  000C40  D004               	goto	l1249
  1364                           
  1365                           ;ReadSignal.c: 17: j = 4;
  1366  000C42  0E00               	movlw	0
  1367  000C44  6E1E               	movwf	readSignal@j+1,c
  1368  000C46  0E04               	movlw	4
  1369  000C48  6E1D               	movwf	readSignal@j,c
  1370  000C4A                     l1249:
  1371                           
  1372                           ;ReadSignal.c: 18: int limite;
  1373                           ;ReadSignal.c: 19: limite = j + 4;
  1374  000C4A  0E04               	movlw	4
  1375  000C4C  241D               	addwf	readSignal@j,w,c
  1376  000C4E  6E19               	movwf	readSignal@limite,c
  1377  000C50  0E00               	movlw	0
  1378  000C52  201E               	addwfc	readSignal@j+1,w,c
  1379  000C54  6E1A               	movwf	readSignal@limite+1,c
  1380                           
  1381                           ;ReadSignal.c: 20: int i;
  1382                           ;ReadSignal.c: 22: while(j < limite){
  1383  000C56  D033               	goto	l208
  1384  000C58                     l1251:
  1385                           
  1386                           ;ReadSignal.c: 24: i = 0;
  1387  000C58  0E00               	movlw	0
  1388  000C5A  6E1C               	movwf	readSignal@i+1,c
  1389  000C5C  0E00               	movlw	0
  1390  000C5E  6E1B               	movwf	readSignal@i,c
  1391                           
  1392                           ;ReadSignal.c: 25: while(i < 500){
  1393  000C60  D022               	goto	l1261
  1394  000C62                     l1253:
  1395                           
  1396                           ;ReadSignal.c: 26: if(ADCRead() > 9){
  1397  000C62  EC5D  F007         	call	_ADCRead	;wreg free
  1398  000C66  5010               	movf	?_ADCRead+1,w,c
  1399  000C68  E104               	bnz	u350
  1400  000C6A  0E0A               	movlw	10
  1401  000C6C  5C0F               	subwf	?_ADCRead,w,c
  1402  000C6E  A0D8               	btfss	status,0,c
  1403  000C70  D010               	goto	l1257
  1404  000C72                     u350:
  1405                           
  1406                           ;ReadSignal.c: 27: *signal |= (0x03<<j);
  1407  000C72  C01D  F017         	movff	readSignal@j,??_readSignal
  1408  000C76  0E03               	movlw	3
  1409  000C78  6E18               	movwf	(??_readSignal+1)& (0+255),c
  1410  000C7A  2A17               	incf	??_readSignal,f,c
  1411  000C7C  D002               	goto	u364
  1412  000C7E                     u365:
  1413  000C7E  90D8               	bcf	status,0,c
  1414  000C80  3618               	rlcf	??_readSignal+1,f,c
  1415  000C82                     u364:
  1416  000C82  2E17               	decfsz	??_readSignal,f,c
  1417  000C84  D7FC               	goto	u365
  1418  000C86  C013  FFD9         	movff	readSignal@signal,fsr2l
  1419  000C8A  C014  FFDA         	movff	readSignal@signal+1,fsr2h
  1420  000C8E  5018               	movf	??_readSignal+1,w,c
  1421  000C90  12DF               	iorwf	indf2,f,c
  1422  000C92                     l1257:
  1423                           
  1424                           ;ReadSignal.c: 28: }
  1425                           ;ReadSignal.c: 29: _delay((unsigned long)((1)*(16000000/4000.0)));
  1426  000C92  0E06               	movlw	6
  1427  000C94  6E17               	movwf	??_readSignal& (0+255),c
  1428  000C96  0E30               	movlw	48
  1429  000C98                     u637:
  1430  000C98  2EE8               	decfsz	wreg,f,c
  1431  000C9A  D7FE               	bra	u637
  1432  000C9C  2E17               	decfsz	??_readSignal& (0+255),f,c
  1433  000C9E  D7FC               	bra	u637
  1434  000CA0  D000               	nop2	
  1435                           
  1436                           ;ReadSignal.c: 30: i++;
  1437  000CA2  4A1B               	infsnz	readSignal@i,f,c
  1438  000CA4  2A1C               	incf	readSignal@i+1,f,c
  1439  000CA6                     l1261:
  1440  000CA6  BE1C               	btfsc	readSignal@i+1,7,c
  1441  000CA8  D7DC               	goto	l1253
  1442  000CAA  0EF4               	movlw	244
  1443  000CAC  5C1B               	subwf	readSignal@i,w,c
  1444  000CAE  0E01               	movlw	1
  1445  000CB0  581C               	subwfb	readSignal@i+1,w,c
  1446  000CB2  A0D8               	btfss	status,0,c
  1447  000CB4  D7D6               	goto	l1253
  1448                           
  1449                           ;ReadSignal.c: 31: }
  1450                           ;ReadSignal.c: 32: j+=2;
  1451  000CB6  0E02               	movlw	2
  1452  000CB8  261D               	addwf	readSignal@j,f,c
  1453  000CBA  0E00               	movlw	0
  1454  000CBC  221E               	addwfc	readSignal@j+1,f,c
  1455  000CBE                     l208:
  1456  000CBE  5019               	movf	readSignal@limite,w,c
  1457  000CC0  5C1D               	subwf	readSignal@j,w,c
  1458  000CC2  501E               	movf	readSignal@j+1,w,c
  1459  000CC4  0A80               	xorlw	128
  1460  000CC6  6E17               	movwf	??_readSignal& (0+255),c
  1461  000CC8  501A               	movf	readSignal@limite+1,w,c
  1462  000CCA  0A80               	xorlw	128
  1463  000CCC  5817               	subwfb	??_readSignal& (0+255),w,c
  1464  000CCE  B0D8               	btfsc	status,0,c
  1465  000CD0  0012               	return	
  1466  000CD2  D7C2               	goto	l1251
  1467  000CD4                     __end_of_readSignal:
  1468                           	opt stack 0
  1469                           tblptru	equ	0xFF8
  1470                           tblptrh	equ	0xFF7
  1471                           tblptrl	equ	0xFF6
  1472                           tablat	equ	0xFF5
  1473                           wreg	equ	0xFE8
  1474                           indf2	equ	0xFDF
  1475                           fsr2h	equ	0xFDA
  1476                           fsr2l	equ	0xFD9
  1477                           status	equ	0xFD8
  1478                           
  1479 ;; *************** function _ADCRead *****************
  1480 ;; Defined at:
  1481 ;;		line 19 in file "ADC.c"
  1482 ;; Parameters:    Size  Location     Type
  1483 ;;		None
  1484 ;; Auto vars:     Size  Location     Type
  1485 ;;  value           2   16[COMRAM] unsigned int 
  1486 ;; Return value:  Size  Location     Type
  1487 ;;                  2   14[COMRAM] unsigned int 
  1488 ;; Registers used:
  1489 ;;		None
  1490 ;; Tracked objects:
  1491 ;;		On entry : 0/0
  1492 ;;		On exit  : 0/0
  1493 ;;		Unchanged: 0/0
  1494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1495 ;;      Params:         2       0       0       0       0       0       0       0       0
  1496 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1497 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1498 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1499 ;;Total ram usage:        4 bytes
  1500 ;; Hardware stack levels used:    1
  1501 ;; Hardware stack levels required when called:    1
  1502 ;; This function calls:
  1503 ;;		Nothing
  1504 ;; This function is called by:
  1505 ;;		_readSignal
  1506 ;; This function uses a non-reentrant model
  1507 ;;
  1508                           
  1509                           	psect	text5
  1510  000EBA                     __ptext5:
  1511                           	opt stack 0
  1512  000EBA                     _ADCRead:
  1513                           	opt stack 28
  1514                           
  1515                           ;ADC.c: 20: unsigned int value;
  1516                           ;ADC.c: 21: ADCON0bits.GO = 1;
  1517                           
  1518                           ;incstack = 0
  1519  000EBA  82C2               	bsf	4034,1,c	;volatile
  1520  000EBC                     l197:
  1521  000EBC  B2C2               	btfsc	4034,1,c	;volatile
  1522  000EBE  D7FE               	goto	l197
  1523                           
  1524                           ;ADC.c: 24: value = ADRES;
  1525  000EC0  CFC3 F011          	movff	4035,ADCRead@value	;volatile
  1526  000EC4  CFC4 F012          	movff	4036,ADCRead@value+1	;volatile
  1527                           
  1528                           ;ADC.c: 26: return value;
  1529  000EC8  C011  F00F         	movff	ADCRead@value,?_ADCRead
  1530  000ECC  C012  F010         	movff	ADCRead@value+1,?_ADCRead+1
  1531  000ED0  0012               	return		;funcret
  1532  000ED2                     __end_of_ADCRead:
  1533                           	opt stack 0
  1534                           tblptru	equ	0xFF8
  1535                           tblptrh	equ	0xFF7
  1536                           tblptrl	equ	0xFF6
  1537                           tablat	equ	0xFF5
  1538                           wreg	equ	0xFE8
  1539                           indf2	equ	0xFDF
  1540                           fsr2h	equ	0xFDA
  1541                           fsr2l	equ	0xFD9
  1542                           status	equ	0xFD8
  1543                           
  1544 ;; *************** function _init_UART *****************
  1545 ;; Defined at:
  1546 ;;		line 10 in file "USART.c"
  1547 ;; Parameters:    Size  Location     Type
  1548 ;;		None
  1549 ;; Auto vars:     Size  Location     Type
  1550 ;;		None
  1551 ;; Return value:  Size  Location     Type
  1552 ;;                  1    wreg      void 
  1553 ;; Registers used:
  1554 ;;		wreg, status,2
  1555 ;; Tracked objects:
  1556 ;;		On entry : 0/0
  1557 ;;		On exit  : 0/0
  1558 ;;		Unchanged: 0/0
  1559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1560 ;;      Params:         0       0       0       0       0       0       0       0       0
  1561 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1562 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1563 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1564 ;;Total ram usage:        0 bytes
  1565 ;; Hardware stack levels used:    1
  1566 ;; Hardware stack levels required when called:    1
  1567 ;; This function calls:
  1568 ;;		Nothing
  1569 ;; This function is called by:
  1570 ;;		_main
  1571 ;; This function uses a non-reentrant model
  1572 ;;
  1573                           
  1574                           	psect	text6
  1575  000EE8                     __ptext6:
  1576                           	opt stack 0
  1577  000EE8                     _init_UART:
  1578                           	opt stack 29
  1579                           
  1580                           ;USART.c: 12: SPBRG = 12;
  1581                           
  1582                           ;incstack = 0
  1583  000EE8  0E0C               	movlw	12
  1584  000EEA  6EAF               	movwf	4015,c	;volatile
  1585                           
  1586                           ;USART.c: 13: BRGH = 0;
  1587  000EEC  94AC               	bcf	4012,2,c	;volatile
  1588                           
  1589                           ;USART.c: 14: SYNC = 0;
  1590  000EEE  98AC               	bcf	4012,4,c	;volatile
  1591                           
  1592                           ;USART.c: 15: SPEN = 1;
  1593  000EF0  8EAB               	bsf	4011,7,c	;volatile
  1594                           
  1595                           ;USART.c: 16: TRISC7 = 1;
  1596  000EF2  8E94               	bsf	3988,7,c	;volatile
  1597                           
  1598                           ;USART.c: 17: TRISC6 = 1;
  1599  000EF4  8C94               	bsf	3988,6,c	;volatile
  1600                           
  1601                           ;USART.c: 18: CREN = 1;
  1602  000EF6  88AB               	bsf	4011,4,c	;volatile
  1603                           
  1604                           ;USART.c: 19: TXEN = 1;
  1605  000EF8  8AAC               	bsf	4012,5,c	;volatile
  1606  000EFA  0012               	return		;funcret
  1607  000EFC                     __end_of_init_UART:
  1608                           	opt stack 0
  1609                           tblptru	equ	0xFF8
  1610                           tblptrh	equ	0xFF7
  1611                           tblptrl	equ	0xFF6
  1612                           tablat	equ	0xFF5
  1613                           wreg	equ	0xFE8
  1614                           indf2	equ	0xFDF
  1615                           fsr2h	equ	0xFDA
  1616                           fsr2l	equ	0xFD9
  1617                           status	equ	0xFD8
  1618                           
  1619 ;; *************** function _init_LCD *****************
  1620 ;; Defined at:
  1621 ;;		line 45 in file "LCD.c"
  1622 ;; Parameters:    Size  Location     Type
  1623 ;;		None
  1624 ;; Auto vars:     Size  Location     Type
  1625 ;;		None
  1626 ;; Return value:  Size  Location     Type
  1627 ;;                  1    wreg      void 
  1628 ;; Registers used:
  1629 ;;		wreg, status,2, cstack
  1630 ;; Tracked objects:
  1631 ;;		On entry : 0/0
  1632 ;;		On exit  : 0/0
  1633 ;;		Unchanged: 0/0
  1634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1635 ;;      Params:         0       0       0       0       0       0       0       0       0
  1636 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1637 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1638 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1639 ;;Total ram usage:        0 bytes
  1640 ;; Hardware stack levels used:    1
  1641 ;; Hardware stack levels required when called:    3
  1642 ;; This function calls:
  1643 ;;		_send_cfg
  1644 ;; This function is called by:
  1645 ;;		_main
  1646 ;; This function uses a non-reentrant model
  1647 ;;
  1648                           
  1649                           	psect	text7
  1650  000E56                     __ptext7:
  1651                           	opt stack 0
  1652  000E56                     _init_LCD:
  1653                           	opt stack 27
  1654                           
  1655                           ;LCD.c: 47: TRISB = 0x04;
  1656                           
  1657                           ;incstack = 0
  1658  000E56  0E04               	movlw	4
  1659  000E58  6E93               	movwf	3987,c	;volatile
  1660                           
  1661                           ;LCD.c: 48: TRISD = 0x00;
  1662  000E5A  0E00               	movlw	0
  1663  000E5C  6E95               	movwf	3989,c	;volatile
  1664                           
  1665                           ;LCD.c: 49: TRISE = 0x00;
  1666  000E5E  0E00               	movlw	0
  1667  000E60  6E96               	movwf	3990,c	;volatile
  1668                           
  1669                           ;LCD.c: 50: PORTD = 0x00;
  1670  000E62  0E00               	movlw	0
  1671  000E64  6E83               	movwf	3971,c	;volatile
  1672                           
  1673                           ;LCD.c: 52: send_cfg(0x01);
  1674  000E66  0E01               	movlw	1
  1675  000E68  EC40  F007         	call	_send_cfg
  1676                           
  1677                           ;LCD.c: 53: send_cfg(0x38);
  1678  000E6C  0E38               	movlw	56
  1679  000E6E  EC40  F007         	call	_send_cfg
  1680                           
  1681                           ;LCD.c: 54: send_cfg(0x80);
  1682  000E72  0E80               	movlw	128
  1683  000E74  EC40  F007         	call	_send_cfg
  1684                           
  1685                           ;LCD.c: 55: send_cfg(0x0F);
  1686  000E78  0E0F               	movlw	15
  1687  000E7A  EC40  F007         	call	_send_cfg
  1688  000E7E  0012               	return		;funcret
  1689  000E80                     __end_of_init_LCD:
  1690                           	opt stack 0
  1691                           tblptru	equ	0xFF8
  1692                           tblptrh	equ	0xFF7
  1693                           tblptrl	equ	0xFF6
  1694                           tablat	equ	0xFF5
  1695                           wreg	equ	0xFE8
  1696                           indf2	equ	0xFDF
  1697                           fsr2h	equ	0xFDA
  1698                           fsr2l	equ	0xFD9
  1699                           status	equ	0xFD8
  1700                           
  1701 ;; *************** function _initINT2 *****************
  1702 ;; Defined at:
  1703 ;;		line 40 in file "Interrupt.c"
  1704 ;; Parameters:    Size  Location     Type
  1705 ;;		None
  1706 ;; Auto vars:     Size  Location     Type
  1707 ;;		None
  1708 ;; Return value:  Size  Location     Type
  1709 ;;                  1    wreg      void 
  1710 ;; Registers used:
  1711 ;;		None
  1712 ;; Tracked objects:
  1713 ;;		On entry : 0/0
  1714 ;;		On exit  : 0/0
  1715 ;;		Unchanged: 0/0
  1716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1717 ;;      Params:         0       0       0       0       0       0       0       0       0
  1718 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1719 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1720 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1721 ;;Total ram usage:        0 bytes
  1722 ;; Hardware stack levels used:    1
  1723 ;; Hardware stack levels required when called:    1
  1724 ;; This function calls:
  1725 ;;		Nothing
  1726 ;; This function is called by:
  1727 ;;		_main
  1728 ;; This function uses a non-reentrant model
  1729 ;;
  1730                           
  1731                           	psect	text8
  1732  000F0E                     __ptext8:
  1733                           	opt stack 0
  1734  000F0E                     _initINT2:
  1735                           	opt stack 29
  1736                           
  1737                           ;Interrupt.c: 42: INTCONbits.GIE = 0;
  1738                           
  1739                           ;incstack = 0
  1740  000F0E  9EF2               	bcf	intcon,7,c	;volatile
  1741                           
  1742                           ;Interrupt.c: 43: INTCONbits.PEIE = 0;
  1743  000F10  9CF2               	bcf	intcon,6,c	;volatile
  1744                           
  1745                           ;Interrupt.c: 44: TRISBbits.RB2 = 1;
  1746  000F12  8493               	bsf	3987,2,c	;volatile
  1747                           
  1748                           ;Interrupt.c: 45: INTCON2bits.INTEDG0 = 1;
  1749  000F14  8CF1               	bsf	intcon2,6,c	;volatile
  1750                           
  1751                           ;Interrupt.c: 46: INTCON3bits.INT2IF = 0;
  1752  000F16  92F0               	bcf	intcon3,1,c	;volatile
  1753                           
  1754                           ;Interrupt.c: 47: INTCON3bits.INT2IE = 1;
  1755  000F18  88F0               	bsf	intcon3,4,c	;volatile
  1756                           
  1757                           ;Interrupt.c: 48: INTCONbits.GIE = 1;
  1758  000F1A  8EF2               	bsf	intcon,7,c	;volatile
  1759  000F1C  0012               	return		;funcret
  1760  000F1E                     __end_of_initINT2:
  1761                           	opt stack 0
  1762                           tblptru	equ	0xFF8
  1763                           tblptrh	equ	0xFF7
  1764                           tblptrl	equ	0xFF6
  1765                           tablat	equ	0xFF5
  1766                           intcon	equ	0xFF2
  1767                           intcon2	equ	0xFF1
  1768                           intcon3	equ	0xFF0
  1769                           wreg	equ	0xFE8
  1770                           indf2	equ	0xFDF
  1771                           fsr2h	equ	0xFDA
  1772                           fsr2l	equ	0xFD9
  1773                           status	equ	0xFD8
  1774                           
  1775 ;; *************** function _cmpSignal *****************
  1776 ;; Defined at:
  1777 ;;		line 36 in file "ReadSignal.c"
  1778 ;; Parameters:    Size  Location     Type
  1779 ;;  pass            2   14[COMRAM] PTR unsigned char 
  1780 ;;		 -> main@pass(2), 
  1781 ;;  toc             2   16[COMRAM] PTR unsigned char 
  1782 ;;		 -> main@toc(2), 
  1783 ;; Auto vars:     Size  Location     Type
  1784 ;;		None
  1785 ;; Return value:  Size  Location     Type
  1786 ;;                  2   14[COMRAM] int 
  1787 ;; Registers used:
  1788 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  1789 ;; Tracked objects:
  1790 ;;		On entry : 0/0
  1791 ;;		On exit  : 0/0
  1792 ;;		Unchanged: 0/0
  1793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1794 ;;      Params:         4       0       0       0       0       0       0       0       0
  1795 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1796 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1797 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1798 ;;Total ram usage:        6 bytes
  1799 ;; Hardware stack levels used:    1
  1800 ;; Hardware stack levels required when called:    1
  1801 ;; This function calls:
  1802 ;;		Nothing
  1803 ;; This function is called by:
  1804 ;;		_main
  1805 ;; This function uses a non-reentrant model
  1806 ;;
  1807                           
  1808                           	psect	text9
  1809  000D58                     __ptext9:
  1810                           	opt stack 0
  1811  000D58                     _cmpSignal:
  1812                           	opt stack 29
  1813                           
  1814                           ;ReadSignal.c: 38: if(pass[0] == toc[0] && pass[1] == toc[1])
  1815                           
  1816                           ;incstack = 0
  1817  000D58  C011  FFD9         	movff	cmpSignal@toc,fsr2l
  1818  000D5C  C012  FFDA         	movff	cmpSignal@toc+1,fsr2h
  1819  000D60  C00F  FFE1         	movff	cmpSignal@pass,fsr1l
  1820  000D64  C010  FFE2         	movff	cmpSignal@pass+1,fsr1h
  1821  000D68  50DE               	movf	postinc2,w,c
  1822  000D6A  18E6               	xorwf	postinc1,w,c
  1823  000D6C  A4D8               	btfss	status,2,c
  1824  000D6E  D015               	goto	l1273
  1825  000D70  EE20 F001          	lfsr	2,1
  1826  000D74  5011               	movf	cmpSignal@toc,w,c
  1827  000D76  26D9               	addwf	fsr2l,f,c
  1828  000D78  5012               	movf	cmpSignal@toc+1,w,c
  1829  000D7A  22DA               	addwfc	fsr2h,f,c
  1830  000D7C  EE10 F001          	lfsr	1,1
  1831  000D80  500F               	movf	cmpSignal@pass,w,c
  1832  000D82  26E1               	addwf	fsr1l,f,c
  1833  000D84  5010               	movf	cmpSignal@pass+1,w,c
  1834  000D86  22E2               	addwfc	fsr1h,f,c
  1835  000D88  50DE               	movf	postinc2,w,c
  1836  000D8A  18E6               	xorwf	postinc1,w,c
  1837  000D8C  A4D8               	btfss	status,2,c
  1838  000D8E  D005               	goto	l1273
  1839                           
  1840                           ;ReadSignal.c: 39: return 1;
  1841  000D90  0E00               	movlw	0
  1842  000D92  6E10               	movwf	?_cmpSignal+1,c
  1843  000D94  0E01               	movlw	1
  1844  000D96  6E0F               	movwf	?_cmpSignal,c
  1845  000D98  0012               	return	
  1846  000D9A                     l1273:
  1847                           
  1848                           ;ReadSignal.c: 40: return 0;
  1849  000D9A  0E00               	movlw	0
  1850  000D9C  6E10               	movwf	?_cmpSignal+1,c
  1851  000D9E  0E00               	movlw	0
  1852  000DA0  6E0F               	movwf	?_cmpSignal,c
  1853  000DA2  0012               	return	
  1854  000DA4                     __end_of_cmpSignal:
  1855                           	opt stack 0
  1856                           tblptru	equ	0xFF8
  1857                           tblptrh	equ	0xFF7
  1858                           tblptrl	equ	0xFF6
  1859                           tablat	equ	0xFF5
  1860                           intcon	equ	0xFF2
  1861                           intcon2	equ	0xFF1
  1862                           intcon3	equ	0xFF0
  1863                           wreg	equ	0xFE8
  1864                           postinc1	equ	0xFE6
  1865                           fsr1h	equ	0xFE2
  1866                           fsr1l	equ	0xFE1
  1867                           indf2	equ	0xFDF
  1868                           postinc2	equ	0xFDE
  1869                           fsr2h	equ	0xFDA
  1870                           fsr2l	equ	0xFD9
  1871                           status	equ	0xFD8
  1872                           
  1873 ;; *************** function _clearLCD *****************
  1874 ;; Defined at:
  1875 ;;		line 31 in file "LCD.c"
  1876 ;; Parameters:    Size  Location     Type
  1877 ;;		None
  1878 ;; Auto vars:     Size  Location     Type
  1879 ;;		None
  1880 ;; Return value:  Size  Location     Type
  1881 ;;                  1    wreg      void 
  1882 ;; Registers used:
  1883 ;;		wreg, cstack
  1884 ;; Tracked objects:
  1885 ;;		On entry : 0/0
  1886 ;;		On exit  : 0/0
  1887 ;;		Unchanged: 0/0
  1888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1889 ;;      Params:         0       0       0       0       0       0       0       0       0
  1890 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1891 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1892 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1893 ;;Total ram usage:        0 bytes
  1894 ;; Hardware stack levels used:    1
  1895 ;; Hardware stack levels required when called:    3
  1896 ;; This function calls:
  1897 ;;		_send_cfg
  1898 ;; This function is called by:
  1899 ;;		_main
  1900 ;; This function uses a non-reentrant model
  1901 ;;
  1902                           
  1903                           	psect	text10
  1904  000F1E                     __ptext10:
  1905                           	opt stack 0
  1906  000F1E                     _clearLCD:
  1907                           	opt stack 27
  1908                           
  1909                           ;LCD.c: 32: send_cfg(0x01);
  1910                           
  1911                           ;incstack = 0
  1912  000F1E  0E01               	movlw	1
  1913  000F20  EC40  F007         	call	_send_cfg
  1914  000F24  0012               	return		;funcret
  1915  000F26                     __end_of_clearLCD:
  1916                           	opt stack 0
  1917                           tblptru	equ	0xFF8
  1918                           tblptrh	equ	0xFF7
  1919                           tblptrl	equ	0xFF6
  1920                           tablat	equ	0xFF5
  1921                           intcon	equ	0xFF2
  1922                           intcon2	equ	0xFF1
  1923                           intcon3	equ	0xFF0
  1924                           wreg	equ	0xFE8
  1925                           postinc1	equ	0xFE6
  1926                           fsr1h	equ	0xFE2
  1927                           fsr1l	equ	0xFE1
  1928                           indf2	equ	0xFDF
  1929                           postinc2	equ	0xFDE
  1930                           fsr2h	equ	0xFDA
  1931                           fsr2l	equ	0xFD9
  1932                           status	equ	0xFD8
  1933                           
  1934 ;; *************** function _send_cfg *****************
  1935 ;; Defined at:
  1936 ;;		line 22 in file "LCD.c"
  1937 ;; Parameters:    Size  Location     Type
  1938 ;;  cmd             1    wreg     unsigned char 
  1939 ;; Auto vars:     Size  Location     Type
  1940 ;;  cmd             1   16[COMRAM] unsigned char 
  1941 ;; Return value:  Size  Location     Type
  1942 ;;                  1    wreg      void 
  1943 ;; Registers used:
  1944 ;;		wreg, cstack
  1945 ;; Tracked objects:
  1946 ;;		On entry : 0/0
  1947 ;;		On exit  : 0/0
  1948 ;;		Unchanged: 0/0
  1949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1950 ;;      Params:         0       0       0       0       0       0       0       0       0
  1951 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1952 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1953 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1954 ;;Total ram usage:        2 bytes
  1955 ;; Hardware stack levels used:    1
  1956 ;; Hardware stack levels required when called:    2
  1957 ;; This function calls:
  1958 ;;		_ena_pulse
  1959 ;; This function is called by:
  1960 ;;		_clearLCD
  1961 ;;		_init_LCD
  1962 ;;		_set_line
  1963 ;; This function uses a non-reentrant model
  1964 ;;
  1965                           
  1966                           	psect	text11
  1967  000E80                     __ptext11:
  1968                           	opt stack 0
  1969  000E80                     _send_cfg:
  1970                           	opt stack 27
  1971                           
  1972                           ;incstack = 0
  1973                           ;send_cfg@cmd stored from wreg
  1974  000E80  6E11               	movwf	send_cfg@cmd,c
  1975                           
  1976                           ;LCD.c: 24: PORTD = cmd;
  1977  000E82  C011  FF83         	movff	send_cfg@cmd,3971	;volatile
  1978                           
  1979                           ;LCD.c: 25: PORTBbits.RB3 = 0;
  1980  000E86  9681               	bcf	3969,3,c	;volatile
  1981                           
  1982                           ;LCD.c: 26: ena_pulse();
  1983  000E88  ECF7  F006         	call	_ena_pulse	;wreg free
  1984                           
  1985                           ;LCD.c: 27: _delay((unsigned long)((1)*(16000000/4000.0)));
  1986  000E8C  0E06               	movlw	6
  1987  000E8E  6E10               	movwf	??_send_cfg& (0+255),c
  1988  000E90  0E30               	movlw	48
  1989  000E92                     u647:
  1990  000E92  2EE8               	decfsz	wreg,f,c
  1991  000E94  D7FE               	bra	u647
  1992  000E96  2E10               	decfsz	??_send_cfg& (0+255),f,c
  1993  000E98  D7FC               	bra	u647
  1994  000E9A  D000               	nop2	
  1995  000E9C  0012               	return		;funcret
  1996  000E9E                     __end_of_send_cfg:
  1997                           	opt stack 0
  1998                           tblptru	equ	0xFF8
  1999                           tblptrh	equ	0xFF7
  2000                           tblptrl	equ	0xFF6
  2001                           tablat	equ	0xFF5
  2002                           intcon	equ	0xFF2
  2003                           intcon2	equ	0xFF1
  2004                           intcon3	equ	0xFF0
  2005                           wreg	equ	0xFE8
  2006                           postinc1	equ	0xFE6
  2007                           fsr1h	equ	0xFE2
  2008                           fsr1l	equ	0xFE1
  2009                           indf2	equ	0xFDF
  2010                           postinc2	equ	0xFDE
  2011                           fsr2h	equ	0xFDA
  2012                           fsr2l	equ	0xFD9
  2013                           status	equ	0xFD8
  2014                           
  2015 ;; *************** function _ena_pulse *****************
  2016 ;; Defined at:
  2017 ;;		line 11 in file "LCD.c"
  2018 ;; Parameters:    Size  Location     Type
  2019 ;;		None
  2020 ;; Auto vars:     Size  Location     Type
  2021 ;;		None
  2022 ;; Return value:  Size  Location     Type
  2023 ;;                  1    wreg      void 
  2024 ;; Registers used:
  2025 ;;		wreg
  2026 ;; Tracked objects:
  2027 ;;		On entry : 0/0
  2028 ;;		On exit  : 0/0
  2029 ;;		Unchanged: 0/0
  2030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2031 ;;      Params:         0       0       0       0       0       0       0       0       0
  2032 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2033 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2034 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2035 ;;Total ram usage:        1 bytes
  2036 ;; Hardware stack levels used:    1
  2037 ;; Hardware stack levels required when called:    1
  2038 ;; This function calls:
  2039 ;;		Nothing
  2040 ;; This function is called by:
  2041 ;;		_send_cfg
  2042 ;;		_send_msg
  2043 ;; This function uses a non-reentrant model
  2044 ;;
  2045                           
  2046                           	psect	text12
  2047  000DEE                     __ptext12:
  2048                           	opt stack 0
  2049  000DEE                     _ena_pulse:
  2050                           	opt stack 27
  2051                           
  2052                           ;LCD.c: 13: PORTEbits.RE1 = 0;
  2053                           
  2054                           ;incstack = 0
  2055  000DEE  9284               	bcf	3972,1,c	;volatile
  2056                           
  2057                           ;LCD.c: 14: _delay((unsigned long)((1)*(16000000/4000.0)));
  2058  000DF0  0E06               	movlw	6
  2059  000DF2  6E0F               	movwf	??_ena_pulse& (0+255),c
  2060  000DF4  0E30               	movlw	48
  2061  000DF6                     u657:
  2062  000DF6  2EE8               	decfsz	wreg,f,c
  2063  000DF8  D7FE               	bra	u657
  2064  000DFA  2E0F               	decfsz	??_ena_pulse& (0+255),f,c
  2065  000DFC  D7FC               	bra	u657
  2066  000DFE  D000               	nop2	
  2067                           
  2068                           ;LCD.c: 15: PORTEbits.RE1 = 1;
  2069  000E00  8284               	bsf	3972,1,c	;volatile
  2070                           
  2071                           ;LCD.c: 16: _delay((unsigned long)((1)*(16000000/4000.0)));
  2072  000E02  0E06               	movlw	6
  2073  000E04  6E0F               	movwf	??_ena_pulse& (0+255),c
  2074  000E06  0E30               	movlw	48
  2075  000E08                     u667:
  2076  000E08  2EE8               	decfsz	wreg,f,c
  2077  000E0A  D7FE               	bra	u667
  2078  000E0C  2E0F               	decfsz	??_ena_pulse& (0+255),f,c
  2079  000E0E  D7FC               	bra	u667
  2080  000E10  D000               	nop2	
  2081                           
  2082                           ;LCD.c: 17: PORTEbits.RE1 = 0;
  2083  000E12  9284               	bcf	3972,1,c	;volatile
  2084                           
  2085                           ;LCD.c: 18: _delay((unsigned long)((1)*(16000000/4000.0)));
  2086  000E14  0E06               	movlw	6
  2087  000E16  6E0F               	movwf	??_ena_pulse& (0+255),c
  2088  000E18  0E30               	movlw	48
  2089  000E1A                     u677:
  2090  000E1A  2EE8               	decfsz	wreg,f,c
  2091  000E1C  D7FE               	bra	u677
  2092  000E1E  2E0F               	decfsz	??_ena_pulse& (0+255),f,c
  2093  000E20  D7FC               	bra	u677
  2094  000E22  D000               	nop2	
  2095  000E24  0012               	return		;funcret
  2096  000E26                     __end_of_ena_pulse:
  2097                           	opt stack 0
  2098                           tblptru	equ	0xFF8
  2099                           tblptrh	equ	0xFF7
  2100                           tblptrl	equ	0xFF6
  2101                           tablat	equ	0xFF5
  2102                           intcon	equ	0xFF2
  2103                           intcon2	equ	0xFF1
  2104                           intcon3	equ	0xFF0
  2105                           wreg	equ	0xFE8
  2106                           postinc1	equ	0xFE6
  2107                           fsr1h	equ	0xFE2
  2108                           fsr1l	equ	0xFE1
  2109                           indf2	equ	0xFDF
  2110                           postinc2	equ	0xFDE
  2111                           fsr2h	equ	0xFDA
  2112                           fsr2l	equ	0xFD9
  2113                           status	equ	0xFD8
  2114                           
  2115 ;; *************** function _ADCInit *****************
  2116 ;; Defined at:
  2117 ;;		line 11 in file "ADC.c"
  2118 ;; Parameters:    Size  Location     Type
  2119 ;;		None
  2120 ;; Auto vars:     Size  Location     Type
  2121 ;;		None
  2122 ;; Return value:  Size  Location     Type
  2123 ;;                  1    wreg      void 
  2124 ;; Registers used:
  2125 ;;		wreg, status,2
  2126 ;; Tracked objects:
  2127 ;;		On entry : 0/0
  2128 ;;		On exit  : 0/0
  2129 ;;		Unchanged: 0/0
  2130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2131 ;;      Params:         0       0       0       0       0       0       0       0       0
  2132 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2133 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2134 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2135 ;;Total ram usage:        0 bytes
  2136 ;; Hardware stack levels used:    1
  2137 ;; Hardware stack levels required when called:    1
  2138 ;; This function calls:
  2139 ;;		Nothing
  2140 ;; This function is called by:
  2141 ;;		_main
  2142 ;; This function uses a non-reentrant model
  2143 ;;
  2144                           
  2145                           	psect	text13
  2146  000EFC                     __ptext13:
  2147                           	opt stack 0
  2148  000EFC                     _ADCInit:
  2149                           	opt stack 29
  2150                           
  2151                           ;ADC.c: 12: TRISAbits.TRISA0 = 1;
  2152                           
  2153                           ;incstack = 0
  2154  000EFC  8092               	bsf	3986,0,c	;volatile
  2155                           
  2156                           ;ADC.c: 13: ADCON0 = 0;
  2157  000EFE  0E00               	movlw	0
  2158  000F00  6EC2               	movwf	4034,c	;volatile
  2159                           
  2160                           ;ADC.c: 14: ADCON1 = 0x0e;
  2161  000F02  0E0E               	movlw	14
  2162  000F04  6EC1               	movwf	4033,c	;volatile
  2163                           
  2164                           ;ADC.c: 15: ADCON2 = 0xd9;
  2165  000F06  0ED9               	movlw	217
  2166  000F08  6EC0               	movwf	4032,c	;volatile
  2167                           
  2168                           ;ADC.c: 16: ADCON0bits.ADON = 1;
  2169  000F0A  80C2               	bsf	4034,0,c	;volatile
  2170  000F0C  0012               	return		;funcret
  2171  000F0E                     __end_of_ADCInit:
  2172                           	opt stack 0
  2173                           tblptru	equ	0xFF8
  2174                           tblptrh	equ	0xFF7
  2175                           tblptrl	equ	0xFF6
  2176                           tablat	equ	0xFF5
  2177                           intcon	equ	0xFF2
  2178                           intcon2	equ	0xFF1
  2179                           intcon3	equ	0xFF0
  2180                           wreg	equ	0xFE8
  2181                           postinc1	equ	0xFE6
  2182                           fsr1h	equ	0xFE2
  2183                           fsr1l	equ	0xFE1
  2184                           indf2	equ	0xFDF
  2185                           postinc2	equ	0xFDE
  2186                           fsr2h	equ	0xFDA
  2187                           fsr2l	equ	0xFD9
  2188                           status	equ	0xFD8
  2189                           
  2190 ;; *************** function _ISR *****************
  2191 ;; Defined at:
  2192 ;;		line 32 in file "Interrupt.c"
  2193 ;; Parameters:    Size  Location     Type
  2194 ;;		None
  2195 ;; Auto vars:     Size  Location     Type
  2196 ;;		None
  2197 ;; Return value:  Size  Location     Type
  2198 ;;                  1    wreg      void 
  2199 ;; Registers used:
  2200 ;;		wreg, status,2
  2201 ;; Tracked objects:
  2202 ;;		On entry : 0/0
  2203 ;;		On exit  : 0/0
  2204 ;;		Unchanged: 0/0
  2205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2206 ;;      Params:         0       0       0       0       0       0       0       0       0
  2207 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2208 ;;      Temps:         14       0       0       0       0       0       0       0       0
  2209 ;;      Totals:        14       0       0       0       0       0       0       0       0
  2210 ;;Total ram usage:       14 bytes
  2211 ;; Hardware stack levels used:    1
  2212 ;; This function calls:
  2213 ;;		Nothing
  2214 ;; This function is called by:
  2215 ;;		Interrupt level 2
  2216 ;; This function uses a non-reentrant model
  2217 ;;
  2218                           
  2219                           	psect	intcode
  2220  000008                     __pintcode:
  2221                           	opt stack 0
  2222  000008                     _ISR:
  2223                           	opt stack 27
  2224                           
  2225                           ;incstack = 0
  2226  000008  8229               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2227  00000A  ED6A  F006         	call	int_func,f	;refresh shadow registers
  2228                           tblptru	equ	0xFF8
  2229                           tblptrh	equ	0xFF7
  2230                           tblptrl	equ	0xFF6
  2231                           tablat	equ	0xFF5
  2232                           intcon	equ	0xFF2
  2233                           intcon2	equ	0xFF1
  2234                           intcon3	equ	0xFF0
  2235                           wreg	equ	0xFE8
  2236                           postinc1	equ	0xFE6
  2237                           fsr1h	equ	0xFE2
  2238                           fsr1l	equ	0xFE1
  2239                           indf2	equ	0xFDF
  2240                           postinc2	equ	0xFDE
  2241                           fsr2h	equ	0xFDA
  2242                           fsr2l	equ	0xFD9
  2243                           status	equ	0xFD8
  2244                           
  2245                           	psect	intcode_body
  2246  000CD4                     __pintcode_body:
  2247                           	opt stack 27
  2248  000CD4                     int_func:
  2249                           	opt stack 27
  2250  000CD4  0006               	pop		; remove dummy address from shadow register refresh
  2251  000CD6  CFFA F001          	movff	pclath,??_ISR
  2252  000CDA  CFFB F002          	movff	pclatu,??_ISR+1
  2253  000CDE  CFE9 F003          	movff	fsr0l,??_ISR+2
  2254  000CE2  CFEA F004          	movff	fsr0h,??_ISR+3
  2255  000CE6  CFE1 F005          	movff	fsr1l,??_ISR+4
  2256  000CEA  CFE2 F006          	movff	fsr1h,??_ISR+5
  2257  000CEE  CFD9 F007          	movff	fsr2l,??_ISR+6
  2258  000CF2  CFDA F008          	movff	fsr2h,??_ISR+7
  2259  000CF6  CFF3 F009          	movff	prodl,??_ISR+8
  2260  000CFA  CFF4 F00A          	movff	prodh,??_ISR+9
  2261  000CFE  CFF6 F00B          	movff	tblptrl,??_ISR+10
  2262  000D02  CFF7 F00C          	movff	tblptrh,??_ISR+11
  2263  000D06  CFF8 F00D          	movff	tblptru,??_ISR+12
  2264  000D0A  CFF5 F00E          	movff	tablat,??_ISR+13
  2265                           
  2266                           ;Interrupt.c: 34: if(INTCON3bits.INT2IF){
  2267  000D0E  A2F0               	btfss	intcon3,1,c	;volatile
  2268  000D10  D005               	goto	i2l22
  2269                           
  2270                           ;Interrupt.c: 35: INTCON3bits.INT2IF = 0;
  2271  000D12  92F0               	bcf	intcon3,1,c	;volatile
  2272                           
  2273                           ;Interrupt.c: 36: button = 1;
  2274  000D14  0E00               	movlw	0
  2275  000D16  6E28               	movwf	_button+1,c
  2276  000D18  0E01               	movlw	1
  2277  000D1A  6E27               	movwf	_button,c
  2278  000D1C                     i2l22:
  2279  000D1C  C00E  FFF5         	movff	??_ISR+13,tablat
  2280  000D20  C00D  FFF8         	movff	??_ISR+12,tblptru
  2281  000D24  C00C  FFF7         	movff	??_ISR+11,tblptrh
  2282  000D28  C00B  FFF6         	movff	??_ISR+10,tblptrl
  2283  000D2C  C00A  FFF4         	movff	??_ISR+9,prodh
  2284  000D30  C009  FFF3         	movff	??_ISR+8,prodl
  2285  000D34  C008  FFDA         	movff	??_ISR+7,fsr2h
  2286  000D38  C007  FFD9         	movff	??_ISR+6,fsr2l
  2287  000D3C  C006  FFE2         	movff	??_ISR+5,fsr1h
  2288  000D40  C005  FFE1         	movff	??_ISR+4,fsr1l
  2289  000D44  C004  FFEA         	movff	??_ISR+3,fsr0h
  2290  000D48  C003  FFE9         	movff	??_ISR+2,fsr0l
  2291  000D4C  C002  FFFB         	movff	??_ISR+1,pclatu
  2292  000D50  C001  FFFA         	movff	??_ISR,pclath
  2293  000D54  9229               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2294  000D56  0011               	retfie		f
  2295  000D58                     __end_of_ISR:
  2296                           	opt stack 0
  2297                           pclatu	equ	0xFFB
  2298                           pclath	equ	0xFFA
  2299                           tblptru	equ	0xFF8
  2300                           tblptrh	equ	0xFF7
  2301                           tblptrl	equ	0xFF6
  2302                           tablat	equ	0xFF5
  2303                           prodh	equ	0xFF4
  2304                           prodl	equ	0xFF3
  2305                           intcon	equ	0xFF2
  2306                           intcon2	equ	0xFF1
  2307                           intcon3	equ	0xFF0
  2308                           fsr0h	equ	0xFEA
  2309                           fsr0l	equ	0xFE9
  2310                           wreg	equ	0xFE8
  2311                           postinc1	equ	0xFE6
  2312                           fsr1h	equ	0xFE2
  2313                           fsr1l	equ	0xFE1
  2314                           indf2	equ	0xFDF
  2315                           postinc2	equ	0xFDE
  2316                           fsr2h	equ	0xFDA
  2317                           fsr2l	equ	0xFD9
  2318                           status	equ	0xFD8
  2319                           pclatu	equ	0xFFB
  2320                           pclath	equ	0xFFA
  2321                           tblptru	equ	0xFF8
  2322                           tblptrh	equ	0xFF7
  2323                           tblptrl	equ	0xFF6
  2324                           tablat	equ	0xFF5
  2325                           prodh	equ	0xFF4
  2326                           prodl	equ	0xFF3
  2327                           intcon	equ	0xFF2
  2328                           intcon2	equ	0xFF1
  2329                           intcon3	equ	0xFF0
  2330                           fsr0h	equ	0xFEA
  2331                           fsr0l	equ	0xFE9
  2332                           wreg	equ	0xFE8
  2333                           postinc1	equ	0xFE6
  2334                           fsr1h	equ	0xFE2
  2335                           fsr1l	equ	0xFE1
  2336                           indf2	equ	0xFDF
  2337                           postinc2	equ	0xFDE
  2338                           fsr2h	equ	0xFDA
  2339                           fsr2l	equ	0xFD9
  2340                           status	equ	0xFD8
  2341                           
  2342                           	psect	rparam
  2343  0000                     pclatu	equ	0xFFB
  2344                           pclath	equ	0xFFA
  2345                           tblptru	equ	0xFF8
  2346                           tblptrh	equ	0xFF7
  2347                           tblptrl	equ	0xFF6
  2348                           tablat	equ	0xFF5
  2349                           prodh	equ	0xFF4
  2350                           prodl	equ	0xFF3
  2351                           intcon	equ	0xFF2
  2352                           intcon2	equ	0xFF1
  2353                           intcon3	equ	0xFF0
  2354                           fsr0h	equ	0xFEA
  2355                           fsr0l	equ	0xFE9
  2356                           wreg	equ	0xFE8
  2357                           postinc1	equ	0xFE6
  2358                           fsr1h	equ	0xFE2
  2359                           fsr1l	equ	0xFE1
  2360                           indf2	equ	0xFDF
  2361                           postinc2	equ	0xFDE
  2362                           fsr2h	equ	0xFDA
  2363                           fsr2l	equ	0xFD9
  2364                           status	equ	0xFD8
  2365                           
  2366                           	psect	temp
  2367  000029                     btemp:
  2368                           	opt stack 0
  2369  000029                     	ds	1
  2370  0000                     int$flags	set	btemp
  2371                           pclatu	equ	0xFFB
  2372                           pclath	equ	0xFFA
  2373                           tblptru	equ	0xFF8
  2374                           tblptrh	equ	0xFF7
  2375                           tblptrl	equ	0xFF6
  2376                           tablat	equ	0xFF5
  2377                           prodh	equ	0xFF4
  2378                           prodl	equ	0xFF3
  2379                           intcon	equ	0xFF2
  2380                           intcon2	equ	0xFF1
  2381                           intcon3	equ	0xFF0
  2382                           fsr0h	equ	0xFEA
  2383                           fsr0l	equ	0xFE9
  2384                           wreg	equ	0xFE8
  2385                           postinc1	equ	0xFE6
  2386                           fsr1h	equ	0xFE2
  2387                           fsr1l	equ	0xFE1
  2388                           indf2	equ	0xFDF
  2389                           postinc2	equ	0xFDE
  2390                           fsr2h	equ	0xFDA
  2391                           fsr2l	equ	0xFD9
  2392                           status	equ	0xFD8


Data Sizes:
    Strings     105
    Constant    0
    Data        0
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     38      40
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    cmpSignal@toc	PTR unsigned char  size(2) Largest target is 2
		 -> main@toc(COMRAM[2]), 

    cmpSignal@pass	PTR unsigned char  size(2) Largest target is 2
		 -> main@pass(COMRAM[2]), 

    readSignal@signal	PTR unsigned char  size(2) Largest target is 2
		 -> main@toc(COMRAM[2]), main@pass(COMRAM[2]), 

    write_LCD@c	PTR unsigned char  size(2) Largest target is 17
		 -> STR_10(CODE[15]), STR_9(CODE[14]), STR_8(CODE[10]), STR_7(CODE[10]), 
		 -> STR_6(CODE[10]), STR_5(CODE[14]), STR_4(CODE[11]), STR_3(CODE[8]), 
		 -> STR_2(CODE[17]), STR_1(CODE[16]), 


Critical Paths under _main in COMRAM

    _main->_readSignal
    _write_LCD->_send_msg
    _send_msg->_ena_pulse
    _set_line->_send_cfg
    _readSignal->_ADCRead
    _init_LCD->_send_cfg
    _clearLCD->_send_cfg
    _send_cfg->_ena_pulse

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0    3894
                                             30 COMRAM     8     8      0
                            _ADCInit
                           _clearLCD
                          _cmpSignal
                           _initINT2
                           _init_LCD
                          _init_UART
                         _readSignal
                           _send_msg
                           _set_line
                          _write_LCD
 ---------------------------------------------------------------------------------
 (1) _write_LCD                                            6     4      2     745
                                             17 COMRAM     6     4      2
                           _send_msg
 ---------------------------------------------------------------------------------
 (2) _send_msg                                             2     2      0      15
                                             15 COMRAM     2     2      0
                          _ena_pulse
 ---------------------------------------------------------------------------------
 (1) _set_line                                             5     1      4    1129
                                             17 COMRAM     5     1      4
                           _send_cfg
 ---------------------------------------------------------------------------------
 (1) _readSignal                                          12     8      4    1207
                                             18 COMRAM    12     8      4
                            _ADCRead
 ---------------------------------------------------------------------------------
 (2) _ADCRead                                              4     2      2      23
                                             14 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _init_UART                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_LCD                                             0     0      0      15
                           _send_cfg
 ---------------------------------------------------------------------------------
 (1) _initINT2                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _cmpSignal                                            6     2      4     216
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _clearLCD                                             0     0      0      15
                           _send_cfg
 ---------------------------------------------------------------------------------
 (2) _send_cfg                                             2     2      0      15
                                             15 COMRAM     2     2      0
                          _ena_pulse
 ---------------------------------------------------------------------------------
 (3) _ena_pulse                                            1     1      0       0
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADCInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                 14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCInit
   _clearLCD
     _send_cfg
       _ena_pulse
   _cmpSignal
   _initINT2
   _init_LCD
     _send_cfg
       _ena_pulse
   _init_UART
   _readSignal
     _ADCRead
   _send_msg
     _ena_pulse
   _set_line
     _send_cfg
       _ena_pulse
   _write_LCD
     _send_msg
       _ena_pulse

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     26      28       1       42.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      28      20        0.0%
DATA                 0      0      28       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Fri Jun 30 23:35:29 2017

            __CFG_BOR$ON 000000              __CFG_BORV$3 000000             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
                    l208 0CBE                      l197 0EBC             __CFG_CPB$OFF 000000  
                    u350 0C72             __CFG_CPD$OFF 000000                      u364 0C82  
                    _ISR 0008                      u365 0C7E                      u517 08D0  
                    u607 0C1A                      u527 09C4                      u617 0E34  
                    u537 09FE                      u627 0E48                      u547 0B20  
                    u637 0C98                      u557 0B3A                      u647 0E92  
                    u567 0B9A                      u657 0DF6                      u577 0BB2  
                    u667 0E08                      u587 0BCA                      u677 0E1A  
                    u597 0BE2          __end_of_ADCInit 0F0E          __end_of_ADCRead 0ED2  
                    wreg 000FE8             __CFG_FOSC$HS 000000             __CFG_LVP$OFF 000000  
                   ?_ISR 0001             __CFG_WDT$OFF 000000                     l1233 0DCE  
                   l1321 0946                     l1313 0908                     l1305 08DE  
                   l1251 0C58                     l1323 095A                     l1253 0C62  
                   l1261 0CA6                     l1229 0DAE                     l1341 09D0  
                   l1317 0926                     l1325 095E                     l1239 0EAC  
                   l1327 096E                     l1273 0D9A                     l1257 0C92  
                   l1249 0C4A                     l1425 0BEE                     l1361 0A3E  
                   l1353 0A14                     l1371 0A90                     l1365 0A5C  
                   l1373 0A94                     l1375 0AA4                     l1369 0A7C  
                   l1399 0B4A                     STR_1 0812                     STR_2 0801  
                   STR_3 0862                     STR_4 084D                     STR_5 0831  
                   STR_6 0858                     STR_7 0843                     STR_8 0858  
                   STR_9 083F                     _BRGH 007D62                     _CREN 007D5C  
                   _RCIF 007CF5                     i2l22 0D1C                     _SPEN 007D5F  
                   _TRMT 007D61                     _TXEN 007D65                     _SYNC 007D64  
                   _main 086C                     fsr0h 000FEA                     fsr1h 000FE2  
                   fsr2h 000FDA                     fsr0l 000FE9                     indf2 000FDF  
                   fsr1l 000FE1                     fsr2l 000FD9                     btemp 0029  
                   prodh 000FF4                     prodl 000FF3                     start 000E  
          __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000             ___param_bank 000000  
                  ??_ISR 0001            __CFG_PLLDIV$1 000000           __CFG_CCP2MX$ON 000000  
                  ?_main 0001                    _ADRES 000FC3                    STR_10 0822  
                  _RCREG 000FAE                    _TMR0H 000FD7                    _TMR0L 000FD6  
                  _SPBRG 000FAF                    _PORTD 000F83            __CFG_USBDIV$1 000000  
                  _TRISB 000F93                    _TRISD 000F95                    _TRISE 000F96  
                  _TXREG 000FAD            __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000  
          __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000  
         __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000  
         __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000  
                  main@i 0025                    pclath 000FFA                    tablat 000FF5  
                  status 000FD8           __CFG_ICPRT$OFF 000000          __initialization 0ED2  
           __end_of_main 0C32                ??_ADCInit 000F                ??_ADCRead 0011  
                 ??_main 001F            __activetblptr 000001                   _ADCON0 000FC2  
                 _ADCON1 000FC1                   _ADCON2 000FC0                   _TRISC6 007CA6  
                 _TRISC7 007CA7         __end_of_clearLCD 0F26           __CFG_XINST$OFF 000000  
         __CFG_STVREN$ON 000000         __end_of_initINT2 0F1E              readSignal@i 001B  
            readSignal@j 001D         __end_of_init_LCD 0E80                   _button 0027  
       __end_of_send_cfg 0E9E         __end_of_send_msg 0E56         __end_of_set_line 0EBA  
           __mediumconst 0000                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8               __accesstop 0060  __end_of__initialization 0ED6  
        __CFG_PBADEN$OFF 000000            ___rparam_used 000001           __pcstackCOMRAM 0001  
     __size_of_cmpSignal 004C       __size_of_ena_pulse 0038       __size_of_init_UART 0014  
                _ADCInit 0EFC                  _ADCRead 0EBA             ADCRead@value 0011  
              ?_clearLCD 0001              send_cfg@cmd 0011                ?_initINT2 0001  
              ?_init_LCD 0001          __CFG_VREGEN$OFF 000000              send_msg@msg 0011  
     __size_of_write_LCD 004A        __end_of_cmpSignal 0DA4                ?_send_cfg 0001  
                __Hparam 0000                ?_send_msg 0001        __end_of_ena_pulse 0E26  
                __Lparam 0000                ?_set_line 0012               _readSignal 0C32  
           __psmallconst 0800                  __pcinit 0ED2                  __ramtop 0800  
                __ptext0 086C                  __ptext1 0DA4                  __ptext2 0E26  
                __ptext3 0E9E                  __ptext4 0C32                  __ptext5 0EBA  
                __ptext6 0EE8                  __ptext7 0E56                  __ptext8 0F0E  
                __ptext9 0D58        __end_of_init_UART 0EFC                _T0CONbits 000FD5  
           __size_of_ISR 0D50               ??_clearLCD 0012              set_line@pos 0014  
                main@toc 0023           __pintcode_body 0CD4     end_of_initialization 0ED6  
             ??_initINT2 000F               ??_init_LCD 0012                  int_func 0CD4  
             ??_send_cfg 0010               ??_send_msg 0010               ??_set_line 0016  
         set_line@cursor 0016                  postinc1 000FE6                  postinc2 000FDE  
              _PORTBbits 000F81                _PORTCbits 000F82                _PORTEbits 000F84  
      __end_of_write_LCD 0DEE                _TRISAbits 000F92                _TRISBbits 000F93  
              _TRISCbits 000F94              ?_readSignal 0013      start_initialization 0ED2  
            __end_of_ISR 0D58         __CFG_LPT1OSC$OFF 000000                 ?_ADCInit 0001  
               ?_ADCRead 000F              __pbssCOMRAM 0027        __size_of_clearLCD 0008  
    __size_of_readSignal 00A2        __size_of_initINT2 0010        __size_of_init_LCD 002A  
              __pintcode 0008                _cmpSignal 0D58        __size_of_send_cfg 001E  
      __size_of_send_msg 0030        __size_of_set_line 001C                _ena_pulse 0DEE  
            __smallconst 0800         readSignal@limite 0019         readSignal@signal 0013  
              _init_UART 0EE8         __CFG_WDTPS$32768 000000               ?_cmpSignal 000F  
             ?_ena_pulse 0001            cmpSignal@pass 000F         __size_of_ADCInit 0012  
       __size_of_ADCRead 0018               _ADCON0bits 000FC2               ?_init_UART 0001  
              _write_LCD 0DA4              _INTCON2bits 000FF1              _INTCON3bits 000FF0  
               __Hrparam 0000                 __Lrparam 0000             __Lsmallconst 0800  
           ??_readSignal 0017                 _clearLCD 0F1E               ?_write_LCD 0012  
               __ptext10 0F1E                 __ptext11 0E80                 __ptext12 0DEE  
               __ptext13 0EFC            readSignal@pos 0015                 _initINT2 0F0E  
               _init_LCD 0E56       __end_of_readSignal 0CD4            __size_of_main 03C6  
               _send_cfg 0E80                 _send_msg 0E26               write_LCD@c 0012  
             write_LCD@i 0016                 _set_line 0E9E             set_line@line 0012  
            ??_cmpSignal 0013                 int$flags 0029             cmpSignal@toc 0011  
            ??_ena_pulse 000F                 main@pass 0021    __CFG_CPUDIV$OSC1_PLL2 000000  
             _INTCONbits 000FF2              ??_init_UART 000F                 intlevel2 0000  
            ??_write_LCD 0014  
