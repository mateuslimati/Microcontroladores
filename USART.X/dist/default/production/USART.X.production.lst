

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Tue Jul 11 04:50:43 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    41                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    44                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    45                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    46  0000                     
    47                           ; Version 1.41
    48                           ; Generated 25/01/2017 GMT
    49                           ; 
    50                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    51                           ; All rights reserved.
    52                           ; 
    53                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    54                           ; 
    55                           ; Redistribution and use in source and binary forms, with or without modification, are
    56                           ; permitted provided that the following conditions are met:
    57                           ; 
    58                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    59                           ;        conditions and the following disclaimer.
    60                           ; 
    61                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    62                           ;        of conditions and the following disclaimer in the documentation and/or other
    63                           ;        materials provided with the distribution.
    64                           ; 
    65                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    66                           ;        software without specific prior written permission.
    67                           ; 
    68                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    69                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    70                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    71                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    72                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    73                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    74                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    75                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    76                           ; 
    77                           ; 
    78                           ; Code-generator required, PIC18F4550 Definitions
    79                           ; 
    80                           ; SFR Addresses
    81  0000                     
    82                           	psect	idataCOMRAM
    83  001542                     __pidataCOMRAM:
    84                           	opt stack 0
    85                           
    86                           ;initializer for _doorState
    87  001542  0001               	dw	1
    88  0000                     _ADRES	set	4035
    89  0000                     _SSPBUF	set	4041
    90  0000                     _SSPCON2bits	set	4037
    91  0000                     _SSPSTAT	set	4039
    92  0000                     _SSPADD	set	4040
    93  0000                     _SSPCON2	set	4037
    94  0000                     _SSPCON1	set	4038
    95  0000                     _CCP1CONbits	set	4029
    96  0000                     _CCPR1L	set	4030
    97  0000                     _CCP1CON	set	4029
    98  0000                     _PR2	set	4043
    99  0000                     _T2CON	set	4042
   100  0000                     _PORTCbits	set	3970
   101  0000                     _TRISCbits	set	3988
   102  0000                     _ADCON0bits	set	4034
   103  0000                     _ADCON2	set	4032
   104  0000                     _ADCON1	set	4033
   105  0000                     _ADCON0	set	4034
   106  0000                     _TRISAbits	set	3986
   107  0000                     _RCREG	set	4014
   108  0000                     _TXREG	set	4013
   109  0000                     _SPBRG	set	4015
   110  0000                     _TRISE	set	3990
   111  0000                     _TRISB	set	3987
   112  0000                     _PORTBbits	set	3969
   113  0000                     _PORTD	set	3971
   114  0000                     _PORTEbits	set	3972
   115  0000                     _TMR0L	set	4054
   116  0000                     _TMR0H	set	4055
   117  0000                     _T0CONbits	set	4053
   118  0000                     _TRISD	set	3989
   119  0000                     _INTCON2bits	set	4081
   120  0000                     _TRISBbits	set	3987
   121  0000                     _INTCONbits	set	4082
   122  0000                     _INTCON3bits	set	4080
   123  0000                     _ACKEN	set	32300
   124  0000                     _ACKDT	set	32301
   125  0000                     _RCIF	set	31989
   126  0000                     _TRMT	set	32097
   127  0000                     _TXEN	set	32101
   128  0000                     _CREN	set	32092
   129  0000                     _TRISC6	set	31910
   130  0000                     _TRISC7	set	31911
   131  0000                     _SPEN	set	32095
   132  0000                     _SYNC	set	32100
   133  0000                     _BRGH	set	32098
   134                           
   135                           	psect	smallconst
   136  000800                     __psmallconst:
   137                           	opt stack 0
   138  000800  00                 	db	0
   139  000801                     STR_1:
   140  000801  42                 	db	66	;'B'
   141  000802  61                 	db	97	;'a'
   142  000803  74                 	db	116	;'t'
   143  000804  61                 	db	97	;'a'
   144  000805  20                 	db	32
   145  000806  6E                 	db	110	;'n'
   146  000807  61                 	db	97	;'a'
   147  000808  20                 	db	32
   148  000809  70                 	db	112	;'p'
   149  00080A  6F                 	db	111	;'o'
   150  00080B  72                 	db	114	;'r'
   151  00080C  74                 	db	116	;'t'
   152  00080D  61                 	db	97	;'a'
   153  00080E  00                 	db	0
   154  00080F                     STR_6:
   155  00080F  6E                 	db	110	;'n'
   156  000810  61                 	db	97	;'a'
   157  000811  6F                 	db	111	;'o'
   158  000812  20                 	db	32
   159  000813  63                 	db	99	;'c'
   160  000814  6F                 	db	111	;'o'
   161  000815  69                 	db	105	;'i'
   162  000816  6E                 	db	110	;'n'
   163  000817  63                 	db	99	;'c'
   164  000818  69                 	db	105	;'i'
   165  000819  64                 	db	100	;'d'
   166  00081A  65                 	db	101	;'e'
   167  00081B  6D                 	db	109	;'m'
   168  00081C  00                 	db	0
   169  00081D                     STR_11:
   170  00081D  43                 	db	67	;'C'
   171  00081E  6F                 	db	111	;'o'
   172  00081F  6E                 	db	110	;'n'
   173  000820  66                 	db	102	;'f'
   174  000821  69                 	db	105	;'i'
   175  000822  72                 	db	114	;'r'
   176  000823  6D                 	db	109	;'m'
   177  000824  65                 	db	101	;'e'
   178  000825  20                 	db	32
   179  000826  73                 	db	115	;'s'
   180  000827  75                 	db	117	;'u'
   181  000828  61                 	db	97	;'a'
   182  000829  00                 	db	0
   183  00082A                     STR_13:
   184  00082A  43                 	db	67	;'C'
   185  00082B  61                 	db	97	;'a'
   186  00082C  64                 	db	100	;'d'
   187  00082D  61                 	db	97	;'a'
   188  00082E  73                 	db	115	;'s'
   189  00082F  74                 	db	116	;'t'
   190  000830  72                 	db	114	;'r'
   191  000831  65                 	db	101	;'e'
   192  000832  20                 	db	32
   193  000833  73                 	db	115	;'s'
   194  000834  75                 	db	117	;'u'
   195  000835  61                 	db	97	;'a'
   196  000836  00                 	db	0
   197  000837                     STR_4:
   198  000837  44                 	db	68	;'D'
   199  000838  65                 	db	101	;'e'
   200  000839  73                 	db	115	;'s'
   201  00083A  74                 	db	116	;'t'
   202  00083B  72                 	db	114	;'r'
   203  00083C  61                 	db	97	;'a'
   204  00083D  76                 	db	118	;'v'
   205  00083E  61                 	db	97	;'a'
   206  00083F  64                 	db	100	;'d'
   207  000840  61                 	db	97	;'a'
   208  000841  21                 	db	33
   209  000842  00                 	db	0
   210  000843                     STR_18:
   211  000843  43                 	db	67	;'C'
   212  000844  61                 	db	97	;'a'
   213  000845  64                 	db	100	;'d'
   214  000846  61                 	db	97	;'a'
   215  000847  73                 	db	115	;'s'
   216  000848  74                 	db	116	;'t'
   217  000849  72                 	db	114	;'r'
   218  00084A  61                 	db	97	;'a'
   219  00084B  64                 	db	100	;'d'
   220  00084C  61                 	db	97	;'a'
   221  00084D  00                 	db	0
   222  00084E                     STR_15:
   223  00084E  52                 	db	82	;'R'
   224  00084F  65                 	db	101	;'e'
   225  000850  70                 	db	112	;'p'
   226  000851  69                 	db	105	;'i'
   227  000852  74                 	db	116	;'t'
   228  000853  61                 	db	97	;'a'
   229  000854  20                 	db	32
   230  000855  73                 	db	115	;'s'
   231  000856  75                 	db	117	;'u'
   232  000857  61                 	db	97	;'a'
   233  000858  00                 	db	0
   234  000859                     STR_5:
   235  000859  41                 	db	65	;'A'
   236  00085A  73                 	db	115	;'s'
   237  00085B  20                 	db	32
   238  00085C  73                 	db	115	;'s'
   239  00085D  65                 	db	101	;'e'
   240  00085E  6E                 	db	110	;'n'
   241  00085F  68                 	db	104	;'h'
   242  000860  61                 	db	97	;'a'
   243  000861  73                 	db	115	;'s'
   244  000862  00                 	db	0
   245  000863                     STR_17:
   246  000863  53                 	db	83	;'S'
   247  000864  65                 	db	101	;'e'
   248  000865  6E                 	db	110	;'n'
   249  000866  68                 	db	104	;'h'
   250  000867  61                 	db	97	;'a'
   251  000868  00                 	db	0
   252  000869                     STR_12:
   253  000869  73                 	db	115	;'s'
   254  00086A  65                 	db	101	;'e'
   255  00086B  6E                 	db	110	;'n'
   256  00086C  68                 	db	104	;'h'
   257  00086D  61                 	db	97	;'a'
   258  00086E  00                 	db	0
   259  00086F                     STR_3:
   260  00086F  50                 	db	80	;'P'
   261  000870  6F                 	db	111	;'o'
   262  000871  72                 	db	114	;'r'
   263  000872  74                 	db	116	;'t'
   264  000873  61                 	db	97	;'a'
   265  000874  00                 	db	0
   266  0000                     
   267                           ; #config settings
   268  000875  00                 	db	0	; dummy byte at the end
   269  0000                     
   270                           	psect	cinit
   271  0013E6                     __pcinit:
   272                           	opt stack 0
   273  0013E6                     start_initialization:
   274                           	opt stack 0
   275  0013E6                     __initialization:
   276                           	opt stack 0
   277                           
   278                           ; Initialize objects allocated to COMRAM (2 bytes)
   279                           ; load TBLPTR registers with __pidataCOMRAM
   280  0013E6  0E42               	movlw	low __pidataCOMRAM
   281  0013E8  6EF6               	movwf	tblptrl,c
   282  0013EA  0E15               	movlw	high __pidataCOMRAM
   283  0013EC  6EF7               	movwf	tblptrh,c
   284  0013EE  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   285  0013F0  6EF8               	movwf	tblptru,c
   286  0013F2  0009               	tblrd		*+	;fetch initializer
   287  0013F4  CFF5 F03D          	movff	tablat,__pdataCOMRAM
   288  0013F8  0009               	tblrd		*+	;fetch initializer
   289  0013FA  CFF5 F03E          	movff	tablat,__pdataCOMRAM+1
   290                           
   291                           ; Clear objects allocated to COMRAM (4 bytes)
   292  0013FE  6A3C               	clrf	(__pbssCOMRAM+3)& (0+255),c
   293  001400  6A3B               	clrf	(__pbssCOMRAM+2)& (0+255),c
   294  001402  6A3A               	clrf	(__pbssCOMRAM+1)& (0+255),c
   295  001404  6A39               	clrf	__pbssCOMRAM& (0+255),c
   296  001406                     end_of_initialization:
   297                           	opt stack 0
   298  001406                     __end_of__initialization:
   299                           	opt stack 0
   300  001406  903F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   301  001408  923F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   302  00140A  0E00               	movlw	low (__Lsmallconst shr (0+16))
   303  00140C  6EF8               	movwf	tblptru,c
   304  00140E  0E08               	movlw	high __Lsmallconst
   305  001410  6EF7               	movwf	tblptrh,c
   306  001412  0100               	movlb	0
   307  001414  EF5F  F008         	goto	_main	;jump to C main() function
   308                           tblptru	equ	0xFF8
   309                           tblptrh	equ	0xFF7
   310                           tblptrl	equ	0xFF6
   311                           tablat	equ	0xFF5
   312                           
   313                           	psect	bssCOMRAM
   314  000039                     __pbssCOMRAM:
   315                           	opt stack 0
   316  000039                     _buttonConfirm_Cad:
   317                           	opt stack 0
   318  000039                     	ds	2
   319  00003B                     _buttonCancel_Lock:
   320                           	opt stack 0
   321  00003B                     	ds	2
   322                           tblptru	equ	0xFF8
   323                           tblptrh	equ	0xFF7
   324                           tblptrl	equ	0xFF6
   325                           tablat	equ	0xFF5
   326                           
   327                           	psect	dataCOMRAM
   328  00003D                     __pdataCOMRAM:
   329                           	opt stack 0
   330  00003D                     _doorState:
   331                           	opt stack 0
   332  00003D                     	ds	2
   333                           tblptru	equ	0xFF8
   334                           tblptrh	equ	0xFF7
   335                           tblptrl	equ	0xFF6
   336                           tablat	equ	0xFF5
   337                           
   338                           	psect	cstackCOMRAM
   339  000001                     __pcstackCOMRAM:
   340                           	opt stack 0
   341  000001                     i2DutyCycle_PWM@Valor:
   342                           	opt stack 0
   343                           
   344                           ; 2 bytes @ 0x0
   345  000001                     	ds	2
   346  000003                     ??i2_DutyCycle_PWM:
   347                           
   348                           ; 1 bytes @ 0x2
   349  000003                     	ds	2
   350  000005                     ??_ISR:
   351                           
   352                           ; 1 bytes @ 0x4
   353  000005                     	ds	16
   354  000015                     ??_ena_pulse:
   355  000015                     ?_cmp_MSG1:
   356                           	opt stack 0
   357  000015                     ?_cmp_MSG2:
   358                           	opt stack 0
   359  000015                     ?_read_ADC:
   360                           	opt stack 0
   361  000015                     ?_cmpSignal:
   362                           	opt stack 0
   363  000015                     ?___lldiv:
   364                           	opt stack 0
   365  000015                     cmpSignal@pass:
   366                           	opt stack 0
   367  000015                     bip@rounds:
   368                           	opt stack 0
   369  000015                     DutyCycle_PWM@Valor:
   370                           	opt stack 0
   371  000015                     ___lldiv@dividend:
   372                           	opt stack 0
   373                           
   374                           ; 4 bytes @ 0x14
   375  000015                     	ds	1
   376  000016                     ??_send_cfg:
   377  000016                     ??_send_msg:
   378                           
   379                           ; 1 bytes @ 0x15
   380  000016                     	ds	1
   381  000017                     ??_DutyCycle_PWM:
   382  000017                     ??_cmp_MSG2:
   383  000017                     send_cfg@cmd:
   384                           	opt stack 0
   385  000017                     send_msg@msg:
   386                           	opt stack 0
   387  000017                     cmp_MSG1@msg:
   388                           	opt stack 0
   389  000017                     read_ADC@value:
   390                           	opt stack 0
   391  000017                     cmpSignal@toc:
   392                           	opt stack 0
   393  000017                     bip@time:
   394                           	opt stack 0
   395                           
   396                           ; 2 bytes @ 0x16
   397  000017                     	ds	1
   398  000018                     cmp_MSG2@msg:
   399                           	opt stack 0
   400  000018                     write_LCD@c:
   401                           	opt stack 0
   402  000018                     set_line@line:
   403                           	opt stack 0
   404                           
   405                           ; 2 bytes @ 0x17
   406  000018                     	ds	1
   407  000019                     ??_bip:
   408  000019                     checkUSART@op:
   409                           	opt stack 0
   410  000019                     readSignal@signal:
   411                           	opt stack 0
   412  000019                     ___lldiv@divisor:
   413                           	opt stack 0
   414                           
   415                           ; 4 bytes @ 0x18
   416  000019                     	ds	1
   417  00001A                     ??_write_LCD:
   418  00001A                     set_line@pos:
   419                           	opt stack 0
   420                           
   421                           ; 2 bytes @ 0x19
   422  00001A                     	ds	1
   423  00001B                     checkUSART@msg:
   424                           	opt stack 0
   425  00001B                     readSignal@pos:
   426                           	opt stack 0
   427  00001B                     bip@j:
   428                           	opt stack 0
   429                           
   430                           ; 2 bytes @ 0x1A
   431  00001B                     	ds	1
   432  00001C                     set_line@cursor:
   433                           	opt stack 0
   434  00001C                     write_LCD@i:
   435                           	opt stack 0
   436                           
   437                           ; 2 bytes @ 0x1B
   438  00001C                     	ds	1
   439  00001D                     ??_readSignal:
   440  00001D                     ___lldiv@quotient:
   441                           	opt stack 0
   442                           
   443                           ; 4 bytes @ 0x1C
   444  00001D                     	ds	1
   445  00001E                     ?_cmpPass:
   446                           	opt stack 0
   447  00001E                     ?_confirmarSenha:
   448                           	opt stack 0
   449  00001E                     cmpPass@pass:
   450                           	opt stack 0
   451                           
   452                           ; 2 bytes @ 0x1D
   453  00001E                     	ds	1
   454  00001F                     readSignal@limite:
   455                           	opt stack 0
   456                           
   457                           ; 2 bytes @ 0x1E
   458  00001F                     	ds	1
   459  000020                     cmpPass@toque:
   460                           	opt stack 0
   461                           
   462                           ; 2 bytes @ 0x1F
   463  000020                     	ds	1
   464  000021                     ___lldiv@counter:
   465                           	opt stack 0
   466  000021                     readSignal@i:
   467                           	opt stack 0
   468                           
   469                           ; 2 bytes @ 0x20
   470  000021                     	ds	1
   471  000022                     cmpPass@i:
   472                           	opt stack 0
   473  000022                     init_I2C@clock:
   474                           	opt stack 0
   475                           
   476                           ; 4 bytes @ 0x21
   477  000022                     	ds	1
   478  000023                     readSignal@j:
   479                           	opt stack 0
   480                           
   481                           ; 2 bytes @ 0x22
   482  000023                     	ds	2
   483  000025                     lerToque@toque:
   484                           	opt stack 0
   485  000025                     destravarPorta@pass:
   486                           	opt stack 0
   487                           
   488                           ; 2 bytes @ 0x24
   489  000025                     	ds	1
   490  000026                     ??_init_I2C:
   491                           
   492                           ; 1 bytes @ 0x25
   493  000026                     	ds	1
   494  000027                     lerToque@i:
   495                           	opt stack 0
   496  000027                     destravarPorta@toque:
   497                           	opt stack 0
   498                           
   499                           ; 2 bytes @ 0x26
   500  000027                     	ds	2
   501  000029                     ??_destravarPorta:
   502  000029                     cadastrarSenha@pass:
   503                           	opt stack 0
   504                           
   505                           ; 2 bytes @ 0x28
   506  000029                     	ds	2
   507  00002B                     ??_cadastrarSenha:
   508  00002B                     destravarPorta@i:
   509                           	opt stack 0
   510                           
   511                           ; 2 bytes @ 0x2A
   512  00002B                     	ds	2
   513  00002D                     cadastrarSenha@i:
   514                           	opt stack 0
   515                           
   516                           ; 2 bytes @ 0x2C
   517  00002D                     	ds	2
   518  00002F                     cadastrarSenha@j:
   519                           	opt stack 0
   520                           
   521                           ; 2 bytes @ 0x2E
   522  00002F                     	ds	2
   523  000031                     cadastrarSenha@temp2:
   524                           	opt stack 0
   525                           
   526                           ; 2 bytes @ 0x30
   527  000031                     	ds	2
   528  000033                     cadastrarSenha@temp1:
   529                           	opt stack 0
   530                           
   531                           ; 2 bytes @ 0x32
   532  000033                     	ds	2
   533  000035                     main@toc:
   534                           	opt stack 0
   535                           
   536                           ; 2 bytes @ 0x34
   537  000035                     	ds	2
   538  000037                     main@pass:
   539                           	opt stack 0
   540                           
   541                           ; 2 bytes @ 0x36
   542  000037                     	ds	2
   543                           tblptru	equ	0xFF8
   544                           tblptrh	equ	0xFF7
   545                           tblptrl	equ	0xFF6
   546                           tablat	equ	0xFF5
   547                           
   548 ;;
   549 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   550 ;;
   551 ;; *************** function _main *****************
   552 ;; Defined at:
   553 ;;		line 25 in file "main.c"
   554 ;; Parameters:    Size  Location     Type
   555 ;;		None
   556 ;; Auto vars:     Size  Location     Type
   557 ;;  pass            2   54[COMRAM] unsigned char [2]
   558 ;;  toc             2   52[COMRAM] unsigned char [2]
   559 ;; Return value:  Size  Location     Type
   560 ;;                  1    wreg      void 
   561 ;; Registers used:
   562 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   563 ;; Tracked objects:
   564 ;;		On entry : 0/0
   565 ;;		On exit  : 0/0
   566 ;;		Unchanged: 0/0
   567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   568 ;;      Params:         0       0       0       0       0       0       0       0       0
   569 ;;      Locals:         4       0       0       0       0       0       0       0       0
   570 ;;      Temps:          0       0       0       0       0       0       0       0       0
   571 ;;      Totals:         4       0       0       0       0       0       0       0       0
   572 ;;Total ram usage:        4 bytes
   573 ;; Hardware stack levels required when called:    7
   574 ;; This function calls:
   575 ;;		_cadastrarSenha
   576 ;;		_destravarPorta
   577 ;;		_init_ADC
   578 ;;		_init_I2C
   579 ;;		_init_INTRB2
   580 ;;		_init_LCD
   581 ;;		_init_PWM
   582 ;;		_init_UART
   583 ;; This function is called by:
   584 ;;		Startup code after reset
   585 ;; This function uses a non-reentrant model
   586 ;;
   587                           
   588                           	psect	text0
   589  0010BE                     __ptext0:
   590                           	opt stack 0
   591  0010BE                     _main:
   592                           	opt stack 24
   593                           
   594                           ;main.c: 27: init_PWM();
   595                           
   596                           ;incstack = 0
   597  0010BE  EC7B  F00A         	call	_init_PWM	;wreg free
   598                           
   599                           ;main.c: 28: init_INTRB2();
   600  0010C2  EC8D  F00A         	call	_init_INTRB2	;wreg free
   601                           
   602                           ;main.c: 29: init_LCD();
   603  0010C6  EC24  F00A         	call	_init_LCD	;wreg free
   604                           
   605                           ;main.c: 30: init_ADC();
   606  0010CA  EC84  F00A         	call	_init_ADC	;wreg free
   607                           
   608                           ;main.c: 31: init_UART();
   609  0010CE  EC71  F00A         	call	_init_UART	;wreg free
   610                           
   611                           ;main.c: 32: init_I2C(400000);
   612  0010D2  0E80               	movlw	128
   613  0010D4  6E22               	movwf	init_I2C@clock,c
   614  0010D6  0E1A               	movlw	26
   615  0010D8  6E23               	movwf	init_I2C@clock+1,c
   616  0010DA  0E06               	movlw	6
   617  0010DC  6E24               	movwf	init_I2C@clock+2,c
   618  0010DE  0E00               	movlw	0
   619  0010E0  6E25               	movwf	init_I2C@clock+3,c
   620  0010E2  EC05  F009         	call	_init_I2C	;wreg free
   621                           
   622                           ;main.c: 34: char pass[2];
   623                           ;main.c: 35: pass[0] = 0x00;
   624  0010E6  0E00               	movlw	0
   625  0010E8  6E37               	movwf	main@pass,c
   626                           
   627                           ;main.c: 36: pass[1] = 0x00;
   628  0010EA  0E00               	movlw	0
   629  0010EC  6E38               	movwf	main@pass+1,c
   630                           
   631                           ;main.c: 37: char toc[2];
   632                           ;main.c: 38: toc[0] = 0x00;
   633  0010EE  0E00               	movlw	0
   634  0010F0  6E35               	movwf	main@toc,c
   635                           
   636                           ;main.c: 39: toc[1] = 0x00;
   637  0010F2  0E00               	movlw	0
   638  0010F4  6E36               	movwf	main@toc+1,c
   639                           
   640                           ;main.c: 41: cadastrarSenha(pass);
   641  0010F6  0E37               	movlw	low main@pass
   642  0010F8  6E29               	movwf	cadastrarSenha@pass,c
   643  0010FA  0E00               	movlw	high main@pass
   644  0010FC  6E2A               	movwf	cadastrarSenha@pass+1,c
   645  0010FE  EC40  F005         	call	_cadastrarSenha	;wreg free
   646  001102                     l2030:
   647                           
   648                           ;main.c: 45: destravarPorta(pass, toc);
   649  001102  0E37               	movlw	low main@pass
   650  001104  6E25               	movwf	destravarPorta@pass,c
   651  001106  0E00               	movlw	high main@pass
   652  001108  6E26               	movwf	destravarPorta@pass+1,c
   653  00110A  0E35               	movlw	low main@toc
   654  00110C  6E27               	movwf	destravarPorta@toque,c
   655  00110E  0E00               	movlw	high main@toc
   656  001110  6E28               	movwf	destravarPorta@toque+1,c
   657  001112  EC3B  F004         	call	_destravarPorta	;wreg free
   658                           
   659                           ;main.c: 46: if(buttonConfirm_Cad == 1){
   660  001116  0439               	decf	_buttonConfirm_Cad,w,c
   661  001118  103A               	iorwf	_buttonConfirm_Cad+1,w,c
   662  00111A  A4D8               	btfss	status,2,c
   663  00111C  D7F2               	goto	l2030
   664                           
   665                           ;main.c: 47: buttonConfirm_Cad = 0;
   666  00111E  0E00               	movlw	0
   667  001120  6E3A               	movwf	_buttonConfirm_Cad+1,c
   668  001122  0E00               	movlw	0
   669  001124  6E39               	movwf	_buttonConfirm_Cad,c
   670                           
   671                           ;main.c: 48: cadastrarSenha(pass);
   672  001126  0E37               	movlw	low main@pass
   673  001128  6E29               	movwf	cadastrarSenha@pass,c
   674  00112A  0E00               	movlw	high main@pass
   675  00112C  6E2A               	movwf	cadastrarSenha@pass+1,c
   676  00112E  EC40  F005         	call	_cadastrarSenha	;wreg free
   677                           
   678                           ;main.c: 49: }
   679                           ;main.c: 51: }while(1);
   680  001132  D7E7               	goto	l2030
   681  001134                     __end_of_main:
   682                           	opt stack 0
   683                           tblptru	equ	0xFF8
   684                           tblptrh	equ	0xFF7
   685                           tblptrl	equ	0xFF6
   686                           tablat	equ	0xFF5
   687                           status	equ	0xFD8
   688                           
   689 ;; *************** function _init_UART *****************
   690 ;; Defined at:
   691 ;;		line 13 in file "USART.c"
   692 ;; Parameters:    Size  Location     Type
   693 ;;		None
   694 ;; Auto vars:     Size  Location     Type
   695 ;;		None
   696 ;; Return value:  Size  Location     Type
   697 ;;                  1    wreg      void 
   698 ;; Registers used:
   699 ;;		wreg, status,2
   700 ;; Tracked objects:
   701 ;;		On entry : 0/0
   702 ;;		On exit  : 0/0
   703 ;;		Unchanged: 0/0
   704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   705 ;;      Params:         0       0       0       0       0       0       0       0       0
   706 ;;      Locals:         0       0       0       0       0       0       0       0       0
   707 ;;      Temps:          0       0       0       0       0       0       0       0       0
   708 ;;      Totals:         0       0       0       0       0       0       0       0       0
   709 ;;Total ram usage:        0 bytes
   710 ;; Hardware stack levels used:    1
   711 ;; Hardware stack levels required when called:    2
   712 ;; This function calls:
   713 ;;		Nothing
   714 ;; This function is called by:
   715 ;;		_main
   716 ;; This function uses a non-reentrant model
   717 ;;
   718                           
   719                           	psect	text1
   720  0014E2                     __ptext1:
   721                           	opt stack 0
   722  0014E2                     _init_UART:
   723                           	opt stack 28
   724                           
   725                           ;USART.c: 15: SPBRG = 25;
   726                           
   727                           ;incstack = 0
   728  0014E2  0E19               	movlw	25
   729  0014E4  6EAF               	movwf	4015,c	;volatile
   730                           
   731                           ;USART.c: 16: BRGH = 0;
   732  0014E6  94AC               	bcf	4012,2,c	;volatile
   733                           
   734                           ;USART.c: 17: SYNC = 0;
   735  0014E8  98AC               	bcf	4012,4,c	;volatile
   736                           
   737                           ;USART.c: 18: SPEN = 1;
   738  0014EA  8EAB               	bsf	4011,7,c	;volatile
   739                           
   740                           ;USART.c: 19: TRISC7 = 1;
   741  0014EC  8E94               	bsf	3988,7,c	;volatile
   742                           
   743                           ;USART.c: 20: TRISC6 = 1;
   744  0014EE  8C94               	bsf	3988,6,c	;volatile
   745                           
   746                           ;USART.c: 21: CREN = 1;
   747  0014F0  88AB               	bsf	4011,4,c	;volatile
   748                           
   749                           ;USART.c: 22: TXEN = 1;
   750  0014F2  8AAC               	bsf	4012,5,c	;volatile
   751  0014F4  0012               	return		;funcret
   752  0014F6                     __end_of_init_UART:
   753                           	opt stack 0
   754                           tblptru	equ	0xFF8
   755                           tblptrh	equ	0xFF7
   756                           tblptrl	equ	0xFF6
   757                           tablat	equ	0xFF5
   758                           status	equ	0xFD8
   759                           
   760 ;; *************** function _init_PWM *****************
   761 ;; Defined at:
   762 ;;		line 14 in file "PWM.c"
   763 ;; Parameters:    Size  Location     Type
   764 ;;		None
   765 ;; Auto vars:     Size  Location     Type
   766 ;;		None
   767 ;; Return value:  Size  Location     Type
   768 ;;                  1    wreg      void 
   769 ;; Registers used:
   770 ;;		wreg, status,2
   771 ;; Tracked objects:
   772 ;;		On entry : 0/0
   773 ;;		On exit  : 0/0
   774 ;;		Unchanged: 0/0
   775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   776 ;;      Params:         0       0       0       0       0       0       0       0       0
   777 ;;      Locals:         0       0       0       0       0       0       0       0       0
   778 ;;      Temps:          0       0       0       0       0       0       0       0       0
   779 ;;      Totals:         0       0       0       0       0       0       0       0       0
   780 ;;Total ram usage:        0 bytes
   781 ;; Hardware stack levels used:    1
   782 ;; Hardware stack levels required when called:    2
   783 ;; This function calls:
   784 ;;		Nothing
   785 ;; This function is called by:
   786 ;;		_main
   787 ;; This function uses a non-reentrant model
   788 ;;
   789                           
   790                           	psect	text2
   791  0014F6                     __ptext2:
   792                           	opt stack 0
   793  0014F6                     _init_PWM:
   794                           	opt stack 28
   795                           
   796                           ;PWM.c: 15: TRISCbits.TRISC2 = 0;
   797                           
   798                           ;incstack = 0
   799  0014F6  9494               	bcf	3988,2,c	;volatile
   800                           
   801                           ;PWM.c: 16: T2CON = 0x04;
   802  0014F8  0E04               	movlw	4
   803  0014FA  6ECA               	movwf	4042,c	;volatile
   804                           
   805                           ;PWM.c: 17: PR2 = 0xFF;
   806  0014FC  68CB               	setf	4043,c	;volatile
   807                           
   808                           ;PWM.c: 18: CCP1CON = 0x3F;
   809  0014FE  0E3F               	movlw	63
   810  001500  6EBD               	movwf	4029,c	;volatile
   811                           
   812                           ;PWM.c: 19: CCPR1L = 0x00;
   813  001502  0E00               	movlw	0
   814  001504  6EBE               	movwf	4030,c	;volatile
   815  001506  0012               	return		;funcret
   816  001508                     __end_of_init_PWM:
   817                           	opt stack 0
   818                           tblptru	equ	0xFF8
   819                           tblptrh	equ	0xFF7
   820                           tblptrl	equ	0xFF6
   821                           tablat	equ	0xFF5
   822                           status	equ	0xFD8
   823                           
   824 ;; *************** function _init_LCD *****************
   825 ;; Defined at:
   826 ;;		line 45 in file "LCD.c"
   827 ;; Parameters:    Size  Location     Type
   828 ;;		None
   829 ;; Auto vars:     Size  Location     Type
   830 ;;		None
   831 ;; Return value:  Size  Location     Type
   832 ;;                  1    wreg      void 
   833 ;; Registers used:
   834 ;;		wreg, status,2, cstack
   835 ;; Tracked objects:
   836 ;;		On entry : 0/0
   837 ;;		On exit  : 0/0
   838 ;;		Unchanged: 0/0
   839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   840 ;;      Params:         0       0       0       0       0       0       0       0       0
   841 ;;      Locals:         0       0       0       0       0       0       0       0       0
   842 ;;      Temps:          0       0       0       0       0       0       0       0       0
   843 ;;      Totals:         0       0       0       0       0       0       0       0       0
   844 ;;Total ram usage:        0 bytes
   845 ;; Hardware stack levels used:    1
   846 ;; Hardware stack levels required when called:    4
   847 ;; This function calls:
   848 ;;		_send_cfg
   849 ;; This function is called by:
   850 ;;		_main
   851 ;; This function uses a non-reentrant model
   852 ;;
   853                           
   854                           	psect	text3
   855  001448                     __ptext3:
   856                           	opt stack 0
   857  001448                     _init_LCD:
   858                           	opt stack 26
   859                           
   860                           ;LCD.c: 47: TRISB = 0x04;
   861                           
   862                           ;incstack = 0
   863  001448  0E04               	movlw	4
   864  00144A  6E93               	movwf	3987,c	;volatile
   865                           
   866                           ;LCD.c: 48: TRISD = 0x00;
   867  00144C  0E00               	movlw	0
   868  00144E  6E95               	movwf	3989,c	;volatile
   869                           
   870                           ;LCD.c: 49: TRISE = 0x00;
   871  001450  0E00               	movlw	0
   872  001452  6E96               	movwf	3990,c	;volatile
   873                           
   874                           ;LCD.c: 50: PORTD = 0x00;
   875  001454  0E00               	movlw	0
   876  001456  6E83               	movwf	3971,c	;volatile
   877                           
   878                           ;LCD.c: 52: send_cfg(0x01);
   879  001458  0E01               	movlw	1
   880  00145A  EC48  F00A         	call	_send_cfg
   881                           
   882                           ;LCD.c: 53: send_cfg(0x38);
   883  00145E  0E38               	movlw	56
   884  001460  EC48  F00A         	call	_send_cfg
   885                           
   886                           ;LCD.c: 54: send_cfg(0x80);
   887  001464  0E80               	movlw	128
   888  001466  EC48  F00A         	call	_send_cfg
   889                           
   890                           ;LCD.c: 55: send_cfg(0x0F);
   891  00146A  0E0F               	movlw	15
   892  00146C  EC48  F00A         	call	_send_cfg
   893  001470  0012               	return		;funcret
   894  001472                     __end_of_init_LCD:
   895                           	opt stack 0
   896                           tblptru	equ	0xFF8
   897                           tblptrh	equ	0xFF7
   898                           tblptrl	equ	0xFF6
   899                           tablat	equ	0xFF5
   900                           status	equ	0xFD8
   901                           
   902 ;; *************** function _init_INTRB2 *****************
   903 ;; Defined at:
   904 ;;		line 51 in file "Interrupt.c"
   905 ;; Parameters:    Size  Location     Type
   906 ;;		None
   907 ;; Auto vars:     Size  Location     Type
   908 ;;		None
   909 ;; Return value:  Size  Location     Type
   910 ;;                  1    wreg      void 
   911 ;; Registers used:
   912 ;;		None
   913 ;; Tracked objects:
   914 ;;		On entry : 0/0
   915 ;;		On exit  : 0/0
   916 ;;		Unchanged: 0/0
   917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   918 ;;      Params:         0       0       0       0       0       0       0       0       0
   919 ;;      Locals:         0       0       0       0       0       0       0       0       0
   920 ;;      Temps:          0       0       0       0       0       0       0       0       0
   921 ;;      Totals:         0       0       0       0       0       0       0       0       0
   922 ;;Total ram usage:        0 bytes
   923 ;; Hardware stack levels used:    1
   924 ;; Hardware stack levels required when called:    2
   925 ;; This function calls:
   926 ;;		Nothing
   927 ;; This function is called by:
   928 ;;		_main
   929 ;; This function uses a non-reentrant model
   930 ;;
   931                           
   932                           	psect	text4
   933  00151A                     __ptext4:
   934                           	opt stack 0
   935  00151A                     _init_INTRB2:
   936                           	opt stack 28
   937                           
   938                           ;Interrupt.c: 53: INTCONbits.GIE = 0;
   939                           
   940                           ;incstack = 0
   941  00151A  9EF2               	bcf	intcon,7,c	;volatile
   942                           
   943                           ;Interrupt.c: 54: INTCONbits.PEIE = 0;
   944  00151C  9CF2               	bcf	intcon,6,c	;volatile
   945                           
   946                           ;Interrupt.c: 55: TRISBbits.RB2 = 1;
   947  00151E  8493               	bsf	3987,2,c	;volatile
   948                           
   949                           ;Interrupt.c: 56: INTCON2bits.INTEDG0 = 1;
   950  001520  8CF1               	bsf	intcon2,6,c	;volatile
   951                           
   952                           ;Interrupt.c: 57: INTCON3bits.INT2IF = 0;
   953  001522  92F0               	bcf	intcon3,1,c	;volatile
   954                           
   955                           ;Interrupt.c: 58: INTCON3bits.INT2IE = 1;
   956  001524  88F0               	bsf	intcon3,4,c	;volatile
   957                           
   958                           ;Interrupt.c: 59: INTCONbits.GIE = 1;
   959  001526  8EF2               	bsf	intcon,7,c	;volatile
   960  001528  0012               	return		;funcret
   961  00152A                     __end_of_init_INTRB2:
   962                           	opt stack 0
   963                           tblptru	equ	0xFF8
   964                           tblptrh	equ	0xFF7
   965                           tblptrl	equ	0xFF6
   966                           tablat	equ	0xFF5
   967                           intcon	equ	0xFF2
   968                           intcon2	equ	0xFF1
   969                           intcon3	equ	0xFF0
   970                           status	equ	0xFD8
   971                           
   972 ;; *************** function _init_I2C *****************
   973 ;; Defined at:
   974 ;;		line 12 in file "I2C.c"
   975 ;; Parameters:    Size  Location     Type
   976 ;;  clock           4   33[COMRAM] const unsigned long 
   977 ;; Auto vars:     Size  Location     Type
   978 ;;		None
   979 ;; Return value:  Size  Location     Type
   980 ;;                  1    wreg      void 
   981 ;; Registers used:
   982 ;;		wreg, status,2, status,0, cstack
   983 ;; Tracked objects:
   984 ;;		On entry : 0/0
   985 ;;		On exit  : 0/0
   986 ;;		Unchanged: 0/0
   987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   988 ;;      Params:         4       0       0       0       0       0       0       0       0
   989 ;;      Locals:         0       0       0       0       0       0       0       0       0
   990 ;;      Temps:          4       0       0       0       0       0       0       0       0
   991 ;;      Totals:         8       0       0       0       0       0       0       0       0
   992 ;;Total ram usage:        8 bytes
   993 ;; Hardware stack levels used:    1
   994 ;; Hardware stack levels required when called:    3
   995 ;; This function calls:
   996 ;;		___lldiv
   997 ;; This function is called by:
   998 ;;		_main
   999 ;; This function uses a non-reentrant model
  1000 ;;
  1001                           
  1002                           	psect	text5
  1003  00120A                     __ptext5:
  1004                           	opt stack 0
  1005  00120A                     _init_I2C:
  1006                           	opt stack 27
  1007                           
  1008                           ;I2C.c: 13: SSPCON1 = 0b00101000;
  1009                           
  1010                           ;incstack = 0
  1011  00120A  0E28               	movlw	40
  1012  00120C  6EC6               	movwf	4038,c	;volatile
  1013                           
  1014                           ;I2C.c: 15: SSPCON2 = 0;
  1015  00120E  0E00               	movlw	0
  1016  001210  6EC5               	movwf	4037,c	;volatile
  1017                           
  1018                           ;I2C.c: 16: SSPADD = (16000000/(4*clock))-1;
  1019  001212  0E00               	movlw	0
  1020  001214  6E15               	movwf	___lldiv@dividend,c
  1021  001216  0E24               	movlw	36
  1022  001218  6E16               	movwf	___lldiv@dividend+1,c
  1023  00121A  0EF4               	movlw	244
  1024  00121C  6E17               	movwf	___lldiv@dividend+2,c
  1025  00121E  0E00               	movlw	0
  1026  001220  6E18               	movwf	___lldiv@dividend+3,c
  1027  001222  C022  F026         	movff	init_I2C@clock,??_init_I2C
  1028  001226  C023  F027         	movff	init_I2C@clock+1,??_init_I2C+1
  1029  00122A  C024  F028         	movff	init_I2C@clock+2,??_init_I2C+2
  1030  00122E  C025  F029         	movff	init_I2C@clock+3,??_init_I2C+3
  1031  001232  0E02               	movlw	2
  1032  001234                     u1045:
  1033  001234  90D8               	bcf	status,0,c
  1034  001236  3626               	rlcf	??_init_I2C,f,c
  1035  001238  3627               	rlcf	??_init_I2C+1,f,c
  1036  00123A  3628               	rlcf	??_init_I2C+2,f,c
  1037  00123C  3629               	rlcf	??_init_I2C+3,f,c
  1038  00123E  2EE8               	decfsz	wreg,f,c
  1039  001240  D7F9               	goto	u1045
  1040  001242  C026  F019         	movff	??_init_I2C,___lldiv@divisor
  1041  001246  C027  F01A         	movff	??_init_I2C+1,___lldiv@divisor+1
  1042  00124A  C028  F01B         	movff	??_init_I2C+2,___lldiv@divisor+2
  1043  00124E  C029  F01C         	movff	??_init_I2C+3,___lldiv@divisor+3
  1044  001252  EC1E  F008         	call	___lldiv	;wreg free
  1045  001256  0415               	decf	?___lldiv,w,c
  1046  001258  6EC8               	movwf	4040,c	;volatile
  1047                           
  1048                           ;I2C.c: 17: SSPSTAT = 0;
  1049  00125A  0E00               	movlw	0
  1050  00125C  6EC7               	movwf	4039,c	;volatile
  1051                           
  1052                           ;I2C.c: 18: TRISBbits.RB1 = 0;
  1053  00125E  9293               	bcf	3987,1,c	;volatile
  1054                           
  1055                           ;I2C.c: 19: TRISBbits.RB0 = 0;
  1056  001260  9093               	bcf	3987,0,c	;volatile
  1057  001262  0012               	return		;funcret
  1058  001264                     __end_of_init_I2C:
  1059                           	opt stack 0
  1060                           tblptru	equ	0xFF8
  1061                           tblptrh	equ	0xFF7
  1062                           tblptrl	equ	0xFF6
  1063                           tablat	equ	0xFF5
  1064                           intcon	equ	0xFF2
  1065                           intcon2	equ	0xFF1
  1066                           intcon3	equ	0xFF0
  1067                           wreg	equ	0xFE8
  1068                           status	equ	0xFD8
  1069                           
  1070 ;; *************** function ___lldiv *****************
  1071 ;; Defined at:
  1072 ;;		line 8 in file "/opt/microchip/xc8/v1.41/sources/common/lldiv.c"
  1073 ;; Parameters:    Size  Location     Type
  1074 ;;  dividend        4   20[COMRAM] unsigned long 
  1075 ;;  divisor         4   24[COMRAM] unsigned long 
  1076 ;; Auto vars:     Size  Location     Type
  1077 ;;  quotient        4   28[COMRAM] unsigned long 
  1078 ;;  counter         1   32[COMRAM] unsigned char 
  1079 ;; Return value:  Size  Location     Type
  1080 ;;                  4   20[COMRAM] unsigned long 
  1081 ;; Registers used:
  1082 ;;		wreg, status,2, status,0
  1083 ;; Tracked objects:
  1084 ;;		On entry : 0/0
  1085 ;;		On exit  : 0/0
  1086 ;;		Unchanged: 0/0
  1087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1088 ;;      Params:         8       0       0       0       0       0       0       0       0
  1089 ;;      Locals:         5       0       0       0       0       0       0       0       0
  1090 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1091 ;;      Totals:        13       0       0       0       0       0       0       0       0
  1092 ;;Total ram usage:       13 bytes
  1093 ;; Hardware stack levels used:    1
  1094 ;; Hardware stack levels required when called:    2
  1095 ;; This function calls:
  1096 ;;		Nothing
  1097 ;; This function is called by:
  1098 ;;		_init_I2C
  1099 ;; This function uses a non-reentrant model
  1100 ;;
  1101                           
  1102                           	psect	text6
  1103  00103C                     __ptext6:
  1104                           	opt stack 0
  1105  00103C                     ___lldiv:
  1106                           	opt stack 27
  1107                           
  1108                           ;incstack = 0
  1109  00103C  0E00               	movlw	0
  1110  00103E  6E1D               	movwf	___lldiv@quotient,c
  1111  001040  0E00               	movlw	0
  1112  001042  6E1E               	movwf	___lldiv@quotient+1,c
  1113  001044  0E00               	movlw	0
  1114  001046  6E1F               	movwf	___lldiv@quotient+2,c
  1115  001048  0E00               	movlw	0
  1116  00104A  6E20               	movwf	___lldiv@quotient+3,c
  1117  00104C  5019               	movf	___lldiv@divisor,w,c
  1118  00104E  101A               	iorwf	___lldiv@divisor+1,w,c
  1119  001050  101B               	iorwf	___lldiv@divisor+2,w,c
  1120  001052  101C               	iorwf	___lldiv@divisor+3,w,c
  1121  001054  B4D8               	btfsc	status,2,c
  1122  001056  D02A               	goto	l750
  1123  001058  0E01               	movlw	1
  1124  00105A  6E21               	movwf	___lldiv@counter,c
  1125  00105C  D006               	goto	l1830
  1126  00105E                     l1828:
  1127  00105E  90D8               	bcf	status,0,c
  1128  001060  3619               	rlcf	___lldiv@divisor,f,c
  1129  001062  361A               	rlcf	___lldiv@divisor+1,f,c
  1130  001064  361B               	rlcf	___lldiv@divisor+2,f,c
  1131  001066  361C               	rlcf	___lldiv@divisor+3,f,c
  1132  001068  2A21               	incf	___lldiv@counter,f,c
  1133  00106A                     l1830:
  1134  00106A  AE1C               	btfss	___lldiv@divisor+3,7,c
  1135  00106C  D7F8               	goto	l1828
  1136  00106E                     l1832:
  1137  00106E  90D8               	bcf	status,0,c
  1138  001070  361D               	rlcf	___lldiv@quotient,f,c
  1139  001072  361E               	rlcf	___lldiv@quotient+1,f,c
  1140  001074  361F               	rlcf	___lldiv@quotient+2,f,c
  1141  001076  3620               	rlcf	___lldiv@quotient+3,f,c
  1142  001078  5019               	movf	___lldiv@divisor,w,c
  1143  00107A  5C15               	subwf	___lldiv@dividend,w,c
  1144  00107C  501A               	movf	___lldiv@divisor+1,w,c
  1145  00107E  5816               	subwfb	___lldiv@dividend+1,w,c
  1146  001080  501B               	movf	___lldiv@divisor+2,w,c
  1147  001082  5817               	subwfb	___lldiv@dividend+2,w,c
  1148  001084  501C               	movf	___lldiv@divisor+3,w,c
  1149  001086  5818               	subwfb	___lldiv@dividend+3,w,c
  1150  001088  A0D8               	btfss	status,0,c
  1151  00108A  D009               	goto	l1840
  1152  00108C  5019               	movf	___lldiv@divisor,w,c
  1153  00108E  5E15               	subwf	___lldiv@dividend,f,c
  1154  001090  501A               	movf	___lldiv@divisor+1,w,c
  1155  001092  5A16               	subwfb	___lldiv@dividend+1,f,c
  1156  001094  501B               	movf	___lldiv@divisor+2,w,c
  1157  001096  5A17               	subwfb	___lldiv@dividend+2,f,c
  1158  001098  501C               	movf	___lldiv@divisor+3,w,c
  1159  00109A  5A18               	subwfb	___lldiv@dividend+3,f,c
  1160  00109C  801D               	bsf	___lldiv@quotient,0,c
  1161  00109E                     l1840:
  1162  00109E  90D8               	bcf	status,0,c
  1163  0010A0  321C               	rrcf	___lldiv@divisor+3,f,c
  1164  0010A2  321B               	rrcf	___lldiv@divisor+2,f,c
  1165  0010A4  321A               	rrcf	___lldiv@divisor+1,f,c
  1166  0010A6  3219               	rrcf	___lldiv@divisor,f,c
  1167  0010A8  2E21               	decfsz	___lldiv@counter,f,c
  1168  0010AA  D7E1               	goto	l1832
  1169  0010AC                     l750:
  1170  0010AC  C01D  F015         	movff	___lldiv@quotient,?___lldiv
  1171  0010B0  C01E  F016         	movff	___lldiv@quotient+1,?___lldiv+1
  1172  0010B4  C01F  F017         	movff	___lldiv@quotient+2,?___lldiv+2
  1173  0010B8  C020  F018         	movff	___lldiv@quotient+3,?___lldiv+3
  1174  0010BC  0012               	return		;funcret
  1175  0010BE                     __end_of___lldiv:
  1176                           	opt stack 0
  1177                           tblptru	equ	0xFF8
  1178                           tblptrh	equ	0xFF7
  1179                           tblptrl	equ	0xFF6
  1180                           tablat	equ	0xFF5
  1181                           intcon	equ	0xFF2
  1182                           intcon2	equ	0xFF1
  1183                           intcon3	equ	0xFF0
  1184                           wreg	equ	0xFE8
  1185                           status	equ	0xFD8
  1186                           
  1187 ;; *************** function _init_ADC *****************
  1188 ;; Defined at:
  1189 ;;		line 11 in file "ADC.c"
  1190 ;; Parameters:    Size  Location     Type
  1191 ;;		None
  1192 ;; Auto vars:     Size  Location     Type
  1193 ;;		None
  1194 ;; Return value:  Size  Location     Type
  1195 ;;                  1    wreg      void 
  1196 ;; Registers used:
  1197 ;;		wreg, status,2
  1198 ;; Tracked objects:
  1199 ;;		On entry : 0/0
  1200 ;;		On exit  : 0/0
  1201 ;;		Unchanged: 0/0
  1202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1203 ;;      Params:         0       0       0       0       0       0       0       0       0
  1204 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1205 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1206 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1207 ;;Total ram usage:        0 bytes
  1208 ;; Hardware stack levels used:    1
  1209 ;; Hardware stack levels required when called:    2
  1210 ;; This function calls:
  1211 ;;		Nothing
  1212 ;; This function is called by:
  1213 ;;		_main
  1214 ;; This function uses a non-reentrant model
  1215 ;;
  1216                           
  1217                           	psect	text7
  1218  001508                     __ptext7:
  1219                           	opt stack 0
  1220  001508                     _init_ADC:
  1221                           	opt stack 28
  1222                           
  1223                           ;ADC.c: 12: TRISAbits.TRISA0 = 1;
  1224                           
  1225                           ;incstack = 0
  1226  001508  8092               	bsf	3986,0,c	;volatile
  1227                           
  1228                           ;ADC.c: 13: ADCON0 = 0;
  1229  00150A  0E00               	movlw	0
  1230  00150C  6EC2               	movwf	4034,c	;volatile
  1231                           
  1232                           ;ADC.c: 14: ADCON1 = 0x0e;
  1233  00150E  0E0E               	movlw	14
  1234  001510  6EC1               	movwf	4033,c	;volatile
  1235                           
  1236                           ;ADC.c: 15: ADCON2 = 0xd9;
  1237  001512  0ED9               	movlw	217
  1238  001514  6EC0               	movwf	4032,c	;volatile
  1239                           
  1240                           ;ADC.c: 16: ADCON0bits.ADON = 1;
  1241  001516  80C2               	bsf	4034,0,c	;volatile
  1242  001518  0012               	return		;funcret
  1243  00151A                     __end_of_init_ADC:
  1244                           	opt stack 0
  1245                           tblptru	equ	0xFF8
  1246                           tblptrh	equ	0xFF7
  1247                           tblptrl	equ	0xFF6
  1248                           tablat	equ	0xFF5
  1249                           intcon	equ	0xFF2
  1250                           intcon2	equ	0xFF1
  1251                           intcon3	equ	0xFF0
  1252                           wreg	equ	0xFE8
  1253                           status	equ	0xFD8
  1254                           
  1255 ;; *************** function _destravarPorta *****************
  1256 ;; Defined at:
  1257 ;;		line 53 in file "TOCTOC.c"
  1258 ;; Parameters:    Size  Location     Type
  1259 ;;  pass            2   36[COMRAM] PTR unsigned char 
  1260 ;;		 -> main@pass(2), 
  1261 ;;  toque           2   38[COMRAM] PTR unsigned char 
  1262 ;;		 -> main@toc(2), 
  1263 ;; Auto vars:     Size  Location     Type
  1264 ;;  i               2   42[COMRAM] int 
  1265 ;; Return value:  Size  Location     Type
  1266 ;;                  1    wreg      void 
  1267 ;; Registers used:
  1268 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1269 ;; Tracked objects:
  1270 ;;		On entry : 0/0
  1271 ;;		On exit  : 0/0
  1272 ;;		Unchanged: 0/0
  1273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1274 ;;      Params:         4       0       0       0       0       0       0       0       0
  1275 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1276 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1277 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1278 ;;Total ram usage:        8 bytes
  1279 ;; Hardware stack levels used:    1
  1280 ;; Hardware stack levels required when called:    6
  1281 ;; This function calls:
  1282 ;;		_DutyCycle_PWM
  1283 ;;		_checkUSART
  1284 ;;		_clearLCD
  1285 ;;		_cmpPass
  1286 ;;		_readSignal
  1287 ;;		_read_ADC
  1288 ;;		_send_msg
  1289 ;;		_set_line
  1290 ;;		_write_LCD
  1291 ;; This function is called by:
  1292 ;;		_main
  1293 ;; This function uses a non-reentrant model
  1294 ;;
  1295                           
  1296                           	psect	text8
  1297  000876                     __ptext8:
  1298                           	opt stack 0
  1299  000876                     _destravarPorta:
  1300                           	opt stack 24
  1301                           
  1302                           ;TOCTOC.c: 55: int i = 0;
  1303                           
  1304                           ;incstack = 0
  1305  000876  0E00               	movlw	0
  1306  000878  6E2C               	movwf	destravarPorta@i+1,c
  1307  00087A  0E00               	movlw	0
  1308  00087C  6E2B               	movwf	destravarPorta@i,c
  1309                           
  1310                           ;TOCTOC.c: 57: toque[0] = 0x00;
  1311  00087E  C027  FFD9         	movff	destravarPorta@toque,fsr2l
  1312  000882  C028  FFDA         	movff	destravarPorta@toque+1,fsr2h
  1313  000886  0E00               	movlw	0
  1314  000888  6EDF               	movwf	indf2,c
  1315                           
  1316                           ;TOCTOC.c: 58: toque[1] = 0x00;
  1317  00088A  EE20 F001          	lfsr	2,1
  1318  00088E  5027               	movf	destravarPorta@toque,w,c
  1319  000890  26D9               	addwf	fsr2l,f,c
  1320  000892  5028               	movf	destravarPorta@toque+1,w,c
  1321  000894  22DA               	addwfc	fsr2h,f,c
  1322  000896  0E00               	movlw	0
  1323  000898  6EDF               	movwf	indf2,c
  1324                           
  1325                           ;TOCTOC.c: 60: clearLCD();
  1326  00089A  EC9D  F00A         	call	_clearLCD	;wreg free
  1327                           
  1328                           ;TOCTOC.c: 61: set_line(0,0);
  1329  00089E  0E00               	movlw	0
  1330  0008A0  6E19               	movwf	set_line@line+1,c
  1331  0008A2  0E00               	movlw	0
  1332  0008A4  6E18               	movwf	set_line@line,c
  1333  0008A6  0E00               	movlw	0
  1334  0008A8  6E1B               	movwf	set_line@pos+1,c
  1335  0008AA  0E00               	movlw	0
  1336  0008AC  6E1A               	movwf	set_line@pos,c
  1337  0008AE  EC57  F00A         	call	_set_line	;wreg free
  1338                           
  1339                           ;TOCTOC.c: 62: write_LCD("Bata na porta");
  1340  0008B2  0E01               	movlw	low STR_1
  1341  0008B4  6E18               	movwf	write_LCD@c,c
  1342  0008B6  0E08               	movlw	high STR_1
  1343  0008B8  6E19               	movwf	write_LCD@c+1,c
  1344  0008BA  EC58  F009         	call	_write_LCD	;wreg free
  1345                           
  1346                           ;TOCTOC.c: 64: while((int)read_ADC() < 25){
  1347  0008BE  D00D               	goto	l1934
  1348  0008C0                     l1924:
  1349                           
  1350                           ;TOCTOC.c: 65: checkUSART();
  1351  0008C0  ECD5  F008         	call	_checkUSART	;wreg free
  1352                           
  1353                           ;TOCTOC.c: 66: if(PORTBbits.RB4 == 1 || buttonConfirm_Cad == 1){
  1354  0008C4  B881               	btfsc	3969,4,c	;volatile
  1355  0008C6  D004               	goto	l1930
  1356  0008C8  0439               	decf	_buttonConfirm_Cad,w,c
  1357  0008CA  103A               	iorwf	_buttonConfirm_Cad+1,w,c
  1358  0008CC  A4D8               	btfss	status,2,c
  1359  0008CE  D005               	goto	l1934
  1360  0008D0                     l1930:
  1361                           
  1362                           ;TOCTOC.c: 67: buttonConfirm_Cad = 1;
  1363  0008D0  0E00               	movlw	0
  1364  0008D2  6E3A               	movwf	_buttonConfirm_Cad+1,c
  1365  0008D4  0E01               	movlw	1
  1366  0008D6  6E39               	movwf	_buttonConfirm_Cad,c
  1367                           
  1368                           ;TOCTOC.c: 68: return;
  1369  0008D8  0012               	return	
  1370  0008DA                     l1934:
  1371  0008DA  EC65  F00A         	call	_read_ADC	;wreg free
  1372  0008DE  BE16               	btfsc	?_read_ADC+1,7,c
  1373  0008E0  D7EF               	goto	l1924
  1374  0008E2  5016               	movf	?_read_ADC+1,w,c
  1375  0008E4  E151               	bnz	l1954
  1376  0008E6  0E19               	movlw	25
  1377  0008E8  5C15               	subwf	?_read_ADC,w,c
  1378  0008EA  B0D8               	btfsc	status,0,c
  1379  0008EC  D04D               	goto	l1954
  1380  0008EE  D7E8               	goto	l1924
  1381  0008F0                     l1936:
  1382                           
  1383                           ;TOCTOC.c: 73: set_line(1,0);
  1384  0008F0  0E00               	movlw	0
  1385  0008F2  6E19               	movwf	set_line@line+1,c
  1386  0008F4  0E01               	movlw	1
  1387  0008F6  6E18               	movwf	set_line@line,c
  1388  0008F8  0E00               	movlw	0
  1389  0008FA  6E1B               	movwf	set_line@pos+1,c
  1390  0008FC  0E00               	movlw	0
  1391  0008FE  6E1A               	movwf	set_line@pos,c
  1392  000900  EC57  F00A         	call	_set_line	;wreg free
  1393                           
  1394                           ;TOCTOC.c: 74: send_msg('1'+ i);
  1395  000904  502B               	movf	destravarPorta@i,w,c
  1396  000906  0F31               	addlw	49
  1397  000908  EC0C  F00A         	call	_send_msg
  1398                           
  1399                           ;TOCTOC.c: 75: if(i == 0)
  1400  00090C  502B               	movf	destravarPorta@i,w,c
  1401  00090E  102C               	iorwf	destravarPorta@i+1,w,c
  1402  000910  A4D8               	btfss	status,2,c
  1403  000912  D00B               	goto	l1942
  1404                           
  1405                           ;TOCTOC.c: 76: readSignal(&toque[0], 0);
  1406  000914  C027  F019         	movff	destravarPorta@toque,readSignal@signal
  1407  000918  C028  F01A         	movff	destravarPorta@toque+1,readSignal@signal+1
  1408  00091C  0E00               	movlw	0
  1409  00091E  6E1C               	movwf	readSignal@pos+1,c
  1410  000920  0E00               	movlw	0
  1411  000922  6E1B               	movwf	readSignal@pos,c
  1412  000924  ECCD  F007         	call	_readSignal	;wreg free
  1413  000928  D02D               	goto	l1952
  1414  00092A                     l1942:
  1415                           
  1416                           ;TOCTOC.c: 77: else if(i == 1)
  1417  00092A  042B               	decf	destravarPorta@i,w,c
  1418  00092C  102C               	iorwf	destravarPorta@i+1,w,c
  1419  00092E  A4D8               	btfss	status,2,c
  1420  000930  D00B               	goto	l1946
  1421                           
  1422                           ;TOCTOC.c: 78: readSignal(&toque[0], 1);
  1423  000932  C027  F019         	movff	destravarPorta@toque,readSignal@signal
  1424  000936  C028  F01A         	movff	destravarPorta@toque+1,readSignal@signal+1
  1425  00093A  0E00               	movlw	0
  1426  00093C  6E1C               	movwf	readSignal@pos+1,c
  1427  00093E  0E01               	movlw	1
  1428  000940  6E1B               	movwf	readSignal@pos,c
  1429  000942  ECCD  F007         	call	_readSignal	;wreg free
  1430  000946  D01E               	goto	l1952
  1431  000948                     l1946:
  1432                           
  1433                           ;TOCTOC.c: 79: else if(i == 2)
  1434  000948  0E02               	movlw	2
  1435  00094A  182B               	xorwf	destravarPorta@i,w,c
  1436  00094C  102C               	iorwf	destravarPorta@i+1,w,c
  1437  00094E  A4D8               	btfss	status,2,c
  1438  000950  D00D               	goto	l1950
  1439                           
  1440                           ;TOCTOC.c: 80: readSignal(&toque[1], 0);
  1441  000952  0E01               	movlw	1
  1442  000954  2427               	addwf	destravarPorta@toque,w,c
  1443  000956  6E19               	movwf	readSignal@signal,c
  1444  000958  0E00               	movlw	0
  1445  00095A  2028               	addwfc	destravarPorta@toque+1,w,c
  1446  00095C  6E1A               	movwf	readSignal@signal+1,c
  1447  00095E  0E00               	movlw	0
  1448  000960  6E1C               	movwf	readSignal@pos+1,c
  1449  000962  0E00               	movlw	0
  1450  000964  6E1B               	movwf	readSignal@pos,c
  1451  000966  ECCD  F007         	call	_readSignal	;wreg free
  1452  00096A  D00C               	goto	l1952
  1453  00096C                     l1950:
  1454                           
  1455                           ;TOCTOC.c: 81: else
  1456                           ;TOCTOC.c: 82: readSignal(&toque[1], 1);
  1457  00096C  0E01               	movlw	1
  1458  00096E  2427               	addwf	destravarPorta@toque,w,c
  1459  000970  6E19               	movwf	readSignal@signal,c
  1460  000972  0E00               	movlw	0
  1461  000974  2028               	addwfc	destravarPorta@toque+1,w,c
  1462  000976  6E1A               	movwf	readSignal@signal+1,c
  1463  000978  0E00               	movlw	0
  1464  00097A  6E1C               	movwf	readSignal@pos+1,c
  1465  00097C  0E01               	movlw	1
  1466  00097E  6E1B               	movwf	readSignal@pos,c
  1467  000980  ECCD  F007         	call	_readSignal	;wreg free
  1468  000984                     l1952:
  1469                           
  1470                           ;TOCTOC.c: 83: i++;
  1471  000984  4A2B               	infsnz	destravarPorta@i,f,c
  1472  000986  2A2C               	incf	destravarPorta@i+1,f,c
  1473  000988                     l1954:
  1474  000988  BE2C               	btfsc	destravarPorta@i+1,7,c
  1475  00098A  D7B2               	goto	l1936
  1476  00098C  502C               	movf	destravarPorta@i+1,w,c
  1477  00098E  E104               	bnz	l1956
  1478  000990  0E04               	movlw	4
  1479  000992  5C2B               	subwf	destravarPorta@i,w,c
  1480  000994  A0D8               	btfss	status,0,c
  1481  000996  D7AC               	goto	l1936
  1482  000998                     l1956:
  1483                           
  1484                           ;TOCTOC.c: 84: }
  1485                           ;TOCTOC.c: 85: if(cmpPass(pass, toque)){
  1486  000998  C025  F01E         	movff	destravarPorta@pass,cmpPass@pass
  1487  00099C  C026  F01F         	movff	destravarPorta@pass+1,cmpPass@pass+1
  1488  0009A0  C027  F020         	movff	destravarPorta@toque,cmpPass@toque
  1489  0009A4  C028  F021         	movff	destravarPorta@toque+1,cmpPass@toque+1
  1490  0009A8  EC9C  F006         	call	_cmpPass	;wreg free
  1491  0009AC  501E               	movf	?_cmpPass,w,c
  1492  0009AE  101F               	iorwf	?_cmpPass+1,w,c
  1493  0009B0  B4D8               	btfsc	status,2,c
  1494  0009B2  D043               	goto	l1978
  1495                           
  1496                           ;TOCTOC.c: 86: clearLCD();
  1497  0009B4  EC9D  F00A         	call	_clearLCD	;wreg free
  1498                           
  1499                           ;TOCTOC.c: 87: set_line(0,4);
  1500  0009B8  0E00               	movlw	0
  1501  0009BA  6E19               	movwf	set_line@line+1,c
  1502  0009BC  0E00               	movlw	0
  1503  0009BE  6E18               	movwf	set_line@line,c
  1504  0009C0  0E00               	movlw	0
  1505  0009C2  6E1B               	movwf	set_line@pos+1,c
  1506  0009C4  0E04               	movlw	4
  1507  0009C6  6E1A               	movwf	set_line@pos,c
  1508  0009C8  EC57  F00A         	call	_set_line	;wreg free
  1509                           
  1510                           ;TOCTOC.c: 88: write_LCD("Porta");
  1511  0009CC  0E6F               	movlw	low STR_3
  1512  0009CE  6E18               	movwf	write_LCD@c,c
  1513  0009D0  0E08               	movlw	high STR_3
  1514  0009D2  6E19               	movwf	write_LCD@c+1,c
  1515  0009D4  EC58  F009         	call	_write_LCD	;wreg free
  1516                           
  1517                           ;TOCTOC.c: 89: set_line(1,2);
  1518  0009D8  0E00               	movlw	0
  1519  0009DA  6E19               	movwf	set_line@line+1,c
  1520  0009DC  0E01               	movlw	1
  1521  0009DE  6E18               	movwf	set_line@line,c
  1522  0009E0  0E00               	movlw	0
  1523  0009E2  6E1B               	movwf	set_line@pos+1,c
  1524  0009E4  0E02               	movlw	2
  1525  0009E6  6E1A               	movwf	set_line@pos,c
  1526  0009E8  EC57  F00A         	call	_set_line	;wreg free
  1527                           
  1528                           ;TOCTOC.c: 90: write_LCD("Destravada!");
  1529  0009EC  0E37               	movlw	low STR_4
  1530  0009EE  6E18               	movwf	write_LCD@c,c
  1531  0009F0  0E08               	movlw	high STR_4
  1532  0009F2  6E19               	movwf	write_LCD@c+1,c
  1533  0009F4  EC58  F009         	call	_write_LCD	;wreg free
  1534                           
  1535                           ;TOCTOC.c: 91: if(doorState == 0){
  1536  0009F8  503D               	movf	_doorState,w,c
  1537  0009FA  103E               	iorwf	_doorState+1,w,c
  1538  0009FC  A4D8               	btfss	status,2,c
  1539  0009FE  0012               	return	
  1540                           
  1541                           ;TOCTOC.c: 92: doorState = 1;
  1542  000A00  0E00               	movlw	0
  1543  000A02  6E3E               	movwf	_doorState+1,c
  1544  000A04  0E01               	movlw	1
  1545  000A06  6E3D               	movwf	_doorState,c
  1546                           
  1547                           ;TOCTOC.c: 93: DutyCycle_PWM(8);
  1548  000A08  0E00               	movlw	0
  1549  000A0A  6E16               	movwf	DutyCycle_PWM@Valor+1,c
  1550  000A0C  0E08               	movlw	8
  1551  000A0E  6E15               	movwf	DutyCycle_PWM@Valor,c
  1552  000A10  EC7D  F009         	call	_DutyCycle_PWM	;wreg free
  1553                           
  1554                           ;TOCTOC.c: 94: _delay((unsigned long)((175)*(16000000/4000.0)));
  1555  000A14  0E04               	movlw	4
  1556  000A16  6E2A               	movwf	(??_destravarPorta+1)& (0+255),c
  1557  000A18  0E8E               	movlw	142
  1558  000A1A  6E29               	movwf	??_destravarPorta& (0+255),c
  1559  000A1C  0E12               	movlw	18
  1560  000A1E                     u1207:
  1561  000A1E  2EE8               	decfsz	wreg,f,c
  1562  000A20  D7FE               	bra	u1207
  1563  000A22  2E29               	decfsz	??_destravarPorta& (0+255),f,c
  1564  000A24  D7FC               	bra	u1207
  1565  000A26  2E2A               	decfsz	(??_destravarPorta+1)& (0+255),f,c
  1566  000A28  D7FA               	bra	u1207
  1567  000A2A  D000               	nop2	
  1568                           
  1569                           ;TOCTOC.c: 95: DutyCycle_PWM(0);
  1570  000A2C  0E00               	movlw	0
  1571  000A2E  6E16               	movwf	DutyCycle_PWM@Valor+1,c
  1572  000A30  0E00               	movlw	0
  1573  000A32  6E15               	movwf	DutyCycle_PWM@Valor,c
  1574  000A34  EC7D  F009         	call	_DutyCycle_PWM	;wreg free
  1575                           
  1576                           ;TOCTOC.c: 96: }
  1577                           ;TOCTOC.c: 98: }
  1578  000A38  0012               	return	
  1579  000A3A                     l1978:
  1580                           
  1581                           ;TOCTOC.c: 99: else{
  1582                           ;TOCTOC.c: 100: clearLCD();
  1583  000A3A  EC9D  F00A         	call	_clearLCD	;wreg free
  1584                           
  1585                           ;TOCTOC.c: 101: set_line(0,3);
  1586  000A3E  0E00               	movlw	0
  1587  000A40  6E19               	movwf	set_line@line+1,c
  1588  000A42  0E00               	movlw	0
  1589  000A44  6E18               	movwf	set_line@line,c
  1590  000A46  0E00               	movlw	0
  1591  000A48  6E1B               	movwf	set_line@pos+1,c
  1592  000A4A  0E03               	movlw	3
  1593  000A4C  6E1A               	movwf	set_line@pos,c
  1594  000A4E  EC57  F00A         	call	_set_line	;wreg free
  1595                           
  1596                           ;TOCTOC.c: 102: write_LCD("As senhas");
  1597  000A52  0E59               	movlw	low STR_5
  1598  000A54  6E18               	movwf	write_LCD@c,c
  1599  000A56  0E08               	movlw	high STR_5
  1600  000A58  6E19               	movwf	write_LCD@c+1,c
  1601  000A5A  EC58  F009         	call	_write_LCD	;wreg free
  1602                           
  1603                           ;TOCTOC.c: 103: set_line(1,1);
  1604  000A5E  0E00               	movlw	0
  1605  000A60  6E19               	movwf	set_line@line+1,c
  1606  000A62  0E01               	movlw	1
  1607  000A64  6E18               	movwf	set_line@line,c
  1608  000A66  0E00               	movlw	0
  1609  000A68  6E1B               	movwf	set_line@pos+1,c
  1610  000A6A  0E01               	movlw	1
  1611  000A6C  6E1A               	movwf	set_line@pos,c
  1612  000A6E  EC57  F00A         	call	_set_line	;wreg free
  1613                           
  1614                           ;TOCTOC.c: 104: write_LCD("nao coincidem");
  1615  000A72  0E0F               	movlw	low STR_6
  1616  000A74  6E18               	movwf	write_LCD@c,c
  1617  000A76  0E08               	movlw	high STR_6
  1618  000A78  6E19               	movwf	write_LCD@c+1,c
  1619  000A7A  EC58  F009         	call	_write_LCD	;wreg free
  1620  000A7E  0012               	return	
  1621  000A80                     __end_of_destravarPorta:
  1622                           	opt stack 0
  1623                           tblptru	equ	0xFF8
  1624                           tblptrh	equ	0xFF7
  1625                           tblptrl	equ	0xFF6
  1626                           tablat	equ	0xFF5
  1627                           intcon	equ	0xFF2
  1628                           intcon2	equ	0xFF1
  1629                           intcon3	equ	0xFF0
  1630                           wreg	equ	0xFE8
  1631                           indf2	equ	0xFDF
  1632                           fsr2h	equ	0xFDA
  1633                           fsr2l	equ	0xFD9
  1634                           status	equ	0xFD8
  1635                           
  1636 ;; *************** function _DutyCycle_PWM *****************
  1637 ;; Defined at:
  1638 ;;		line 43 in file "PWM.c"
  1639 ;; Parameters:    Size  Location     Type
  1640 ;;  Valor           2   20[COMRAM] unsigned int 
  1641 ;; Auto vars:     Size  Location     Type
  1642 ;;		None
  1643 ;; Return value:  Size  Location     Type
  1644 ;;                  1    wreg      void 
  1645 ;; Registers used:
  1646 ;;		wreg, status,2, status,0
  1647 ;; Tracked objects:
  1648 ;;		On entry : 0/0
  1649 ;;		On exit  : 0/0
  1650 ;;		Unchanged: 0/0
  1651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1652 ;;      Params:         2       0       0       0       0       0       0       0       0
  1653 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1654 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1655 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1656 ;;Total ram usage:        4 bytes
  1657 ;; Hardware stack levels used:    1
  1658 ;; Hardware stack levels required when called:    2
  1659 ;; This function calls:
  1660 ;;		Nothing
  1661 ;; This function is called by:
  1662 ;;		_destravarPorta
  1663 ;; This function uses a non-reentrant model
  1664 ;;
  1665                           
  1666                           	psect	text9
  1667  0012FA                     __ptext9:
  1668                           	opt stack 0
  1669  0012FA                     _DutyCycle_PWM:
  1670                           	opt stack 27
  1671                           
  1672                           ;PWM.c: 44: CCP1CONbits.DC1B0 = Valor;
  1673                           
  1674                           ;incstack = 0
  1675  0012FA  B015               	btfsc	DutyCycle_PWM@Valor,0,c
  1676  0012FC  D002               	bra	u915
  1677  0012FE  98BD               	bcf	4029,4,c	;volatile
  1678  001300  D001               	bra	u916
  1679  001302                     u915:
  1680  001302  88BD               	bsf	4029,4,c	;volatile
  1681  001304                     u916:
  1682                           
  1683                           ;PWM.c: 45: CCP1CONbits.DC1B1 = Valor >> 1;
  1684  001304  90D8               	bcf	status,0,c
  1685  001306  3016               	rrcf	DutyCycle_PWM@Valor+1,w,c
  1686  001308  6E18               	movwf	(??_DutyCycle_PWM+1)& (0+255),c
  1687  00130A  3015               	rrcf	DutyCycle_PWM@Valor,w,c
  1688  00130C  6E17               	movwf	??_DutyCycle_PWM& (0+255),c
  1689  00130E  3A17               	swapf	??_DutyCycle_PWM,f,c
  1690  001310  4617               	rlncf	??_DutyCycle_PWM,f,c
  1691  001312  50BD               	movf	4029,w,c	;volatile
  1692  001314  1817               	xorwf	??_DutyCycle_PWM,w,c
  1693  001316  0BDF               	andlw	-33
  1694  001318  1817               	xorwf	??_DutyCycle_PWM,w,c
  1695  00131A  6EBD               	movwf	4029,c	;volatile
  1696                           
  1697                           ;PWM.c: 46: CCPR1L = Valor >> 2;
  1698  00131C  C015  F017         	movff	DutyCycle_PWM@Valor,??_DutyCycle_PWM
  1699  001320  C016  F018         	movff	DutyCycle_PWM@Valor+1,??_DutyCycle_PWM+1
  1700  001324  90D8               	bcf	status,0,c
  1701  001326  3218               	rrcf	??_DutyCycle_PWM+1,f,c
  1702  001328  3217               	rrcf	??_DutyCycle_PWM,f,c
  1703  00132A  90D8               	bcf	status,0,c
  1704  00132C  3218               	rrcf	??_DutyCycle_PWM+1,f,c
  1705  00132E  3217               	rrcf	??_DutyCycle_PWM,f,c
  1706  001330  5017               	movf	??_DutyCycle_PWM,w,c
  1707  001332  6EBE               	movwf	4030,c	;volatile
  1708  001334  0012               	return		;funcret
  1709  001336                     __end_of_DutyCycle_PWM:
  1710                           	opt stack 0
  1711                           tblptru	equ	0xFF8
  1712                           tblptrh	equ	0xFF7
  1713                           tblptrl	equ	0xFF6
  1714                           tablat	equ	0xFF5
  1715                           intcon	equ	0xFF2
  1716                           intcon2	equ	0xFF1
  1717                           intcon3	equ	0xFF0
  1718                           wreg	equ	0xFE8
  1719                           indf2	equ	0xFDF
  1720                           fsr2h	equ	0xFDA
  1721                           fsr2l	equ	0xFD9
  1722                           status	equ	0xFD8
  1723                           
  1724 ;; *************** function _cadastrarSenha *****************
  1725 ;; Defined at:
  1726 ;;		line 150 in file "TOCTOC.c"
  1727 ;; Parameters:    Size  Location     Type
  1728 ;;  pass            2   40[COMRAM] PTR unsigned char 
  1729 ;;		 -> main@pass(2), 
  1730 ;; Auto vars:     Size  Location     Type
  1731 ;;  temp1           2   50[COMRAM] unsigned char [2]
  1732 ;;  temp2           2   48[COMRAM] unsigned char [2]
  1733 ;;  j               2   46[COMRAM] int 
  1734 ;;  i               2   44[COMRAM] int 
  1735 ;; Return value:  Size  Location     Type
  1736 ;;                  1    wreg      void 
  1737 ;; Registers used:
  1738 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1739 ;; Tracked objects:
  1740 ;;		On entry : 0/0
  1741 ;;		On exit  : 0/0
  1742 ;;		Unchanged: 0/0
  1743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1744 ;;      Params:         2       0       0       0       0       0       0       0       0
  1745 ;;      Locals:         8       0       0       0       0       0       0       0       0
  1746 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1747 ;;      Totals:        12       0       0       0       0       0       0       0       0
  1748 ;;Total ram usage:       12 bytes
  1749 ;; Hardware stack levels used:    1
  1750 ;; Hardware stack levels required when called:    6
  1751 ;; This function calls:
  1752 ;;		_clearLCD
  1753 ;;		_cmpPass
  1754 ;;		_confirmarSenha
  1755 ;;		_lerToque
  1756 ;;		_set_line
  1757 ;;		_write_LCD
  1758 ;; This function is called by:
  1759 ;;		_main
  1760 ;; This function uses a non-reentrant model
  1761 ;;
  1762                           
  1763                           	psect	text10
  1764  000A80                     __ptext10:
  1765                           	opt stack 0
  1766  000A80                     _cadastrarSenha:
  1767                           	opt stack 24
  1768                           
  1769                           ;TOCTOC.c: 152: TRISBbits.RB4 = 1;
  1770                           
  1771                           ;incstack = 0
  1772  000A80  8893               	bsf	3987,4,c	;volatile
  1773                           
  1774                           ;TOCTOC.c: 154: int i = 0;
  1775  000A82  0E00               	movlw	0
  1776  000A84  6E2E               	movwf	cadastrarSenha@i+1,c
  1777  000A86  0E00               	movlw	0
  1778  000A88  6E2D               	movwf	cadastrarSenha@i,c
  1779                           
  1780                           ;TOCTOC.c: 155: int j = 0;
  1781  000A8A  0E00               	movlw	0
  1782  000A8C  6E30               	movwf	cadastrarSenha@j+1,c
  1783  000A8E  0E00               	movlw	0
  1784  000A90  6E2F               	movwf	cadastrarSenha@j,c
  1785                           
  1786                           ;TOCTOC.c: 157: char temp1[2];
  1787                           ;TOCTOC.c: 158: temp1[0] = 0x00;
  1788  000A92  0E00               	movlw	0
  1789  000A94  6E33               	movwf	cadastrarSenha@temp1,c
  1790                           
  1791                           ;TOCTOC.c: 159: temp1[1] = 0x00;
  1792  000A96  0E00               	movlw	0
  1793  000A98  6E34               	movwf	cadastrarSenha@temp1+1,c
  1794                           
  1795                           ;TOCTOC.c: 161: char temp2[2];
  1796                           ;TOCTOC.c: 162: temp2[0] = 0x00;
  1797  000A9A  0E00               	movlw	0
  1798  000A9C  6E31               	movwf	cadastrarSenha@temp2,c
  1799                           
  1800                           ;TOCTOC.c: 163: temp2[1] = 0x00;
  1801  000A9E  0E00               	movlw	0
  1802  000AA0  6E32               	movwf	cadastrarSenha@temp2+1,c
  1803                           
  1804                           ;TOCTOC.c: 165: pass[0] = 0x00;
  1805  000AA2  C029  FFD9         	movff	cadastrarSenha@pass,fsr2l
  1806  000AA6  C02A  FFDA         	movff	cadastrarSenha@pass+1,fsr2h
  1807  000AAA  0E00               	movlw	0
  1808  000AAC  6EDF               	movwf	indf2,c
  1809                           
  1810                           ;TOCTOC.c: 166: pass[1] = 0x00;
  1811  000AAE  EE20 F001          	lfsr	2,1
  1812  000AB2  5029               	movf	cadastrarSenha@pass,w,c
  1813  000AB4  26D9               	addwf	fsr2l,f,c
  1814  000AB6  502A               	movf	cadastrarSenha@pass+1,w,c
  1815  000AB8  22DA               	addwfc	fsr2h,f,c
  1816  000ABA  0E00               	movlw	0
  1817  000ABC  6EDF               	movwf	indf2,c
  1818  000ABE                     l1862:
  1819                           
  1820                           ;TOCTOC.c: 169: clearLCD();
  1821  000ABE  EC9D  F00A         	call	_clearLCD	;wreg free
  1822                           
  1823                           ;TOCTOC.c: 170: set_line(0,1);
  1824  000AC2  0E00               	movlw	0
  1825  000AC4  6E19               	movwf	set_line@line+1,c
  1826  000AC6  0E00               	movlw	0
  1827  000AC8  6E18               	movwf	set_line@line,c
  1828  000ACA  0E00               	movlw	0
  1829  000ACC  6E1B               	movwf	set_line@pos+1,c
  1830  000ACE  0E01               	movlw	1
  1831  000AD0  6E1A               	movwf	set_line@pos,c
  1832  000AD2  EC57  F00A         	call	_set_line	;wreg free
  1833                           
  1834                           ;TOCTOC.c: 171: write_LCD("Cadastre sua");
  1835  000AD6  0E2A               	movlw	low STR_13
  1836  000AD8  6E18               	movwf	write_LCD@c,c
  1837  000ADA  0E08               	movlw	high STR_13
  1838  000ADC  6E19               	movwf	write_LCD@c+1,c
  1839  000ADE  EC58  F009         	call	_write_LCD	;wreg free
  1840                           
  1841                           ;TOCTOC.c: 172: set_line(1,5);
  1842  000AE2  0E00               	movlw	0
  1843  000AE4  6E19               	movwf	set_line@line+1,c
  1844  000AE6  0E01               	movlw	1
  1845  000AE8  6E18               	movwf	set_line@line,c
  1846  000AEA  0E00               	movlw	0
  1847  000AEC  6E1B               	movwf	set_line@pos+1,c
  1848  000AEE  0E05               	movlw	5
  1849  000AF0  6E1A               	movwf	set_line@pos,c
  1850  000AF2  EC57  F00A         	call	_set_line	;wreg free
  1851                           
  1852                           ;TOCTOC.c: 173: write_LCD("senha");
  1853  000AF6  0E69               	movlw	low STR_12
  1854  000AF8  6E18               	movwf	write_LCD@c,c
  1855  000AFA  0E08               	movlw	high STR_12
  1856  000AFC  6E19               	movwf	write_LCD@c+1,c
  1857  000AFE  EC58  F009         	call	_write_LCD	;wreg free
  1858                           
  1859                           ;TOCTOC.c: 174: _delay((unsigned long)((2000)*(16000000/4000.0)));
  1860  000B02  0E29               	movlw	41
  1861  000B04  6E2C               	movwf	(??_cadastrarSenha+1)& (0+255),c
  1862  000B06  0E96               	movlw	150
  1863  000B08  6E2B               	movwf	??_cadastrarSenha& (0+255),c
  1864  000B0A  0E7F               	movlw	127
  1865  000B0C                     u1217:
  1866  000B0C  2EE8               	decfsz	wreg,f,c
  1867  000B0E  D7FE               	bra	u1217
  1868  000B10  2E2B               	decfsz	??_cadastrarSenha& (0+255),f,c
  1869  000B12  D7FC               	bra	u1217
  1870  000B14  2E2C               	decfsz	(??_cadastrarSenha+1)& (0+255),f,c
  1871  000B16  D7FA               	bra	u1217
  1872  000B18  F000               	nop	
  1873                           
  1874                           ;TOCTOC.c: 176: lerToque(&temp1);
  1875  000B1A  0E33               	movlw	low cadastrarSenha@temp1
  1876  000B1C  6E25               	movwf	lerToque@toque,c
  1877  000B1E  0E00               	movlw	high cadastrarSenha@temp1
  1878  000B20  6E26               	movwf	lerToque@toque+1,c
  1879  000B22  EC17  F006         	call	_lerToque	;wreg free
  1880                           
  1881                           ;TOCTOC.c: 177: clearLCD();
  1882  000B26  EC9D  F00A         	call	_clearLCD	;wreg free
  1883                           
  1884                           ;TOCTOC.c: 178: set_line(0,2);
  1885  000B2A  0E00               	movlw	0
  1886  000B2C  6E19               	movwf	set_line@line+1,c
  1887  000B2E  0E00               	movlw	0
  1888  000B30  6E18               	movwf	set_line@line,c
  1889  000B32  0E00               	movlw	0
  1890  000B34  6E1B               	movwf	set_line@pos+1,c
  1891  000B36  0E02               	movlw	2
  1892  000B38  6E1A               	movwf	set_line@pos,c
  1893  000B3A  EC57  F00A         	call	_set_line	;wreg free
  1894                           
  1895                           ;TOCTOC.c: 179: write_LCD("Repita sua");
  1896  000B3E  0E4E               	movlw	low STR_15
  1897  000B40  6E18               	movwf	write_LCD@c,c
  1898  000B42  0E08               	movlw	high STR_15
  1899  000B44  6E19               	movwf	write_LCD@c+1,c
  1900  000B46  EC58  F009         	call	_write_LCD	;wreg free
  1901                           
  1902                           ;TOCTOC.c: 180: set_line(1,5);
  1903  000B4A  0E00               	movlw	0
  1904  000B4C  6E19               	movwf	set_line@line+1,c
  1905  000B4E  0E01               	movlw	1
  1906  000B50  6E18               	movwf	set_line@line,c
  1907  000B52  0E00               	movlw	0
  1908  000B54  6E1B               	movwf	set_line@pos+1,c
  1909  000B56  0E05               	movlw	5
  1910  000B58  6E1A               	movwf	set_line@pos,c
  1911  000B5A  EC57  F00A         	call	_set_line	;wreg free
  1912                           
  1913                           ;TOCTOC.c: 181: write_LCD("senha");
  1914  000B5E  0E69               	movlw	low STR_12
  1915  000B60  6E18               	movwf	write_LCD@c,c
  1916  000B62  0E08               	movlw	high STR_12
  1917  000B64  6E19               	movwf	write_LCD@c+1,c
  1918  000B66  EC58  F009         	call	_write_LCD	;wreg free
  1919                           
  1920                           ;TOCTOC.c: 182: _delay((unsigned long)((2000)*(16000000/4000.0)));
  1921  000B6A  0E29               	movlw	41
  1922  000B6C  6E2C               	movwf	(??_cadastrarSenha+1)& (0+255),c
  1923  000B6E  0E96               	movlw	150
  1924  000B70  6E2B               	movwf	??_cadastrarSenha& (0+255),c
  1925  000B72  0E7F               	movlw	127
  1926  000B74                     u1227:
  1927  000B74  2EE8               	decfsz	wreg,f,c
  1928  000B76  D7FE               	bra	u1227
  1929  000B78  2E2B               	decfsz	??_cadastrarSenha& (0+255),f,c
  1930  000B7A  D7FC               	bra	u1227
  1931  000B7C  2E2C               	decfsz	(??_cadastrarSenha+1)& (0+255),f,c
  1932  000B7E  D7FA               	bra	u1227
  1933  000B80  F000               	nop	
  1934                           
  1935                           ;TOCTOC.c: 184: lerToque(&temp2);
  1936  000B82  0E31               	movlw	low cadastrarSenha@temp2
  1937  000B84  6E25               	movwf	lerToque@toque,c
  1938  000B86  0E00               	movlw	high cadastrarSenha@temp2
  1939  000B88  6E26               	movwf	lerToque@toque+1,c
  1940  000B8A  EC17  F006         	call	_lerToque	;wreg free
  1941                           
  1942                           ;TOCTOC.c: 185: if(cmpPass(temp1, temp2))
  1943  000B8E  0E33               	movlw	low cadastrarSenha@temp1
  1944  000B90  6E1E               	movwf	cmpPass@pass,c
  1945  000B92  0E00               	movlw	high cadastrarSenha@temp1
  1946  000B94  6E1F               	movwf	cmpPass@pass+1,c
  1947  000B96  0E31               	movlw	low cadastrarSenha@temp2
  1948  000B98  6E20               	movwf	cmpPass@toque,c
  1949  000B9A  0E00               	movlw	high cadastrarSenha@temp2
  1950  000B9C  6E21               	movwf	cmpPass@toque+1,c
  1951  000B9E  EC9C  F006         	call	_cmpPass	;wreg free
  1952  000BA2  501E               	movf	?_cmpPass,w,c
  1953  000BA4  101F               	iorwf	?_cmpPass+1,w,c
  1954  000BA6  B4D8               	btfsc	status,2,c
  1955  000BA8  D78A               	goto	l1862
  1956                           
  1957                           ;TOCTOC.c: 186: if(confirmarSenha())
  1958  000BAA  EC9A  F008         	call	_confirmarSenha	;wreg free
  1959  000BAE  501E               	movf	?_confirmarSenha,w,c
  1960  000BB0  101F               	iorwf	?_confirmarSenha+1,w,c
  1961  000BB2  B4D8               	btfsc	status,2,c
  1962  000BB4  D784               	goto	l1862
  1963                           
  1964                           ;TOCTOC.c: 189: }
  1965                           ;TOCTOC.c: 191: pass[0] = temp1[0];
  1966                           
  1967                           ;TOCTOC.c: 187: break;
  1968  000BB6  C029  FFD9         	movff	cadastrarSenha@pass,fsr2l
  1969  000BBA  C02A  FFDA         	movff	cadastrarSenha@pass+1,fsr2h
  1970  000BBE  C033  FFDF         	movff	cadastrarSenha@temp1,indf2
  1971                           
  1972                           ;TOCTOC.c: 192: pass[1] = temp1[1];
  1973  000BC2  EE20 F001          	lfsr	2,1
  1974  000BC6  5029               	movf	cadastrarSenha@pass,w,c
  1975  000BC8  26D9               	addwf	fsr2l,f,c
  1976  000BCA  502A               	movf	cadastrarSenha@pass+1,w,c
  1977  000BCC  22DA               	addwfc	fsr2h,f,c
  1978  000BCE  C034  FFDF         	movff	cadastrarSenha@temp1+1,indf2
  1979                           
  1980                           ;TOCTOC.c: 194: clearLCD();
  1981  000BD2  EC9D  F00A         	call	_clearLCD	;wreg free
  1982                           
  1983                           ;TOCTOC.c: 195: set_line(0,6);
  1984  000BD6  0E00               	movlw	0
  1985  000BD8  6E19               	movwf	set_line@line+1,c
  1986  000BDA  0E00               	movlw	0
  1987  000BDC  6E18               	movwf	set_line@line,c
  1988  000BDE  0E00               	movlw	0
  1989  000BE0  6E1B               	movwf	set_line@pos+1,c
  1990  000BE2  0E06               	movlw	6
  1991  000BE4  6E1A               	movwf	set_line@pos,c
  1992  000BE6  EC57  F00A         	call	_set_line	;wreg free
  1993                           
  1994                           ;TOCTOC.c: 196: write_LCD("Senha");
  1995  000BEA  0E63               	movlw	low STR_17
  1996  000BEC  6E18               	movwf	write_LCD@c,c
  1997  000BEE  0E08               	movlw	high STR_17
  1998  000BF0  6E19               	movwf	write_LCD@c+1,c
  1999  000BF2  EC58  F009         	call	_write_LCD	;wreg free
  2000                           
  2001                           ;TOCTOC.c: 197: set_line(1,3);
  2002  000BF6  0E00               	movlw	0
  2003  000BF8  6E19               	movwf	set_line@line+1,c
  2004  000BFA  0E01               	movlw	1
  2005  000BFC  6E18               	movwf	set_line@line,c
  2006  000BFE  0E00               	movlw	0
  2007  000C00  6E1B               	movwf	set_line@pos+1,c
  2008  000C02  0E03               	movlw	3
  2009  000C04  6E1A               	movwf	set_line@pos,c
  2010  000C06  EC57  F00A         	call	_set_line	;wreg free
  2011                           
  2012                           ;TOCTOC.c: 198: write_LCD("Cadastrada");
  2013  000C0A  0E43               	movlw	low STR_18
  2014  000C0C  6E18               	movwf	write_LCD@c,c
  2015  000C0E  0E08               	movlw	high STR_18
  2016  000C10  6E19               	movwf	write_LCD@c+1,c
  2017  000C12  EC58  F009         	call	_write_LCD	;wreg free
  2018                           
  2019                           ;TOCTOC.c: 199: _delay((unsigned long)((3000)*(16000000/4000.0)));
  2020  000C16  0E3D               	movlw	61
  2021  000C18  6E2C               	movwf	(??_cadastrarSenha+1)& (0+255),c
  2022  000C1A  0EE1               	movlw	225
  2023  000C1C  6E2B               	movwf	??_cadastrarSenha& (0+255),c
  2024  000C1E  0E40               	movlw	64
  2025  000C20                     u1237:
  2026  000C20  2EE8               	decfsz	wreg,f,c
  2027  000C22  D7FE               	bra	u1237
  2028  000C24  2E2B               	decfsz	??_cadastrarSenha& (0+255),f,c
  2029  000C26  D7FC               	bra	u1237
  2030  000C28  2E2C               	decfsz	(??_cadastrarSenha+1)& (0+255),f,c
  2031  000C2A  D7FA               	bra	u1237
  2032  000C2C  0012               	return		;funcret
  2033  000C2E                     __end_of_cadastrarSenha:
  2034                           	opt stack 0
  2035                           tblptru	equ	0xFF8
  2036                           tblptrh	equ	0xFF7
  2037                           tblptrl	equ	0xFF6
  2038                           tablat	equ	0xFF5
  2039                           intcon	equ	0xFF2
  2040                           intcon2	equ	0xFF1
  2041                           intcon3	equ	0xFF0
  2042                           wreg	equ	0xFE8
  2043                           indf2	equ	0xFDF
  2044                           fsr2h	equ	0xFDA
  2045                           fsr2l	equ	0xFD9
  2046                           status	equ	0xFD8
  2047                           
  2048 ;; *************** function _lerToque *****************
  2049 ;; Defined at:
  2050 ;;		line 26 in file "TOCTOC.c"
  2051 ;; Parameters:    Size  Location     Type
  2052 ;;  toque           2   36[COMRAM] PTR unsigned char 
  2053 ;;		 -> cadastrarSenha@temp2(2), cadastrarSenha@temp1(2), 
  2054 ;; Auto vars:     Size  Location     Type
  2055 ;;  i               2   38[COMRAM] int 
  2056 ;; Return value:  Size  Location     Type
  2057 ;;                  1    wreg      void 
  2058 ;; Registers used:
  2059 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2060 ;; Tracked objects:
  2061 ;;		On entry : 0/0
  2062 ;;		On exit  : 0/0
  2063 ;;		Unchanged: 0/0
  2064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2065 ;;      Params:         2       0       0       0       0       0       0       0       0
  2066 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2067 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2068 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2069 ;;Total ram usage:        4 bytes
  2070 ;; Hardware stack levels used:    1
  2071 ;; Hardware stack levels required when called:    5
  2072 ;; This function calls:
  2073 ;;		_clearLCD
  2074 ;;		_readSignal
  2075 ;;		_read_ADC
  2076 ;;		_send_msg
  2077 ;;		_set_line
  2078 ;;		_write_LCD
  2079 ;; This function is called by:
  2080 ;;		_cadastrarSenha
  2081 ;; This function uses a non-reentrant model
  2082 ;;
  2083                           
  2084                           	psect	text11
  2085  000C2E                     __ptext11:
  2086                           	opt stack 0
  2087  000C2E                     _lerToque:
  2088                           	opt stack 24
  2089                           
  2090                           ;TOCTOC.c: 28: int i = 0;
  2091                           
  2092                           ;incstack = 0
  2093  000C2E  0E00               	movlw	0
  2094  000C30  6E28               	movwf	lerToque@i+1,c
  2095  000C32  0E00               	movlw	0
  2096  000C34  6E27               	movwf	lerToque@i,c
  2097                           
  2098                           ;TOCTOC.c: 30: toque[0] = 0x00;
  2099  000C36  C025  FFD9         	movff	lerToque@toque,fsr2l
  2100  000C3A  C026  FFDA         	movff	lerToque@toque+1,fsr2h
  2101  000C3E  0E00               	movlw	0
  2102  000C40  6EDF               	movwf	indf2,c
  2103                           
  2104                           ;TOCTOC.c: 31: toque[1] = 0x00;
  2105  000C42  EE20 F001          	lfsr	2,1
  2106  000C46  5025               	movf	lerToque@toque,w,c
  2107  000C48  26D9               	addwf	fsr2l,f,c
  2108  000C4A  5026               	movf	lerToque@toque+1,w,c
  2109  000C4C  22DA               	addwfc	fsr2h,f,c
  2110  000C4E  0E00               	movlw	0
  2111  000C50  6EDF               	movwf	indf2,c
  2112                           
  2113                           ;TOCTOC.c: 33: clearLCD();
  2114  000C52  EC9D  F00A         	call	_clearLCD	;wreg free
  2115                           
  2116                           ;TOCTOC.c: 34: set_line(0,0);
  2117  000C56  0E00               	movlw	0
  2118  000C58  6E19               	movwf	set_line@line+1,c
  2119  000C5A  0E00               	movlw	0
  2120  000C5C  6E18               	movwf	set_line@line,c
  2121  000C5E  0E00               	movlw	0
  2122  000C60  6E1B               	movwf	set_line@pos+1,c
  2123  000C62  0E00               	movlw	0
  2124  000C64  6E1A               	movwf	set_line@pos,c
  2125  000C66  EC57  F00A         	call	_set_line	;wreg free
  2126                           
  2127                           ;TOCTOC.c: 35: write_LCD("Bata na porta");
  2128  000C6A  0E01               	movlw	low STR_1
  2129  000C6C  6E18               	movwf	write_LCD@c,c
  2130  000C6E  0E08               	movlw	high STR_1
  2131  000C70  6E19               	movwf	write_LCD@c+1,c
  2132  000C72  EC58  F009         	call	_write_LCD	;wreg free
  2133  000C76                     l1742:
  2134  000C76  EC65  F00A         	call	_read_ADC	;wreg free
  2135  000C7A  BE16               	btfsc	?_read_ADC+1,7,c
  2136  000C7C  D7FC               	goto	l1742
  2137  000C7E  5016               	movf	?_read_ADC+1,w,c
  2138  000C80  E151               	bnz	l1762
  2139  000C82  0E19               	movlw	25
  2140  000C84  5C15               	subwf	?_read_ADC,w,c
  2141  000C86  B0D8               	btfsc	status,0,c
  2142  000C88  D04D               	goto	l1762
  2143  000C8A  D7F5               	goto	l1742
  2144  000C8C                     l1744:
  2145                           
  2146                           ;TOCTOC.c: 39: set_line(1,0);
  2147  000C8C  0E00               	movlw	0
  2148  000C8E  6E19               	movwf	set_line@line+1,c
  2149  000C90  0E01               	movlw	1
  2150  000C92  6E18               	movwf	set_line@line,c
  2151  000C94  0E00               	movlw	0
  2152  000C96  6E1B               	movwf	set_line@pos+1,c
  2153  000C98  0E00               	movlw	0
  2154  000C9A  6E1A               	movwf	set_line@pos,c
  2155  000C9C  EC57  F00A         	call	_set_line	;wreg free
  2156                           
  2157                           ;TOCTOC.c: 40: send_msg('1'+ i);
  2158  000CA0  5027               	movf	lerToque@i,w,c
  2159  000CA2  0F31               	addlw	49
  2160  000CA4  EC0C  F00A         	call	_send_msg
  2161                           
  2162                           ;TOCTOC.c: 41: if(i == 0)
  2163  000CA8  5027               	movf	lerToque@i,w,c
  2164  000CAA  1028               	iorwf	lerToque@i+1,w,c
  2165  000CAC  A4D8               	btfss	status,2,c
  2166  000CAE  D00B               	goto	l1750
  2167                           
  2168                           ;TOCTOC.c: 42: readSignal(&toque[0], 0);
  2169  000CB0  C025  F019         	movff	lerToque@toque,readSignal@signal
  2170  000CB4  C026  F01A         	movff	lerToque@toque+1,readSignal@signal+1
  2171  000CB8  0E00               	movlw	0
  2172  000CBA  6E1C               	movwf	readSignal@pos+1,c
  2173  000CBC  0E00               	movlw	0
  2174  000CBE  6E1B               	movwf	readSignal@pos,c
  2175  000CC0  ECCD  F007         	call	_readSignal	;wreg free
  2176  000CC4  D02D               	goto	l1760
  2177  000CC6                     l1750:
  2178                           
  2179                           ;TOCTOC.c: 43: else if(i == 1)
  2180  000CC6  0427               	decf	lerToque@i,w,c
  2181  000CC8  1028               	iorwf	lerToque@i+1,w,c
  2182  000CCA  A4D8               	btfss	status,2,c
  2183  000CCC  D00B               	goto	l1754
  2184                           
  2185                           ;TOCTOC.c: 44: readSignal(&toque[0], 1);
  2186  000CCE  C025  F019         	movff	lerToque@toque,readSignal@signal
  2187  000CD2  C026  F01A         	movff	lerToque@toque+1,readSignal@signal+1
  2188  000CD6  0E00               	movlw	0
  2189  000CD8  6E1C               	movwf	readSignal@pos+1,c
  2190  000CDA  0E01               	movlw	1
  2191  000CDC  6E1B               	movwf	readSignal@pos,c
  2192  000CDE  ECCD  F007         	call	_readSignal	;wreg free
  2193  000CE2  D01E               	goto	l1760
  2194  000CE4                     l1754:
  2195                           
  2196                           ;TOCTOC.c: 45: else if(i == 2)
  2197  000CE4  0E02               	movlw	2
  2198  000CE6  1827               	xorwf	lerToque@i,w,c
  2199  000CE8  1028               	iorwf	lerToque@i+1,w,c
  2200  000CEA  A4D8               	btfss	status,2,c
  2201  000CEC  D00D               	goto	l1758
  2202                           
  2203                           ;TOCTOC.c: 46: readSignal(&toque[1], 0);
  2204  000CEE  0E01               	movlw	1
  2205  000CF0  2425               	addwf	lerToque@toque,w,c
  2206  000CF2  6E19               	movwf	readSignal@signal,c
  2207  000CF4  0E00               	movlw	0
  2208  000CF6  2026               	addwfc	lerToque@toque+1,w,c
  2209  000CF8  6E1A               	movwf	readSignal@signal+1,c
  2210  000CFA  0E00               	movlw	0
  2211  000CFC  6E1C               	movwf	readSignal@pos+1,c
  2212  000CFE  0E00               	movlw	0
  2213  000D00  6E1B               	movwf	readSignal@pos,c
  2214  000D02  ECCD  F007         	call	_readSignal	;wreg free
  2215  000D06  D00C               	goto	l1760
  2216  000D08                     l1758:
  2217                           
  2218                           ;TOCTOC.c: 47: else
  2219                           ;TOCTOC.c: 48: readSignal(&toque[1], 1);
  2220  000D08  0E01               	movlw	1
  2221  000D0A  2425               	addwf	lerToque@toque,w,c
  2222  000D0C  6E19               	movwf	readSignal@signal,c
  2223  000D0E  0E00               	movlw	0
  2224  000D10  2026               	addwfc	lerToque@toque+1,w,c
  2225  000D12  6E1A               	movwf	readSignal@signal+1,c
  2226  000D14  0E00               	movlw	0
  2227  000D16  6E1C               	movwf	readSignal@pos+1,c
  2228  000D18  0E01               	movlw	1
  2229  000D1A  6E1B               	movwf	readSignal@pos,c
  2230  000D1C  ECCD  F007         	call	_readSignal	;wreg free
  2231  000D20                     l1760:
  2232                           
  2233                           ;TOCTOC.c: 49: i++;
  2234  000D20  4A27               	infsnz	lerToque@i,f,c
  2235  000D22  2A28               	incf	lerToque@i+1,f,c
  2236  000D24                     l1762:
  2237  000D24  BE28               	btfsc	lerToque@i+1,7,c
  2238  000D26  D7B2               	goto	l1744
  2239  000D28  5028               	movf	lerToque@i+1,w,c
  2240  000D2A  E105               	bnz	l290
  2241  000D2C  0E04               	movlw	4
  2242  000D2E  5C27               	subwf	lerToque@i,w,c
  2243  000D30  B0D8               	btfsc	status,0,c
  2244  000D32  0012               	return	
  2245  000D34  D7AB               	goto	l1744
  2246  000D36                     l290:
  2247  000D36  0012               	return		;funcret
  2248  000D38                     __end_of_lerToque:
  2249                           	opt stack 0
  2250                           tblptru	equ	0xFF8
  2251                           tblptrh	equ	0xFF7
  2252                           tblptrl	equ	0xFF6
  2253                           tablat	equ	0xFF5
  2254                           intcon	equ	0xFF2
  2255                           intcon2	equ	0xFF1
  2256                           intcon3	equ	0xFF0
  2257                           wreg	equ	0xFE8
  2258                           indf2	equ	0xFDF
  2259                           fsr2h	equ	0xFDA
  2260                           fsr2l	equ	0xFD9
  2261                           status	equ	0xFD8
  2262                           
  2263 ;; *************** function _readSignal *****************
  2264 ;; Defined at:
  2265 ;;		line 13 in file "ReadSignal.c"
  2266 ;; Parameters:    Size  Location     Type
  2267 ;;  signal          2   24[COMRAM] PTR unsigned char 
  2268 ;;		 -> cadastrarSenha@temp2(2), cadastrarSenha@temp1(2), main@toc(2), 
  2269 ;;  pos             2   26[COMRAM] int 
  2270 ;; Auto vars:     Size  Location     Type
  2271 ;;  j               2   34[COMRAM] int 
  2272 ;;  i               2   32[COMRAM] int 
  2273 ;;  limite          2   30[COMRAM] int 
  2274 ;; Return value:  Size  Location     Type
  2275 ;;                  1    wreg      void 
  2276 ;; Registers used:
  2277 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2278 ;; Tracked objects:
  2279 ;;		On entry : 0/0
  2280 ;;		On exit  : 0/0
  2281 ;;		Unchanged: 0/0
  2282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2283 ;;      Params:         4       0       0       0       0       0       0       0       0
  2284 ;;      Locals:         6       0       0       0       0       0       0       0       0
  2285 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2286 ;;      Totals:        12       0       0       0       0       0       0       0       0
  2287 ;;Total ram usage:       12 bytes
  2288 ;; Hardware stack levels used:    1
  2289 ;; Hardware stack levels required when called:    3
  2290 ;; This function calls:
  2291 ;;		_read_ADC
  2292 ;; This function is called by:
  2293 ;;		_lerToque
  2294 ;;		_destravarPorta
  2295 ;; This function uses a non-reentrant model
  2296 ;;
  2297                           
  2298                           	psect	text12
  2299  000F9A                     __ptext12:
  2300                           	opt stack 0
  2301  000F9A                     _readSignal:
  2302                           	opt stack 26
  2303                           
  2304                           ;ReadSignal.c: 15: int j = 0;
  2305                           
  2306                           ;incstack = 0
  2307  000F9A  0E00               	movlw	0
  2308  000F9C  6E24               	movwf	readSignal@j+1,c
  2309  000F9E  0E00               	movlw	0
  2310  000FA0  6E23               	movwf	readSignal@j,c
  2311                           
  2312                           ;ReadSignal.c: 16: if(pos == 1)
  2313  000FA2  041B               	decf	readSignal@pos,w,c
  2314  000FA4  101C               	iorwf	readSignal@pos+1,w,c
  2315  000FA6  A4D8               	btfss	status,2,c
  2316  000FA8  D004               	goto	l1674
  2317                           
  2318                           ;ReadSignal.c: 17: j = 4;
  2319  000FAA  0E00               	movlw	0
  2320  000FAC  6E24               	movwf	readSignal@j+1,c
  2321  000FAE  0E04               	movlw	4
  2322  000FB0  6E23               	movwf	readSignal@j,c
  2323  000FB2                     l1674:
  2324                           
  2325                           ;ReadSignal.c: 18: int limite;
  2326                           ;ReadSignal.c: 19: limite = j + 4;
  2327  000FB2  0E04               	movlw	4
  2328  000FB4  2423               	addwf	readSignal@j,w,c
  2329  000FB6  6E1F               	movwf	readSignal@limite,c
  2330  000FB8  0E00               	movlw	0
  2331  000FBA  2024               	addwfc	readSignal@j+1,w,c
  2332  000FBC  6E20               	movwf	readSignal@limite+1,c
  2333                           
  2334                           ;ReadSignal.c: 20: int i;
  2335                           ;ReadSignal.c: 22: while(j < limite){
  2336  000FBE  D033               	goto	l212
  2337  000FC0                     l1676:
  2338                           
  2339                           ;ReadSignal.c: 24: i = 0;
  2340  000FC0  0E00               	movlw	0
  2341  000FC2  6E22               	movwf	readSignal@i+1,c
  2342  000FC4  0E00               	movlw	0
  2343  000FC6  6E21               	movwf	readSignal@i,c
  2344                           
  2345                           ;ReadSignal.c: 25: while(i < 500){
  2346  000FC8  D022               	goto	l1686
  2347  000FCA                     l1678:
  2348                           
  2349                           ;ReadSignal.c: 26: if((int)read_ADC() > 25){
  2350  000FCA  EC65  F00A         	call	_read_ADC	;wreg free
  2351  000FCE  5016               	movf	?_read_ADC+1,w,c
  2352  000FD0  E104               	bnz	u770
  2353  000FD2  0E1A               	movlw	26
  2354  000FD4  5C15               	subwf	?_read_ADC,w,c
  2355  000FD6  A0D8               	btfss	status,0,c
  2356  000FD8  D010               	goto	l1682
  2357  000FDA                     u770:
  2358                           
  2359                           ;ReadSignal.c: 27: *signal |= (0x03<<j);
  2360  000FDA  C023  F01D         	movff	readSignal@j,??_readSignal
  2361  000FDE  0E03               	movlw	3
  2362  000FE0  6E1E               	movwf	(??_readSignal+1)& (0+255),c
  2363  000FE2  2A1D               	incf	??_readSignal,f,c
  2364  000FE4  D002               	goto	u784
  2365  000FE6                     u785:
  2366  000FE6  90D8               	bcf	status,0,c
  2367  000FE8  361E               	rlcf	??_readSignal+1,f,c
  2368  000FEA                     u784:
  2369  000FEA  2E1D               	decfsz	??_readSignal,f,c
  2370  000FEC  D7FC               	goto	u785
  2371  000FEE  C019  FFD9         	movff	readSignal@signal,fsr2l
  2372  000FF2  C01A  FFDA         	movff	readSignal@signal+1,fsr2h
  2373  000FF6  501E               	movf	??_readSignal+1,w,c
  2374  000FF8  12DF               	iorwf	indf2,f,c
  2375  000FFA                     l1682:
  2376                           
  2377                           ;ReadSignal.c: 28: }
  2378                           ;ReadSignal.c: 29: _delay((unsigned long)((1)*(16000000/4000.0)));
  2379  000FFA  0E06               	movlw	6
  2380  000FFC  6E1D               	movwf	??_readSignal& (0+255),c
  2381  000FFE  0E30               	movlw	48
  2382  001000                     u1247:
  2383  001000  2EE8               	decfsz	wreg,f,c
  2384  001002  D7FE               	bra	u1247
  2385  001004  2E1D               	decfsz	??_readSignal& (0+255),f,c
  2386  001006  D7FC               	bra	u1247
  2387  001008  D000               	nop2	
  2388                           
  2389                           ;ReadSignal.c: 30: i++;
  2390  00100A  4A21               	infsnz	readSignal@i,f,c
  2391  00100C  2A22               	incf	readSignal@i+1,f,c
  2392  00100E                     l1686:
  2393  00100E  BE22               	btfsc	readSignal@i+1,7,c
  2394  001010  D7DC               	goto	l1678
  2395  001012  0EF4               	movlw	244
  2396  001014  5C21               	subwf	readSignal@i,w,c
  2397  001016  0E01               	movlw	1
  2398  001018  5822               	subwfb	readSignal@i+1,w,c
  2399  00101A  A0D8               	btfss	status,0,c
  2400  00101C  D7D6               	goto	l1678
  2401                           
  2402                           ;ReadSignal.c: 31: }
  2403                           ;ReadSignal.c: 32: j+=2;
  2404  00101E  0E02               	movlw	2
  2405  001020  2623               	addwf	readSignal@j,f,c
  2406  001022  0E00               	movlw	0
  2407  001024  2224               	addwfc	readSignal@j+1,f,c
  2408  001026                     l212:
  2409  001026  501F               	movf	readSignal@limite,w,c
  2410  001028  5C23               	subwf	readSignal@j,w,c
  2411  00102A  5024               	movf	readSignal@j+1,w,c
  2412  00102C  0A80               	xorlw	128
  2413  00102E  6E1D               	movwf	??_readSignal& (0+255),c
  2414  001030  5020               	movf	readSignal@limite+1,w,c
  2415  001032  0A80               	xorlw	128
  2416  001034  581D               	subwfb	??_readSignal& (0+255),w,c
  2417  001036  B0D8               	btfsc	status,0,c
  2418  001038  0012               	return	
  2419  00103A  D7C2               	goto	l1676
  2420  00103C                     __end_of_readSignal:
  2421                           	opt stack 0
  2422                           tblptru	equ	0xFF8
  2423                           tblptrh	equ	0xFF7
  2424                           tblptrl	equ	0xFF6
  2425                           tablat	equ	0xFF5
  2426                           intcon	equ	0xFF2
  2427                           intcon2	equ	0xFF1
  2428                           intcon3	equ	0xFF0
  2429                           wreg	equ	0xFE8
  2430                           indf2	equ	0xFDF
  2431                           fsr2h	equ	0xFDA
  2432                           fsr2l	equ	0xFD9
  2433                           status	equ	0xFD8
  2434                           
  2435 ;; *************** function _read_ADC *****************
  2436 ;; Defined at:
  2437 ;;		line 20 in file "ADC.c"
  2438 ;; Parameters:    Size  Location     Type
  2439 ;;		None
  2440 ;; Auto vars:     Size  Location     Type
  2441 ;;  value           2   22[COMRAM] unsigned int 
  2442 ;; Return value:  Size  Location     Type
  2443 ;;                  2   20[COMRAM] unsigned int 
  2444 ;; Registers used:
  2445 ;;		None
  2446 ;; Tracked objects:
  2447 ;;		On entry : 0/0
  2448 ;;		On exit  : 0/0
  2449 ;;		Unchanged: 0/0
  2450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2451 ;;      Params:         2       0       0       0       0       0       0       0       0
  2452 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2453 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2454 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2455 ;;Total ram usage:        4 bytes
  2456 ;; Hardware stack levels used:    1
  2457 ;; Hardware stack levels required when called:    2
  2458 ;; This function calls:
  2459 ;;		Nothing
  2460 ;; This function is called by:
  2461 ;;		_readSignal
  2462 ;;		_lerToque
  2463 ;;		_destravarPorta
  2464 ;; This function uses a non-reentrant model
  2465 ;;
  2466                           
  2467                           	psect	text13
  2468  0014CA                     __ptext13:
  2469                           	opt stack 0
  2470  0014CA                     _read_ADC:
  2471                           	opt stack 27
  2472                           
  2473                           ;ADC.c: 21: unsigned int value;
  2474                           ;ADC.c: 22: ADCON0bits.GO = 1;
  2475                           
  2476                           ;incstack = 0
  2477  0014CA  82C2               	bsf	4034,1,c	;volatile
  2478  0014CC                     l201:
  2479  0014CC  B2C2               	btfsc	4034,1,c	;volatile
  2480  0014CE  D7FE               	goto	l201
  2481                           
  2482                           ;ADC.c: 25: value = ADRES;
  2483  0014D0  CFC3 F017          	movff	4035,read_ADC@value	;volatile
  2484  0014D4  CFC4 F018          	movff	4036,read_ADC@value+1	;volatile
  2485                           
  2486                           ;ADC.c: 27: return value;
  2487  0014D8  C017  F015         	movff	read_ADC@value,?_read_ADC
  2488  0014DC  C018  F016         	movff	read_ADC@value+1,?_read_ADC+1
  2489  0014E0  0012               	return		;funcret
  2490  0014E2                     __end_of_read_ADC:
  2491                           	opt stack 0
  2492                           tblptru	equ	0xFF8
  2493                           tblptrh	equ	0xFF7
  2494                           tblptrl	equ	0xFF6
  2495                           tablat	equ	0xFF5
  2496                           intcon	equ	0xFF2
  2497                           intcon2	equ	0xFF1
  2498                           intcon3	equ	0xFF0
  2499                           wreg	equ	0xFE8
  2500                           indf2	equ	0xFDF
  2501                           fsr2h	equ	0xFDA
  2502                           fsr2l	equ	0xFD9
  2503                           status	equ	0xFD8
  2504                           
  2505 ;; *************** function _confirmarSenha *****************
  2506 ;; Defined at:
  2507 ;;		line 133 in file "TOCTOC.c"
  2508 ;; Parameters:    Size  Location     Type
  2509 ;;		None
  2510 ;; Auto vars:     Size  Location     Type
  2511 ;;		None
  2512 ;; Return value:  Size  Location     Type
  2513 ;;                  2   29[COMRAM] int 
  2514 ;; Registers used:
  2515 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2516 ;; Tracked objects:
  2517 ;;		On entry : 0/0
  2518 ;;		On exit  : 0/0
  2519 ;;		Unchanged: 0/0
  2520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2521 ;;      Params:         2       0       0       0       0       0       0       0       0
  2522 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2523 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2524 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2525 ;;Total ram usage:        2 bytes
  2526 ;; Hardware stack levels used:    1
  2527 ;; Hardware stack levels required when called:    5
  2528 ;; This function calls:
  2529 ;;		_checkUSART
  2530 ;;		_clearLCD
  2531 ;;		_set_line
  2532 ;;		_write_LCD
  2533 ;; This function is called by:
  2534 ;;		_cadastrarSenha
  2535 ;; This function uses a non-reentrant model
  2536 ;;
  2537                           
  2538                           	psect	text14
  2539  001134                     __ptext14:
  2540                           	opt stack 0
  2541  001134                     _confirmarSenha:
  2542                           	opt stack 24
  2543                           
  2544                           ;TOCTOC.c: 134: clearLCD();
  2545                           
  2546                           ;incstack = 0
  2547  001134  EC9D  F00A         	call	_clearLCD	;wreg free
  2548                           
  2549                           ;TOCTOC.c: 135: set_line(0,1);
  2550  001138  0E00               	movlw	0
  2551  00113A  6E19               	movwf	set_line@line+1,c
  2552  00113C  0E00               	movlw	0
  2553  00113E  6E18               	movwf	set_line@line,c
  2554  001140  0E00               	movlw	0
  2555  001142  6E1B               	movwf	set_line@pos+1,c
  2556  001144  0E01               	movlw	1
  2557  001146  6E1A               	movwf	set_line@pos,c
  2558  001148  EC57  F00A         	call	_set_line	;wreg free
  2559                           
  2560                           ;TOCTOC.c: 136: write_LCD("Confirme sua");
  2561  00114C  0E1D               	movlw	low STR_11
  2562  00114E  6E18               	movwf	write_LCD@c,c
  2563  001150  0E08               	movlw	high STR_11
  2564  001152  6E19               	movwf	write_LCD@c+1,c
  2565  001154  EC58  F009         	call	_write_LCD	;wreg free
  2566                           
  2567                           ;TOCTOC.c: 137: set_line(1,5);
  2568  001158  0E00               	movlw	0
  2569  00115A  6E19               	movwf	set_line@line+1,c
  2570  00115C  0E01               	movlw	1
  2571  00115E  6E18               	movwf	set_line@line,c
  2572  001160  0E00               	movlw	0
  2573  001162  6E1B               	movwf	set_line@pos+1,c
  2574  001164  0E05               	movlw	5
  2575  001166  6E1A               	movwf	set_line@pos,c
  2576  001168  EC57  F00A         	call	_set_line	;wreg free
  2577                           
  2578                           ;TOCTOC.c: 138: write_LCD("senha");
  2579  00116C  0E69               	movlw	low STR_12
  2580  00116E  6E18               	movwf	write_LCD@c,c
  2581  001170  0E08               	movlw	high STR_12
  2582  001172  6E19               	movwf	write_LCD@c+1,c
  2583  001174  EC58  F009         	call	_write_LCD	;wreg free
  2584  001178                     l1806:
  2585                           
  2586                           ;TOCTOC.c: 140: checkUSART();
  2587  001178  ECD5  F008         	call	_checkUSART	;wreg free
  2588                           
  2589                           ;TOCTOC.c: 141: if(buttonCancel_Lock == 1){
  2590  00117C  043B               	decf	_buttonCancel_Lock,w,c
  2591  00117E  103C               	iorwf	_buttonCancel_Lock+1,w,c
  2592  001180  A4D8               	btfss	status,2,c
  2593  001182  D009               	goto	l320
  2594                           
  2595                           ;TOCTOC.c: 142: buttonCancel_Lock = 0;
  2596  001184  0E00               	movlw	0
  2597  001186  6E3C               	movwf	_buttonCancel_Lock+1,c
  2598  001188  0E00               	movlw	0
  2599  00118A  6E3B               	movwf	_buttonCancel_Lock,c
  2600                           
  2601                           ;TOCTOC.c: 143: return 0;
  2602  00118C  0E00               	movlw	0
  2603  00118E  6E1F               	movwf	?_confirmarSenha+1,c
  2604  001190  0E00               	movlw	0
  2605  001192  6E1E               	movwf	?_confirmarSenha,c
  2606  001194  0012               	return	
  2607  001196                     l320:
  2608                           
  2609                           ;TOCTOC.c: 145: else if(PORTBbits.RB4 || buttonConfirm_Cad == 1)
  2610  001196  B881               	btfsc	3969,4,c	;volatile
  2611  001198  D004               	goto	l1818
  2612  00119A  0439               	decf	_buttonConfirm_Cad,w,c
  2613  00119C  103A               	iorwf	_buttonConfirm_Cad+1,w,c
  2614  00119E  A4D8               	btfss	status,2,c
  2615  0011A0  D7EB               	goto	l1806
  2616  0011A2                     l1818:
  2617                           
  2618                           ;TOCTOC.c: 146: return 1;
  2619  0011A2  0E00               	movlw	0
  2620  0011A4  6E1F               	movwf	?_confirmarSenha+1,c
  2621  0011A6  0E01               	movlw	1
  2622  0011A8  D7F4               	goto	L1
  2623  0011AA                     __end_of_confirmarSenha:
  2624                           	opt stack 0
  2625                           tblptru	equ	0xFF8
  2626                           tblptrh	equ	0xFF7
  2627                           tblptrl	equ	0xFF6
  2628                           tablat	equ	0xFF5
  2629                           intcon	equ	0xFF2
  2630                           intcon2	equ	0xFF1
  2631                           intcon3	equ	0xFF0
  2632                           wreg	equ	0xFE8
  2633                           indf2	equ	0xFDF
  2634                           fsr2h	equ	0xFDA
  2635                           fsr2l	equ	0xFD9
  2636                           status	equ	0xFD8
  2637                           
  2638 ;; *************** function _checkUSART *****************
  2639 ;; Defined at:
  2640 ;;		line 72 in file "USART.c"
  2641 ;; Parameters:    Size  Location     Type
  2642 ;;		None
  2643 ;; Auto vars:     Size  Location     Type
  2644 ;;  op              2   24[COMRAM] int 
  2645 ;;  msg             1   26[COMRAM] unsigned char 
  2646 ;; Return value:  Size  Location     Type
  2647 ;;                  1    wreg      void 
  2648 ;; Registers used:
  2649 ;;		wreg, status,2, status,0, cstack
  2650 ;; Tracked objects:
  2651 ;;		On entry : 0/0
  2652 ;;		On exit  : 0/0
  2653 ;;		Unchanged: 0/0
  2654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2655 ;;      Params:         0       0       0       0       0       0       0       0       0
  2656 ;;      Locals:         3       0       0       0       0       0       0       0       0
  2657 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2658 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2659 ;;Total ram usage:        3 bytes
  2660 ;; Hardware stack levels used:    1
  2661 ;; Hardware stack levels required when called:    3
  2662 ;; This function calls:
  2663 ;;		_UART_Data_Ready
  2664 ;;		_UART_Read
  2665 ;;		_cmp_MSG1
  2666 ;;		_cmp_MSG2
  2667 ;; This function is called by:
  2668 ;;		_destravarPorta
  2669 ;;		_confirmarSenha
  2670 ;; This function uses a non-reentrant model
  2671 ;;
  2672                           
  2673                           	psect	text15
  2674  0011AA                     __ptext15:
  2675                           	opt stack 0
  2676  0011AA                     _checkUSART:
  2677                           	opt stack 26
  2678                           
  2679                           ;USART.c: 74: if(UART_Data_Ready()){
  2680                           
  2681                           ;incstack = 0
  2682  0011AA  EC99  F00A         	call	_UART_Data_Ready	;wreg free
  2683  0011AE  0900               	iorlw	0
  2684  0011B0  B4D8               	btfsc	status,2,c
  2685  0011B2  0012               	return	
  2686                           
  2687                           ;USART.c: 75: char msg = UART_Read();
  2688  0011B4  EC95  F00A         	call	_UART_Read	;wreg free
  2689  0011B8  6E1B               	movwf	checkUSART@msg,c
  2690                           
  2691                           ;USART.c: 76: if(cmp_MSG1(msg)){
  2692  0011BA  501B               	movf	checkUSART@msg,w,c
  2693  0011BC  EC39  F00A         	call	_cmp_MSG1
  2694  0011C0  5015               	movf	?_cmp_MSG1,w,c
  2695  0011C2  1016               	iorwf	?_cmp_MSG1+1,w,c
  2696  0011C4  B4D8               	btfsc	status,2,c
  2697  0011C6  0012               	return	
  2698                           
  2699                           ;USART.c: 77: if(UART_Data_Ready()){
  2700  0011C8  EC99  F00A         	call	_UART_Data_Ready	;wreg free
  2701  0011CC  0900               	iorlw	0
  2702  0011CE  B4D8               	btfsc	status,2,c
  2703  0011D0  0012               	return	
  2704                           
  2705                           ;USART.c: 78: msg = UART_Read();
  2706  0011D2  EC95  F00A         	call	_UART_Read	;wreg free
  2707  0011D6  6E1B               	movwf	checkUSART@msg,c
  2708                           
  2709                           ;USART.c: 79: int op = cmp_MSG2(msg);
  2710  0011D8  501B               	movf	checkUSART@msg,w,c
  2711  0011DA  EC9B  F009         	call	_cmp_MSG2
  2712  0011DE  C015  F019         	movff	?_cmp_MSG2,checkUSART@op
  2713  0011E2  C016  F01A         	movff	?_cmp_MSG2+1,checkUSART@op+1
  2714                           
  2715                           ;USART.c: 80: if(op == 0)
  2716  0011E6  5019               	movf	checkUSART@op,w,c
  2717  0011E8  101A               	iorwf	checkUSART@op+1,w,c
  2718  0011EA  A4D8               	btfss	status,2,c
  2719  0011EC  D005               	goto	l1664
  2720                           
  2721                           ;USART.c: 81: buttonCancel_Lock = 1;
  2722  0011EE  0E00               	movlw	0
  2723  0011F0  6E3C               	movwf	_buttonCancel_Lock+1,c
  2724  0011F2  0E01               	movlw	1
  2725  0011F4  6E3B               	movwf	_buttonCancel_Lock,c
  2726  0011F6  0012               	return	
  2727  0011F8                     l1664:
  2728                           
  2729                           ;USART.c: 82: else if(op == 1)
  2730  0011F8  0419               	decf	checkUSART@op,w,c
  2731  0011FA  101A               	iorwf	checkUSART@op+1,w,c
  2732  0011FC  A4D8               	btfss	status,2,c
  2733  0011FE  0012               	return	
  2734                           
  2735                           ;USART.c: 83: buttonConfirm_Cad = 1;
  2736  001200  0E00               	movlw	0
  2737  001202  6E3A               	movwf	_buttonConfirm_Cad+1,c
  2738  001204  0E01               	movlw	1
  2739  001206  6E39               	movwf	_buttonConfirm_Cad,c
  2740  001208  0012               	return	
  2741  00120A                     __end_of_checkUSART:
  2742                           	opt stack 0
  2743                           tblptru	equ	0xFF8
  2744                           tblptrh	equ	0xFF7
  2745                           tblptrl	equ	0xFF6
  2746                           tablat	equ	0xFF5
  2747                           intcon	equ	0xFF2
  2748                           intcon2	equ	0xFF1
  2749                           intcon3	equ	0xFF0
  2750                           wreg	equ	0xFE8
  2751                           indf2	equ	0xFDF
  2752                           fsr2h	equ	0xFDA
  2753                           fsr2l	equ	0xFD9
  2754                           status	equ	0xFD8
  2755                           
  2756 ;; *************** function _cmp_MSG2 *****************
  2757 ;; Defined at:
  2758 ;;		line 61 in file "USART.c"
  2759 ;; Parameters:    Size  Location     Type
  2760 ;;  msg             1    wreg     unsigned char 
  2761 ;; Auto vars:     Size  Location     Type
  2762 ;;  msg             1   23[COMRAM] unsigned char 
  2763 ;; Return value:  Size  Location     Type
  2764 ;;                  2   20[COMRAM] int 
  2765 ;; Registers used:
  2766 ;;		wreg, status,2, status,0
  2767 ;; Tracked objects:
  2768 ;;		On entry : 0/0
  2769 ;;		On exit  : 0/0
  2770 ;;		Unchanged: 0/0
  2771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2772 ;;      Params:         2       0       0       0       0       0       0       0       0
  2773 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2774 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2775 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2776 ;;Total ram usage:        4 bytes
  2777 ;; Hardware stack levels used:    1
  2778 ;; Hardware stack levels required when called:    2
  2779 ;; This function calls:
  2780 ;;		Nothing
  2781 ;; This function is called by:
  2782 ;;		_checkUSART
  2783 ;; This function uses a non-reentrant model
  2784 ;;
  2785                           
  2786                           	psect	text16
  2787  001336                     __ptext16:
  2788                           	opt stack 0
  2789  001336                     _cmp_MSG2:
  2790                           	opt stack 26
  2791                           
  2792                           ;incstack = 0
  2793                           ;cmp_MSG2@msg stored from wreg
  2794  001336  6E18               	movwf	cmp_MSG2@msg,c
  2795                           
  2796                           ;USART.c: 62: if((msg & 0x1C) == 0x04){
  2797  001338  5018               	movf	cmp_MSG2@msg,w,c
  2798  00133A  0B1C               	andlw	28
  2799  00133C  0A04               	xorlw	4
  2800  00133E  A4D8               	btfss	status,2,c
  2801  001340  D015               	goto	l171
  2802                           
  2803                           ;USART.c: 63: if((msg & 0x03) == 0x00)
  2804  001342  C018  F017         	movff	cmp_MSG2@msg,??_cmp_MSG2
  2805  001346  0E03               	movlw	3
  2806  001348  1617               	andwf	??_cmp_MSG2,f,c
  2807  00134A  A4D8               	btfss	status,2,c
  2808  00134C  D005               	goto	l1624
  2809                           
  2810                           ;USART.c: 64: return 0;
  2811  00134E  0E00               	movlw	0
  2812  001350  6E16               	movwf	?_cmp_MSG2+1,c
  2813  001352  0E00               	movlw	0
  2814  001354  6E15               	movwf	?_cmp_MSG2,c
  2815  001356  0012               	return	
  2816  001358                     l1624:
  2817                           
  2818                           ;USART.c: 65: if((msg & 0x03) == 0x01)
  2819  001358  5018               	movf	cmp_MSG2@msg,w,c
  2820  00135A  0B03               	andlw	3
  2821  00135C  06E8               	decf	wreg,f,c
  2822  00135E  A4D8               	btfss	status,2,c
  2823  001360  D005               	goto	l171
  2824                           
  2825                           ;USART.c: 66: return 1;
  2826  001362  0E00               	movlw	0
  2827  001364  6E16               	movwf	?_cmp_MSG2+1,c
  2828  001366  0E01               	movlw	1
  2829  001368  6E15               	movwf	?_cmp_MSG2,c
  2830  00136A  0012               	return	
  2831  00136C                     l171:
  2832                           
  2833                           ;USART.c: 67: }
  2834                           ;USART.c: 68: return -1;
  2835  00136C  6815               	setf	?_cmp_MSG2,c
  2836  00136E  6816               	setf	?_cmp_MSG2+1,c
  2837  001370  0012               	return		;funcret
  2838  001372                     __end_of_cmp_MSG2:
  2839                           	opt stack 0
  2840                           tblptru	equ	0xFF8
  2841                           tblptrh	equ	0xFF7
  2842                           tblptrl	equ	0xFF6
  2843                           tablat	equ	0xFF5
  2844                           intcon	equ	0xFF2
  2845                           intcon2	equ	0xFF1
  2846                           intcon3	equ	0xFF0
  2847                           wreg	equ	0xFE8
  2848                           indf2	equ	0xFDF
  2849                           fsr2h	equ	0xFDA
  2850                           fsr2l	equ	0xFD9
  2851                           status	equ	0xFD8
  2852                           
  2853 ;; *************** function _cmp_MSG1 *****************
  2854 ;; Defined at:
  2855 ;;		line 55 in file "USART.c"
  2856 ;; Parameters:    Size  Location     Type
  2857 ;;  msg             1    wreg     unsigned char 
  2858 ;; Auto vars:     Size  Location     Type
  2859 ;;  msg             1   22[COMRAM] unsigned char 
  2860 ;; Return value:  Size  Location     Type
  2861 ;;                  2   20[COMRAM] int 
  2862 ;; Registers used:
  2863 ;;		wreg, status,2, status,0
  2864 ;; Tracked objects:
  2865 ;;		On entry : 0/0
  2866 ;;		On exit  : 0/0
  2867 ;;		Unchanged: 0/0
  2868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2869 ;;      Params:         2       0       0       0       0       0       0       0       0
  2870 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2871 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2872 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2873 ;;Total ram usage:        3 bytes
  2874 ;; Hardware stack levels used:    1
  2875 ;; Hardware stack levels required when called:    2
  2876 ;; This function calls:
  2877 ;;		Nothing
  2878 ;; This function is called by:
  2879 ;;		_checkUSART
  2880 ;; This function uses a non-reentrant model
  2881 ;;
  2882                           
  2883                           	psect	text17
  2884  001472                     __ptext17:
  2885                           	opt stack 0
  2886  001472                     _cmp_MSG1:
  2887                           	opt stack 26
  2888                           
  2889                           ;incstack = 0
  2890                           ;cmp_MSG1@msg stored from wreg
  2891  001472  6E17               	movwf	cmp_MSG1@msg,c
  2892                           
  2893                           ;USART.c: 56: if(msg == 0x40)
  2894  001474  0E40               	movlw	64
  2895  001476  1817               	xorwf	cmp_MSG1@msg,w,c
  2896  001478  A4D8               	btfss	status,2,c
  2897  00147A  D005               	goto	l1612
  2898                           
  2899                           ;USART.c: 57: return 1;
  2900  00147C  0E00               	movlw	0
  2901  00147E  6E16               	movwf	?_cmp_MSG1+1,c
  2902  001480  0E01               	movlw	1
  2903  001482  6E15               	movwf	?_cmp_MSG1,c
  2904  001484  0012               	return	
  2905  001486                     l1612:
  2906                           
  2907                           ;USART.c: 58: return 0;
  2908  001486  0E00               	movlw	0
  2909  001488  6E16               	movwf	?_cmp_MSG1+1,c
  2910  00148A  0E00               	movlw	0
  2911  00148C  6E15               	movwf	?_cmp_MSG1,c
  2912  00148E  0012               	return	
  2913  001490                     __end_of_cmp_MSG1:
  2914                           	opt stack 0
  2915                           tblptru	equ	0xFF8
  2916                           tblptrh	equ	0xFF7
  2917                           tblptrl	equ	0xFF6
  2918                           tablat	equ	0xFF5
  2919                           intcon	equ	0xFF2
  2920                           intcon2	equ	0xFF1
  2921                           intcon3	equ	0xFF0
  2922                           wreg	equ	0xFE8
  2923                           indf2	equ	0xFDF
  2924                           fsr2h	equ	0xFDA
  2925                           fsr2l	equ	0xFD9
  2926                           status	equ	0xFD8
  2927                           
  2928 ;; *************** function _UART_Read *****************
  2929 ;; Defined at:
  2930 ;;		line 44 in file "USART.c"
  2931 ;; Parameters:    Size  Location     Type
  2932 ;;		None
  2933 ;; Auto vars:     Size  Location     Type
  2934 ;;		None
  2935 ;; Return value:  Size  Location     Type
  2936 ;;                  1    wreg      unsigned char 
  2937 ;; Registers used:
  2938 ;;		wreg, status,2
  2939 ;; Tracked objects:
  2940 ;;		On entry : 0/0
  2941 ;;		On exit  : 0/0
  2942 ;;		Unchanged: 0/0
  2943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2944 ;;      Params:         0       0       0       0       0       0       0       0       0
  2945 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2946 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2947 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2948 ;;Total ram usage:        0 bytes
  2949 ;; Hardware stack levels used:    1
  2950 ;; Hardware stack levels required when called:    2
  2951 ;; This function calls:
  2952 ;;		Nothing
  2953 ;; This function is called by:
  2954 ;;		_checkUSART
  2955 ;;		_UART_Read_Text
  2956 ;; This function uses a non-reentrant model
  2957 ;;
  2958                           
  2959                           	psect	text18
  2960  00152A                     __ptext18:
  2961                           	opt stack 0
  2962  00152A                     _UART_Read:
  2963                           	opt stack 26
  2964  00152A                     l155:
  2965  00152A  AA9E               	btfss	3998,5,c	;volatile
  2966  00152C  D7FE               	goto	l155
  2967                           
  2968                           ;USART.c: 46: return RCREG;
  2969  00152E  50AE               	movf	4014,w,c	;volatile
  2970  001530  0012               	return	
  2971  001532                     __end_of_UART_Read:
  2972                           	opt stack 0
  2973                           tblptru	equ	0xFF8
  2974                           tblptrh	equ	0xFF7
  2975                           tblptrl	equ	0xFF6
  2976                           tablat	equ	0xFF5
  2977                           intcon	equ	0xFF2
  2978                           intcon2	equ	0xFF1
  2979                           intcon3	equ	0xFF0
  2980                           wreg	equ	0xFE8
  2981                           indf2	equ	0xFDF
  2982                           fsr2h	equ	0xFDA
  2983                           fsr2l	equ	0xFD9
  2984                           status	equ	0xFD8
  2985                           
  2986 ;; *************** function _UART_Data_Ready *****************
  2987 ;; Defined at:
  2988 ;;		line 40 in file "USART.c"
  2989 ;; Parameters:    Size  Location     Type
  2990 ;;		None
  2991 ;; Auto vars:     Size  Location     Type
  2992 ;;		None
  2993 ;; Return value:  Size  Location     Type
  2994 ;;                  1    wreg      unsigned char 
  2995 ;; Registers used:
  2996 ;;		wreg
  2997 ;; Tracked objects:
  2998 ;;		On entry : 0/0
  2999 ;;		On exit  : 0/0
  3000 ;;		Unchanged: 0/0
  3001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3002 ;;      Params:         0       0       0       0       0       0       0       0       0
  3003 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3004 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3005 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3006 ;;Total ram usage:        0 bytes
  3007 ;; Hardware stack levels used:    1
  3008 ;; Hardware stack levels required when called:    2
  3009 ;; This function calls:
  3010 ;;		Nothing
  3011 ;; This function is called by:
  3012 ;;		_checkUSART
  3013 ;; This function uses a non-reentrant model
  3014 ;;
  3015                           
  3016                           	psect	text19
  3017  001532                     __ptext19:
  3018                           	opt stack 0
  3019  001532                     _UART_Data_Ready:
  3020                           	opt stack 26
  3021                           
  3022                           ;USART.c: 41: return RCIF;
  3023                           
  3024                           ;incstack = 0
  3025  001532  0E00               	movlw	0
  3026  001534  BA9E               	btfsc	3998,5,c	;volatile
  3027  001536  0E01               	movlw	1
  3028  001538  0012               	return	
  3029  00153A                     __end_of_UART_Data_Ready:
  3030                           	opt stack 0
  3031                           tblptru	equ	0xFF8
  3032                           tblptrh	equ	0xFF7
  3033                           tblptrl	equ	0xFF6
  3034                           tablat	equ	0xFF5
  3035                           intcon	equ	0xFF2
  3036                           intcon2	equ	0xFF1
  3037                           intcon3	equ	0xFF0
  3038                           wreg	equ	0xFE8
  3039                           indf2	equ	0xFDF
  3040                           fsr2h	equ	0xFDA
  3041                           fsr2l	equ	0xFD9
  3042                           status	equ	0xFD8
  3043                           
  3044 ;; *************** function _cmpPass *****************
  3045 ;; Defined at:
  3046 ;;		line 109 in file "TOCTOC.c"
  3047 ;; Parameters:    Size  Location     Type
  3048 ;;  pass            2   29[COMRAM] PTR unsigned char 
  3049 ;;		 -> cadastrarSenha@temp1(2), main@pass(2), 
  3050 ;;  toque           2   31[COMRAM] PTR unsigned char 
  3051 ;;		 -> cadastrarSenha@temp2(2), main@toc(2), 
  3052 ;; Auto vars:     Size  Location     Type
  3053 ;;  i               2   33[COMRAM] int 
  3054 ;; Return value:  Size  Location     Type
  3055 ;;                  2   29[COMRAM] int 
  3056 ;; Registers used:
  3057 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3058 ;; Tracked objects:
  3059 ;;		On entry : 0/0
  3060 ;;		On exit  : 0/0
  3061 ;;		Unchanged: 0/0
  3062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3063 ;;      Params:         4       0       0       0       0       0       0       0       0
  3064 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3065 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3066 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3067 ;;Total ram usage:        6 bytes
  3068 ;; Hardware stack levels used:    1
  3069 ;; Hardware stack levels required when called:    5
  3070 ;; This function calls:
  3071 ;;		_bip
  3072 ;;		_clearLCD
  3073 ;;		_cmpSignal
  3074 ;;		_set_line
  3075 ;;		_write_LCD
  3076 ;; This function is called by:
  3077 ;;		_destravarPorta
  3078 ;;		_cadastrarSenha
  3079 ;; This function uses a non-reentrant model
  3080 ;;
  3081                           
  3082                           	psect	text20
  3083  000D38                     __ptext20:
  3084                           	opt stack 0
  3085  000D38                     _cmpPass:
  3086                           	opt stack 24
  3087                           
  3088                           ;TOCTOC.c: 111: int i = cmpSignal(pass, toque);
  3089                           
  3090                           ;incstack = 0
  3091  000D38  C01E  F015         	movff	cmpPass@pass,cmpSignal@pass
  3092  000D3C  C01F  F016         	movff	cmpPass@pass+1,cmpSignal@pass+1
  3093  000D40  C020  F017         	movff	cmpPass@toque,cmpSignal@toc
  3094  000D44  C021  F018         	movff	cmpPass@toque+1,cmpSignal@toc+1
  3095  000D48  EC32  F009         	call	_cmpSignal	;wreg free
  3096  000D4C  C015  F022         	movff	?_cmpSignal,cmpPass@i
  3097  000D50  C016  F023         	movff	?_cmpSignal+1,cmpPass@i+1
  3098                           
  3099                           ;TOCTOC.c: 113: if(i == 1){
  3100  000D54  0422               	decf	cmpPass@i,w,c
  3101  000D56  1023               	iorwf	cmpPass@i+1,w,c
  3102  000D58  A4D8               	btfss	status,2,c
  3103  000D5A  D02D               	goto	l1780
  3104                           
  3105                           ;TOCTOC.c: 114: clearLCD();
  3106  000D5C  EC9D  F00A         	call	_clearLCD	;wreg free
  3107                           
  3108                           ;TOCTOC.c: 115: set_line(0,3);
  3109  000D60  0E00               	movlw	0
  3110  000D62  6E19               	movwf	set_line@line+1,c
  3111  000D64  0E00               	movlw	0
  3112  000D66  6E18               	movwf	set_line@line,c
  3113  000D68  0E00               	movlw	0
  3114  000D6A  6E1B               	movwf	set_line@pos+1,c
  3115  000D6C  0E03               	movlw	3
  3116  000D6E  6E1A               	movwf	set_line@pos,c
  3117  000D70  EC57  F00A         	call	_set_line	;wreg free
  3118                           
  3119                           ;TOCTOC.c: 116: write_LCD("As senhas");
  3120  000D74  0E59               	movlw	low STR_5
  3121  000D76  6E18               	movwf	write_LCD@c,c
  3122  000D78  0E08               	movlw	high STR_5
  3123  000D7A  6E19               	movwf	write_LCD@c+1,c
  3124  000D7C  EC58  F009         	call	_write_LCD	;wreg free
  3125                           
  3126                           ;TOCTOC.c: 117: set_line(1,3);
  3127  000D80  0E00               	movlw	0
  3128  000D82  6E19               	movwf	set_line@line+1,c
  3129  000D84  0E01               	movlw	1
  3130  000D86  6E18               	movwf	set_line@line,c
  3131  000D88  0E00               	movlw	0
  3132  000D8A  6E1B               	movwf	set_line@pos+1,c
  3133  000D8C  0E03               	movlw	3
  3134  000D8E  6E1A               	movwf	set_line@pos,c
  3135  000D90  EC57  F00A         	call	_set_line	;wreg free
  3136                           
  3137                           ;TOCTOC.c: 118: write_LCD("coincidem");
  3138  000D94  0E13               	movlw	low (STR_6+4)
  3139  000D96  6E18               	movwf	write_LCD@c,c
  3140  000D98  0E08               	movlw	high (STR_6+4)
  3141  000D9A  6E19               	movwf	write_LCD@c+1,c
  3142  000D9C  EC58  F009         	call	_write_LCD	;wreg free
  3143                           
  3144                           ;TOCTOC.c: 119: bip(2, 1000);
  3145  000DA0  0E00               	movlw	0
  3146  000DA2  6E16               	movwf	bip@rounds+1,c
  3147  000DA4  0E02               	movlw	2
  3148  000DA6  6E15               	movwf	bip@rounds,c
  3149  000DA8  0E03               	movlw	3
  3150  000DAA  6E18               	movwf	bip@time+1,c
  3151  000DAC  0EE8               	movlw	232
  3152  000DAE  6E17               	movwf	bip@time,c
  3153  000DB0  EC6E  F007         	call	_bip	;wreg free
  3154                           
  3155                           ;TOCTOC.c: 120: }
  3156  000DB4  D02C               	goto	l1792
  3157  000DB6                     l1780:
  3158                           
  3159                           ;TOCTOC.c: 121: else{
  3160                           ;TOCTOC.c: 122: clearLCD();
  3161  000DB6  EC9D  F00A         	call	_clearLCD	;wreg free
  3162                           
  3163                           ;TOCTOC.c: 123: set_line(0,3);
  3164  000DBA  0E00               	movlw	0
  3165  000DBC  6E19               	movwf	set_line@line+1,c
  3166  000DBE  0E00               	movlw	0
  3167  000DC0  6E18               	movwf	set_line@line,c
  3168  000DC2  0E00               	movlw	0
  3169  000DC4  6E1B               	movwf	set_line@pos+1,c
  3170  000DC6  0E03               	movlw	3
  3171  000DC8  6E1A               	movwf	set_line@pos,c
  3172  000DCA  EC57  F00A         	call	_set_line	;wreg free
  3173                           
  3174                           ;TOCTOC.c: 124: write_LCD("As senhas");
  3175  000DCE  0E59               	movlw	low STR_5
  3176  000DD0  6E18               	movwf	write_LCD@c,c
  3177  000DD2  0E08               	movlw	high STR_5
  3178  000DD4  6E19               	movwf	write_LCD@c+1,c
  3179  000DD6  EC58  F009         	call	_write_LCD	;wreg free
  3180                           
  3181                           ;TOCTOC.c: 125: set_line(1,1);
  3182  000DDA  0E00               	movlw	0
  3183  000DDC  6E19               	movwf	set_line@line+1,c
  3184  000DDE  0E01               	movlw	1
  3185  000DE0  6E18               	movwf	set_line@line,c
  3186  000DE2  0E00               	movlw	0
  3187  000DE4  6E1B               	movwf	set_line@pos+1,c
  3188  000DE6  0E01               	movlw	1
  3189  000DE8  6E1A               	movwf	set_line@pos,c
  3190  000DEA  EC57  F00A         	call	_set_line	;wreg free
  3191                           
  3192                           ;TOCTOC.c: 126: write_LCD("nao coincidem");
  3193  000DEE  0E0F               	movlw	low STR_6
  3194  000DF0  6E18               	movwf	write_LCD@c,c
  3195  000DF2  0E08               	movlw	high STR_6
  3196  000DF4  6E19               	movwf	write_LCD@c+1,c
  3197  000DF6  EC58  F009         	call	_write_LCD	;wreg free
  3198                           
  3199                           ;TOCTOC.c: 127: bip(4, 500);
  3200  000DFA  0E00               	movlw	0
  3201  000DFC  6E16               	movwf	bip@rounds+1,c
  3202  000DFE  0E04               	movlw	4
  3203  000E00  6E15               	movwf	bip@rounds,c
  3204  000E02  0E01               	movlw	1
  3205  000E04  6E18               	movwf	bip@time+1,c
  3206  000E06  0EF4               	movlw	244
  3207  000E08  6E17               	movwf	bip@time,c
  3208  000E0A  EC6E  F007         	call	_bip	;wreg free
  3209  000E0E                     l1792:
  3210                           
  3211                           ;TOCTOC.c: 128: }
  3212                           ;TOCTOC.c: 129: return i;
  3213  000E0E  C022  F01E         	movff	cmpPass@i,?_cmpPass
  3214  000E12  C023  F01F         	movff	cmpPass@i+1,?_cmpPass+1
  3215  000E16  0012               	return	
  3216  000E18                     __end_of_cmpPass:
  3217                           	opt stack 0
  3218                           tblptru	equ	0xFF8
  3219                           tblptrh	equ	0xFF7
  3220                           tblptrl	equ	0xFF6
  3221                           tablat	equ	0xFF5
  3222                           intcon	equ	0xFF2
  3223                           intcon2	equ	0xFF1
  3224                           intcon3	equ	0xFF0
  3225                           wreg	equ	0xFE8
  3226                           indf2	equ	0xFDF
  3227                           fsr2h	equ	0xFDA
  3228                           fsr2l	equ	0xFD9
  3229                           status	equ	0xFD8
  3230                           
  3231 ;; *************** function _write_LCD *****************
  3232 ;; Defined at:
  3233 ;;		line 59 in file "LCD.c"
  3234 ;; Parameters:    Size  Location     Type
  3235 ;;  c               2   23[COMRAM] PTR unsigned char 
  3236 ;;		 -> STR_18(11), STR_17(6), STR_16(6), STR_15(11), 
  3237 ;;		 -> STR_14(6), STR_13(13), STR_12(6), STR_11(13), 
  3238 ;;		 -> STR_10(14), STR_9(10), STR_8(10), STR_7(10), 
  3239 ;;		 -> STR_6(14), STR_5(10), STR_4(12), STR_3(6), 
  3240 ;;		 -> STR_2(14), STR_1(14), 
  3241 ;; Auto vars:     Size  Location     Type
  3242 ;;  i               2   27[COMRAM] int 
  3243 ;; Return value:  Size  Location     Type
  3244 ;;                  1    wreg      void 
  3245 ;; Registers used:
  3246 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3247 ;; Tracked objects:
  3248 ;;		On entry : 0/0
  3249 ;;		On exit  : 0/0
  3250 ;;		Unchanged: 0/0
  3251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3252 ;;      Params:         2       0       0       0       0       0       0       0       0
  3253 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3254 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3255 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3256 ;;Total ram usage:        6 bytes
  3257 ;; Hardware stack levels used:    1
  3258 ;; Hardware stack levels required when called:    4
  3259 ;; This function calls:
  3260 ;;		_send_msg
  3261 ;; This function is called by:
  3262 ;;		_lerToque
  3263 ;;		_destravarPorta
  3264 ;;		_cmpPass
  3265 ;;		_confirmarSenha
  3266 ;;		_cadastrarSenha
  3267 ;; This function uses a non-reentrant model
  3268 ;;
  3269                           
  3270                           	psect	text21
  3271  0012B0                     __ptext21:
  3272                           	opt stack 0
  3273  0012B0                     _write_LCD:
  3274                           	opt stack 25
  3275                           
  3276                           ;LCD.c: 61: int i = 0;
  3277                           
  3278                           ;incstack = 0
  3279  0012B0  0E00               	movlw	0
  3280  0012B2  6E1D               	movwf	write_LCD@i+1,c
  3281  0012B4  0E00               	movlw	0
  3282  0012B6  6E1C               	movwf	write_LCD@i,c
  3283                           
  3284                           ;LCD.c: 62: for(; c[i] != '\0'; i++)
  3285  0012B8  D010               	goto	l1638
  3286  0012BA                     l1634:
  3287                           
  3288                           ;LCD.c: 63: send_msg(c[i]);
  3289  0012BA  501C               	movf	write_LCD@i,w,c
  3290  0012BC  2418               	addwf	write_LCD@c,w,c
  3291  0012BE  6E1A               	movwf	??_write_LCD& (0+255),c
  3292  0012C0  501D               	movf	write_LCD@i+1,w,c
  3293  0012C2  2019               	addwfc	write_LCD@c+1,w,c
  3294  0012C4  6E1B               	movwf	(??_write_LCD+1)& (0+255),c
  3295  0012C6  C01A  FFF6         	movff	??_write_LCD,tblptrl
  3296  0012CA  C01B  FFF7         	movff	??_write_LCD+1,tblptrh
  3297  0012CE                     	if	0	;tblptru may be non-zero
  3298  0012CE                     	endif
  3299  0012CE                     	if	0	;tblptru may be non-zero
  3300  0012CE                     	endif
  3301  0012CE  0008               	tblrd		*
  3302  0012D0  50F5               	movf	tablat,w,c
  3303  0012D2  EC0C  F00A         	call	_send_msg
  3304  0012D6  4A1C               	infsnz	write_LCD@i,f,c
  3305  0012D8  2A1D               	incf	write_LCD@i+1,f,c
  3306  0012DA                     l1638:
  3307  0012DA  501C               	movf	write_LCD@i,w,c
  3308  0012DC  2418               	addwf	write_LCD@c,w,c
  3309  0012DE  6E1A               	movwf	??_write_LCD& (0+255),c
  3310  0012E0  501D               	movf	write_LCD@i+1,w,c
  3311  0012E2  2019               	addwfc	write_LCD@c+1,w,c
  3312  0012E4  6E1B               	movwf	(??_write_LCD+1)& (0+255),c
  3313  0012E6  C01A  FFF6         	movff	??_write_LCD,tblptrl
  3314  0012EA  C01B  FFF7         	movff	??_write_LCD+1,tblptrh
  3315  0012EE                     	if	0	;tblptru may be non-zero
  3316  0012EE                     	endif
  3317  0012EE                     	if	0	;tblptru may be non-zero
  3318  0012EE                     	endif
  3319  0012EE  0008               	tblrd		*
  3320  0012F0  50F5               	movf	tablat,w,c
  3321  0012F2  0900               	iorlw	0
  3322  0012F4  B4D8               	btfsc	status,2,c
  3323  0012F6  0012               	return	
  3324  0012F8  D7E0               	goto	l1634
  3325  0012FA                     __end_of_write_LCD:
  3326                           	opt stack 0
  3327                           tblptru	equ	0xFF8
  3328                           tblptrh	equ	0xFF7
  3329                           tblptrl	equ	0xFF6
  3330                           tablat	equ	0xFF5
  3331                           intcon	equ	0xFF2
  3332                           intcon2	equ	0xFF1
  3333                           intcon3	equ	0xFF0
  3334                           wreg	equ	0xFE8
  3335                           indf2	equ	0xFDF
  3336                           fsr2h	equ	0xFDA
  3337                           fsr2l	equ	0xFD9
  3338                           status	equ	0xFD8
  3339                           
  3340 ;; *************** function _send_msg *****************
  3341 ;; Defined at:
  3342 ;;		line 35 in file "LCD.c"
  3343 ;; Parameters:    Size  Location     Type
  3344 ;;  msg             1    wreg     unsigned char 
  3345 ;; Auto vars:     Size  Location     Type
  3346 ;;  msg             1   22[COMRAM] unsigned char 
  3347 ;; Return value:  Size  Location     Type
  3348 ;;                  1    wreg      void 
  3349 ;; Registers used:
  3350 ;;		wreg, status,2, cstack
  3351 ;; Tracked objects:
  3352 ;;		On entry : 0/0
  3353 ;;		On exit  : 0/0
  3354 ;;		Unchanged: 0/0
  3355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3356 ;;      Params:         0       0       0       0       0       0       0       0       0
  3357 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3358 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3359 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3360 ;;Total ram usage:        2 bytes
  3361 ;; Hardware stack levels used:    1
  3362 ;; Hardware stack levels required when called:    3
  3363 ;; This function calls:
  3364 ;;		_ena_pulse
  3365 ;; This function is called by:
  3366 ;;		_write_LCD
  3367 ;;		_lerToque
  3368 ;;		_destravarPorta
  3369 ;; This function uses a non-reentrant model
  3370 ;;
  3371                           
  3372                           	psect	text22
  3373  001418                     __ptext22:
  3374                           	opt stack 0
  3375  001418                     _send_msg:
  3376                           	opt stack 25
  3377                           
  3378                           ;incstack = 0
  3379                           ;send_msg@msg stored from wreg
  3380  001418  6E17               	movwf	send_msg@msg,c
  3381                           
  3382                           ;LCD.c: 37: PORTD = msg;
  3383  00141A  C017  FF83         	movff	send_msg@msg,3971	;volatile
  3384                           
  3385                           ;LCD.c: 38: PORTBbits.RB3 = 1;
  3386  00141E  8681               	bsf	3969,3,c	;volatile
  3387                           
  3388                           ;LCD.c: 39: _delay((unsigned long)((1)*(16000000/4000.0)));
  3389  001420  0E06               	movlw	6
  3390  001422  6E16               	movwf	??_send_msg& (0+255),c
  3391  001424  0E30               	movlw	48
  3392  001426                     u1257:
  3393  001426  2EE8               	decfsz	wreg,f,c
  3394  001428  D7FE               	bra	u1257
  3395  00142A  2E16               	decfsz	??_send_msg& (0+255),f,c
  3396  00142C  D7FC               	bra	u1257
  3397  00142E  D000               	nop2	
  3398                           
  3399                           ;LCD.c: 40: ena_pulse();
  3400  001430  ECD7  F009         	call	_ena_pulse	;wreg free
  3401                           
  3402                           ;LCD.c: 41: _delay((unsigned long)((1)*(16000000/4000.0)));
  3403  001434  0E06               	movlw	6
  3404  001436  6E16               	movwf	??_send_msg& (0+255),c
  3405  001438  0E30               	movlw	48
  3406  00143A                     u1267:
  3407  00143A  2EE8               	decfsz	wreg,f,c
  3408  00143C  D7FE               	bra	u1267
  3409  00143E  2E16               	decfsz	??_send_msg& (0+255),f,c
  3410  001440  D7FC               	bra	u1267
  3411  001442  D000               	nop2	
  3412                           
  3413                           ;LCD.c: 42: PORTBbits.RB3 = 0;
  3414  001444  9681               	bcf	3969,3,c	;volatile
  3415  001446  0012               	return		;funcret
  3416  001448                     __end_of_send_msg:
  3417                           	opt stack 0
  3418                           tblptru	equ	0xFF8
  3419                           tblptrh	equ	0xFF7
  3420                           tblptrl	equ	0xFF6
  3421                           tablat	equ	0xFF5
  3422                           intcon	equ	0xFF2
  3423                           intcon2	equ	0xFF1
  3424                           intcon3	equ	0xFF0
  3425                           wreg	equ	0xFE8
  3426                           indf2	equ	0xFDF
  3427                           fsr2h	equ	0xFDA
  3428                           fsr2l	equ	0xFD9
  3429                           status	equ	0xFD8
  3430                           
  3431 ;; *************** function _set_line *****************
  3432 ;; Defined at:
  3433 ;;		line 66 in file "LCD.c"
  3434 ;; Parameters:    Size  Location     Type
  3435 ;;  line            2   23[COMRAM] int 
  3436 ;;  pos             2   25[COMRAM] int 
  3437 ;; Auto vars:     Size  Location     Type
  3438 ;;  cursor          1   27[COMRAM] unsigned char 
  3439 ;; Return value:  Size  Location     Type
  3440 ;;                  1    wreg      void 
  3441 ;; Registers used:
  3442 ;;		wreg, status,2, status,0, cstack
  3443 ;; Tracked objects:
  3444 ;;		On entry : 0/0
  3445 ;;		On exit  : 0/0
  3446 ;;		Unchanged: 0/0
  3447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3448 ;;      Params:         4       0       0       0       0       0       0       0       0
  3449 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3450 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3451 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3452 ;;Total ram usage:        5 bytes
  3453 ;; Hardware stack levels used:    1
  3454 ;; Hardware stack levels required when called:    4
  3455 ;; This function calls:
  3456 ;;		_send_cfg
  3457 ;; This function is called by:
  3458 ;;		_lerToque
  3459 ;;		_destravarPorta
  3460 ;;		_cmpPass
  3461 ;;		_confirmarSenha
  3462 ;;		_cadastrarSenha
  3463 ;; This function uses a non-reentrant model
  3464 ;;
  3465                           
  3466                           	psect	text23
  3467  0014AE                     __ptext23:
  3468                           	opt stack 0
  3469  0014AE                     _set_line:
  3470                           	opt stack 25
  3471                           
  3472                           ;LCD.c: 68: char cursor;
  3473                           ;LCD.c: 69: if(line == 0)
  3474                           
  3475                           ;incstack = 0
  3476  0014AE  5018               	movf	set_line@line,w,c
  3477  0014B0  1019               	iorwf	set_line@line+1,w,c
  3478  0014B2  A4D8               	btfss	status,2,c
  3479  0014B4  D003               	goto	l1644
  3480                           
  3481                           ;LCD.c: 70: cursor = 0x80 + pos;
  3482  0014B6  501A               	movf	set_line@pos,w,c
  3483  0014B8  0F80               	addlw	128
  3484  0014BA  D002               	goto	L2
  3485  0014BC                     l1644:
  3486                           
  3487                           ;LCD.c: 71: else
  3488                           ;LCD.c: 72: cursor = 0xC0 + pos;
  3489  0014BC  501A               	movf	set_line@pos,w,c
  3490  0014BE  0FC0               	addlw	192
  3491  0014C0                     L2:
  3492  0014C0  6E1C               	movwf	set_line@cursor,c
  3493                           
  3494                           ;LCD.c: 73: send_cfg(cursor);
  3495  0014C2  501C               	movf	set_line@cursor,w,c
  3496  0014C4  EC48  F00A         	call	_send_cfg
  3497  0014C8  0012               	return		;funcret
  3498  0014CA                     __end_of_set_line:
  3499                           	opt stack 0
  3500                           tblptru	equ	0xFF8
  3501                           tblptrh	equ	0xFF7
  3502                           tblptrl	equ	0xFF6
  3503                           tablat	equ	0xFF5
  3504                           intcon	equ	0xFF2
  3505                           intcon2	equ	0xFF1
  3506                           intcon3	equ	0xFF0
  3507                           wreg	equ	0xFE8
  3508                           indf2	equ	0xFDF
  3509                           fsr2h	equ	0xFDA
  3510                           fsr2l	equ	0xFD9
  3511                           status	equ	0xFD8
  3512                           
  3513 ;; *************** function _cmpSignal *****************
  3514 ;; Defined at:
  3515 ;;		line 36 in file "ReadSignal.c"
  3516 ;; Parameters:    Size  Location     Type
  3517 ;;  pass            2   20[COMRAM] PTR unsigned char 
  3518 ;;		 -> cadastrarSenha@temp1(2), main@pass(2), 
  3519 ;;  toc             2   22[COMRAM] PTR unsigned char 
  3520 ;;		 -> cadastrarSenha@temp2(2), main@toc(2), 
  3521 ;; Auto vars:     Size  Location     Type
  3522 ;;		None
  3523 ;; Return value:  Size  Location     Type
  3524 ;;                  2   20[COMRAM] int 
  3525 ;; Registers used:
  3526 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  3527 ;; Tracked objects:
  3528 ;;		On entry : 0/0
  3529 ;;		On exit  : 0/0
  3530 ;;		Unchanged: 0/0
  3531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3532 ;;      Params:         4       0       0       0       0       0       0       0       0
  3533 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3534 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3535 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3536 ;;Total ram usage:        6 bytes
  3537 ;; Hardware stack levels used:    1
  3538 ;; Hardware stack levels required when called:    2
  3539 ;; This function calls:
  3540 ;;		Nothing
  3541 ;; This function is called by:
  3542 ;;		_cmpPass
  3543 ;; This function uses a non-reentrant model
  3544 ;;
  3545                           
  3546                           	psect	text24
  3547  001264                     __ptext24:
  3548                           	opt stack 0
  3549  001264                     _cmpSignal:
  3550                           	opt stack 26
  3551                           
  3552                           ;ReadSignal.c: 38: if(pass[0] == toc[0] && pass[1] == toc[1])
  3553                           
  3554                           ;incstack = 0
  3555  001264  C017  FFD9         	movff	cmpSignal@toc,fsr2l
  3556  001268  C018  FFDA         	movff	cmpSignal@toc+1,fsr2h
  3557  00126C  C015  FFE1         	movff	cmpSignal@pass,fsr1l
  3558  001270  C016  FFE2         	movff	cmpSignal@pass+1,fsr1h
  3559  001274  50DE               	movf	postinc2,w,c
  3560  001276  18E6               	xorwf	postinc1,w,c
  3561  001278  A4D8               	btfss	status,2,c
  3562  00127A  D015               	goto	l1698
  3563  00127C  EE20 F001          	lfsr	2,1
  3564  001280  5017               	movf	cmpSignal@toc,w,c
  3565  001282  26D9               	addwf	fsr2l,f,c
  3566  001284  5018               	movf	cmpSignal@toc+1,w,c
  3567  001286  22DA               	addwfc	fsr2h,f,c
  3568  001288  EE10 F001          	lfsr	1,1
  3569  00128C  5015               	movf	cmpSignal@pass,w,c
  3570  00128E  26E1               	addwf	fsr1l,f,c
  3571  001290  5016               	movf	cmpSignal@pass+1,w,c
  3572  001292  22E2               	addwfc	fsr1h,f,c
  3573  001294  50DE               	movf	postinc2,w,c
  3574  001296  18E6               	xorwf	postinc1,w,c
  3575  001298  A4D8               	btfss	status,2,c
  3576  00129A  D005               	goto	l1698
  3577                           
  3578                           ;ReadSignal.c: 39: return 1;
  3579  00129C  0E00               	movlw	0
  3580  00129E  6E16               	movwf	?_cmpSignal+1,c
  3581  0012A0  0E01               	movlw	1
  3582  0012A2  6E15               	movwf	?_cmpSignal,c
  3583  0012A4  0012               	return	
  3584  0012A6                     l1698:
  3585                           
  3586                           ;ReadSignal.c: 40: return 0;
  3587  0012A6  0E00               	movlw	0
  3588  0012A8  6E16               	movwf	?_cmpSignal+1,c
  3589  0012AA  0E00               	movlw	0
  3590  0012AC  6E15               	movwf	?_cmpSignal,c
  3591  0012AE  0012               	return	
  3592  0012B0                     __end_of_cmpSignal:
  3593                           	opt stack 0
  3594                           tblptru	equ	0xFF8
  3595                           tblptrh	equ	0xFF7
  3596                           tblptrl	equ	0xFF6
  3597                           tablat	equ	0xFF5
  3598                           intcon	equ	0xFF2
  3599                           intcon2	equ	0xFF1
  3600                           intcon3	equ	0xFF0
  3601                           wreg	equ	0xFE8
  3602                           postinc1	equ	0xFE6
  3603                           fsr1h	equ	0xFE2
  3604                           fsr1l	equ	0xFE1
  3605                           indf2	equ	0xFDF
  3606                           postinc2	equ	0xFDE
  3607                           fsr2h	equ	0xFDA
  3608                           fsr2l	equ	0xFD9
  3609                           status	equ	0xFD8
  3610                           
  3611 ;; *************** function _clearLCD *****************
  3612 ;; Defined at:
  3613 ;;		line 31 in file "LCD.c"
  3614 ;; Parameters:    Size  Location     Type
  3615 ;;		None
  3616 ;; Auto vars:     Size  Location     Type
  3617 ;;		None
  3618 ;; Return value:  Size  Location     Type
  3619 ;;                  1    wreg      void 
  3620 ;; Registers used:
  3621 ;;		wreg, cstack
  3622 ;; Tracked objects:
  3623 ;;		On entry : 0/0
  3624 ;;		On exit  : 0/0
  3625 ;;		Unchanged: 0/0
  3626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3627 ;;      Params:         0       0       0       0       0       0       0       0       0
  3628 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3629 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3630 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3631 ;;Total ram usage:        0 bytes
  3632 ;; Hardware stack levels used:    1
  3633 ;; Hardware stack levels required when called:    4
  3634 ;; This function calls:
  3635 ;;		_send_cfg
  3636 ;; This function is called by:
  3637 ;;		_lerToque
  3638 ;;		_destravarPorta
  3639 ;;		_cmpPass
  3640 ;;		_confirmarSenha
  3641 ;;		_cadastrarSenha
  3642 ;; This function uses a non-reentrant model
  3643 ;;
  3644                           
  3645                           	psect	text25
  3646  00153A                     __ptext25:
  3647                           	opt stack 0
  3648  00153A                     _clearLCD:
  3649                           	opt stack 24
  3650                           
  3651                           ;LCD.c: 32: send_cfg(0x01);
  3652                           
  3653                           ;incstack = 0
  3654  00153A  0E01               	movlw	1
  3655  00153C  EC48  F00A         	call	_send_cfg
  3656  001540  0012               	return		;funcret
  3657  001542                     __end_of_clearLCD:
  3658                           	opt stack 0
  3659                           tblptru	equ	0xFF8
  3660                           tblptrh	equ	0xFF7
  3661                           tblptrl	equ	0xFF6
  3662                           tablat	equ	0xFF5
  3663                           intcon	equ	0xFF2
  3664                           intcon2	equ	0xFF1
  3665                           intcon3	equ	0xFF0
  3666                           wreg	equ	0xFE8
  3667                           postinc1	equ	0xFE6
  3668                           fsr1h	equ	0xFE2
  3669                           fsr1l	equ	0xFE1
  3670                           indf2	equ	0xFDF
  3671                           postinc2	equ	0xFDE
  3672                           fsr2h	equ	0xFDA
  3673                           fsr2l	equ	0xFD9
  3674                           status	equ	0xFD8
  3675                           
  3676 ;; *************** function _send_cfg *****************
  3677 ;; Defined at:
  3678 ;;		line 22 in file "LCD.c"
  3679 ;; Parameters:    Size  Location     Type
  3680 ;;  cmd             1    wreg     unsigned char 
  3681 ;; Auto vars:     Size  Location     Type
  3682 ;;  cmd             1   22[COMRAM] unsigned char 
  3683 ;; Return value:  Size  Location     Type
  3684 ;;                  1    wreg      void 
  3685 ;; Registers used:
  3686 ;;		wreg, cstack
  3687 ;; Tracked objects:
  3688 ;;		On entry : 0/0
  3689 ;;		On exit  : 0/0
  3690 ;;		Unchanged: 0/0
  3691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3692 ;;      Params:         0       0       0       0       0       0       0       0       0
  3693 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3694 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3695 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3696 ;;Total ram usage:        2 bytes
  3697 ;; Hardware stack levels used:    1
  3698 ;; Hardware stack levels required when called:    3
  3699 ;; This function calls:
  3700 ;;		_ena_pulse
  3701 ;; This function is called by:
  3702 ;;		_clearLCD
  3703 ;;		_init_LCD
  3704 ;;		_set_line
  3705 ;; This function uses a non-reentrant model
  3706 ;;
  3707                           
  3708                           	psect	text26
  3709  001490                     __ptext26:
  3710                           	opt stack 0
  3711  001490                     _send_cfg:
  3712                           	opt stack 26
  3713                           
  3714                           ;incstack = 0
  3715                           ;send_cfg@cmd stored from wreg
  3716  001490  6E17               	movwf	send_cfg@cmd,c
  3717                           
  3718                           ;LCD.c: 24: PORTD = cmd;
  3719  001492  C017  FF83         	movff	send_cfg@cmd,3971	;volatile
  3720                           
  3721                           ;LCD.c: 25: PORTBbits.RB3 = 0;
  3722  001496  9681               	bcf	3969,3,c	;volatile
  3723                           
  3724                           ;LCD.c: 26: ena_pulse();
  3725  001498  ECD7  F009         	call	_ena_pulse	;wreg free
  3726                           
  3727                           ;LCD.c: 27: _delay((unsigned long)((1)*(16000000/4000.0)));
  3728  00149C  0E06               	movlw	6
  3729  00149E  6E16               	movwf	??_send_cfg& (0+255),c
  3730  0014A0  0E30               	movlw	48
  3731  0014A2                     u1277:
  3732  0014A2  2EE8               	decfsz	wreg,f,c
  3733  0014A4  D7FE               	bra	u1277
  3734  0014A6  2E16               	decfsz	??_send_cfg& (0+255),f,c
  3735  0014A8  D7FC               	bra	u1277
  3736  0014AA  D000               	nop2	
  3737  0014AC  0012               	return		;funcret
  3738  0014AE                     __end_of_send_cfg:
  3739                           	opt stack 0
  3740                           tblptru	equ	0xFF8
  3741                           tblptrh	equ	0xFF7
  3742                           tblptrl	equ	0xFF6
  3743                           tablat	equ	0xFF5
  3744                           intcon	equ	0xFF2
  3745                           intcon2	equ	0xFF1
  3746                           intcon3	equ	0xFF0
  3747                           wreg	equ	0xFE8
  3748                           postinc1	equ	0xFE6
  3749                           fsr1h	equ	0xFE2
  3750                           fsr1l	equ	0xFE1
  3751                           indf2	equ	0xFDF
  3752                           postinc2	equ	0xFDE
  3753                           fsr2h	equ	0xFDA
  3754                           fsr2l	equ	0xFD9
  3755                           status	equ	0xFD8
  3756                           
  3757 ;; *************** function _ena_pulse *****************
  3758 ;; Defined at:
  3759 ;;		line 11 in file "LCD.c"
  3760 ;; Parameters:    Size  Location     Type
  3761 ;;		None
  3762 ;; Auto vars:     Size  Location     Type
  3763 ;;		None
  3764 ;; Return value:  Size  Location     Type
  3765 ;;                  1    wreg      void 
  3766 ;; Registers used:
  3767 ;;		wreg
  3768 ;; Tracked objects:
  3769 ;;		On entry : 0/0
  3770 ;;		On exit  : 0/0
  3771 ;;		Unchanged: 0/0
  3772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3773 ;;      Params:         0       0       0       0       0       0       0       0       0
  3774 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3775 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3776 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3777 ;;Total ram usage:        1 bytes
  3778 ;; Hardware stack levels used:    1
  3779 ;; Hardware stack levels required when called:    2
  3780 ;; This function calls:
  3781 ;;		Nothing
  3782 ;; This function is called by:
  3783 ;;		_send_cfg
  3784 ;;		_send_msg
  3785 ;; This function uses a non-reentrant model
  3786 ;;
  3787                           
  3788                           	psect	text27
  3789  0013AE                     __ptext27:
  3790                           	opt stack 0
  3791  0013AE                     _ena_pulse:
  3792                           	opt stack 26
  3793                           
  3794                           ;LCD.c: 13: PORTEbits.RE1 = 0;
  3795                           
  3796                           ;incstack = 0
  3797  0013AE  9284               	bcf	3972,1,c	;volatile
  3798                           
  3799                           ;LCD.c: 14: _delay((unsigned long)((1)*(16000000/4000.0)));
  3800  0013B0  0E06               	movlw	6
  3801  0013B2  6E15               	movwf	??_ena_pulse& (0+255),c
  3802  0013B4  0E30               	movlw	48
  3803  0013B6                     u1287:
  3804  0013B6  2EE8               	decfsz	wreg,f,c
  3805  0013B8  D7FE               	bra	u1287
  3806  0013BA  2E15               	decfsz	??_ena_pulse& (0+255),f,c
  3807  0013BC  D7FC               	bra	u1287
  3808  0013BE  D000               	nop2	
  3809                           
  3810                           ;LCD.c: 15: PORTEbits.RE1 = 1;
  3811  0013C0  8284               	bsf	3972,1,c	;volatile
  3812                           
  3813                           ;LCD.c: 16: _delay((unsigned long)((1)*(16000000/4000.0)));
  3814  0013C2  0E06               	movlw	6
  3815  0013C4  6E15               	movwf	??_ena_pulse& (0+255),c
  3816  0013C6  0E30               	movlw	48
  3817  0013C8                     u1297:
  3818  0013C8  2EE8               	decfsz	wreg,f,c
  3819  0013CA  D7FE               	bra	u1297
  3820  0013CC  2E15               	decfsz	??_ena_pulse& (0+255),f,c
  3821  0013CE  D7FC               	bra	u1297
  3822  0013D0  D000               	nop2	
  3823                           
  3824                           ;LCD.c: 17: PORTEbits.RE1 = 0;
  3825  0013D2  9284               	bcf	3972,1,c	;volatile
  3826                           
  3827                           ;LCD.c: 18: _delay((unsigned long)((1)*(16000000/4000.0)));
  3828  0013D4  0E06               	movlw	6
  3829  0013D6  6E15               	movwf	??_ena_pulse& (0+255),c
  3830  0013D8  0E30               	movlw	48
  3831  0013DA                     u1307:
  3832  0013DA  2EE8               	decfsz	wreg,f,c
  3833  0013DC  D7FE               	bra	u1307
  3834  0013DE  2E15               	decfsz	??_ena_pulse& (0+255),f,c
  3835  0013E0  D7FC               	bra	u1307
  3836  0013E2  D000               	nop2	
  3837  0013E4  0012               	return		;funcret
  3838  0013E6                     __end_of_ena_pulse:
  3839                           	opt stack 0
  3840                           tblptru	equ	0xFF8
  3841                           tblptrh	equ	0xFF7
  3842                           tblptrl	equ	0xFF6
  3843                           tablat	equ	0xFF5
  3844                           intcon	equ	0xFF2
  3845                           intcon2	equ	0xFF1
  3846                           intcon3	equ	0xFF0
  3847                           wreg	equ	0xFE8
  3848                           postinc1	equ	0xFE6
  3849                           fsr1h	equ	0xFE2
  3850                           fsr1l	equ	0xFE1
  3851                           indf2	equ	0xFDF
  3852                           postinc2	equ	0xFDE
  3853                           fsr2h	equ	0xFDA
  3854                           fsr2l	equ	0xFD9
  3855                           status	equ	0xFD8
  3856                           
  3857 ;; *************** function _bip *****************
  3858 ;; Defined at:
  3859 ;;		line 14 in file "Buzzer.c"
  3860 ;; Parameters:    Size  Location     Type
  3861 ;;  rounds          2   20[COMRAM] int 
  3862 ;;  time            2   22[COMRAM] int 
  3863 ;; Auto vars:     Size  Location     Type
  3864 ;;  j               2   26[COMRAM] int 
  3865 ;; Return value:  Size  Location     Type
  3866 ;;                  1    wreg      void 
  3867 ;; Registers used:
  3868 ;;		wreg, status,2, status,0
  3869 ;; Tracked objects:
  3870 ;;		On entry : 0/0
  3871 ;;		On exit  : 0/0
  3872 ;;		Unchanged: 0/0
  3873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3874 ;;      Params:         4       0       0       0       0       0       0       0       0
  3875 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3876 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3877 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3878 ;;Total ram usage:        8 bytes
  3879 ;; Hardware stack levels used:    1
  3880 ;; Hardware stack levels required when called:    2
  3881 ;; This function calls:
  3882 ;;		Nothing
  3883 ;; This function is called by:
  3884 ;;		_cmpPass
  3885 ;; This function uses a non-reentrant model
  3886 ;;
  3887                           
  3888                           	psect	text28
  3889  000EDC                     __ptext28:
  3890                           	opt stack 0
  3891  000EDC                     _bip:
  3892                           	opt stack 26
  3893                           
  3894                           ;Buzzer.c: 16: TRISCbits.RC1 = 0;
  3895                           
  3896                           ;incstack = 0
  3897  000EDC  9294               	bcf	3988,1,c	;volatile
  3898                           
  3899                           ;Buzzer.c: 17: PORTCbits.RC1 = 0;
  3900  000EDE  9282               	bcf	3970,1,c	;volatile
  3901                           
  3902                           ;Buzzer.c: 19: int j = 0;
  3903  000EE0  0E00               	movlw	0
  3904  000EE2  6E1C               	movwf	bip@j+1,c
  3905  000EE4  0E00               	movlw	0
  3906  000EE6  6E1B               	movwf	bip@j,c
  3907                           
  3908                           ;Buzzer.c: 20: if(time == 500){
  3909  000EE8  0EF4               	movlw	244
  3910  000EEA  1817               	xorwf	bip@time,w,c
  3911  000EEC  E128               	bnz	l1716
  3912  000EEE  0418               	decf	bip@time+1,w,c
  3913  000EF0  B4D8               	btfsc	status,2,c
  3914  000EF2  D01A               	goto	l1714
  3915  000EF4  D024               	goto	l1716
  3916  000EF6                     l1710:
  3917                           
  3918                           ;Buzzer.c: 22: PORTCbits.RC1 = !PORTCbits.RC1;
  3919  000EF6  B282               	btfsc	3970,1,c	;volatile
  3920  000EF8  D003               	goto	u840
  3921  000EFA  6A19               	clrf	??_bip& (0+255),c
  3922  000EFC  2A19               	incf	??_bip& (0+255),f,c
  3923  000EFE  D001               	goto	u858
  3924  000F00                     u840:
  3925  000F00  6A19               	clrf	??_bip& (0+255),c
  3926  000F02                     u858:
  3927  000F02  4619               	rlncf	??_bip,f,c
  3928  000F04  5082               	movf	3970,w,c	;volatile
  3929  000F06  1819               	xorwf	??_bip,w,c
  3930  000F08  0BFD               	andlw	-3
  3931  000F0A  1819               	xorwf	??_bip,w,c
  3932  000F0C  6E82               	movwf	3970,c	;volatile
  3933                           
  3934                           ;Buzzer.c: 23: _delay((unsigned long)((500)*(16000000/4000.0)));
  3935  000F0E  0E0B               	movlw	11
  3936  000F10  6E1A               	movwf	(??_bip+1)& (0+255),c
  3937  000F12  0E26               	movlw	38
  3938  000F14  6E19               	movwf	??_bip& (0+255),c
  3939  000F16  0E5E               	movlw	94
  3940  000F18                     u1317:
  3941  000F18  2EE8               	decfsz	wreg,f,c
  3942  000F1A  D7FE               	bra	u1317
  3943  000F1C  2E19               	decfsz	??_bip& (0+255),f,c
  3944  000F1E  D7FC               	bra	u1317
  3945  000F20  2E1A               	decfsz	(??_bip+1)& (0+255),f,c
  3946  000F22  D7FA               	bra	u1317
  3947                           
  3948                           ;Buzzer.c: 24: j++;
  3949  000F24  4A1B               	infsnz	bip@j,f,c
  3950  000F26  2A1C               	incf	bip@j+1,f,c
  3951  000F28                     l1714:
  3952  000F28  5015               	movf	bip@rounds,w,c
  3953  000F2A  5C1B               	subwf	bip@j,w,c
  3954  000F2C  501C               	movf	bip@j+1,w,c
  3955  000F2E  0A80               	xorlw	128
  3956  000F30  6E19               	movwf	??_bip& (0+255),c
  3957  000F32  5016               	movf	bip@rounds+1,w,c
  3958  000F34  0A80               	xorlw	128
  3959  000F36  5819               	subwfb	??_bip& (0+255),w,c
  3960  000F38  B0D8               	btfsc	status,0,c
  3961  000F3A  0012               	return	
  3962  000F3C  D7DC               	goto	l1710
  3963  000F3E                     l1716:
  3964                           
  3965                           ;Buzzer.c: 27: else if(time == 1000){
  3966  000F3E  0EE8               	movlw	232
  3967  000F40  1817               	xorwf	bip@time,w,c
  3968  000F42  E12A               	bnz	l241
  3969  000F44  0E03               	movlw	3
  3970  000F46  1818               	xorwf	bip@time+1,w,c
  3971  000F48  A4D8               	btfss	status,2,c
  3972  000F4A  0012               	return	
  3973  000F4C  D01A               	goto	l1724
  3974  000F4E                     l1720:
  3975                           
  3976                           ;Buzzer.c: 29: PORTCbits.RC1 = !PORTCbits.RC1;
  3977  000F4E  B282               	btfsc	3970,1,c	;volatile
  3978  000F50  D003               	goto	u880
  3979  000F52  6A19               	clrf	??_bip& (0+255),c
  3980  000F54  2A19               	incf	??_bip& (0+255),f,c
  3981  000F56  D001               	goto	u898
  3982  000F58                     u880:
  3983  000F58  6A19               	clrf	??_bip& (0+255),c
  3984  000F5A                     u898:
  3985  000F5A  4619               	rlncf	??_bip,f,c
  3986  000F5C  5082               	movf	3970,w,c	;volatile
  3987  000F5E  1819               	xorwf	??_bip,w,c
  3988  000F60  0BFD               	andlw	-3
  3989  000F62  1819               	xorwf	??_bip,w,c
  3990  000F64  6E82               	movwf	3970,c	;volatile
  3991                           
  3992                           ;Buzzer.c: 30: _delay((unsigned long)((1000)*(16000000/4000.0)));
  3993  000F66  0E15               	movlw	21
  3994  000F68  6E1A               	movwf	(??_bip+1)& (0+255),c
  3995  000F6A  0E4B               	movlw	75
  3996  000F6C  6E19               	movwf	??_bip& (0+255),c
  3997  000F6E  0EBE               	movlw	190
  3998  000F70                     u1327:
  3999  000F70  2EE8               	decfsz	wreg,f,c
  4000  000F72  D7FE               	bra	u1327
  4001  000F74  2E19               	decfsz	??_bip& (0+255),f,c
  4002  000F76  D7FC               	bra	u1327
  4003  000F78  2E1A               	decfsz	(??_bip+1)& (0+255),f,c
  4004  000F7A  D7FA               	bra	u1327
  4005  000F7C  D000               	nop2	
  4006                           
  4007                           ;Buzzer.c: 31: j++;
  4008  000F7E  4A1B               	infsnz	bip@j,f,c
  4009  000F80  2A1C               	incf	bip@j+1,f,c
  4010  000F82                     l1724:
  4011  000F82  5015               	movf	bip@rounds,w,c
  4012  000F84  5C1B               	subwf	bip@j,w,c
  4013  000F86  501C               	movf	bip@j+1,w,c
  4014  000F88  0A80               	xorlw	128
  4015  000F8A  6E19               	movwf	??_bip& (0+255),c
  4016  000F8C  5016               	movf	bip@rounds+1,w,c
  4017  000F8E  0A80               	xorlw	128
  4018  000F90  5819               	subwfb	??_bip& (0+255),w,c
  4019  000F92  B0D8               	btfsc	status,0,c
  4020  000F94  0012               	return	
  4021  000F96  D7DB               	goto	l1720
  4022  000F98                     l241:
  4023  000F98  0012               	return		;funcret
  4024  000F9A                     __end_of_bip:
  4025                           	opt stack 0
  4026                           tblptru	equ	0xFF8
  4027                           tblptrh	equ	0xFF7
  4028                           tblptrl	equ	0xFF6
  4029                           tablat	equ	0xFF5
  4030                           intcon	equ	0xFF2
  4031                           intcon2	equ	0xFF1
  4032                           intcon3	equ	0xFF0
  4033                           wreg	equ	0xFE8
  4034                           postinc1	equ	0xFE6
  4035                           fsr1h	equ	0xFE2
  4036                           fsr1l	equ	0xFE1
  4037                           indf2	equ	0xFDF
  4038                           postinc2	equ	0xFDE
  4039                           fsr2h	equ	0xFDA
  4040                           fsr2l	equ	0xFD9
  4041                           status	equ	0xFD8
  4042                           
  4043 ;; *************** function _ISR *****************
  4044 ;; Defined at:
  4045 ;;		line 37 in file "Interrupt.c"
  4046 ;; Parameters:    Size  Location     Type
  4047 ;;		None
  4048 ;; Auto vars:     Size  Location     Type
  4049 ;;		None
  4050 ;; Return value:  Size  Location     Type
  4051 ;;                  1    wreg      void 
  4052 ;; Registers used:
  4053 ;;		wreg, status,2, status,0, cstack
  4054 ;; Tracked objects:
  4055 ;;		On entry : 0/0
  4056 ;;		On exit  : 0/0
  4057 ;;		Unchanged: 0/0
  4058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4059 ;;      Params:         0       0       0       0       0       0       0       0       0
  4060 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4061 ;;      Temps:         16       0       0       0       0       0       0       0       0
  4062 ;;      Totals:        16       0       0       0       0       0       0       0       0
  4063 ;;Total ram usage:       16 bytes
  4064 ;; Hardware stack levels used:    1
  4065 ;; Hardware stack levels required when called:    1
  4066 ;; This function calls:
  4067 ;;		i2_DutyCycle_PWM
  4068 ;; This function is called by:
  4069 ;;		Interrupt level 2
  4070 ;; This function uses a non-reentrant model
  4071 ;;
  4072                           
  4073                           	psect	intcode
  4074  000008                     __pintcode:
  4075                           	opt stack 0
  4076  000008                     _ISR:
  4077                           	opt stack 24
  4078                           
  4079                           ;incstack = 0
  4080  000008  823F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4081  00000A  ED0C  F007         	call	int_func,f	;refresh shadow registers
  4082                           tblptru	equ	0xFF8
  4083                           tblptrh	equ	0xFF7
  4084                           tblptrl	equ	0xFF6
  4085                           tablat	equ	0xFF5
  4086                           intcon	equ	0xFF2
  4087                           intcon2	equ	0xFF1
  4088                           intcon3	equ	0xFF0
  4089                           wreg	equ	0xFE8
  4090                           postinc1	equ	0xFE6
  4091                           fsr1h	equ	0xFE2
  4092                           fsr1l	equ	0xFE1
  4093                           indf2	equ	0xFDF
  4094                           postinc2	equ	0xFDE
  4095                           fsr2h	equ	0xFDA
  4096                           fsr2l	equ	0xFD9
  4097                           status	equ	0xFD8
  4098                           
  4099                           	psect	intcode_body
  4100  000E18                     __pintcode_body:
  4101                           	opt stack 24
  4102  000E18                     int_func:
  4103                           	opt stack 24
  4104  000E18  0006               	pop		; remove dummy address from shadow register refresh
  4105  000E1A  CFFA F007          	movff	pclath,??_ISR+2
  4106  000E1E  CFFB F008          	movff	pclatu,??_ISR+3
  4107  000E22  CFE9 F009          	movff	fsr0l,??_ISR+4
  4108  000E26  CFEA F00A          	movff	fsr0h,??_ISR+5
  4109  000E2A  CFE1 F00B          	movff	fsr1l,??_ISR+6
  4110  000E2E  CFE2 F00C          	movff	fsr1h,??_ISR+7
  4111  000E32  CFD9 F00D          	movff	fsr2l,??_ISR+8
  4112  000E36  CFDA F00E          	movff	fsr2h,??_ISR+9
  4113  000E3A  CFF3 F00F          	movff	prodl,??_ISR+10
  4114  000E3E  CFF4 F010          	movff	prodh,??_ISR+11
  4115  000E42  CFF6 F011          	movff	tblptrl,??_ISR+12
  4116  000E46  CFF7 F012          	movff	tblptrh,??_ISR+13
  4117  000E4A  CFF8 F013          	movff	tblptru,??_ISR+14
  4118  000E4E  CFF5 F014          	movff	tablat,??_ISR+15
  4119                           
  4120                           ;Interrupt.c: 39: if(INTCON3bits.INT2IF){
  4121  000E52  A2F0               	btfss	intcon3,1,c	;volatile
  4122  000E54  D025               	goto	i2l29
  4123                           
  4124                           ;Interrupt.c: 40: INTCON3bits.INT2IF = 0;
  4125  000E56  92F0               	bcf	intcon3,1,c	;volatile
  4126                           
  4127                           ;Interrupt.c: 41: buttonCancel_Lock = 1;
  4128  000E58  0E00               	movlw	0
  4129  000E5A  6E3C               	movwf	_buttonCancel_Lock+1,c
  4130  000E5C  0E01               	movlw	1
  4131  000E5E  6E3B               	movwf	_buttonCancel_Lock,c
  4132                           
  4133                           ;Interrupt.c: 42: if(doorState == 1){
  4134  000E60  043D               	decf	_doorState,w,c
  4135  000E62  103E               	iorwf	_doorState+1,w,c
  4136  000E64  A4D8               	btfss	status,2,c
  4137  000E66  D01C               	goto	i2l29
  4138                           
  4139                           ;Interrupt.c: 43: doorState = 0;
  4140  000E68  0E00               	movlw	0
  4141  000E6A  6E3E               	movwf	_doorState+1,c
  4142  000E6C  0E00               	movlw	0
  4143  000E6E  6E3D               	movwf	_doorState,c
  4144                           
  4145                           ;Interrupt.c: 44: DutyCycle_PWM(600);
  4146  000E70  0E02               	movlw	2
  4147  000E72  6E02               	movwf	i2DutyCycle_PWM@Valor+1,c
  4148  000E74  0E58               	movlw	88
  4149  000E76  6E01               	movwf	i2DutyCycle_PWM@Valor,c
  4150  000E78  ECB9  F009         	call	i2_DutyCycle_PWM	;wreg free
  4151                           
  4152                           ;Interrupt.c: 45: _delay((unsigned long)((175)*(16000000/4000.0)));
  4153  000E7C  0E04               	movlw	4
  4154  000E7E  6E06               	movwf	(??_ISR+1)& (0+255),c
  4155  000E80  0E8E               	movlw	142
  4156  000E82  6E05               	movwf	??_ISR& (0+255),c
  4157  000E84  0E12               	movlw	18
  4158  000E86                     i2u133_47:
  4159  000E86  2EE8               	decfsz	wreg,f,c
  4160  000E88  D7FE               	bra	i2u133_47
  4161  000E8A  2E05               	decfsz	??_ISR& (0+255),f,c
  4162  000E8C  D7FC               	bra	i2u133_47
  4163  000E8E  2E06               	decfsz	(??_ISR+1)& (0+255),f,c
  4164  000E90  D7FA               	bra	i2u133_47
  4165  000E92  D000               	nop2	
  4166                           
  4167                           ;Interrupt.c: 46: DutyCycle_PWM(0);
  4168  000E94  0E00               	movlw	0
  4169  000E96  6E02               	movwf	i2DutyCycle_PWM@Valor+1,c
  4170  000E98  0E00               	movlw	0
  4171  000E9A  6E01               	movwf	i2DutyCycle_PWM@Valor,c
  4172  000E9C  ECB9  F009         	call	i2_DutyCycle_PWM	;wreg free
  4173  000EA0                     i2l29:
  4174  000EA0  C014  FFF5         	movff	??_ISR+15,tablat
  4175  000EA4  C013  FFF8         	movff	??_ISR+14,tblptru
  4176  000EA8  C012  FFF7         	movff	??_ISR+13,tblptrh
  4177  000EAC  C011  FFF6         	movff	??_ISR+12,tblptrl
  4178  000EB0  C010  FFF4         	movff	??_ISR+11,prodh
  4179  000EB4  C00F  FFF3         	movff	??_ISR+10,prodl
  4180  000EB8  C00E  FFDA         	movff	??_ISR+9,fsr2h
  4181  000EBC  C00D  FFD9         	movff	??_ISR+8,fsr2l
  4182  000EC0  C00C  FFE2         	movff	??_ISR+7,fsr1h
  4183  000EC4  C00B  FFE1         	movff	??_ISR+6,fsr1l
  4184  000EC8  C00A  FFEA         	movff	??_ISR+5,fsr0h
  4185  000ECC  C009  FFE9         	movff	??_ISR+4,fsr0l
  4186  000ED0  C008  FFFB         	movff	??_ISR+3,pclatu
  4187  000ED4  C007  FFFA         	movff	??_ISR+2,pclath
  4188  000ED8  923F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4189  000EDA  0011               	retfie		f
  4190  000EDC                     __end_of_ISR:
  4191                           	opt stack 0
  4192                           pclatu	equ	0xFFB
  4193                           pclath	equ	0xFFA
  4194                           tblptru	equ	0xFF8
  4195                           tblptrh	equ	0xFF7
  4196                           tblptrl	equ	0xFF6
  4197                           tablat	equ	0xFF5
  4198                           prodh	equ	0xFF4
  4199                           prodl	equ	0xFF3
  4200                           intcon	equ	0xFF2
  4201                           intcon2	equ	0xFF1
  4202                           intcon3	equ	0xFF0
  4203                           fsr0h	equ	0xFEA
  4204                           fsr0l	equ	0xFE9
  4205                           wreg	equ	0xFE8
  4206                           postinc1	equ	0xFE6
  4207                           fsr1h	equ	0xFE2
  4208                           fsr1l	equ	0xFE1
  4209                           indf2	equ	0xFDF
  4210                           postinc2	equ	0xFDE
  4211                           fsr2h	equ	0xFDA
  4212                           fsr2l	equ	0xFD9
  4213                           status	equ	0xFD8
  4214                           
  4215 ;; *************** function i2_DutyCycle_PWM *****************
  4216 ;; Defined at:
  4217 ;;		line 43 in file "PWM.c"
  4218 ;; Parameters:    Size  Location     Type
  4219 ;;  Valor           2    0[COMRAM] unsigned int 
  4220 ;; Auto vars:     Size  Location     Type
  4221 ;;		None
  4222 ;; Return value:  Size  Location     Type
  4223 ;;                  1    wreg      void 
  4224 ;; Registers used:
  4225 ;;		wreg, status,2, status,0
  4226 ;; Tracked objects:
  4227 ;;		On entry : 0/0
  4228 ;;		On exit  : 0/0
  4229 ;;		Unchanged: 0/0
  4230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4231 ;;      Params:         2       0       0       0       0       0       0       0       0
  4232 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4233 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4234 ;;      Totals:         4       0       0       0       0       0       0       0       0
  4235 ;;Total ram usage:        4 bytes
  4236 ;; Hardware stack levels used:    1
  4237 ;; This function calls:
  4238 ;;		Nothing
  4239 ;; This function is called by:
  4240 ;;		_ISR
  4241 ;; This function uses a non-reentrant model
  4242 ;;
  4243                           
  4244                           	psect	text30
  4245  001372                     __ptext30:
  4246                           	opt stack 0
  4247  001372                     i2_DutyCycle_PWM:
  4248                           	opt stack 24
  4249                           
  4250                           ;PWM.c: 44: CCP1CONbits.DC1B0 = Valor;
  4251                           
  4252                           ;incstack = 0
  4253  001372  B001               	btfsc	i2DutyCycle_PWM@Valor,0,c
  4254  001374  D002               	bra	i2u116_45
  4255  001376  98BD               	bcf	4029,4,c	;volatile
  4256  001378  D001               	bra	i2u116_46
  4257  00137A                     i2u116_45:
  4258  00137A  88BD               	bsf	4029,4,c	;volatile
  4259  00137C                     i2u116_46:
  4260                           
  4261                           ;PWM.c: 45: CCP1CONbits.DC1B1 = Valor >> 1;
  4262  00137C  90D8               	bcf	status,0,c
  4263  00137E  3002               	rrcf	i2DutyCycle_PWM@Valor+1,w,c
  4264  001380  6E04               	movwf	(??i2_DutyCycle_PWM+1)& (0+255),c
  4265  001382  3001               	rrcf	i2DutyCycle_PWM@Valor,w,c
  4266  001384  6E03               	movwf	??i2_DutyCycle_PWM& (0+255),c
  4267  001386  3A03               	swapf	??i2_DutyCycle_PWM,f,c
  4268  001388  4603               	rlncf	??i2_DutyCycle_PWM,f,c
  4269  00138A  50BD               	movf	4029,w,c	;volatile
  4270  00138C  1803               	xorwf	??i2_DutyCycle_PWM,w,c
  4271  00138E  0BDF               	andlw	-33
  4272  001390  1803               	xorwf	??i2_DutyCycle_PWM,w,c
  4273  001392  6EBD               	movwf	4029,c	;volatile
  4274                           
  4275                           ;PWM.c: 46: CCPR1L = Valor >> 2;
  4276  001394  C001  F003         	movff	i2DutyCycle_PWM@Valor,??i2_DutyCycle_PWM
  4277  001398  C002  F004         	movff	i2DutyCycle_PWM@Valor+1,??i2_DutyCycle_PWM+1
  4278  00139C  90D8               	bcf	status,0,c
  4279  00139E  3204               	rrcf	??i2_DutyCycle_PWM+1,f,c
  4280  0013A0  3203               	rrcf	??i2_DutyCycle_PWM,f,c
  4281  0013A2  90D8               	bcf	status,0,c
  4282  0013A4  3204               	rrcf	??i2_DutyCycle_PWM+1,f,c
  4283  0013A6  3203               	rrcf	??i2_DutyCycle_PWM,f,c
  4284  0013A8  5003               	movf	??i2_DutyCycle_PWM,w,c
  4285  0013AA  6EBE               	movwf	4030,c	;volatile
  4286  0013AC  0012               	return		;funcret
  4287  0013AE                     __end_ofi2_DutyCycle_PWM:
  4288                           	opt stack 0
  4289                           pclatu	equ	0xFFB
  4290                           pclath	equ	0xFFA
  4291                           tblptru	equ	0xFF8
  4292                           tblptrh	equ	0xFF7
  4293                           tblptrl	equ	0xFF6
  4294                           tablat	equ	0xFF5
  4295                           prodh	equ	0xFF4
  4296                           prodl	equ	0xFF3
  4297                           intcon	equ	0xFF2
  4298                           intcon2	equ	0xFF1
  4299                           intcon3	equ	0xFF0
  4300                           fsr0h	equ	0xFEA
  4301                           fsr0l	equ	0xFE9
  4302                           wreg	equ	0xFE8
  4303                           postinc1	equ	0xFE6
  4304                           fsr1h	equ	0xFE2
  4305                           fsr1l	equ	0xFE1
  4306                           indf2	equ	0xFDF
  4307                           postinc2	equ	0xFDE
  4308                           fsr2h	equ	0xFDA
  4309                           fsr2l	equ	0xFD9
  4310                           status	equ	0xFD8
  4311                           pclatu	equ	0xFFB
  4312                           pclath	equ	0xFFA
  4313                           tblptru	equ	0xFF8
  4314                           tblptrh	equ	0xFF7
  4315                           tblptrl	equ	0xFF6
  4316                           tablat	equ	0xFF5
  4317                           prodh	equ	0xFF4
  4318                           prodl	equ	0xFF3
  4319                           intcon	equ	0xFF2
  4320                           intcon2	equ	0xFF1
  4321                           intcon3	equ	0xFF0
  4322                           fsr0h	equ	0xFEA
  4323                           fsr0l	equ	0xFE9
  4324                           wreg	equ	0xFE8
  4325                           postinc1	equ	0xFE6
  4326                           fsr1h	equ	0xFE2
  4327                           fsr1l	equ	0xFE1
  4328                           indf2	equ	0xFDF
  4329                           postinc2	equ	0xFDE
  4330                           fsr2h	equ	0xFDA
  4331                           fsr2l	equ	0xFD9
  4332                           status	equ	0xFD8
  4333                           
  4334                           	psect	rparam
  4335  0000                     pclatu	equ	0xFFB
  4336                           pclath	equ	0xFFA
  4337                           tblptru	equ	0xFF8
  4338                           tblptrh	equ	0xFF7
  4339                           tblptrl	equ	0xFF6
  4340                           tablat	equ	0xFF5
  4341                           prodh	equ	0xFF4
  4342                           prodl	equ	0xFF3
  4343                           intcon	equ	0xFF2
  4344                           intcon2	equ	0xFF1
  4345                           intcon3	equ	0xFF0
  4346                           fsr0h	equ	0xFEA
  4347                           fsr0l	equ	0xFE9
  4348                           wreg	equ	0xFE8
  4349                           postinc1	equ	0xFE6
  4350                           fsr1h	equ	0xFE2
  4351                           fsr1l	equ	0xFE1
  4352                           indf2	equ	0xFDF
  4353                           postinc2	equ	0xFDE
  4354                           fsr2h	equ	0xFDA
  4355                           fsr2l	equ	0xFD9
  4356                           status	equ	0xFD8
  4357                           
  4358                           	psect	temp
  4359  00003F                     btemp:
  4360                           	opt stack 0
  4361  00003F                     	ds	1
  4362  0000                     int$flags	set	btemp
  4363                           pclatu	equ	0xFFB
  4364                           pclath	equ	0xFFA
  4365                           tblptru	equ	0xFF8
  4366                           tblptrh	equ	0xFF7
  4367                           tblptrl	equ	0xFF6
  4368                           tablat	equ	0xFF5
  4369                           prodh	equ	0xFF4
  4370                           prodl	equ	0xFF3
  4371                           intcon	equ	0xFF2
  4372                           intcon2	equ	0xFF1
  4373                           intcon3	equ	0xFF0
  4374                           fsr0h	equ	0xFEA
  4375                           fsr0l	equ	0xFE9
  4376                           wreg	equ	0xFE8
  4377                           postinc1	equ	0xFE6
  4378                           fsr1h	equ	0xFE2
  4379                           fsr1l	equ	0xFE1
  4380                           indf2	equ	0xFDF
  4381                           postinc2	equ	0xFDE
  4382                           fsr2h	equ	0xFDA
  4383                           fsr2l	equ	0xFD9
  4384                           status	equ	0xFD8


Data Sizes:
    Strings     116
    Constant    0
    Data        2
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     56      62
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    cadastrarSenha@pass	PTR unsigned char  size(2) Largest target is 2
		 -> main@pass(COMRAM[2]), 

    cmpPass@toque	PTR unsigned char  size(2) Largest target is 2
		 -> cadastrarSenha@temp2(COMRAM[2]), main@toc(COMRAM[2]), 

    cmpPass@pass	PTR unsigned char  size(2) Largest target is 2
		 -> cadastrarSenha@temp1(COMRAM[2]), main@pass(COMRAM[2]), 

    destravarPorta@pass	PTR unsigned char  size(2) Largest target is 2
		 -> main@pass(COMRAM[2]), 

    destravarPorta@toque	PTR unsigned char  size(2) Largest target is 2
		 -> main@toc(COMRAM[2]), 

    lerToque@toque	PTR unsigned char  size(2) Largest target is 2
		 -> cadastrarSenha@temp2(COMRAM[2]), cadastrarSenha@temp1(COMRAM[2]), 

    cmpSignal@toc	PTR unsigned char  size(2) Largest target is 2
		 -> cadastrarSenha@temp2(COMRAM[2]), main@toc(COMRAM[2]), 

    cmpSignal@pass	PTR unsigned char  size(2) Largest target is 2
		 -> cadastrarSenha@temp1(COMRAM[2]), main@pass(COMRAM[2]), 

    readSignal@signal	PTR unsigned char  size(2) Largest target is 2
		 -> cadastrarSenha@temp2(COMRAM[2]), cadastrarSenha@temp1(COMRAM[2]), main@toc(COMRAM[2]), 

    write_LCD@c	PTR unsigned char  size(2) Largest target is 14
		 -> STR_18(CODE[11]), STR_17(CODE[6]), STR_16(CODE[6]), STR_15(CODE[11]), 
		 -> STR_14(CODE[6]), STR_13(CODE[13]), STR_12(CODE[6]), STR_11(CODE[13]), 
		 -> STR_10(CODE[14]), STR_9(CODE[10]), STR_8(CODE[10]), STR_7(CODE[10]), 
		 -> STR_6(CODE[14]), STR_5(CODE[10]), STR_4(CODE[12]), STR_3(CODE[6]), 
		 -> STR_2(CODE[14]), STR_1(CODE[14]), 


Critical Paths under _main in COMRAM

    _main->_cadastrarSenha
    _init_LCD->_send_cfg
    _init_I2C->___lldiv
    _destravarPorta->_readSignal
    _cadastrarSenha->_lerToque
    _lerToque->_readSignal
    _readSignal->_read_ADC
    _confirmarSenha->_write_LCD
    _checkUSART->_cmp_MSG2
    _cmpPass->_write_LCD
    _write_LCD->_send_msg
    _send_msg->_ena_pulse
    _set_line->_send_cfg
    _clearLCD->_send_cfg
    _send_cfg->_ena_pulse

Critical Paths under _ISR in COMRAM

    _ISR->i2_DutyCycle_PWM

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   30396
                                             52 COMRAM     4     4      0
                     _cadastrarSenha
                     _destravarPorta
                           _init_ADC
                           _init_I2C
                        _init_INTRB2
                           _init_LCD
                           _init_PWM
                          _init_UART
 ---------------------------------------------------------------------------------
 (1) _init_UART                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_PWM                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_LCD                                             0     0      0      15
                           _send_cfg
 ---------------------------------------------------------------------------------
 (1) _init_INTRB2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_I2C                                             8     4      4     376
                                             33 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     290
                                             20 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _destravarPorta                                       8     4      4   10936
                                             36 COMRAM     8     4      4
                      _DutyCycle_PWM
                         _checkUSART
                           _clearLCD
                            _cmpPass
                         _readSignal
                           _read_ADC
                           _send_msg
                           _set_line
                          _write_LCD
 ---------------------------------------------------------------------------------
 (2) _DutyCycle_PWM                                        4     2      2     270
                                             20 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _cadastrarSenha                                      12    10      2   18913
                                             40 COMRAM    12    10      2
                           _clearLCD
                            _cmpPass
                     _confirmarSenha
                           _lerToque
                           _set_line
                          _write_LCD
 ---------------------------------------------------------------------------------
 (2) _lerToque                                             4     2      2    5554
                                             36 COMRAM     4     2      2
                           _clearLCD
                         _readSignal
                           _read_ADC
                           _send_msg
                           _set_line
                          _write_LCD
 ---------------------------------------------------------------------------------
 (2) _readSignal                                          12     8      4    1207
                                             24 COMRAM    12     8      4
                           _read_ADC
 ---------------------------------------------------------------------------------
 (2) _read_ADC                                             4     2      2      23
                                             20 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _confirmarSenha                                       2     0      2    4116
                                             29 COMRAM     2     0      2
                         _checkUSART
                           _clearLCD
                           _set_line
                          _write_LCD
 ---------------------------------------------------------------------------------
 (2) _checkUSART                                           3     3      0     179
                                             24 COMRAM     3     3      0
                    _UART_Data_Ready
                          _UART_Read
                           _cmp_MSG1
                           _cmp_MSG2
 ---------------------------------------------------------------------------------
 (3) _cmp_MSG2                                             4     2      2      66
                                             20 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _cmp_MSG1                                             3     1      2      22
                                             20 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (3) _UART_Read                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _UART_Data_Ready                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _cmpPass                                              6     2      4    4889
                                             29 COMRAM     6     2      4
                                _bip
                           _clearLCD
                          _cmpSignal
                           _set_line
                          _write_LCD
 ---------------------------------------------------------------------------------
 (2) _write_LCD                                            6     4      2    1257
                                             23 COMRAM     6     4      2
                           _send_msg
 ---------------------------------------------------------------------------------
 (3) _send_msg                                             2     2      0      15
                                             21 COMRAM     2     2      0
                          _ena_pulse
 ---------------------------------------------------------------------------------
 (2) _set_line                                             5     1      4    2665
                                             23 COMRAM     5     1      4
                           _send_cfg
 ---------------------------------------------------------------------------------
 (3) _cmpSignal                                            6     2      4     216
                                             20 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _clearLCD                                             0     0      0      15
                           _send_cfg
 ---------------------------------------------------------------------------------
 (2) _send_cfg                                             2     2      0      15
                                             21 COMRAM     2     2      0
                          _ena_pulse
 ---------------------------------------------------------------------------------
 (3) _ena_pulse                                            1     1      0       0
                                             20 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _bip                                                  8     4      4     391
                                             20 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                 16    16      0     118
                                              4 COMRAM    16    16      0
                    i2_DutyCycle_PWM
 ---------------------------------------------------------------------------------
 (7) i2_DutyCycle_PWM                                      4     2      2     118
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _cadastrarSenha
     _clearLCD
       _send_cfg
         _ena_pulse
     _cmpPass
       _bip
       _clearLCD
         _send_cfg
           _ena_pulse
       _cmpSignal
       _set_line
         _send_cfg
           _ena_pulse
       _write_LCD
         _send_msg
           _ena_pulse
     _confirmarSenha
       _checkUSART
         _UART_Data_Ready
         _UART_Read
         _cmp_MSG1
         _cmp_MSG2
       _clearLCD
         _send_cfg
           _ena_pulse
       _set_line
         _send_cfg
           _ena_pulse
       _write_LCD
         _send_msg
           _ena_pulse
     _lerToque
       _clearLCD
         _send_cfg
           _ena_pulse
       _readSignal
         _read_ADC
       _read_ADC
       _send_msg
         _ena_pulse
       _set_line
         _send_cfg
           _ena_pulse
       _write_LCD
         _send_msg
           _ena_pulse
     _set_line
       _send_cfg
         _ena_pulse
     _write_LCD
       _send_msg
         _ena_pulse
   _destravarPorta
     _DutyCycle_PWM
     _checkUSART
       _UART_Data_Ready
       _UART_Read
       _cmp_MSG1
       _cmp_MSG2
     _clearLCD
       _send_cfg
         _ena_pulse
     _cmpPass
       _bip
       _clearLCD
         _send_cfg
           _ena_pulse
       _cmpSignal
       _set_line
         _send_cfg
           _ena_pulse
       _write_LCD
         _send_msg
           _ena_pulse
     _readSignal
       _read_ADC
     _read_ADC
     _send_msg
       _ena_pulse
     _set_line
       _send_cfg
         _ena_pulse
     _write_LCD
       _send_msg
         _ena_pulse
   _init_ADC
   _init_I2C
     ___lldiv
   _init_INTRB2
   _init_LCD
     _send_cfg
       _ena_pulse
   _init_PWM
   _init_UART

 _ISR (ROOT)
   i2_DutyCycle_PWM

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     38      3E       1       66.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      3E      20        0.0%
DATA                 0      0      3E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Tue Jul 11 04:50:43 2017

             __CFG_BOR$ON 000000               __CFG_BORV$3 000000              __CFG_CP0$OFF 000000  
            __CFG_CP1$OFF 000000              __CFG_CP2$OFF 000000              __CFG_CP3$OFF 000000  
                     l201 14CC                       l212 1026                       l320 1196  
                     l241 0F98                       l155 152A                       l171 136C  
                     l290 0D36                       l750 10AC              __CFG_CPB$OFF 000000  
                     _PR2 000FCB              __CFG_CPD$OFF 000000                       _ISR 0008  
                     u840 0F00                       u770 0FDA                       u915 1302  
                     u916 1304                       u880 0F58                       u784 0FEA  
                     u785 0FE6                       u858 0F02                       u898 0F5A  
                     _bip 0EDC          ??_cadastrarSenha 002B                       wreg 000FE8  
            __CFG_FOSC$HS 000000              __CFG_LVP$OFF 000000                      ?_ISR 0001  
            __CFG_WDT$OFF 000000                      l2030 1102                      ?_bip 0015  
                    l1612 1486                      l1710 0EF6                      l1720 0F4E  
                    l1624 1358                      l1714 0F28                      l1634 12BA  
                    l1724 0F82                      l1716 0F3E                      l1644 14BC  
                    l1638 12DA                      l1806 1178                      l1750 0CC6  
                    l1742 0C76                      l1830 106A                      l1664 11F8  
                    l1760 0D20                      l1744 0C8C                      l1840 109E  
                    l1832 106E                      l1818 11A2                      l1682 0FFA  
                    l1674 0FB2                      l1754 0CE4                      l1762 0D24  
                    l1930 08D0                      l1780 0DB6                      l1676 0FC0  
                    l1924 08C0                      l1828 105E                      l1678 0FCA  
                    l1686 100E                      l1758 0D08                      l1862 0ABE  
                    l1950 096C                      l1942 092A                      l1934 08DA  
                    l1792 0E0E                      l1952 0984                      l1936 08F0  
         ?_confirmarSenha 001E                      l1698 12A6                      l1946 0948  
                    l1954 0988                      l1956 0998                      l1978 0A3A  
                    STR_1 0801                      STR_2 0801                      STR_3 086F  
                    STR_4 0837                      STR_5 0859                      STR_6 080F  
                    STR_7 0859                      STR_8 0813                      STR_9 0859  
                    _BRGH 007D62                      _CREN 007D5C                      u1045 1234  
                    u1207 0A1E                      u1217 0B0C                      u1307 13DA  
                    u1227 0B74                      u1317 0F18                      u1237 0C20  
                    u1327 0F70                      u1247 1000                      u1257 1426  
                    u1267 143A                      u1277 14A2                      u1287 13B6  
                    u1297 13C8                      _RCIF 007CF5                      i2l29 0EA0  
                    _SPEN 007D5F                      _TRMT 007D61                      _TXEN 007D65  
                    _SYNC 007D64                      bip@j 001B                      _main 10BE  
                    fsr0h 000FEA                      fsr1h 000FE2                      fsr2h 000FDA  
                    fsr0l 000FE9                      indf2 000FDF                      fsr1l 000FE1  
                    fsr2l 000FD9                      btemp 003F                      prodh 000FF4  
                    prodl 000FF3                      start 000E             __CFG_IESO$OFF 000000  
            ?_init_INTRB2 0001             __CFG_MCLRE$ON 000000              ___param_bank 000000  
  __size_of_DutyCycle_PWM 003C                     ??_ISR 0005                     ??_bip 0019  
           __CFG_PLLDIV$1 000000            __CFG_CCP2MX$ON 000000                     ?_main 0001  
                   _ACKEN 007E2C                     _ACKDT 007E2D                     _ADRES 000FC3  
                   STR_10 080F                     STR_11 081D                     STR_12 0869  
                   STR_13 082A                     STR_14 0869                     STR_15 084E  
                   STR_16 0869                     STR_17 0863                     STR_18 0843  
         __end_of___lldiv 10BE                     _T2CON 000FCA                     _RCREG 000FAE  
                   _TMR0H 000FD7                     _TMR0L 000FD6                     _SPBRG 000FAF  
                   _PORTD 000F83             __CFG_USBDIV$1 000000                     _TRISB 000F93  
                   _TRISD 000F95                     _TRISE 000F96                     _TXREG 000FAD  
           __CFG_PWRT$OFF 000000             __CFG_WRT0$OFF 000000             __CFG_WRT1$OFF 000000  
           __CFG_WRT2$OFF 000000             __CFG_WRT3$OFF 000000           __end_of_cmpPass 0E18  
          __CFG_EBTR0$OFF 000000            __CFG_FCMEN$OFF 000000            __CFG_EBTR1$OFF 000000  
          __CFG_EBTR2$OFF 000000            __CFG_EBTR3$OFF 000000        __size_of_UART_Read 0008  
           __CFG_WRTB$OFF 000000             __CFG_WRTC$OFF 000000             __CFG_WRTD$OFF 000000  
          __CFG_EBTRB$OFF 000000                     pclath 000FFA                     tablat 000FF5  
                   status 000FD8            __CFG_ICPRT$OFF 000000           __initialization 13E6  
            __end_of_main 1134             checkUSART@msg 001B                    ??_main 0035  
           __activetblptr 000001             _DutyCycle_PWM 12FA                    _ADCON0 000FC2  
                  _ADCON1 000FC1                    _ADCON2 000FC0                    _CCPR1L 000FBE  
        ??_destravarPorta 0029                    _SSPADD 000FC8                    _TRISC6 007CA6  
                  _TRISC7 007CA7                    _SSPBUF 000FC9          __end_of_clearLCD 1542  
        __end_of_cmp_MSG1 1490          __end_of_cmp_MSG2 1372  __size_ofi2_DutyCycle_PWM 003C  
          __CFG_XINST$OFF 000000         __end_of_UART_Read 1532            __CFG_STVREN$ON 000000  
               ??___lldiv 001D          __end_of_init_I2C 1264          __end_of_init_ADC 151A  
             readSignal@i 0021               readSignal@j 0023          __end_of_lerToque 0D38  
        __end_of_init_LCD 1472          __end_of_read_ADC 14E2          __end_of_init_PWM 1508  
               ??_cmpPass 0022          __end_of_send_cfg 14AE          __end_of_send_msg 1448  
            __pdataCOMRAM 003D          __end_of_set_line 14CA              __mediumconst 0000  
                  tblptrh 000FF7                    tblptrl 000FF6            ?_DutyCycle_PWM 0015  
                  tblptru 000FF8                __accesstop 0060   __end_of__initialization 1406  
         __CFG_PBADEN$OFF 000000             ___rparam_used 000001            __pcstackCOMRAM 0001  
    __size_of_init_INTRB2 0010        __size_of_cmpSignal 004C          ??_confirmarSenha 0020  
      __size_of_ena_pulse 0038           destravarPorta@i 002B                _checkUSART 11AA  
      __size_of_init_UART 0014  __size_of_UART_Data_Ready 0008         ??i2_DutyCycle_PWM 0003  
                 _CCP1CON 000FBD           ??_DutyCycle_PWM 0017                 ?_clearLCD 0001  
               ?_cmp_MSG1 0015                 ?_cmp_MSG2 0015               send_cfg@cmd 0017  
                 _SSPCON1 000FC6                   _SSPCON2 000FC5                   _SSPSTAT 000FC7  
               ?_init_I2C 0022                 ?_init_ADC 0001                 ?_lerToque 0025  
               ?_init_LCD 0001           __CFG_VREGEN$OFF 000000                 ?_read_ADC 0015  
               ?_init_PWM 0001               send_msg@msg 0017        __size_of_write_LCD 004A  
       __end_of_cmpSignal 12B0                 ?_send_cfg 0001                   __Hparam 0000  
               ?_send_msg 0001         __end_of_ena_pulse 13E6                   __Lparam 0000  
               ?_set_line 0018                   ___lldiv 103C                _readSignal 0F9A  
            __psmallconst 0800                   __pcinit 13E6                   __ramtop 0800  
                 _cmpPass 0D38                   __ptext0 10BE                   __ptext1 14E2  
                 __ptext2 14F6                   __ptext3 1448                   __ptext4 151A  
                 __ptext5 120A                   __ptext6 103C                   __ptext7 1508  
                 __ptext8 0876                   __ptext9 12FA         __end_of_init_UART 14F6  
               _T0CONbits 000FD5        cadastrarSenha@pass 0029              __size_of_ISR 0ED4  
                 bip@time 0017              __size_of_bip 00BE                ??_clearLCD 0018  
      destravarPorta@pass 0025                ??_cmp_MSG1 0017                ??_cmp_MSG2 0017  
             set_line@pos 001A               ?_checkUSART 0001                   main@toc 0035  
          __pintcode_body 0E18      end_of_initialization 1406                ??_init_I2C 0026  
              ??_init_ADC 0015                ??_lerToque 0027                ??_init_LCD 0018  
              ??_read_ADC 0017                ??_init_PWM 0015   __size_of_cadastrarSenha 01AE  
                 int_func 0E18           ___lldiv@divisor 0019                ??_send_cfg 0016  
              ??_send_msg 0016           ___lldiv@counter 0021                ??_set_line 001C  
          set_line@cursor 001C                   postinc1 000FE6                   postinc2 000FDE  
       ??_UART_Data_Ready 0015                 _UART_Read 152A                 _PORTBbits 000F81  
               _PORTCbits 000F82                 _PORTEbits 000F84        DutyCycle_PWM@Valor 0015  
       __end_of_write_LCD 12FA                 _TRISAbits 000F92                 _TRISBbits 000F93  
               _TRISCbits 000F94               _CCP1CONbits 000FBD       __size_of_checkUSART 0060  
             ?_readSignal 0019                ?_UART_Read 0001             __pidataCOMRAM 1542  
     start_initialization 13E6             init_I2C@clock 0022               __end_of_ISR 0EDC  
             __end_of_bip 0F9A              checkUSART@op 0019           i2_DutyCycle_PWM 1372  
           ??_init_INTRB2 0015         _buttonCancel_Lock 003B   __size_of_destravarPorta 020A  
           lerToque@toque 0025          __CFG_LPT1OSC$OFF 000000               __pbssCOMRAM 0039  
       __size_of_clearLCD 0008             read_ADC@value 0017         __size_of_cmp_MSG1 001E  
       __size_of_cmp_MSG2 003C       __size_of_readSignal 00A2            _cadastrarSenha 0A80  
       __size_of_init_I2C 005A         __size_of_init_ADC 0012         __size_of_lerToque 010A  
       __size_of_init_LCD 002A         __size_of_read_ADC 0018         __size_of_init_PWM 0012  
               __pintcode 0008                 _cmpSignal 1264         __size_of_send_cfg 001E  
       __size_of_send_msg 0030                  ?___lldiv 0015         __size_of_set_line 001C  
               _ena_pulse 13AE           cadastrarSenha@i 002D           cadastrarSenha@j 002F  
     __end_of_init_INTRB2 152A               ??_UART_Read 0015                  ?_cmpPass 001E  
               _doorState 003D               __smallconst 0800          readSignal@limite 001F  
               bip@rounds 0015     __end_of_DutyCycle_PWM 1336          readSignal@signal 0019  
               _init_UART 14E2              ??_checkUSART 0019   __end_ofi2_DutyCycle_PWM 13AE  
  __end_of_cadastrarSenha 0C2E   __size_of_confirmarSenha 0076           _UART_Data_Ready 1532  
                i2u116_45 137A                  i2u116_46 137C                  i2u133_47 0E86  
       _buttonConfirm_Cad 0039          __CFG_WDTPS$32768 000000                ?_cmpSignal 0015  
              ?_ena_pulse 0001        __end_of_checkUSART 120A             cmpSignal@pass 0015  
              _ADCON0bits 000FC2                ?_init_UART 0001                 _write_LCD 12B0  
             _INTCON2bits 000FF1               _INTCON3bits 000FF0           ?_cadastrarSenha 0029  
               lerToque@i 0027               _init_INTRB2 151A                  __Hrparam 0000  
                __Lrparam 0000              __Lsmallconst 0800            _destravarPorta 0876  
            ??_readSignal 001D          __size_of___lldiv 0082          __size_of_cmpPass 00E0  
                _clearLCD 153A                  _cmp_MSG1 1472                  _cmp_MSG2 1336  
            cmpPass@toque 0020                ?_write_LCD 0018                  __ptext10 0A80  
                __ptext11 0C2E                  __ptext20 0D38                  __ptext12 0F9A  
                __ptext21 12B0                  __ptext13 14CA                  __ptext30 1372  
                __ptext22 1418                  __ptext14 1134                  __ptext23 14AE  
                __ptext15 11AA                  __ptext24 1264                  __ptext16 1336  
                __ptext25 153A                  __ptext17 1472                  __ptext26 1490  
                __ptext18 152A                  __ptext27 13AE                  __ptext19 1532  
                __ptext28 0EDC             readSignal@pos 001B   __end_of_UART_Data_Ready 153A  
        ?i2_DutyCycle_PWM 0001       cadastrarSenha@temp1 0033       cadastrarSenha@temp2 0031  
                _init_I2C 120A                  _init_ADC 1508                  _lerToque 0C2E  
                _init_LCD 1448                  _read_ADC 14CA                  _init_PWM 14F6  
      __end_of_readSignal 103C             __size_of_main 0076                  _send_cfg 1490  
                _send_msg 1418       destravarPorta@toque 0027                  cmpPass@i 0022  
  __end_of_destravarPorta 0A80                write_LCD@c 0018                write_LCD@i 001C  
                _set_line 14AE              set_line@line 0018               ??_cmpSignal 0019  
             cmp_MSG1@msg 0017               cmp_MSG2@msg 0018                  int$flags 003F  
            cmpSignal@toc 0017               ??_ena_pulse 0015                  main@pass 0037  
   __CFG_CPUDIV$OSC1_PLL2 000000      i2DutyCycle_PWM@Valor 0001                _INTCONbits 000FF2  
             ??_init_UART 0015                  intlevel2 0000               cmpPass@pass 001E  
          _confirmarSenha 1134          ___lldiv@dividend 0015           ?_destravarPorta 0025  
        ___lldiv@quotient 001D               _SSPCON2bits 000FC5               ??_write_LCD 001A  
        ?_UART_Data_Ready 0001    __end_of_confirmarSenha 11AA  
