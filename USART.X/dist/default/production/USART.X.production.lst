

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Sat Jul  1 03:01:04 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    27                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    28                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    29                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    30                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    31  0000                     
    32                           ; Version 1.41
    33                           ; Generated 25/01/2017 GMT
    34                           ; 
    35                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    36                           ; All rights reserved.
    37                           ; 
    38                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    39                           ; 
    40                           ; Redistribution and use in source and binary forms, with or without modification, are
    41                           ; permitted provided that the following conditions are met:
    42                           ; 
    43                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    44                           ;        conditions and the following disclaimer.
    45                           ; 
    46                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    47                           ;        of conditions and the following disclaimer in the documentation and/or other
    48                           ;        materials provided with the distribution.
    49                           ; 
    50                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    51                           ;        software without specific prior written permission.
    52                           ; 
    53                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    54                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    55                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    56                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    57                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    58                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    59                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    60                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    61                           ; 
    62                           ; 
    63                           ; Code-generator required, PIC18F4550 Definitions
    64                           ; 
    65                           ; SFR Addresses
    66  0000                     _ADRES	set	4035
    67  0000                     _PORTCbits	set	3970
    68  0000                     _TRISCbits	set	3988
    69  0000                     _ADCON0bits	set	4034
    70  0000                     _ADCON2	set	4032
    71  0000                     _ADCON1	set	4033
    72  0000                     _ADCON0	set	4034
    73  0000                     _TRISAbits	set	3986
    74  0000                     _RCREG	set	4014
    75  0000                     _TXREG	set	4013
    76  0000                     _SPBRG	set	4015
    77  0000                     _TRISE	set	3990
    78  0000                     _TRISB	set	3987
    79  0000                     _PORTBbits	set	3969
    80  0000                     _PORTD	set	3971
    81  0000                     _PORTEbits	set	3972
    82  0000                     _TMR0L	set	4054
    83  0000                     _TMR0H	set	4055
    84  0000                     _T0CONbits	set	4053
    85  0000                     _TRISD	set	3989
    86  0000                     _INTCON2bits	set	4081
    87  0000                     _TRISBbits	set	3987
    88  0000                     _INTCONbits	set	4082
    89  0000                     _INTCON3bits	set	4080
    90  0000                     _RCIF	set	31989
    91  0000                     _TRMT	set	32097
    92  0000                     _TXEN	set	32101
    93  0000                     _CREN	set	32092
    94  0000                     _TRISC6	set	31910
    95  0000                     _TRISC7	set	31911
    96  0000                     _SPEN	set	32095
    97  0000                     _SYNC	set	32100
    98  0000                     _BRGH	set	32098
    99                           
   100                           	psect	smallconst
   101  000800                     __psmallconst:
   102                           	opt stack 0
   103  000800  00                 	db	0
   104  000801                     STR_5:
   105  000801  42                 	db	66	;'B'
   106  000802  61                 	db	97	;'a'
   107  000803  74                 	db	116	;'t'
   108  000804  61                 	db	97	;'a'
   109  000805  20                 	db	32
   110  000806  6E                 	db	110	;'n'
   111  000807  61                 	db	97	;'a'
   112  000808  20                 	db	32
   113  000809  70                 	db	112	;'p'
   114  00080A  6F                 	db	111	;'o'
   115  00080B  72                 	db	114	;'r'
   116  00080C  74                 	db	116	;'t'
   117  00080D  61                 	db	97	;'a'
   118  00080E  00                 	db	0
   119  00080F                     STR_9:
   120  00080F  6E                 	db	110	;'n'
   121  000810  61                 	db	97	;'a'
   122  000811  6F                 	db	111	;'o'
   123  000812  20                 	db	32
   124  000813  63                 	db	99	;'c'
   125  000814  6F                 	db	111	;'o'
   126  000815  69                 	db	105	;'i'
   127  000816  6E                 	db	110	;'n'
   128  000817  63                 	db	99	;'c'
   129  000818  69                 	db	105	;'i'
   130  000819  64                 	db	100	;'d'
   131  00081A  65                 	db	101	;'e'
   132  00081B  6D                 	db	109	;'m'
   133  00081C  00                 	db	0
   134  00081D                     STR_1:
   135  00081D  43                 	db	67	;'C'
   136  00081E  61                 	db	97	;'a'
   137  00081F  64                 	db	100	;'d'
   138  000820  61                 	db	97	;'a'
   139  000821  73                 	db	115	;'s'
   140  000822  74                 	db	116	;'t'
   141  000823  72                 	db	114	;'r'
   142  000824  65                 	db	101	;'e'
   143  000825  20                 	db	32
   144  000826  73                 	db	115	;'s'
   145  000827  75                 	db	117	;'u'
   146  000828  61                 	db	97	;'a'
   147  000829  00                 	db	0
   148  00082A                     STR_4:
   149  00082A  46                 	db	70	;'F'
   150  00082B  69                 	db	105	;'i'
   151  00082C  6E                 	db	110	;'n'
   152  00082D  61                 	db	97	;'a'
   153  00082E  6C                 	db	108	;'l'
   154  00082F  69                 	db	105	;'i'
   155  000830  7A                 	db	122	;'z'
   156  000831  61                 	db	97	;'a'
   157  000832  64                 	db	100	;'d'
   158  000833  61                 	db	97	;'a'
   159  000834  00                 	db	0
   160  000835                     STR_6:
   161  000835  41                 	db	65	;'A'
   162  000836  73                 	db	115	;'s'
   163  000837  20                 	db	32
   164  000838  73                 	db	115	;'s'
   165  000839  65                 	db	101	;'e'
   166  00083A  6E                 	db	110	;'n'
   167  00083B  68                 	db	104	;'h'
   168  00083C  61                 	db	97	;'a'
   169  00083D  73                 	db	115	;'s'
   170  00083E  00                 	db	0
   171  00083F                     STR_3:
   172  00083F  4C                 	db	76	;'L'
   173  000840  65                 	db	101	;'e'
   174  000841  69                 	db	105	;'i'
   175  000842  74                 	db	116	;'t'
   176  000843  75                 	db	117	;'u'
   177  000844  72                 	db	114	;'r'
   178  000845  61                 	db	97	;'a'
   179  000846  00                 	db	0
   180  000847                     STR_2:
   181  000847  73                 	db	115	;'s'
   182  000848  65                 	db	101	;'e'
   183  000849  6E                 	db	110	;'n'
   184  00084A  68                 	db	104	;'h'
   185  00084B  61                 	db	97	;'a'
   186  00084C  00                 	db	0
   187  0000                     
   188                           ; #config settings
   189  00084D  00                 	db	0	; dummy byte at the end
   190  0000                     
   191                           	psect	cinit
   192  000F4A                     __pcinit:
   193                           	opt stack 0
   194  000F4A                     start_initialization:
   195                           	opt stack 0
   196  000F4A                     __initialization:
   197                           	opt stack 0
   198                           
   199                           ; Clear objects allocated to COMRAM (2 bytes)
   200  000F4A  6A2A               	clrf	(__pbssCOMRAM+1)& (0+255),c
   201  000F4C  6A29               	clrf	__pbssCOMRAM& (0+255),c
   202  000F4E                     end_of_initialization:
   203                           	opt stack 0
   204  000F4E                     __end_of__initialization:
   205                           	opt stack 0
   206  000F4E  902B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   207  000F50  922B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   208  000F52  0E00               	movlw	low (__Lsmallconst shr (0+16))
   209  000F54  6EF8               	movwf	tblptru,c
   210  000F56  0E08               	movlw	high __Lsmallconst
   211  000F58  6EF7               	movwf	tblptrh,c
   212  000F5A  0100               	movlb	0
   213  000F5C  EFB9  F006         	goto	_main	;jump to C main() function
   214                           tblptru	equ	0xFF8
   215                           tblptrh	equ	0xFF7
   216                           
   217                           	psect	bssCOMRAM
   218  000029                     __pbssCOMRAM:
   219                           	opt stack 0
   220  000029                     _button:
   221                           	opt stack 0
   222  000029                     	ds	2
   223                           tblptru	equ	0xFF8
   224                           tblptrh	equ	0xFF7
   225                           
   226                           	psect	cstackCOMRAM
   227  000001                     __pcstackCOMRAM:
   228                           	opt stack 0
   229  000001                     ??_ISR:
   230  000001                     
   231                           ; 1 bytes @ 0x0
   232  000001                     	ds	14
   233  00000F                     ??_ena_pulse:
   234  00000F                     ?_read_ADC:
   235                           	opt stack 0
   236  00000F                     ?_cmpSignal:
   237                           	opt stack 0
   238  00000F                     cmpSignal@pass:
   239                           	opt stack 0
   240  00000F                     bip@rounds:
   241                           	opt stack 0
   242                           
   243                           ; 2 bytes @ 0xE
   244  00000F                     	ds	1
   245  000010                     ??_send_cfg:
   246  000010                     ??_send_msg:
   247                           
   248                           ; 1 bytes @ 0xF
   249  000010                     	ds	1
   250  000011                     send_cfg@cmd:
   251                           	opt stack 0
   252  000011                     send_msg@msg:
   253                           	opt stack 0
   254  000011                     read_ADC@value:
   255                           	opt stack 0
   256  000011                     cmpSignal@toc:
   257                           	opt stack 0
   258  000011                     bip@time:
   259                           	opt stack 0
   260                           
   261                           ; 2 bytes @ 0x10
   262  000011                     	ds	1
   263  000012                     write_LCD@c:
   264                           	opt stack 0
   265  000012                     set_line@line:
   266                           	opt stack 0
   267                           
   268                           ; 2 bytes @ 0x11
   269  000012                     	ds	1
   270  000013                     ??_bip:
   271  000013                     readSignal@signal:
   272                           	opt stack 0
   273                           
   274                           ; 2 bytes @ 0x12
   275  000013                     	ds	1
   276  000014                     ??_write_LCD:
   277  000014                     set_line@pos:
   278                           	opt stack 0
   279                           
   280                           ; 2 bytes @ 0x13
   281  000014                     	ds	1
   282  000015                     readSignal@pos:
   283                           	opt stack 0
   284  000015                     bip@j:
   285                           	opt stack 0
   286                           
   287                           ; 2 bytes @ 0x14
   288  000015                     	ds	1
   289  000016                     set_line@cursor:
   290                           	opt stack 0
   291  000016                     write_LCD@i:
   292                           	opt stack 0
   293                           
   294                           ; 2 bytes @ 0x15
   295  000016                     	ds	1
   296  000017                     ??_readSignal:
   297                           
   298                           ; 1 bytes @ 0x16
   299  000017                     	ds	1
   300  000018                     cmpPass@pass:
   301                           	opt stack 0
   302                           
   303                           ; 2 bytes @ 0x17
   304  000018                     	ds	1
   305  000019                     readSignal@limite:
   306                           	opt stack 0
   307                           
   308                           ; 2 bytes @ 0x18
   309  000019                     	ds	1
   310  00001A                     cmpPass@toque:
   311                           	opt stack 0
   312                           
   313                           ; 2 bytes @ 0x19
   314  00001A                     	ds	1
   315  00001B                     readSignal@i:
   316                           	opt stack 0
   317                           
   318                           ; 2 bytes @ 0x1A
   319  00001B                     	ds	1
   320  00001C                     cmpPass@i:
   321                           	opt stack 0
   322                           
   323                           ; 2 bytes @ 0x1B
   324  00001C                     	ds	1
   325  00001D                     readSignal@j:
   326                           	opt stack 0
   327                           
   328                           ; 2 bytes @ 0x1C
   329  00001D                     	ds	2
   330  00001F                     cadastrarSenha@pass:
   331                           	opt stack 0
   332  00001F                     lerToque@toque:
   333                           	opt stack 0
   334                           
   335                           ; 2 bytes @ 0x1E
   336  00001F                     	ds	2
   337  000021                     ??_cadastrarSenha:
   338  000021                     lerToque@i:
   339                           	opt stack 0
   340                           
   341                           ; 2 bytes @ 0x20
   342  000021                     	ds	2
   343  000023                     cadastrarSenha@i:
   344                           	opt stack 0
   345                           
   346                           ; 2 bytes @ 0x22
   347  000023                     	ds	2
   348  000025                     main@toc:
   349                           	opt stack 0
   350                           
   351                           ; 2 bytes @ 0x24
   352  000025                     	ds	2
   353  000027                     main@pass:
   354                           	opt stack 0
   355                           
   356                           ; 2 bytes @ 0x26
   357  000027                     	ds	2
   358                           tblptru	equ	0xFF8
   359                           tblptrh	equ	0xFF7
   360                           
   361 ;;
   362 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   363 ;;
   364 ;; *************** function _main *****************
   365 ;; Defined at:
   366 ;;		line 20 in file "main.c"
   367 ;; Parameters:    Size  Location     Type
   368 ;;		None
   369 ;; Auto vars:     Size  Location     Type
   370 ;;  pass            2   38[COMRAM] unsigned char [2]
   371 ;;  toc             2   36[COMRAM] unsigned char [2]
   372 ;; Return value:  Size  Location     Type
   373 ;;                  1    wreg      void 
   374 ;; Registers used:
   375 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   376 ;; Tracked objects:
   377 ;;		On entry : 0/0
   378 ;;		On exit  : 0/0
   379 ;;		Unchanged: 0/0
   380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   381 ;;      Params:         0       0       0       0       0       0       0       0       0
   382 ;;      Locals:         4       0       0       0       0       0       0       0       0
   383 ;;      Temps:          0       0       0       0       0       0       0       0       0
   384 ;;      Totals:         4       0       0       0       0       0       0       0       0
   385 ;;Total ram usage:        4 bytes
   386 ;; Hardware stack levels required when called:    5
   387 ;; This function calls:
   388 ;;		_cadastrarSenha
   389 ;;		_cmpPass
   390 ;;		_init_ADC
   391 ;;		_init_INTRB2
   392 ;;		_init_LCD
   393 ;;		_lerToque
   394 ;; This function is called by:
   395 ;;		Startup code after reset
   396 ;; This function uses a non-reentrant model
   397 ;;
   398                           
   399                           	psect	text0
   400  000D72                     __ptext0:
   401                           	opt stack 0
   402  000D72                     _main:
   403                           	opt stack 26
   404                           
   405                           ;main.c: 22: init_INTRB2();
   406                           
   407                           ;incstack = 0
   408  000D72  ECB9  F007         	call	_init_INTRB2	;wreg free
   409                           
   410                           ;main.c: 23: init_LCD();
   411  000D76  EC67  F007         	call	_init_LCD	;wreg free
   412                           
   413                           ;main.c: 24: init_ADC();
   414  000D7A  ECB0  F007         	call	_init_ADC	;wreg free
   415                           
   416                           ;main.c: 26: char pass[2];
   417                           ;main.c: 27: pass[0] = 0x00;
   418  000D7E  0E00               	movlw	0
   419  000D80  6E27               	movwf	main@pass,c
   420                           
   421                           ;main.c: 28: pass[1] = 0x00;
   422  000D82  0E00               	movlw	0
   423  000D84  6E28               	movwf	main@pass+1,c
   424                           
   425                           ;main.c: 29: char toc[2];
   426                           ;main.c: 30: toc[0] = 0x00;
   427  000D86  0E00               	movlw	0
   428  000D88  6E25               	movwf	main@toc,c
   429                           
   430                           ;main.c: 31: toc[1] = 0x00;
   431  000D8A  0E00               	movlw	0
   432  000D8C  6E26               	movwf	main@toc+1,c
   433                           
   434                           ;main.c: 33: cadastrarSenha(pass);
   435  000D8E  0E27               	movlw	low main@pass
   436  000D90  6E1F               	movwf	cadastrarSenha@pass,c
   437  000D92  0E00               	movlw	high main@pass
   438  000D94  6E20               	movwf	cadastrarSenha@pass+1,c
   439  000D96  EC27  F004         	call	_cadastrarSenha	;wreg free
   440  000D9A                     l1396:
   441                           
   442                           ;main.c: 37: lerToque(toc);
   443  000D9A  0E25               	movlw	low main@toc
   444  000D9C  6E1F               	movwf	lerToque@toque,c
   445  000D9E  0E00               	movlw	high main@toc
   446  000DA0  6E20               	movwf	lerToque@toque+1,c
   447  000DA2  ECDE  F004         	call	_lerToque	;wreg free
   448                           
   449                           ;main.c: 38: cmpPass(pass, toc);
   450  000DA6  0E27               	movlw	low main@pass
   451  000DA8  6E18               	movwf	cmpPass@pass,c
   452  000DAA  0E00               	movlw	high main@pass
   453  000DAC  6E19               	movwf	cmpPass@pass+1,c
   454  000DAE  0E25               	movlw	low main@toc
   455  000DB0  6E1A               	movwf	cmpPass@toque,c
   456  000DB2  0E00               	movlw	high main@toc
   457  000DB4  6E1B               	movwf	cmpPass@toque+1,c
   458  000DB6  EC59  F005         	call	_cmpPass	;wreg free
   459                           
   460                           ;main.c: 40: if(button == 1){
   461  000DBA  0429               	decf	_button,w,c
   462  000DBC  102A               	iorwf	_button+1,w,c
   463  000DBE  A4D8               	btfss	status,2,c
   464  000DC0  D7EC               	goto	l1396
   465                           
   466                           ;main.c: 41: cadastrarSenha(pass);
   467  000DC2  0E27               	movlw	low main@pass
   468  000DC4  6E1F               	movwf	cadastrarSenha@pass,c
   469  000DC6  0E00               	movlw	high main@pass
   470  000DC8  6E20               	movwf	cadastrarSenha@pass+1,c
   471  000DCA  EC27  F004         	call	_cadastrarSenha	;wreg free
   472                           
   473                           ;main.c: 42: }
   474                           ;main.c: 44: }while(1);
   475  000DCE  D7E5               	goto	l1396
   476  000DD0                     __end_of_main:
   477                           	opt stack 0
   478                           tblptru	equ	0xFF8
   479                           tblptrh	equ	0xFF7
   480                           status	equ	0xFD8
   481                           
   482 ;; *************** function _lerToque *****************
   483 ;; Defined at:
   484 ;;		line 55 in file "TOCTOC.c"
   485 ;; Parameters:    Size  Location     Type
   486 ;;  toque           2   30[COMRAM] PTR unsigned char 
   487 ;;		 -> main@toc(2), 
   488 ;; Auto vars:     Size  Location     Type
   489 ;;  i               2   32[COMRAM] int 
   490 ;; Return value:  Size  Location     Type
   491 ;;                  1    wreg      void 
   492 ;; Registers used:
   493 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   494 ;; Tracked objects:
   495 ;;		On entry : 0/0
   496 ;;		On exit  : 0/0
   497 ;;		Unchanged: 0/0
   498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   499 ;;      Params:         2       0       0       0       0       0       0       0       0
   500 ;;      Locals:         2       0       0       0       0       0       0       0       0
   501 ;;      Temps:          0       0       0       0       0       0       0       0       0
   502 ;;      Totals:         4       0       0       0       0       0       0       0       0
   503 ;;Total ram usage:        4 bytes
   504 ;; Hardware stack levels used:    1
   505 ;; Hardware stack levels required when called:    4
   506 ;; This function calls:
   507 ;;		_clearLCD
   508 ;;		_readSignal
   509 ;;		_send_msg
   510 ;;		_set_line
   511 ;;		_write_LCD
   512 ;; This function is called by:
   513 ;;		_main
   514 ;; This function uses a non-reentrant model
   515 ;;
   516                           
   517                           	psect	text1
   518  0009BC                     __ptext1:
   519                           	opt stack 0
   520  0009BC                     _lerToque:
   521                           	opt stack 26
   522                           
   523                           ;TOCTOC.c: 57: int i = 0;
   524                           
   525                           ;incstack = 0
   526  0009BC  0E00               	movlw	0
   527  0009BE  6E22               	movwf	lerToque@i+1,c
   528  0009C0  0E00               	movlw	0
   529  0009C2  6E21               	movwf	lerToque@i,c
   530                           
   531                           ;TOCTOC.c: 59: toque[0] = 0x00;
   532  0009C4  C01F  FFD9         	movff	lerToque@toque,fsr2l
   533  0009C8  C020  FFDA         	movff	lerToque@toque+1,fsr2h
   534  0009CC  0E00               	movlw	0
   535  0009CE  6EDF               	movwf	indf2,c
   536                           
   537                           ;TOCTOC.c: 60: toque[1] = 0x00;
   538  0009D0  EE20 F001          	lfsr	2,1
   539  0009D4  501F               	movf	lerToque@toque,w,c
   540  0009D6  26D9               	addwf	fsr2l,f,c
   541  0009D8  5020               	movf	lerToque@toque+1,w,c
   542  0009DA  22DA               	addwfc	fsr2h,f,c
   543  0009DC  0E00               	movlw	0
   544  0009DE  6EDF               	movwf	indf2,c
   545                           
   546                           ;TOCTOC.c: 62: clearLCD();
   547  0009E0  ECC1  F007         	call	_clearLCD	;wreg free
   548                           
   549                           ;TOCTOC.c: 63: set_line(0,0);
   550  0009E4  0E00               	movlw	0
   551  0009E6  6E13               	movwf	set_line@line+1,c
   552  0009E8  0E00               	movlw	0
   553  0009EA  6E12               	movwf	set_line@line,c
   554  0009EC  0E00               	movlw	0
   555  0009EE  6E15               	movwf	set_line@pos+1,c
   556  0009F0  0E00               	movlw	0
   557  0009F2  6E14               	movwf	set_line@pos,c
   558  0009F4  EC8B  F007         	call	_set_line	;wreg free
   559                           
   560                           ;TOCTOC.c: 64: write_LCD("Bata na porta");
   561  0009F8  0E01               	movlw	low STR_5
   562  0009FA  6E12               	movwf	write_LCD@c,c
   563  0009FC  0E08               	movlw	high STR_5
   564  0009FE  6E13               	movwf	write_LCD@c+1,c
   565  000A00  EC0E  F007         	call	_write_LCD	;wreg free
   566                           
   567                           ;TOCTOC.c: 66: while(i < 4){
   568  000A04  D04C               	goto	l1350
   569  000A06                     l1332:
   570                           
   571                           ;TOCTOC.c: 67: set_line(1,0);
   572  000A06  0E00               	movlw	0
   573  000A08  6E13               	movwf	set_line@line+1,c
   574  000A0A  0E01               	movlw	1
   575  000A0C  6E12               	movwf	set_line@line,c
   576  000A0E  0E00               	movlw	0
   577  000A10  6E15               	movwf	set_line@pos+1,c
   578  000A12  0E00               	movlw	0
   579  000A14  6E14               	movwf	set_line@pos,c
   580  000A16  EC8B  F007         	call	_set_line	;wreg free
   581                           
   582                           ;TOCTOC.c: 68: send_msg('1'+ i);
   583  000A1A  5021               	movf	lerToque@i,w,c
   584  000A1C  0F31               	addlw	49
   585  000A1E  EC4F  F007         	call	_send_msg
   586                           
   587                           ;TOCTOC.c: 69: if(i == 0)
   588  000A22  5021               	movf	lerToque@i,w,c
   589  000A24  1022               	iorwf	lerToque@i+1,w,c
   590  000A26  A4D8               	btfss	status,2,c
   591  000A28  D00B               	goto	l1338
   592                           
   593                           ;TOCTOC.c: 70: readSignal(&toque[0], 0);
   594  000A2A  C01F  F013         	movff	lerToque@toque,readSignal@signal
   595  000A2E  C020  F014         	movff	lerToque@toque+1,readSignal@signal+1
   596  000A32  0E00               	movlw	0
   597  000A34  6E16               	movwf	readSignal@pos+1,c
   598  000A36  0E00               	movlw	0
   599  000A38  6E15               	movwf	readSignal@pos,c
   600  000A3A  EC26  F006         	call	_readSignal	;wreg free
   601  000A3E  D02D               	goto	l1348
   602  000A40                     l1338:
   603                           
   604                           ;TOCTOC.c: 71: else if(i == 1)
   605  000A40  0421               	decf	lerToque@i,w,c
   606  000A42  1022               	iorwf	lerToque@i+1,w,c
   607  000A44  A4D8               	btfss	status,2,c
   608  000A46  D00B               	goto	l1342
   609                           
   610                           ;TOCTOC.c: 72: readSignal(&toque[0], 1);
   611  000A48  C01F  F013         	movff	lerToque@toque,readSignal@signal
   612  000A4C  C020  F014         	movff	lerToque@toque+1,readSignal@signal+1
   613  000A50  0E00               	movlw	0
   614  000A52  6E16               	movwf	readSignal@pos+1,c
   615  000A54  0E01               	movlw	1
   616  000A56  6E15               	movwf	readSignal@pos,c
   617  000A58  EC26  F006         	call	_readSignal	;wreg free
   618  000A5C  D01E               	goto	l1348
   619  000A5E                     l1342:
   620                           
   621                           ;TOCTOC.c: 73: else if(i == 2)
   622  000A5E  0E02               	movlw	2
   623  000A60  1821               	xorwf	lerToque@i,w,c
   624  000A62  1022               	iorwf	lerToque@i+1,w,c
   625  000A64  A4D8               	btfss	status,2,c
   626  000A66  D00D               	goto	l1346
   627                           
   628                           ;TOCTOC.c: 74: readSignal(&toque[1], 0);
   629  000A68  0E01               	movlw	1
   630  000A6A  241F               	addwf	lerToque@toque,w,c
   631  000A6C  6E13               	movwf	readSignal@signal,c
   632  000A6E  0E00               	movlw	0
   633  000A70  2020               	addwfc	lerToque@toque+1,w,c
   634  000A72  6E14               	movwf	readSignal@signal+1,c
   635  000A74  0E00               	movlw	0
   636  000A76  6E16               	movwf	readSignal@pos+1,c
   637  000A78  0E00               	movlw	0
   638  000A7A  6E15               	movwf	readSignal@pos,c
   639  000A7C  EC26  F006         	call	_readSignal	;wreg free
   640  000A80  D00C               	goto	l1348
   641  000A82                     l1346:
   642                           
   643                           ;TOCTOC.c: 75: else
   644                           ;TOCTOC.c: 76: readSignal(&toque[1], 1);
   645  000A82  0E01               	movlw	1
   646  000A84  241F               	addwf	lerToque@toque,w,c
   647  000A86  6E13               	movwf	readSignal@signal,c
   648  000A88  0E00               	movlw	0
   649  000A8A  2020               	addwfc	lerToque@toque+1,w,c
   650  000A8C  6E14               	movwf	readSignal@signal+1,c
   651  000A8E  0E00               	movlw	0
   652  000A90  6E16               	movwf	readSignal@pos+1,c
   653  000A92  0E01               	movlw	1
   654  000A94  6E15               	movwf	readSignal@pos,c
   655  000A96  EC26  F006         	call	_readSignal	;wreg free
   656  000A9A                     l1348:
   657                           
   658                           ;TOCTOC.c: 77: i++;
   659  000A9A  4A21               	infsnz	lerToque@i,f,c
   660  000A9C  2A22               	incf	lerToque@i+1,f,c
   661  000A9E                     l1350:
   662  000A9E  BE22               	btfsc	lerToque@i+1,7,c
   663  000AA0  D7B2               	goto	l1332
   664  000AA2  5022               	movf	lerToque@i+1,w,c
   665  000AA4  E105               	bnz	l243
   666  000AA6  0E04               	movlw	4
   667  000AA8  5C21               	subwf	lerToque@i,w,c
   668  000AAA  B0D8               	btfsc	status,0,c
   669  000AAC  0012               	return	
   670  000AAE  D7AB               	goto	l1332
   671  000AB0                     l243:
   672  000AB0  0012               	return		;funcret
   673  000AB2                     __end_of_lerToque:
   674                           	opt stack 0
   675                           tblptru	equ	0xFF8
   676                           tblptrh	equ	0xFF7
   677                           indf2	equ	0xFDF
   678                           fsr2h	equ	0xFDA
   679                           fsr2l	equ	0xFD9
   680                           status	equ	0xFD8
   681                           
   682 ;; *************** function _init_LCD *****************
   683 ;; Defined at:
   684 ;;		line 45 in file "LCD.c"
   685 ;; Parameters:    Size  Location     Type
   686 ;;		None
   687 ;; Auto vars:     Size  Location     Type
   688 ;;		None
   689 ;; Return value:  Size  Location     Type
   690 ;;                  1    wreg      void 
   691 ;; Registers used:
   692 ;;		wreg, status,2, cstack
   693 ;; Tracked objects:
   694 ;;		On entry : 0/0
   695 ;;		On exit  : 0/0
   696 ;;		Unchanged: 0/0
   697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   698 ;;      Params:         0       0       0       0       0       0       0       0       0
   699 ;;      Locals:         0       0       0       0       0       0       0       0       0
   700 ;;      Temps:          0       0       0       0       0       0       0       0       0
   701 ;;      Totals:         0       0       0       0       0       0       0       0       0
   702 ;;Total ram usage:        0 bytes
   703 ;; Hardware stack levels used:    1
   704 ;; Hardware stack levels required when called:    3
   705 ;; This function calls:
   706 ;;		_send_cfg
   707 ;; This function is called by:
   708 ;;		_main
   709 ;; This function uses a non-reentrant model
   710 ;;
   711                           
   712                           	psect	text2
   713  000ECE                     __ptext2:
   714                           	opt stack 0
   715  000ECE                     _init_LCD:
   716                           	opt stack 27
   717                           
   718                           ;LCD.c: 47: TRISB = 0x04;
   719                           
   720                           ;incstack = 0
   721  000ECE  0E04               	movlw	4
   722  000ED0  6E93               	movwf	3987,c	;volatile
   723                           
   724                           ;LCD.c: 48: TRISD = 0x00;
   725  000ED2  0E00               	movlw	0
   726  000ED4  6E95               	movwf	3989,c	;volatile
   727                           
   728                           ;LCD.c: 49: TRISE = 0x00;
   729  000ED6  0E00               	movlw	0
   730  000ED8  6E96               	movwf	3990,c	;volatile
   731                           
   732                           ;LCD.c: 50: PORTD = 0x00;
   733  000EDA  0E00               	movlw	0
   734  000EDC  6E83               	movwf	3971,c	;volatile
   735                           
   736                           ;LCD.c: 52: send_cfg(0x01);
   737  000EDE  0E01               	movlw	1
   738  000EE0  EC7C  F007         	call	_send_cfg
   739                           
   740                           ;LCD.c: 53: send_cfg(0x38);
   741  000EE4  0E38               	movlw	56
   742  000EE6  EC7C  F007         	call	_send_cfg
   743                           
   744                           ;LCD.c: 54: send_cfg(0x80);
   745  000EEA  0E80               	movlw	128
   746  000EEC  EC7C  F007         	call	_send_cfg
   747                           
   748                           ;LCD.c: 55: send_cfg(0x0F);
   749  000EF0  0E0F               	movlw	15
   750  000EF2  EC7C  F007         	call	_send_cfg
   751  000EF6  0012               	return		;funcret
   752  000EF8                     __end_of_init_LCD:
   753                           	opt stack 0
   754                           tblptru	equ	0xFF8
   755                           tblptrh	equ	0xFF7
   756                           indf2	equ	0xFDF
   757                           fsr2h	equ	0xFDA
   758                           fsr2l	equ	0xFD9
   759                           status	equ	0xFD8
   760                           
   761 ;; *************** function _init_INTRB2 *****************
   762 ;; Defined at:
   763 ;;		line 40 in file "Interrupt.c"
   764 ;; Parameters:    Size  Location     Type
   765 ;;		None
   766 ;; Auto vars:     Size  Location     Type
   767 ;;		None
   768 ;; Return value:  Size  Location     Type
   769 ;;                  1    wreg      void 
   770 ;; Registers used:
   771 ;;		None
   772 ;; Tracked objects:
   773 ;;		On entry : 0/0
   774 ;;		On exit  : 0/0
   775 ;;		Unchanged: 0/0
   776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   777 ;;      Params:         0       0       0       0       0       0       0       0       0
   778 ;;      Locals:         0       0       0       0       0       0       0       0       0
   779 ;;      Temps:          0       0       0       0       0       0       0       0       0
   780 ;;      Totals:         0       0       0       0       0       0       0       0       0
   781 ;;Total ram usage:        0 bytes
   782 ;; Hardware stack levels used:    1
   783 ;; Hardware stack levels required when called:    1
   784 ;; This function calls:
   785 ;;		Nothing
   786 ;; This function is called by:
   787 ;;		_main
   788 ;; This function uses a non-reentrant model
   789 ;;
   790                           
   791                           	psect	text3
   792  000F72                     __ptext3:
   793                           	opt stack 0
   794  000F72                     _init_INTRB2:
   795                           	opt stack 29
   796                           
   797                           ;Interrupt.c: 42: INTCONbits.GIE = 0;
   798                           
   799                           ;incstack = 0
   800  000F72  9EF2               	bcf	intcon,7,c	;volatile
   801                           
   802                           ;Interrupt.c: 43: INTCONbits.PEIE = 0;
   803  000F74  9CF2               	bcf	intcon,6,c	;volatile
   804                           
   805                           ;Interrupt.c: 44: TRISBbits.RB2 = 1;
   806  000F76  8493               	bsf	3987,2,c	;volatile
   807                           
   808                           ;Interrupt.c: 45: INTCON2bits.INTEDG0 = 1;
   809  000F78  8CF1               	bsf	intcon2,6,c	;volatile
   810                           
   811                           ;Interrupt.c: 46: INTCON3bits.INT2IF = 0;
   812  000F7A  92F0               	bcf	intcon3,1,c	;volatile
   813                           
   814                           ;Interrupt.c: 47: INTCON3bits.INT2IE = 1;
   815  000F7C  88F0               	bsf	intcon3,4,c	;volatile
   816                           
   817                           ;Interrupt.c: 48: INTCONbits.GIE = 1;
   818  000F7E  8EF2               	bsf	intcon,7,c	;volatile
   819  000F80  0012               	return		;funcret
   820  000F82                     __end_of_init_INTRB2:
   821                           	opt stack 0
   822                           tblptru	equ	0xFF8
   823                           tblptrh	equ	0xFF7
   824                           intcon	equ	0xFF2
   825                           intcon2	equ	0xFF1
   826                           intcon3	equ	0xFF0
   827                           indf2	equ	0xFDF
   828                           fsr2h	equ	0xFDA
   829                           fsr2l	equ	0xFD9
   830                           status	equ	0xFD8
   831                           
   832 ;; *************** function _init_ADC *****************
   833 ;; Defined at:
   834 ;;		line 11 in file "ADC.c"
   835 ;; Parameters:    Size  Location     Type
   836 ;;		None
   837 ;; Auto vars:     Size  Location     Type
   838 ;;		None
   839 ;; Return value:  Size  Location     Type
   840 ;;                  1    wreg      void 
   841 ;; Registers used:
   842 ;;		wreg, status,2
   843 ;; Tracked objects:
   844 ;;		On entry : 0/0
   845 ;;		On exit  : 0/0
   846 ;;		Unchanged: 0/0
   847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   848 ;;      Params:         0       0       0       0       0       0       0       0       0
   849 ;;      Locals:         0       0       0       0       0       0       0       0       0
   850 ;;      Temps:          0       0       0       0       0       0       0       0       0
   851 ;;      Totals:         0       0       0       0       0       0       0       0       0
   852 ;;Total ram usage:        0 bytes
   853 ;; Hardware stack levels used:    1
   854 ;; Hardware stack levels required when called:    1
   855 ;; This function calls:
   856 ;;		Nothing
   857 ;; This function is called by:
   858 ;;		_main
   859 ;; This function uses a non-reentrant model
   860 ;;
   861                           
   862                           	psect	text4
   863  000F60                     __ptext4:
   864                           	opt stack 0
   865  000F60                     _init_ADC:
   866                           	opt stack 29
   867                           
   868                           ;ADC.c: 12: TRISAbits.TRISA0 = 1;
   869                           
   870                           ;incstack = 0
   871  000F60  8092               	bsf	3986,0,c	;volatile
   872                           
   873                           ;ADC.c: 13: ADCON0 = 0;
   874  000F62  0E00               	movlw	0
   875  000F64  6EC2               	movwf	4034,c	;volatile
   876                           
   877                           ;ADC.c: 14: ADCON1 = 0x0e;
   878  000F66  0E0E               	movlw	14
   879  000F68  6EC1               	movwf	4033,c	;volatile
   880                           
   881                           ;ADC.c: 15: ADCON2 = 0xd9;
   882  000F6A  0ED9               	movlw	217
   883  000F6C  6EC0               	movwf	4032,c	;volatile
   884                           
   885                           ;ADC.c: 16: ADCON0bits.ADON = 1;
   886  000F6E  80C2               	bsf	4034,0,c	;volatile
   887  000F70  0012               	return		;funcret
   888  000F72                     __end_of_init_ADC:
   889                           	opt stack 0
   890                           tblptru	equ	0xFF8
   891                           tblptrh	equ	0xFF7
   892                           intcon	equ	0xFF2
   893                           intcon2	equ	0xFF1
   894                           intcon3	equ	0xFF0
   895                           indf2	equ	0xFDF
   896                           fsr2h	equ	0xFDA
   897                           fsr2l	equ	0xFD9
   898                           status	equ	0xFD8
   899                           
   900 ;; *************** function _cmpPass *****************
   901 ;; Defined at:
   902 ;;		line 81 in file "TOCTOC.c"
   903 ;; Parameters:    Size  Location     Type
   904 ;;  pass            2   23[COMRAM] PTR unsigned char 
   905 ;;		 -> main@pass(2), 
   906 ;;  toque           2   25[COMRAM] PTR unsigned char 
   907 ;;		 -> main@toc(2), 
   908 ;; Auto vars:     Size  Location     Type
   909 ;;  i               2   27[COMRAM] int 
   910 ;; Return value:  Size  Location     Type
   911 ;;                  1    wreg      void 
   912 ;; Registers used:
   913 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   914 ;; Tracked objects:
   915 ;;		On entry : 0/0
   916 ;;		On exit  : 0/0
   917 ;;		Unchanged: 0/0
   918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   919 ;;      Params:         4       0       0       0       0       0       0       0       0
   920 ;;      Locals:         2       0       0       0       0       0       0       0       0
   921 ;;      Temps:          0       0       0       0       0       0       0       0       0
   922 ;;      Totals:         6       0       0       0       0       0       0       0       0
   923 ;;Total ram usage:        6 bytes
   924 ;; Hardware stack levels used:    1
   925 ;; Hardware stack levels required when called:    4
   926 ;; This function calls:
   927 ;;		_bip
   928 ;;		_clearLCD
   929 ;;		_cmpSignal
   930 ;;		_set_line
   931 ;;		_write_LCD
   932 ;; This function is called by:
   933 ;;		_main
   934 ;; This function uses a non-reentrant model
   935 ;;
   936                           
   937                           	psect	text5
   938  000AB2                     __ptext5:
   939                           	opt stack 0
   940  000AB2                     _cmpPass:
   941                           	opt stack 26
   942                           
   943                           ;TOCTOC.c: 83: int i = cmpSignal(pass, toque);
   944                           
   945                           ;incstack = 0
   946  000AB2  C018  F00F         	movff	cmpPass@pass,cmpSignal@pass
   947  000AB6  C019  F010         	movff	cmpPass@pass+1,cmpSignal@pass+1
   948  000ABA  C01A  F011         	movff	cmpPass@toque,cmpSignal@toc
   949  000ABE  C01B  F012         	movff	cmpPass@toque+1,cmpSignal@toc+1
   950  000AC2  ECE8  F006         	call	_cmpSignal	;wreg free
   951  000AC6  C00F  F01C         	movff	?_cmpSignal,cmpPass@i
   952  000ACA  C010  F01D         	movff	?_cmpSignal+1,cmpPass@i+1
   953                           
   954                           ;TOCTOC.c: 85: if(i == 1){
   955  000ACE  041C               	decf	cmpPass@i,w,c
   956  000AD0  101D               	iorwf	cmpPass@i+1,w,c
   957  000AD2  A4D8               	btfss	status,2,c
   958  000AD4  D02D               	goto	l1368
   959                           
   960                           ;TOCTOC.c: 86: clearLCD();
   961  000AD6  ECC1  F007         	call	_clearLCD	;wreg free
   962                           
   963                           ;TOCTOC.c: 87: set_line(0,3);
   964  000ADA  0E00               	movlw	0
   965  000ADC  6E13               	movwf	set_line@line+1,c
   966  000ADE  0E00               	movlw	0
   967  000AE0  6E12               	movwf	set_line@line,c
   968  000AE2  0E00               	movlw	0
   969  000AE4  6E15               	movwf	set_line@pos+1,c
   970  000AE6  0E03               	movlw	3
   971  000AE8  6E14               	movwf	set_line@pos,c
   972  000AEA  EC8B  F007         	call	_set_line	;wreg free
   973                           
   974                           ;TOCTOC.c: 88: write_LCD("As senhas");
   975  000AEE  0E35               	movlw	low STR_6
   976  000AF0  6E12               	movwf	write_LCD@c,c
   977  000AF2  0E08               	movlw	high STR_6
   978  000AF4  6E13               	movwf	write_LCD@c+1,c
   979  000AF6  EC0E  F007         	call	_write_LCD	;wreg free
   980                           
   981                           ;TOCTOC.c: 89: set_line(1,3);
   982  000AFA  0E00               	movlw	0
   983  000AFC  6E13               	movwf	set_line@line+1,c
   984  000AFE  0E01               	movlw	1
   985  000B00  6E12               	movwf	set_line@line,c
   986  000B02  0E00               	movlw	0
   987  000B04  6E15               	movwf	set_line@pos+1,c
   988  000B06  0E03               	movlw	3
   989  000B08  6E14               	movwf	set_line@pos,c
   990  000B0A  EC8B  F007         	call	_set_line	;wreg free
   991                           
   992                           ;TOCTOC.c: 90: write_LCD("coincidem");
   993  000B0E  0E13               	movlw	low (STR_9+4)
   994  000B10  6E12               	movwf	write_LCD@c,c
   995  000B12  0E08               	movlw	high (STR_9+4)
   996  000B14  6E13               	movwf	write_LCD@c+1,c
   997  000B16  EC0E  F007         	call	_write_LCD	;wreg free
   998                           
   999                           ;TOCTOC.c: 91: bip(2, 1000);
  1000  000B1A  0E00               	movlw	0
  1001  000B1C  6E10               	movwf	bip@rounds+1,c
  1002  000B1E  0E02               	movlw	2
  1003  000B20  6E0F               	movwf	bip@rounds,c
  1004  000B22  0E03               	movlw	3
  1005  000B24  6E12               	movwf	bip@time+1,c
  1006  000B26  0EE8               	movlw	232
  1007  000B28  6E11               	movwf	bip@time,c
  1008  000B2A  ECC5  F005         	call	_bip	;wreg free
  1009                           
  1010                           ;TOCTOC.c: 92: }
  1011  000B2E  0012               	return	
  1012  000B30                     l1368:
  1013                           
  1014                           ;TOCTOC.c: 93: else{
  1015                           ;TOCTOC.c: 94: clearLCD();
  1016  000B30  ECC1  F007         	call	_clearLCD	;wreg free
  1017                           
  1018                           ;TOCTOC.c: 95: set_line(0,3);
  1019  000B34  0E00               	movlw	0
  1020  000B36  6E13               	movwf	set_line@line+1,c
  1021  000B38  0E00               	movlw	0
  1022  000B3A  6E12               	movwf	set_line@line,c
  1023  000B3C  0E00               	movlw	0
  1024  000B3E  6E15               	movwf	set_line@pos+1,c
  1025  000B40  0E03               	movlw	3
  1026  000B42  6E14               	movwf	set_line@pos,c
  1027  000B44  EC8B  F007         	call	_set_line	;wreg free
  1028                           
  1029                           ;TOCTOC.c: 96: write_LCD("As senhas");
  1030  000B48  0E35               	movlw	low STR_6
  1031  000B4A  6E12               	movwf	write_LCD@c,c
  1032  000B4C  0E08               	movlw	high STR_6
  1033  000B4E  6E13               	movwf	write_LCD@c+1,c
  1034  000B50  EC0E  F007         	call	_write_LCD	;wreg free
  1035                           
  1036                           ;TOCTOC.c: 97: set_line(1,1);
  1037  000B54  0E00               	movlw	0
  1038  000B56  6E13               	movwf	set_line@line+1,c
  1039  000B58  0E01               	movlw	1
  1040  000B5A  6E12               	movwf	set_line@line,c
  1041  000B5C  0E00               	movlw	0
  1042  000B5E  6E15               	movwf	set_line@pos+1,c
  1043  000B60  0E01               	movlw	1
  1044  000B62  6E14               	movwf	set_line@pos,c
  1045  000B64  EC8B  F007         	call	_set_line	;wreg free
  1046                           
  1047                           ;TOCTOC.c: 98: write_LCD("nao coincidem");
  1048  000B68  0E0F               	movlw	low STR_9
  1049  000B6A  6E12               	movwf	write_LCD@c,c
  1050  000B6C  0E08               	movlw	high STR_9
  1051  000B6E  6E13               	movwf	write_LCD@c+1,c
  1052  000B70  EC0E  F007         	call	_write_LCD	;wreg free
  1053                           
  1054                           ;TOCTOC.c: 99: bip(4, 500);
  1055  000B74  0E00               	movlw	0
  1056  000B76  6E10               	movwf	bip@rounds+1,c
  1057  000B78  0E04               	movlw	4
  1058  000B7A  6E0F               	movwf	bip@rounds,c
  1059  000B7C  0E01               	movlw	1
  1060  000B7E  6E12               	movwf	bip@time+1,c
  1061  000B80  0EF4               	movlw	244
  1062  000B82  6E11               	movwf	bip@time,c
  1063  000B84  ECC5  F005         	call	_bip	;wreg free
  1064  000B88  0012               	return	
  1065  000B8A                     __end_of_cmpPass:
  1066                           	opt stack 0
  1067                           tblptru	equ	0xFF8
  1068                           tblptrh	equ	0xFF7
  1069                           intcon	equ	0xFF2
  1070                           intcon2	equ	0xFF1
  1071                           intcon3	equ	0xFF0
  1072                           indf2	equ	0xFDF
  1073                           fsr2h	equ	0xFDA
  1074                           fsr2l	equ	0xFD9
  1075                           status	equ	0xFD8
  1076                           
  1077 ;; *************** function _cmpSignal *****************
  1078 ;; Defined at:
  1079 ;;		line 36 in file "ReadSignal.c"
  1080 ;; Parameters:    Size  Location     Type
  1081 ;;  pass            2   14[COMRAM] PTR unsigned char 
  1082 ;;		 -> main@pass(2), 
  1083 ;;  toc             2   16[COMRAM] PTR unsigned char 
  1084 ;;		 -> main@toc(2), 
  1085 ;; Auto vars:     Size  Location     Type
  1086 ;;		None
  1087 ;; Return value:  Size  Location     Type
  1088 ;;                  2   14[COMRAM] int 
  1089 ;; Registers used:
  1090 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  1091 ;; Tracked objects:
  1092 ;;		On entry : 0/0
  1093 ;;		On exit  : 0/0
  1094 ;;		Unchanged: 0/0
  1095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1096 ;;      Params:         4       0       0       0       0       0       0       0       0
  1097 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1098 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1099 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1100 ;;Total ram usage:        6 bytes
  1101 ;; Hardware stack levels used:    1
  1102 ;; Hardware stack levels required when called:    1
  1103 ;; This function calls:
  1104 ;;		Nothing
  1105 ;; This function is called by:
  1106 ;;		_cmpPass
  1107 ;; This function uses a non-reentrant model
  1108 ;;
  1109                           
  1110                           	psect	text6
  1111  000DD0                     __ptext6:
  1112                           	opt stack 0
  1113  000DD0                     _cmpSignal:
  1114                           	opt stack 28
  1115                           
  1116                           ;ReadSignal.c: 38: if(pass[0] == toc[0] && pass[1] == toc[1])
  1117                           
  1118                           ;incstack = 0
  1119  000DD0  C011  FFD9         	movff	cmpSignal@toc,fsr2l
  1120  000DD4  C012  FFDA         	movff	cmpSignal@toc+1,fsr2h
  1121  000DD8  C00F  FFE1         	movff	cmpSignal@pass,fsr1l
  1122  000DDC  C010  FFE2         	movff	cmpSignal@pass+1,fsr1h
  1123  000DE0  50DE               	movf	postinc2,w,c
  1124  000DE2  18E6               	xorwf	postinc1,w,c
  1125  000DE4  A4D8               	btfss	status,2,c
  1126  000DE6  D015               	goto	l1244
  1127  000DE8  EE20 F001          	lfsr	2,1
  1128  000DEC  5011               	movf	cmpSignal@toc,w,c
  1129  000DEE  26D9               	addwf	fsr2l,f,c
  1130  000DF0  5012               	movf	cmpSignal@toc+1,w,c
  1131  000DF2  22DA               	addwfc	fsr2h,f,c
  1132  000DF4  EE10 F001          	lfsr	1,1
  1133  000DF8  500F               	movf	cmpSignal@pass,w,c
  1134  000DFA  26E1               	addwf	fsr1l,f,c
  1135  000DFC  5010               	movf	cmpSignal@pass+1,w,c
  1136  000DFE  22E2               	addwfc	fsr1h,f,c
  1137  000E00  50DE               	movf	postinc2,w,c
  1138  000E02  18E6               	xorwf	postinc1,w,c
  1139  000E04  A4D8               	btfss	status,2,c
  1140  000E06  D005               	goto	l1244
  1141                           
  1142                           ;ReadSignal.c: 39: return 1;
  1143  000E08  0E00               	movlw	0
  1144  000E0A  6E10               	movwf	?_cmpSignal+1,c
  1145  000E0C  0E01               	movlw	1
  1146  000E0E  6E0F               	movwf	?_cmpSignal,c
  1147  000E10  0012               	return	
  1148  000E12                     l1244:
  1149                           
  1150                           ;ReadSignal.c: 40: return 0;
  1151  000E12  0E00               	movlw	0
  1152  000E14  6E10               	movwf	?_cmpSignal+1,c
  1153  000E16  0E00               	movlw	0
  1154  000E18  6E0F               	movwf	?_cmpSignal,c
  1155  000E1A  0012               	return	
  1156  000E1C                     __end_of_cmpSignal:
  1157                           	opt stack 0
  1158                           tblptru	equ	0xFF8
  1159                           tblptrh	equ	0xFF7
  1160                           intcon	equ	0xFF2
  1161                           intcon2	equ	0xFF1
  1162                           intcon3	equ	0xFF0
  1163                           postinc1	equ	0xFE6
  1164                           fsr1h	equ	0xFE2
  1165                           fsr1l	equ	0xFE1
  1166                           indf2	equ	0xFDF
  1167                           postinc2	equ	0xFDE
  1168                           fsr2h	equ	0xFDA
  1169                           fsr2l	equ	0xFD9
  1170                           status	equ	0xFD8
  1171                           
  1172 ;; *************** function _bip *****************
  1173 ;; Defined at:
  1174 ;;		line 14 in file "Buzzer.c"
  1175 ;; Parameters:    Size  Location     Type
  1176 ;;  rounds          2   14[COMRAM] int 
  1177 ;;  time            2   16[COMRAM] int 
  1178 ;; Auto vars:     Size  Location     Type
  1179 ;;  j               2   20[COMRAM] int 
  1180 ;; Return value:  Size  Location     Type
  1181 ;;                  1    wreg      void 
  1182 ;; Registers used:
  1183 ;;		wreg, status,2, status,0
  1184 ;; Tracked objects:
  1185 ;;		On entry : 0/0
  1186 ;;		On exit  : 0/0
  1187 ;;		Unchanged: 0/0
  1188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1189 ;;      Params:         4       0       0       0       0       0       0       0       0
  1190 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1191 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1192 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1193 ;;Total ram usage:        8 bytes
  1194 ;; Hardware stack levels used:    1
  1195 ;; Hardware stack levels required when called:    1
  1196 ;; This function calls:
  1197 ;;		Nothing
  1198 ;; This function is called by:
  1199 ;;		_cmpPass
  1200 ;; This function uses a non-reentrant model
  1201 ;;
  1202                           
  1203                           	psect	text7
  1204  000B8A                     __ptext7:
  1205                           	opt stack 0
  1206  000B8A                     _bip:
  1207                           	opt stack 28
  1208                           
  1209                           ;Buzzer.c: 16: TRISCbits.RC2 = 0;
  1210                           
  1211                           ;incstack = 0
  1212  000B8A  9494               	bcf	3988,2,c	;volatile
  1213                           
  1214                           ;Buzzer.c: 17: PORTCbits.RC2 = 0;
  1215  000B8C  9482               	bcf	3970,2,c	;volatile
  1216                           
  1217                           ;Buzzer.c: 19: int j = 0;
  1218  000B8E  0E00               	movlw	0
  1219  000B90  6E16               	movwf	bip@j+1,c
  1220  000B92  0E00               	movlw	0
  1221  000B94  6E15               	movwf	bip@j,c
  1222                           
  1223                           ;Buzzer.c: 20: if(time == 500){
  1224  000B96  0EF4               	movlw	244
  1225  000B98  1811               	xorwf	bip@time,w,c
  1226  000B9A  E129               	bnz	l1262
  1227  000B9C  0412               	decf	bip@time+1,w,c
  1228  000B9E  B4D8               	btfsc	status,2,c
  1229  000BA0  D01B               	goto	l1260
  1230  000BA2  D025               	goto	l1262
  1231  000BA4                     l1256:
  1232                           
  1233                           ;Buzzer.c: 22: PORTCbits.RC2 = !PORTCbits.RC2;
  1234  000BA4  B482               	btfsc	3970,2,c	;volatile
  1235  000BA6  D003               	goto	u450
  1236  000BA8  6A13               	clrf	??_bip& (0+255),c
  1237  000BAA  2A13               	incf	??_bip& (0+255),f,c
  1238  000BAC  D001               	goto	u468
  1239  000BAE                     u450:
  1240  000BAE  6A13               	clrf	??_bip& (0+255),c
  1241  000BB0                     u468:
  1242  000BB0  4613               	rlncf	??_bip,f,c
  1243  000BB2  4613               	rlncf	??_bip,f,c
  1244  000BB4  5082               	movf	3970,w,c	;volatile
  1245  000BB6  1813               	xorwf	??_bip,w,c
  1246  000BB8  0BFB               	andlw	-5
  1247  000BBA  1813               	xorwf	??_bip,w,c
  1248  000BBC  6E82               	movwf	3970,c	;volatile
  1249                           
  1250                           ;Buzzer.c: 23: _delay((unsigned long)((500)*(16000000/4000.0)));
  1251  000BBE  0E0B               	movlw	11
  1252  000BC0  6E14               	movwf	(??_bip+1)& (0+255),c
  1253  000BC2  0E26               	movlw	38
  1254  000BC4  6E13               	movwf	??_bip& (0+255),c
  1255  000BC6  0E5E               	movlw	94
  1256  000BC8                     u627:
  1257  000BC8  2EE8               	decfsz	wreg,f,c
  1258  000BCA  D7FE               	bra	u627
  1259  000BCC  2E13               	decfsz	??_bip& (0+255),f,c
  1260  000BCE  D7FC               	bra	u627
  1261  000BD0  2E14               	decfsz	(??_bip+1)& (0+255),f,c
  1262  000BD2  D7FA               	bra	u627
  1263                           
  1264                           ;Buzzer.c: 24: j++;
  1265  000BD4  4A15               	infsnz	bip@j,f,c
  1266  000BD6  2A16               	incf	bip@j+1,f,c
  1267  000BD8                     l1260:
  1268  000BD8  500F               	movf	bip@rounds,w,c
  1269  000BDA  5C15               	subwf	bip@j,w,c
  1270  000BDC  5016               	movf	bip@j+1,w,c
  1271  000BDE  0A80               	xorlw	128
  1272  000BE0  6E13               	movwf	??_bip& (0+255),c
  1273  000BE2  5010               	movf	bip@rounds+1,w,c
  1274  000BE4  0A80               	xorlw	128
  1275  000BE6  5813               	subwfb	??_bip& (0+255),w,c
  1276  000BE8  B0D8               	btfsc	status,0,c
  1277  000BEA  0012               	return	
  1278  000BEC  D7DB               	goto	l1256
  1279  000BEE                     l1262:
  1280                           
  1281                           ;Buzzer.c: 27: else if(time == 1000){
  1282  000BEE  0EE8               	movlw	232
  1283  000BF0  1811               	xorwf	bip@time,w,c
  1284  000BF2  E12B               	bnz	l203
  1285  000BF4  0E03               	movlw	3
  1286  000BF6  1812               	xorwf	bip@time+1,w,c
  1287  000BF8  A4D8               	btfss	status,2,c
  1288  000BFA  0012               	return	
  1289  000BFC  D01B               	goto	l1270
  1290  000BFE                     l1266:
  1291                           
  1292                           ;Buzzer.c: 29: PORTCbits.RC2 = !PORTCbits.RC2;
  1293  000BFE  B482               	btfsc	3970,2,c	;volatile
  1294  000C00  D003               	goto	u490
  1295  000C02  6A13               	clrf	??_bip& (0+255),c
  1296  000C04  2A13               	incf	??_bip& (0+255),f,c
  1297  000C06  D001               	goto	u508
  1298  000C08                     u490:
  1299  000C08  6A13               	clrf	??_bip& (0+255),c
  1300  000C0A                     u508:
  1301  000C0A  4613               	rlncf	??_bip,f,c
  1302  000C0C  4613               	rlncf	??_bip,f,c
  1303  000C0E  5082               	movf	3970,w,c	;volatile
  1304  000C10  1813               	xorwf	??_bip,w,c
  1305  000C12  0BFB               	andlw	-5
  1306  000C14  1813               	xorwf	??_bip,w,c
  1307  000C16  6E82               	movwf	3970,c	;volatile
  1308                           
  1309                           ;Buzzer.c: 30: _delay((unsigned long)((1000)*(16000000/4000.0)));
  1310  000C18  0E15               	movlw	21
  1311  000C1A  6E14               	movwf	(??_bip+1)& (0+255),c
  1312  000C1C  0E4B               	movlw	75
  1313  000C1E  6E13               	movwf	??_bip& (0+255),c
  1314  000C20  0EBE               	movlw	190
  1315  000C22                     u637:
  1316  000C22  2EE8               	decfsz	wreg,f,c
  1317  000C24  D7FE               	bra	u637
  1318  000C26  2E13               	decfsz	??_bip& (0+255),f,c
  1319  000C28  D7FC               	bra	u637
  1320  000C2A  2E14               	decfsz	(??_bip+1)& (0+255),f,c
  1321  000C2C  D7FA               	bra	u637
  1322  000C2E  D000               	nop2	
  1323                           
  1324                           ;Buzzer.c: 31: j++;
  1325  000C30  4A15               	infsnz	bip@j,f,c
  1326  000C32  2A16               	incf	bip@j+1,f,c
  1327  000C34                     l1270:
  1328  000C34  500F               	movf	bip@rounds,w,c
  1329  000C36  5C15               	subwf	bip@j,w,c
  1330  000C38  5016               	movf	bip@j+1,w,c
  1331  000C3A  0A80               	xorlw	128
  1332  000C3C  6E13               	movwf	??_bip& (0+255),c
  1333  000C3E  5010               	movf	bip@rounds+1,w,c
  1334  000C40  0A80               	xorlw	128
  1335  000C42  5813               	subwfb	??_bip& (0+255),w,c
  1336  000C44  B0D8               	btfsc	status,0,c
  1337  000C46  0012               	return	
  1338  000C48  D7DA               	goto	l1266
  1339  000C4A                     l203:
  1340  000C4A  0012               	return		;funcret
  1341  000C4C                     __end_of_bip:
  1342                           	opt stack 0
  1343                           tblptru	equ	0xFF8
  1344                           tblptrh	equ	0xFF7
  1345                           intcon	equ	0xFF2
  1346                           intcon2	equ	0xFF1
  1347                           intcon3	equ	0xFF0
  1348                           wreg	equ	0xFE8
  1349                           postinc1	equ	0xFE6
  1350                           fsr1h	equ	0xFE2
  1351                           fsr1l	equ	0xFE1
  1352                           indf2	equ	0xFDF
  1353                           postinc2	equ	0xFDE
  1354                           fsr2h	equ	0xFDA
  1355                           fsr2l	equ	0xFD9
  1356                           status	equ	0xFD8
  1357                           
  1358 ;; *************** function _cadastrarSenha *****************
  1359 ;; Defined at:
  1360 ;;		line 19 in file "TOCTOC.c"
  1361 ;; Parameters:    Size  Location     Type
  1362 ;;  pass            2   30[COMRAM] PTR unsigned char 
  1363 ;;		 -> main@pass(2), 
  1364 ;; Auto vars:     Size  Location     Type
  1365 ;;  i               2   34[COMRAM] int 
  1366 ;; Return value:  Size  Location     Type
  1367 ;;                  1    wreg      void 
  1368 ;; Registers used:
  1369 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1370 ;; Tracked objects:
  1371 ;;		On entry : 0/0
  1372 ;;		On exit  : 0/0
  1373 ;;		Unchanged: 0/0
  1374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1375 ;;      Params:         2       0       0       0       0       0       0       0       0
  1376 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1377 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1378 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1379 ;;Total ram usage:        6 bytes
  1380 ;; Hardware stack levels used:    1
  1381 ;; Hardware stack levels required when called:    4
  1382 ;; This function calls:
  1383 ;;		_clearLCD
  1384 ;;		_readSignal
  1385 ;;		_send_msg
  1386 ;;		_set_line
  1387 ;;		_write_LCD
  1388 ;; This function is called by:
  1389 ;;		_main
  1390 ;; This function uses a non-reentrant model
  1391 ;;
  1392                           
  1393                           	psect	text8
  1394  00084E                     __ptext8:
  1395                           	opt stack 0
  1396  00084E                     _cadastrarSenha:
  1397                           	opt stack 26
  1398                           
  1399                           ;TOCTOC.c: 21: int i = 0;
  1400                           
  1401                           ;incstack = 0
  1402  00084E  0E00               	movlw	0
  1403  000850  6E24               	movwf	cadastrarSenha@i+1,c
  1404  000852  0E00               	movlw	0
  1405  000854  6E23               	movwf	cadastrarSenha@i,c
  1406                           
  1407                           ;TOCTOC.c: 23: pass[0] = 0x00;
  1408  000856  C01F  FFD9         	movff	cadastrarSenha@pass,fsr2l
  1409  00085A  C020  FFDA         	movff	cadastrarSenha@pass+1,fsr2h
  1410  00085E  0E00               	movlw	0
  1411  000860  6EDF               	movwf	indf2,c
  1412                           
  1413                           ;TOCTOC.c: 24: pass[1] = 0x00;
  1414  000862  EE20 F001          	lfsr	2,1
  1415  000866  501F               	movf	cadastrarSenha@pass,w,c
  1416  000868  26D9               	addwf	fsr2l,f,c
  1417  00086A  5020               	movf	cadastrarSenha@pass+1,w,c
  1418  00086C  22DA               	addwfc	fsr2h,f,c
  1419  00086E  0E00               	movlw	0
  1420  000870  6EDF               	movwf	indf2,c
  1421                           
  1422                           ;TOCTOC.c: 26: clearLCD();
  1423  000872  ECC1  F007         	call	_clearLCD	;wreg free
  1424                           
  1425                           ;TOCTOC.c: 27: set_line(0,1);
  1426  000876  0E00               	movlw	0
  1427  000878  6E13               	movwf	set_line@line+1,c
  1428  00087A  0E00               	movlw	0
  1429  00087C  6E12               	movwf	set_line@line,c
  1430  00087E  0E00               	movlw	0
  1431  000880  6E15               	movwf	set_line@pos+1,c
  1432  000882  0E01               	movlw	1
  1433  000884  6E14               	movwf	set_line@pos,c
  1434  000886  EC8B  F007         	call	_set_line	;wreg free
  1435                           
  1436                           ;TOCTOC.c: 28: write_LCD("Cadastre sua");
  1437  00088A  0E1D               	movlw	low STR_1
  1438  00088C  6E12               	movwf	write_LCD@c,c
  1439  00088E  0E08               	movlw	high STR_1
  1440  000890  6E13               	movwf	write_LCD@c+1,c
  1441  000892  EC0E  F007         	call	_write_LCD	;wreg free
  1442                           
  1443                           ;TOCTOC.c: 29: set_line(1,5);
  1444  000896  0E00               	movlw	0
  1445  000898  6E13               	movwf	set_line@line+1,c
  1446  00089A  0E01               	movlw	1
  1447  00089C  6E12               	movwf	set_line@line,c
  1448  00089E  0E00               	movlw	0
  1449  0008A0  6E15               	movwf	set_line@pos+1,c
  1450  0008A2  0E05               	movlw	5
  1451  0008A4  6E14               	movwf	set_line@pos,c
  1452  0008A6  EC8B  F007         	call	_set_line	;wreg free
  1453                           
  1454                           ;TOCTOC.c: 30: write_LCD("senha");
  1455  0008AA  0E47               	movlw	low STR_2
  1456  0008AC  6E12               	movwf	write_LCD@c,c
  1457  0008AE  0E08               	movlw	high STR_2
  1458  0008B0  6E13               	movwf	write_LCD@c+1,c
  1459  0008B2  EC0E  F007         	call	_write_LCD	;wreg free
  1460                           
  1461                           ;TOCTOC.c: 32: while(i < 4){
  1462  0008B6  D04C               	goto	l1306
  1463  0008B8                     l1288:
  1464                           
  1465                           ;TOCTOC.c: 33: set_line(1,15);
  1466  0008B8  0E00               	movlw	0
  1467  0008BA  6E13               	movwf	set_line@line+1,c
  1468  0008BC  0E01               	movlw	1
  1469  0008BE  6E12               	movwf	set_line@line,c
  1470  0008C0  0E00               	movlw	0
  1471  0008C2  6E15               	movwf	set_line@pos+1,c
  1472  0008C4  0E0F               	movlw	15
  1473  0008C6  6E14               	movwf	set_line@pos,c
  1474  0008C8  EC8B  F007         	call	_set_line	;wreg free
  1475                           
  1476                           ;TOCTOC.c: 34: send_msg('1'+ i);
  1477  0008CC  5023               	movf	cadastrarSenha@i,w,c
  1478  0008CE  0F31               	addlw	49
  1479  0008D0  EC4F  F007         	call	_send_msg
  1480                           
  1481                           ;TOCTOC.c: 35: if(i == 0)
  1482  0008D4  5023               	movf	cadastrarSenha@i,w,c
  1483  0008D6  1024               	iorwf	cadastrarSenha@i+1,w,c
  1484  0008D8  A4D8               	btfss	status,2,c
  1485  0008DA  D00B               	goto	l1294
  1486                           
  1487                           ;TOCTOC.c: 36: readSignal(&pass[0], 0);
  1488  0008DC  C01F  F013         	movff	cadastrarSenha@pass,readSignal@signal
  1489  0008E0  C020  F014         	movff	cadastrarSenha@pass+1,readSignal@signal+1
  1490  0008E4  0E00               	movlw	0
  1491  0008E6  6E16               	movwf	readSignal@pos+1,c
  1492  0008E8  0E00               	movlw	0
  1493  0008EA  6E15               	movwf	readSignal@pos,c
  1494  0008EC  EC26  F006         	call	_readSignal	;wreg free
  1495  0008F0  D02D               	goto	l1304
  1496  0008F2                     l1294:
  1497                           
  1498                           ;TOCTOC.c: 37: else if(i == 1)
  1499  0008F2  0423               	decf	cadastrarSenha@i,w,c
  1500  0008F4  1024               	iorwf	cadastrarSenha@i+1,w,c
  1501  0008F6  A4D8               	btfss	status,2,c
  1502  0008F8  D00B               	goto	l1298
  1503                           
  1504                           ;TOCTOC.c: 38: readSignal(&pass[0], 1);
  1505  0008FA  C01F  F013         	movff	cadastrarSenha@pass,readSignal@signal
  1506  0008FE  C020  F014         	movff	cadastrarSenha@pass+1,readSignal@signal+1
  1507  000902  0E00               	movlw	0
  1508  000904  6E16               	movwf	readSignal@pos+1,c
  1509  000906  0E01               	movlw	1
  1510  000908  6E15               	movwf	readSignal@pos,c
  1511  00090A  EC26  F006         	call	_readSignal	;wreg free
  1512  00090E  D01E               	goto	l1304
  1513  000910                     l1298:
  1514                           
  1515                           ;TOCTOC.c: 39: else if(i == 2)
  1516  000910  0E02               	movlw	2
  1517  000912  1823               	xorwf	cadastrarSenha@i,w,c
  1518  000914  1024               	iorwf	cadastrarSenha@i+1,w,c
  1519  000916  A4D8               	btfss	status,2,c
  1520  000918  D00D               	goto	l1302
  1521                           
  1522                           ;TOCTOC.c: 40: readSignal(&pass[1], 0);
  1523  00091A  0E01               	movlw	1
  1524  00091C  241F               	addwf	cadastrarSenha@pass,w,c
  1525  00091E  6E13               	movwf	readSignal@signal,c
  1526  000920  0E00               	movlw	0
  1527  000922  2020               	addwfc	cadastrarSenha@pass+1,w,c
  1528  000924  6E14               	movwf	readSignal@signal+1,c
  1529  000926  0E00               	movlw	0
  1530  000928  6E16               	movwf	readSignal@pos+1,c
  1531  00092A  0E00               	movlw	0
  1532  00092C  6E15               	movwf	readSignal@pos,c
  1533  00092E  EC26  F006         	call	_readSignal	;wreg free
  1534  000932  D00C               	goto	l1304
  1535  000934                     l1302:
  1536                           
  1537                           ;TOCTOC.c: 41: else
  1538                           ;TOCTOC.c: 42: readSignal(&pass[1], 1);
  1539  000934  0E01               	movlw	1
  1540  000936  241F               	addwf	cadastrarSenha@pass,w,c
  1541  000938  6E13               	movwf	readSignal@signal,c
  1542  00093A  0E00               	movlw	0
  1543  00093C  2020               	addwfc	cadastrarSenha@pass+1,w,c
  1544  00093E  6E14               	movwf	readSignal@signal+1,c
  1545  000940  0E00               	movlw	0
  1546  000942  6E16               	movwf	readSignal@pos+1,c
  1547  000944  0E01               	movlw	1
  1548  000946  6E15               	movwf	readSignal@pos,c
  1549  000948  EC26  F006         	call	_readSignal	;wreg free
  1550  00094C                     l1304:
  1551                           
  1552                           ;TOCTOC.c: 43: i++;
  1553  00094C  4A23               	infsnz	cadastrarSenha@i,f,c
  1554  00094E  2A24               	incf	cadastrarSenha@i+1,f,c
  1555  000950                     l1306:
  1556  000950  BE24               	btfsc	cadastrarSenha@i+1,7,c
  1557  000952  D7B2               	goto	l1288
  1558  000954  5024               	movf	cadastrarSenha@i+1,w,c
  1559  000956  E104               	bnz	l1308
  1560  000958  0E04               	movlw	4
  1561  00095A  5C23               	subwf	cadastrarSenha@i,w,c
  1562  00095C  A0D8               	btfss	status,0,c
  1563  00095E  D7AC               	goto	l1288
  1564  000960                     l1308:
  1565                           
  1566                           ;TOCTOC.c: 44: }
  1567                           ;TOCTOC.c: 46: clearLCD();
  1568  000960  ECC1  F007         	call	_clearLCD	;wreg free
  1569                           
  1570                           ;TOCTOC.c: 47: set_line(0,5);
  1571  000964  0E00               	movlw	0
  1572  000966  6E13               	movwf	set_line@line+1,c
  1573  000968  0E00               	movlw	0
  1574  00096A  6E12               	movwf	set_line@line,c
  1575  00096C  0E00               	movlw	0
  1576  00096E  6E15               	movwf	set_line@pos+1,c
  1577  000970  0E05               	movlw	5
  1578  000972  6E14               	movwf	set_line@pos,c
  1579  000974  EC8B  F007         	call	_set_line	;wreg free
  1580                           
  1581                           ;TOCTOC.c: 48: write_LCD("Leitura");
  1582  000978  0E3F               	movlw	low STR_3
  1583  00097A  6E12               	movwf	write_LCD@c,c
  1584  00097C  0E08               	movlw	high STR_3
  1585  00097E  6E13               	movwf	write_LCD@c+1,c
  1586  000980  EC0E  F007         	call	_write_LCD	;wreg free
  1587                           
  1588                           ;TOCTOC.c: 49: set_line(1,3);
  1589  000984  0E00               	movlw	0
  1590  000986  6E13               	movwf	set_line@line+1,c
  1591  000988  0E01               	movlw	1
  1592  00098A  6E12               	movwf	set_line@line,c
  1593  00098C  0E00               	movlw	0
  1594  00098E  6E15               	movwf	set_line@pos+1,c
  1595  000990  0E03               	movlw	3
  1596  000992  6E14               	movwf	set_line@pos,c
  1597  000994  EC8B  F007         	call	_set_line	;wreg free
  1598                           
  1599                           ;TOCTOC.c: 50: write_LCD("Finalizada");
  1600  000998  0E2A               	movlw	low STR_4
  1601  00099A  6E12               	movwf	write_LCD@c,c
  1602  00099C  0E08               	movlw	high STR_4
  1603  00099E  6E13               	movwf	write_LCD@c+1,c
  1604  0009A0  EC0E  F007         	call	_write_LCD	;wreg free
  1605                           
  1606                           ;TOCTOC.c: 51: _delay((unsigned long)((3000)*(16000000/4000.0)));
  1607  0009A4  0E3D               	movlw	61
  1608  0009A6  6E22               	movwf	(??_cadastrarSenha+1)& (0+255),c
  1609  0009A8  0EE1               	movlw	225
  1610  0009AA  6E21               	movwf	??_cadastrarSenha& (0+255),c
  1611  0009AC  0E40               	movlw	64
  1612  0009AE                     u647:
  1613  0009AE  2EE8               	decfsz	wreg,f,c
  1614  0009B0  D7FE               	bra	u647
  1615  0009B2  2E21               	decfsz	??_cadastrarSenha& (0+255),f,c
  1616  0009B4  D7FC               	bra	u647
  1617  0009B6  2E22               	decfsz	(??_cadastrarSenha+1)& (0+255),f,c
  1618  0009B8  D7FA               	bra	u647
  1619  0009BA  0012               	return		;funcret
  1620  0009BC                     __end_of_cadastrarSenha:
  1621                           	opt stack 0
  1622                           tblptru	equ	0xFF8
  1623                           tblptrh	equ	0xFF7
  1624                           intcon	equ	0xFF2
  1625                           intcon2	equ	0xFF1
  1626                           intcon3	equ	0xFF0
  1627                           wreg	equ	0xFE8
  1628                           postinc1	equ	0xFE6
  1629                           fsr1h	equ	0xFE2
  1630                           fsr1l	equ	0xFE1
  1631                           indf2	equ	0xFDF
  1632                           postinc2	equ	0xFDE
  1633                           fsr2h	equ	0xFDA
  1634                           fsr2l	equ	0xFD9
  1635                           status	equ	0xFD8
  1636                           
  1637 ;; *************** function _write_LCD *****************
  1638 ;; Defined at:
  1639 ;;		line 59 in file "LCD.c"
  1640 ;; Parameters:    Size  Location     Type
  1641 ;;  c               2   17[COMRAM] PTR unsigned char 
  1642 ;;		 -> STR_9(14), STR_8(10), STR_7(10), STR_6(10), 
  1643 ;;		 -> STR_5(14), STR_4(11), STR_3(8), STR_2(6), 
  1644 ;;		 -> STR_1(13), 
  1645 ;; Auto vars:     Size  Location     Type
  1646 ;;  i               2   21[COMRAM] int 
  1647 ;; Return value:  Size  Location     Type
  1648 ;;                  1    wreg      void 
  1649 ;; Registers used:
  1650 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1651 ;; Tracked objects:
  1652 ;;		On entry : 0/0
  1653 ;;		On exit  : 0/0
  1654 ;;		Unchanged: 0/0
  1655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1656 ;;      Params:         2       0       0       0       0       0       0       0       0
  1657 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1658 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1659 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1660 ;;Total ram usage:        6 bytes
  1661 ;; Hardware stack levels used:    1
  1662 ;; Hardware stack levels required when called:    3
  1663 ;; This function calls:
  1664 ;;		_send_msg
  1665 ;; This function is called by:
  1666 ;;		_cadastrarSenha
  1667 ;;		_lerToque
  1668 ;;		_cmpPass
  1669 ;; This function uses a non-reentrant model
  1670 ;;
  1671                           
  1672                           	psect	text9
  1673  000E1C                     __ptext9:
  1674                           	opt stack 0
  1675  000E1C                     _write_LCD:
  1676                           	opt stack 26
  1677                           
  1678                           ;LCD.c: 61: int i = 0;
  1679                           
  1680                           ;incstack = 0
  1681  000E1C  0E00               	movlw	0
  1682  000E1E  6E17               	movwf	write_LCD@i+1,c
  1683  000E20  0E00               	movlw	0
  1684  000E22  6E16               	movwf	write_LCD@i,c
  1685                           
  1686                           ;LCD.c: 62: for(; c[i] != '\0'; i++)
  1687  000E24  D010               	goto	l1204
  1688  000E26                     l1200:
  1689                           
  1690                           ;LCD.c: 63: send_msg(c[i]);
  1691  000E26  5016               	movf	write_LCD@i,w,c
  1692  000E28  2412               	addwf	write_LCD@c,w,c
  1693  000E2A  6E14               	movwf	??_write_LCD& (0+255),c
  1694  000E2C  5017               	movf	write_LCD@i+1,w,c
  1695  000E2E  2013               	addwfc	write_LCD@c+1,w,c
  1696  000E30  6E15               	movwf	(??_write_LCD+1)& (0+255),c
  1697  000E32  C014  FFF6         	movff	??_write_LCD,tblptrl
  1698  000E36  C015  FFF7         	movff	??_write_LCD+1,tblptrh
  1699  000E3A                     	if	0	;tblptru may be non-zero
  1700  000E3A                     	endif
  1701  000E3A                     	if	0	;tblptru may be non-zero
  1702  000E3A                     	endif
  1703  000E3A  0008               	tblrd		*
  1704  000E3C  50F5               	movf	tablat,w,c
  1705  000E3E  EC4F  F007         	call	_send_msg
  1706  000E42  4A16               	infsnz	write_LCD@i,f,c
  1707  000E44  2A17               	incf	write_LCD@i+1,f,c
  1708  000E46                     l1204:
  1709  000E46  5016               	movf	write_LCD@i,w,c
  1710  000E48  2412               	addwf	write_LCD@c,w,c
  1711  000E4A  6E14               	movwf	??_write_LCD& (0+255),c
  1712  000E4C  5017               	movf	write_LCD@i+1,w,c
  1713  000E4E  2013               	addwfc	write_LCD@c+1,w,c
  1714  000E50  6E15               	movwf	(??_write_LCD+1)& (0+255),c
  1715  000E52  C014  FFF6         	movff	??_write_LCD,tblptrl
  1716  000E56  C015  FFF7         	movff	??_write_LCD+1,tblptrh
  1717  000E5A                     	if	0	;tblptru may be non-zero
  1718  000E5A                     	endif
  1719  000E5A                     	if	0	;tblptru may be non-zero
  1720  000E5A                     	endif
  1721  000E5A  0008               	tblrd		*
  1722  000E5C  50F5               	movf	tablat,w,c
  1723  000E5E  0900               	iorlw	0
  1724  000E60  B4D8               	btfsc	status,2,c
  1725  000E62  0012               	return	
  1726  000E64  D7E0               	goto	l1200
  1727  000E66                     __end_of_write_LCD:
  1728                           	opt stack 0
  1729                           tblptru	equ	0xFF8
  1730                           tblptrh	equ	0xFF7
  1731                           tblptrl	equ	0xFF6
  1732                           tablat	equ	0xFF5
  1733                           intcon	equ	0xFF2
  1734                           intcon2	equ	0xFF1
  1735                           intcon3	equ	0xFF0
  1736                           wreg	equ	0xFE8
  1737                           postinc1	equ	0xFE6
  1738                           fsr1h	equ	0xFE2
  1739                           fsr1l	equ	0xFE1
  1740                           indf2	equ	0xFDF
  1741                           postinc2	equ	0xFDE
  1742                           fsr2h	equ	0xFDA
  1743                           fsr2l	equ	0xFD9
  1744                           status	equ	0xFD8
  1745                           
  1746 ;; *************** function _send_msg *****************
  1747 ;; Defined at:
  1748 ;;		line 35 in file "LCD.c"
  1749 ;; Parameters:    Size  Location     Type
  1750 ;;  msg             1    wreg     unsigned char 
  1751 ;; Auto vars:     Size  Location     Type
  1752 ;;  msg             1   16[COMRAM] unsigned char 
  1753 ;; Return value:  Size  Location     Type
  1754 ;;                  1    wreg      void 
  1755 ;; Registers used:
  1756 ;;		wreg, status,2, cstack
  1757 ;; Tracked objects:
  1758 ;;		On entry : 0/0
  1759 ;;		On exit  : 0/0
  1760 ;;		Unchanged: 0/0
  1761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1762 ;;      Params:         0       0       0       0       0       0       0       0       0
  1763 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1764 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1765 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1766 ;;Total ram usage:        2 bytes
  1767 ;; Hardware stack levels used:    1
  1768 ;; Hardware stack levels required when called:    2
  1769 ;; This function calls:
  1770 ;;		_ena_pulse
  1771 ;; This function is called by:
  1772 ;;		_write_LCD
  1773 ;;		_cadastrarSenha
  1774 ;;		_lerToque
  1775 ;; This function uses a non-reentrant model
  1776 ;;
  1777                           
  1778                           	psect	text10
  1779  000E9E                     __ptext10:
  1780                           	opt stack 0
  1781  000E9E                     _send_msg:
  1782                           	opt stack 26
  1783                           
  1784                           ;incstack = 0
  1785                           ;send_msg@msg stored from wreg
  1786  000E9E  6E11               	movwf	send_msg@msg,c
  1787                           
  1788                           ;LCD.c: 37: PORTD = msg;
  1789  000EA0  C011  FF83         	movff	send_msg@msg,3971	;volatile
  1790                           
  1791                           ;LCD.c: 38: PORTBbits.RB3 = 1;
  1792  000EA4  8681               	bsf	3969,3,c	;volatile
  1793                           
  1794                           ;LCD.c: 39: _delay((unsigned long)((1)*(16000000/4000.0)));
  1795  000EA6  0E06               	movlw	6
  1796  000EA8  6E10               	movwf	??_send_msg& (0+255),c
  1797  000EAA  0E30               	movlw	48
  1798  000EAC                     u657:
  1799  000EAC  2EE8               	decfsz	wreg,f,c
  1800  000EAE  D7FE               	bra	u657
  1801  000EB0  2E10               	decfsz	??_send_msg& (0+255),f,c
  1802  000EB2  D7FC               	bra	u657
  1803  000EB4  D000               	nop2	
  1804                           
  1805                           ;LCD.c: 40: ena_pulse();
  1806  000EB6  EC33  F007         	call	_ena_pulse	;wreg free
  1807                           
  1808                           ;LCD.c: 41: _delay((unsigned long)((1)*(16000000/4000.0)));
  1809  000EBA  0E06               	movlw	6
  1810  000EBC  6E10               	movwf	??_send_msg& (0+255),c
  1811  000EBE  0E30               	movlw	48
  1812  000EC0                     u667:
  1813  000EC0  2EE8               	decfsz	wreg,f,c
  1814  000EC2  D7FE               	bra	u667
  1815  000EC4  2E10               	decfsz	??_send_msg& (0+255),f,c
  1816  000EC6  D7FC               	bra	u667
  1817  000EC8  D000               	nop2	
  1818                           
  1819                           ;LCD.c: 42: PORTBbits.RB3 = 0;
  1820  000ECA  9681               	bcf	3969,3,c	;volatile
  1821  000ECC  0012               	return		;funcret
  1822  000ECE                     __end_of_send_msg:
  1823                           	opt stack 0
  1824                           tblptru	equ	0xFF8
  1825                           tblptrh	equ	0xFF7
  1826                           tblptrl	equ	0xFF6
  1827                           tablat	equ	0xFF5
  1828                           intcon	equ	0xFF2
  1829                           intcon2	equ	0xFF1
  1830                           intcon3	equ	0xFF0
  1831                           wreg	equ	0xFE8
  1832                           postinc1	equ	0xFE6
  1833                           fsr1h	equ	0xFE2
  1834                           fsr1l	equ	0xFE1
  1835                           indf2	equ	0xFDF
  1836                           postinc2	equ	0xFDE
  1837                           fsr2h	equ	0xFDA
  1838                           fsr2l	equ	0xFD9
  1839                           status	equ	0xFD8
  1840                           
  1841 ;; *************** function _set_line *****************
  1842 ;; Defined at:
  1843 ;;		line 66 in file "LCD.c"
  1844 ;; Parameters:    Size  Location     Type
  1845 ;;  line            2   17[COMRAM] int 
  1846 ;;  pos             2   19[COMRAM] int 
  1847 ;; Auto vars:     Size  Location     Type
  1848 ;;  cursor          1   21[COMRAM] unsigned char 
  1849 ;; Return value:  Size  Location     Type
  1850 ;;                  1    wreg      void 
  1851 ;; Registers used:
  1852 ;;		wreg, status,2, status,0, cstack
  1853 ;; Tracked objects:
  1854 ;;		On entry : 0/0
  1855 ;;		On exit  : 0/0
  1856 ;;		Unchanged: 0/0
  1857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1858 ;;      Params:         4       0       0       0       0       0       0       0       0
  1859 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1860 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1861 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1862 ;;Total ram usage:        5 bytes
  1863 ;; Hardware stack levels used:    1
  1864 ;; Hardware stack levels required when called:    3
  1865 ;; This function calls:
  1866 ;;		_send_cfg
  1867 ;; This function is called by:
  1868 ;;		_cadastrarSenha
  1869 ;;		_lerToque
  1870 ;;		_cmpPass
  1871 ;; This function uses a non-reentrant model
  1872 ;;
  1873                           
  1874                           	psect	text11
  1875  000F16                     __ptext11:
  1876                           	opt stack 0
  1877  000F16                     _set_line:
  1878                           	opt stack 26
  1879                           
  1880                           ;LCD.c: 68: char cursor;
  1881                           ;LCD.c: 69: if(line == 0)
  1882                           
  1883                           ;incstack = 0
  1884  000F16  5012               	movf	set_line@line,w,c
  1885  000F18  1013               	iorwf	set_line@line+1,w,c
  1886  000F1A  A4D8               	btfss	status,2,c
  1887  000F1C  D003               	goto	l1210
  1888                           
  1889                           ;LCD.c: 70: cursor = 0x80 + pos;
  1890  000F1E  5014               	movf	set_line@pos,w,c
  1891  000F20  0F80               	addlw	128
  1892  000F22  D002               	goto	L1
  1893  000F24                     l1210:
  1894                           
  1895                           ;LCD.c: 71: else
  1896                           ;LCD.c: 72: cursor = 0xC0 + pos;
  1897  000F24  5014               	movf	set_line@pos,w,c
  1898  000F26  0FC0               	addlw	192
  1899  000F28                     L1:
  1900  000F28  6E16               	movwf	set_line@cursor,c
  1901                           
  1902                           ;LCD.c: 73: send_cfg(cursor);
  1903  000F2A  5016               	movf	set_line@cursor,w,c
  1904  000F2C  EC7C  F007         	call	_send_cfg
  1905  000F30  0012               	return		;funcret
  1906  000F32                     __end_of_set_line:
  1907                           	opt stack 0
  1908                           tblptru	equ	0xFF8
  1909                           tblptrh	equ	0xFF7
  1910                           tblptrl	equ	0xFF6
  1911                           tablat	equ	0xFF5
  1912                           intcon	equ	0xFF2
  1913                           intcon2	equ	0xFF1
  1914                           intcon3	equ	0xFF0
  1915                           wreg	equ	0xFE8
  1916                           postinc1	equ	0xFE6
  1917                           fsr1h	equ	0xFE2
  1918                           fsr1l	equ	0xFE1
  1919                           indf2	equ	0xFDF
  1920                           postinc2	equ	0xFDE
  1921                           fsr2h	equ	0xFDA
  1922                           fsr2l	equ	0xFD9
  1923                           status	equ	0xFD8
  1924                           
  1925 ;; *************** function _readSignal *****************
  1926 ;; Defined at:
  1927 ;;		line 13 in file "ReadSignal.c"
  1928 ;; Parameters:    Size  Location     Type
  1929 ;;  signal          2   18[COMRAM] PTR unsigned char 
  1930 ;;		 -> main@toc(2), main@pass(2), 
  1931 ;;  pos             2   20[COMRAM] int 
  1932 ;; Auto vars:     Size  Location     Type
  1933 ;;  j               2   28[COMRAM] int 
  1934 ;;  i               2   26[COMRAM] int 
  1935 ;;  limite          2   24[COMRAM] int 
  1936 ;; Return value:  Size  Location     Type
  1937 ;;                  1    wreg      void 
  1938 ;; Registers used:
  1939 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1940 ;; Tracked objects:
  1941 ;;		On entry : 0/0
  1942 ;;		On exit  : 0/0
  1943 ;;		Unchanged: 0/0
  1944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1945 ;;      Params:         4       0       0       0       0       0       0       0       0
  1946 ;;      Locals:         6       0       0       0       0       0       0       0       0
  1947 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1948 ;;      Totals:        12       0       0       0       0       0       0       0       0
  1949 ;;Total ram usage:       12 bytes
  1950 ;; Hardware stack levels used:    1
  1951 ;; Hardware stack levels required when called:    2
  1952 ;; This function calls:
  1953 ;;		_read_ADC
  1954 ;; This function is called by:
  1955 ;;		_cadastrarSenha
  1956 ;;		_lerToque
  1957 ;; This function uses a non-reentrant model
  1958 ;;
  1959                           
  1960                           	psect	text12
  1961  000C4C                     __ptext12:
  1962                           	opt stack 0
  1963  000C4C                     _readSignal:
  1964                           	opt stack 27
  1965                           
  1966                           ;ReadSignal.c: 15: int j = 0;
  1967                           
  1968                           ;incstack = 0
  1969  000C4C  0E00               	movlw	0
  1970  000C4E  6E1E               	movwf	readSignal@j+1,c
  1971  000C50  0E00               	movlw	0
  1972  000C52  6E1D               	movwf	readSignal@j,c
  1973                           
  1974                           ;ReadSignal.c: 16: if(pos == 1)
  1975  000C54  0415               	decf	readSignal@pos,w,c
  1976  000C56  1016               	iorwf	readSignal@pos+1,w,c
  1977  000C58  A4D8               	btfss	status,2,c
  1978  000C5A  D004               	goto	l1220
  1979                           
  1980                           ;ReadSignal.c: 17: j = 4;
  1981  000C5C  0E00               	movlw	0
  1982  000C5E  6E1E               	movwf	readSignal@j+1,c
  1983  000C60  0E04               	movlw	4
  1984  000C62  6E1D               	movwf	readSignal@j,c
  1985  000C64                     l1220:
  1986                           
  1987                           ;ReadSignal.c: 18: int limite;
  1988                           ;ReadSignal.c: 19: limite = j + 4;
  1989  000C64  0E04               	movlw	4
  1990  000C66  241D               	addwf	readSignal@j,w,c
  1991  000C68  6E19               	movwf	readSignal@limite,c
  1992  000C6A  0E00               	movlw	0
  1993  000C6C  201E               	addwfc	readSignal@j+1,w,c
  1994  000C6E  6E1A               	movwf	readSignal@limite+1,c
  1995                           
  1996                           ;ReadSignal.c: 20: int i;
  1997                           ;ReadSignal.c: 22: while(j < limite){
  1998  000C70  D033               	goto	l174
  1999  000C72                     l1222:
  2000                           
  2001                           ;ReadSignal.c: 24: i = 0;
  2002  000C72  0E00               	movlw	0
  2003  000C74  6E1C               	movwf	readSignal@i+1,c
  2004  000C76  0E00               	movlw	0
  2005  000C78  6E1B               	movwf	readSignal@i,c
  2006                           
  2007                           ;ReadSignal.c: 25: while(i < 500){
  2008  000C7A  D022               	goto	l1232
  2009  000C7C                     l1224:
  2010                           
  2011                           ;ReadSignal.c: 26: if((int)read_ADC() > 9){
  2012  000C7C  EC99  F007         	call	_read_ADC	;wreg free
  2013  000C80  5010               	movf	?_read_ADC+1,w,c
  2014  000C82  E104               	bnz	u380
  2015  000C84  0E0A               	movlw	10
  2016  000C86  5C0F               	subwf	?_read_ADC,w,c
  2017  000C88  A0D8               	btfss	status,0,c
  2018  000C8A  D010               	goto	l1228
  2019  000C8C                     u380:
  2020                           
  2021                           ;ReadSignal.c: 27: *signal |= (0x03<<j);
  2022  000C8C  C01D  F017         	movff	readSignal@j,??_readSignal
  2023  000C90  0E03               	movlw	3
  2024  000C92  6E18               	movwf	(??_readSignal+1)& (0+255),c
  2025  000C94  2A17               	incf	??_readSignal,f,c
  2026  000C96  D002               	goto	u394
  2027  000C98                     u395:
  2028  000C98  90D8               	bcf	status,0,c
  2029  000C9A  3618               	rlcf	??_readSignal+1,f,c
  2030  000C9C                     u394:
  2031  000C9C  2E17               	decfsz	??_readSignal,f,c
  2032  000C9E  D7FC               	goto	u395
  2033  000CA0  C013  FFD9         	movff	readSignal@signal,fsr2l
  2034  000CA4  C014  FFDA         	movff	readSignal@signal+1,fsr2h
  2035  000CA8  5018               	movf	??_readSignal+1,w,c
  2036  000CAA  12DF               	iorwf	indf2,f,c
  2037  000CAC                     l1228:
  2038                           
  2039                           ;ReadSignal.c: 28: }
  2040                           ;ReadSignal.c: 29: _delay((unsigned long)((1)*(16000000/4000.0)));
  2041  000CAC  0E06               	movlw	6
  2042  000CAE  6E17               	movwf	??_readSignal& (0+255),c
  2043  000CB0  0E30               	movlw	48
  2044  000CB2                     u677:
  2045  000CB2  2EE8               	decfsz	wreg,f,c
  2046  000CB4  D7FE               	bra	u677
  2047  000CB6  2E17               	decfsz	??_readSignal& (0+255),f,c
  2048  000CB8  D7FC               	bra	u677
  2049  000CBA  D000               	nop2	
  2050                           
  2051                           ;ReadSignal.c: 30: i++;
  2052  000CBC  4A1B               	infsnz	readSignal@i,f,c
  2053  000CBE  2A1C               	incf	readSignal@i+1,f,c
  2054  000CC0                     l1232:
  2055  000CC0  BE1C               	btfsc	readSignal@i+1,7,c
  2056  000CC2  D7DC               	goto	l1224
  2057  000CC4  0EF4               	movlw	244
  2058  000CC6  5C1B               	subwf	readSignal@i,w,c
  2059  000CC8  0E01               	movlw	1
  2060  000CCA  581C               	subwfb	readSignal@i+1,w,c
  2061  000CCC  A0D8               	btfss	status,0,c
  2062  000CCE  D7D6               	goto	l1224
  2063                           
  2064                           ;ReadSignal.c: 31: }
  2065                           ;ReadSignal.c: 32: j+=2;
  2066  000CD0  0E02               	movlw	2
  2067  000CD2  261D               	addwf	readSignal@j,f,c
  2068  000CD4  0E00               	movlw	0
  2069  000CD6  221E               	addwfc	readSignal@j+1,f,c
  2070  000CD8                     l174:
  2071  000CD8  5019               	movf	readSignal@limite,w,c
  2072  000CDA  5C1D               	subwf	readSignal@j,w,c
  2073  000CDC  501E               	movf	readSignal@j+1,w,c
  2074  000CDE  0A80               	xorlw	128
  2075  000CE0  6E17               	movwf	??_readSignal& (0+255),c
  2076  000CE2  501A               	movf	readSignal@limite+1,w,c
  2077  000CE4  0A80               	xorlw	128
  2078  000CE6  5817               	subwfb	??_readSignal& (0+255),w,c
  2079  000CE8  B0D8               	btfsc	status,0,c
  2080  000CEA  0012               	return	
  2081  000CEC  D7C2               	goto	l1222
  2082  000CEE                     __end_of_readSignal:
  2083                           	opt stack 0
  2084                           tblptru	equ	0xFF8
  2085                           tblptrh	equ	0xFF7
  2086                           tblptrl	equ	0xFF6
  2087                           tablat	equ	0xFF5
  2088                           intcon	equ	0xFF2
  2089                           intcon2	equ	0xFF1
  2090                           intcon3	equ	0xFF0
  2091                           wreg	equ	0xFE8
  2092                           postinc1	equ	0xFE6
  2093                           fsr1h	equ	0xFE2
  2094                           fsr1l	equ	0xFE1
  2095                           indf2	equ	0xFDF
  2096                           postinc2	equ	0xFDE
  2097                           fsr2h	equ	0xFDA
  2098                           fsr2l	equ	0xFD9
  2099                           status	equ	0xFD8
  2100                           
  2101 ;; *************** function _read_ADC *****************
  2102 ;; Defined at:
  2103 ;;		line 19 in file "ADC.c"
  2104 ;; Parameters:    Size  Location     Type
  2105 ;;		None
  2106 ;; Auto vars:     Size  Location     Type
  2107 ;;  value           2   16[COMRAM] unsigned int 
  2108 ;; Return value:  Size  Location     Type
  2109 ;;                  2   14[COMRAM] unsigned int 
  2110 ;; Registers used:
  2111 ;;		None
  2112 ;; Tracked objects:
  2113 ;;		On entry : 0/0
  2114 ;;		On exit  : 0/0
  2115 ;;		Unchanged: 0/0
  2116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2117 ;;      Params:         2       0       0       0       0       0       0       0       0
  2118 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2119 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2120 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2121 ;;Total ram usage:        4 bytes
  2122 ;; Hardware stack levels used:    1
  2123 ;; Hardware stack levels required when called:    1
  2124 ;; This function calls:
  2125 ;;		Nothing
  2126 ;; This function is called by:
  2127 ;;		_readSignal
  2128 ;; This function uses a non-reentrant model
  2129 ;;
  2130                           
  2131                           	psect	text13
  2132  000F32                     __ptext13:
  2133                           	opt stack 0
  2134  000F32                     _read_ADC:
  2135                           	opt stack 27
  2136                           
  2137                           ;ADC.c: 20: unsigned int value;
  2138                           ;ADC.c: 21: ADCON0bits.GO = 1;
  2139                           
  2140                           ;incstack = 0
  2141  000F32  82C2               	bsf	4034,1,c	;volatile
  2142  000F34                     l163:
  2143  000F34  B2C2               	btfsc	4034,1,c	;volatile
  2144  000F36  D7FE               	goto	l163
  2145                           
  2146                           ;ADC.c: 24: value = ADRES;
  2147  000F38  CFC3 F011          	movff	4035,read_ADC@value	;volatile
  2148  000F3C  CFC4 F012          	movff	4036,read_ADC@value+1	;volatile
  2149                           
  2150                           ;ADC.c: 26: return value;
  2151  000F40  C011  F00F         	movff	read_ADC@value,?_read_ADC
  2152  000F44  C012  F010         	movff	read_ADC@value+1,?_read_ADC+1
  2153  000F48  0012               	return		;funcret
  2154  000F4A                     __end_of_read_ADC:
  2155                           	opt stack 0
  2156                           tblptru	equ	0xFF8
  2157                           tblptrh	equ	0xFF7
  2158                           tblptrl	equ	0xFF6
  2159                           tablat	equ	0xFF5
  2160                           intcon	equ	0xFF2
  2161                           intcon2	equ	0xFF1
  2162                           intcon3	equ	0xFF0
  2163                           wreg	equ	0xFE8
  2164                           postinc1	equ	0xFE6
  2165                           fsr1h	equ	0xFE2
  2166                           fsr1l	equ	0xFE1
  2167                           indf2	equ	0xFDF
  2168                           postinc2	equ	0xFDE
  2169                           fsr2h	equ	0xFDA
  2170                           fsr2l	equ	0xFD9
  2171                           status	equ	0xFD8
  2172                           
  2173 ;; *************** function _clearLCD *****************
  2174 ;; Defined at:
  2175 ;;		line 31 in file "LCD.c"
  2176 ;; Parameters:    Size  Location     Type
  2177 ;;		None
  2178 ;; Auto vars:     Size  Location     Type
  2179 ;;		None
  2180 ;; Return value:  Size  Location     Type
  2181 ;;                  1    wreg      void 
  2182 ;; Registers used:
  2183 ;;		wreg, cstack
  2184 ;; Tracked objects:
  2185 ;;		On entry : 0/0
  2186 ;;		On exit  : 0/0
  2187 ;;		Unchanged: 0/0
  2188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2189 ;;      Params:         0       0       0       0       0       0       0       0       0
  2190 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2191 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2192 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2193 ;;Total ram usage:        0 bytes
  2194 ;; Hardware stack levels used:    1
  2195 ;; Hardware stack levels required when called:    3
  2196 ;; This function calls:
  2197 ;;		_send_cfg
  2198 ;; This function is called by:
  2199 ;;		_cadastrarSenha
  2200 ;;		_lerToque
  2201 ;;		_cmpPass
  2202 ;; This function uses a non-reentrant model
  2203 ;;
  2204                           
  2205                           	psect	text14
  2206  000F82                     __ptext14:
  2207                           	opt stack 0
  2208  000F82                     _clearLCD:
  2209                           	opt stack 26
  2210                           
  2211                           ;LCD.c: 32: send_cfg(0x01);
  2212                           
  2213                           ;incstack = 0
  2214  000F82  0E01               	movlw	1
  2215  000F84  EC7C  F007         	call	_send_cfg
  2216  000F88  0012               	return		;funcret
  2217  000F8A                     __end_of_clearLCD:
  2218                           	opt stack 0
  2219                           tblptru	equ	0xFF8
  2220                           tblptrh	equ	0xFF7
  2221                           tblptrl	equ	0xFF6
  2222                           tablat	equ	0xFF5
  2223                           intcon	equ	0xFF2
  2224                           intcon2	equ	0xFF1
  2225                           intcon3	equ	0xFF0
  2226                           wreg	equ	0xFE8
  2227                           postinc1	equ	0xFE6
  2228                           fsr1h	equ	0xFE2
  2229                           fsr1l	equ	0xFE1
  2230                           indf2	equ	0xFDF
  2231                           postinc2	equ	0xFDE
  2232                           fsr2h	equ	0xFDA
  2233                           fsr2l	equ	0xFD9
  2234                           status	equ	0xFD8
  2235                           
  2236 ;; *************** function _send_cfg *****************
  2237 ;; Defined at:
  2238 ;;		line 22 in file "LCD.c"
  2239 ;; Parameters:    Size  Location     Type
  2240 ;;  cmd             1    wreg     unsigned char 
  2241 ;; Auto vars:     Size  Location     Type
  2242 ;;  cmd             1   16[COMRAM] unsigned char 
  2243 ;; Return value:  Size  Location     Type
  2244 ;;                  1    wreg      void 
  2245 ;; Registers used:
  2246 ;;		wreg, cstack
  2247 ;; Tracked objects:
  2248 ;;		On entry : 0/0
  2249 ;;		On exit  : 0/0
  2250 ;;		Unchanged: 0/0
  2251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2252 ;;      Params:         0       0       0       0       0       0       0       0       0
  2253 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2254 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2255 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2256 ;;Total ram usage:        2 bytes
  2257 ;; Hardware stack levels used:    1
  2258 ;; Hardware stack levels required when called:    2
  2259 ;; This function calls:
  2260 ;;		_ena_pulse
  2261 ;; This function is called by:
  2262 ;;		_clearLCD
  2263 ;;		_init_LCD
  2264 ;;		_set_line
  2265 ;; This function uses a non-reentrant model
  2266 ;;
  2267                           
  2268                           	psect	text15
  2269  000EF8                     __ptext15:
  2270                           	opt stack 0
  2271  000EF8                     _send_cfg:
  2272                           	opt stack 26
  2273                           
  2274                           ;incstack = 0
  2275                           ;send_cfg@cmd stored from wreg
  2276  000EF8  6E11               	movwf	send_cfg@cmd,c
  2277                           
  2278                           ;LCD.c: 24: PORTD = cmd;
  2279  000EFA  C011  FF83         	movff	send_cfg@cmd,3971	;volatile
  2280                           
  2281                           ;LCD.c: 25: PORTBbits.RB3 = 0;
  2282  000EFE  9681               	bcf	3969,3,c	;volatile
  2283                           
  2284                           ;LCD.c: 26: ena_pulse();
  2285  000F00  EC33  F007         	call	_ena_pulse	;wreg free
  2286                           
  2287                           ;LCD.c: 27: _delay((unsigned long)((1)*(16000000/4000.0)));
  2288  000F04  0E06               	movlw	6
  2289  000F06  6E10               	movwf	??_send_cfg& (0+255),c
  2290  000F08  0E30               	movlw	48
  2291  000F0A                     u687:
  2292  000F0A  2EE8               	decfsz	wreg,f,c
  2293  000F0C  D7FE               	bra	u687
  2294  000F0E  2E10               	decfsz	??_send_cfg& (0+255),f,c
  2295  000F10  D7FC               	bra	u687
  2296  000F12  D000               	nop2	
  2297  000F14  0012               	return		;funcret
  2298  000F16                     __end_of_send_cfg:
  2299                           	opt stack 0
  2300                           tblptru	equ	0xFF8
  2301                           tblptrh	equ	0xFF7
  2302                           tblptrl	equ	0xFF6
  2303                           tablat	equ	0xFF5
  2304                           intcon	equ	0xFF2
  2305                           intcon2	equ	0xFF1
  2306                           intcon3	equ	0xFF0
  2307                           wreg	equ	0xFE8
  2308                           postinc1	equ	0xFE6
  2309                           fsr1h	equ	0xFE2
  2310                           fsr1l	equ	0xFE1
  2311                           indf2	equ	0xFDF
  2312                           postinc2	equ	0xFDE
  2313                           fsr2h	equ	0xFDA
  2314                           fsr2l	equ	0xFD9
  2315                           status	equ	0xFD8
  2316                           
  2317 ;; *************** function _ena_pulse *****************
  2318 ;; Defined at:
  2319 ;;		line 11 in file "LCD.c"
  2320 ;; Parameters:    Size  Location     Type
  2321 ;;		None
  2322 ;; Auto vars:     Size  Location     Type
  2323 ;;		None
  2324 ;; Return value:  Size  Location     Type
  2325 ;;                  1    wreg      void 
  2326 ;; Registers used:
  2327 ;;		wreg
  2328 ;; Tracked objects:
  2329 ;;		On entry : 0/0
  2330 ;;		On exit  : 0/0
  2331 ;;		Unchanged: 0/0
  2332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2333 ;;      Params:         0       0       0       0       0       0       0       0       0
  2334 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2335 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2336 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2337 ;;Total ram usage:        1 bytes
  2338 ;; Hardware stack levels used:    1
  2339 ;; Hardware stack levels required when called:    1
  2340 ;; This function calls:
  2341 ;;		Nothing
  2342 ;; This function is called by:
  2343 ;;		_send_cfg
  2344 ;;		_send_msg
  2345 ;; This function uses a non-reentrant model
  2346 ;;
  2347                           
  2348                           	psect	text16
  2349  000E66                     __ptext16:
  2350                           	opt stack 0
  2351  000E66                     _ena_pulse:
  2352                           	opt stack 26
  2353                           
  2354                           ;LCD.c: 13: PORTEbits.RE1 = 0;
  2355                           
  2356                           ;incstack = 0
  2357  000E66  9284               	bcf	3972,1,c	;volatile
  2358                           
  2359                           ;LCD.c: 14: _delay((unsigned long)((1)*(16000000/4000.0)));
  2360  000E68  0E06               	movlw	6
  2361  000E6A  6E0F               	movwf	??_ena_pulse& (0+255),c
  2362  000E6C  0E30               	movlw	48
  2363  000E6E                     u697:
  2364  000E6E  2EE8               	decfsz	wreg,f,c
  2365  000E70  D7FE               	bra	u697
  2366  000E72  2E0F               	decfsz	??_ena_pulse& (0+255),f,c
  2367  000E74  D7FC               	bra	u697
  2368  000E76  D000               	nop2	
  2369                           
  2370                           ;LCD.c: 15: PORTEbits.RE1 = 1;
  2371  000E78  8284               	bsf	3972,1,c	;volatile
  2372                           
  2373                           ;LCD.c: 16: _delay((unsigned long)((1)*(16000000/4000.0)));
  2374  000E7A  0E06               	movlw	6
  2375  000E7C  6E0F               	movwf	??_ena_pulse& (0+255),c
  2376  000E7E  0E30               	movlw	48
  2377  000E80                     u707:
  2378  000E80  2EE8               	decfsz	wreg,f,c
  2379  000E82  D7FE               	bra	u707
  2380  000E84  2E0F               	decfsz	??_ena_pulse& (0+255),f,c
  2381  000E86  D7FC               	bra	u707
  2382  000E88  D000               	nop2	
  2383                           
  2384                           ;LCD.c: 17: PORTEbits.RE1 = 0;
  2385  000E8A  9284               	bcf	3972,1,c	;volatile
  2386                           
  2387                           ;LCD.c: 18: _delay((unsigned long)((1)*(16000000/4000.0)));
  2388  000E8C  0E06               	movlw	6
  2389  000E8E  6E0F               	movwf	??_ena_pulse& (0+255),c
  2390  000E90  0E30               	movlw	48
  2391  000E92                     u717:
  2392  000E92  2EE8               	decfsz	wreg,f,c
  2393  000E94  D7FE               	bra	u717
  2394  000E96  2E0F               	decfsz	??_ena_pulse& (0+255),f,c
  2395  000E98  D7FC               	bra	u717
  2396  000E9A  D000               	nop2	
  2397  000E9C  0012               	return		;funcret
  2398  000E9E                     __end_of_ena_pulse:
  2399                           	opt stack 0
  2400                           tblptru	equ	0xFF8
  2401                           tblptrh	equ	0xFF7
  2402                           tblptrl	equ	0xFF6
  2403                           tablat	equ	0xFF5
  2404                           intcon	equ	0xFF2
  2405                           intcon2	equ	0xFF1
  2406                           intcon3	equ	0xFF0
  2407                           wreg	equ	0xFE8
  2408                           postinc1	equ	0xFE6
  2409                           fsr1h	equ	0xFE2
  2410                           fsr1l	equ	0xFE1
  2411                           indf2	equ	0xFDF
  2412                           postinc2	equ	0xFDE
  2413                           fsr2h	equ	0xFDA
  2414                           fsr2l	equ	0xFD9
  2415                           status	equ	0xFD8
  2416                           
  2417 ;; *************** function _ISR *****************
  2418 ;; Defined at:
  2419 ;;		line 32 in file "Interrupt.c"
  2420 ;; Parameters:    Size  Location     Type
  2421 ;;		None
  2422 ;; Auto vars:     Size  Location     Type
  2423 ;;		None
  2424 ;; Return value:  Size  Location     Type
  2425 ;;                  1    wreg      void 
  2426 ;; Registers used:
  2427 ;;		wreg, status,2
  2428 ;; Tracked objects:
  2429 ;;		On entry : 0/0
  2430 ;;		On exit  : 0/0
  2431 ;;		Unchanged: 0/0
  2432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2433 ;;      Params:         0       0       0       0       0       0       0       0       0
  2434 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2435 ;;      Temps:         14       0       0       0       0       0       0       0       0
  2436 ;;      Totals:        14       0       0       0       0       0       0       0       0
  2437 ;;Total ram usage:       14 bytes
  2438 ;; Hardware stack levels used:    1
  2439 ;; This function calls:
  2440 ;;		Nothing
  2441 ;; This function is called by:
  2442 ;;		Interrupt level 2
  2443 ;; This function uses a non-reentrant model
  2444 ;;
  2445                           
  2446                           	psect	intcode
  2447  000008                     __pintcode:
  2448                           	opt stack 0
  2449  000008                     _ISR:
  2450                           	opt stack 26
  2451                           
  2452                           ;incstack = 0
  2453  000008  822B               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2454  00000A  ED77  F006         	call	int_func,f	;refresh shadow registers
  2455                           tblptru	equ	0xFF8
  2456                           tblptrh	equ	0xFF7
  2457                           tblptrl	equ	0xFF6
  2458                           tablat	equ	0xFF5
  2459                           intcon	equ	0xFF2
  2460                           intcon2	equ	0xFF1
  2461                           intcon3	equ	0xFF0
  2462                           wreg	equ	0xFE8
  2463                           postinc1	equ	0xFE6
  2464                           fsr1h	equ	0xFE2
  2465                           fsr1l	equ	0xFE1
  2466                           indf2	equ	0xFDF
  2467                           postinc2	equ	0xFDE
  2468                           fsr2h	equ	0xFDA
  2469                           fsr2l	equ	0xFD9
  2470                           status	equ	0xFD8
  2471                           
  2472                           	psect	intcode_body
  2473  000CEE                     __pintcode_body:
  2474                           	opt stack 26
  2475  000CEE                     int_func:
  2476                           	opt stack 26
  2477  000CEE  0006               	pop		; remove dummy address from shadow register refresh
  2478  000CF0  CFFA F001          	movff	pclath,??_ISR
  2479  000CF4  CFFB F002          	movff	pclatu,??_ISR+1
  2480  000CF8  CFE9 F003          	movff	fsr0l,??_ISR+2
  2481  000CFC  CFEA F004          	movff	fsr0h,??_ISR+3
  2482  000D00  CFE1 F005          	movff	fsr1l,??_ISR+4
  2483  000D04  CFE2 F006          	movff	fsr1h,??_ISR+5
  2484  000D08  CFD9 F007          	movff	fsr2l,??_ISR+6
  2485  000D0C  CFDA F008          	movff	fsr2h,??_ISR+7
  2486  000D10  CFF3 F009          	movff	prodl,??_ISR+8
  2487  000D14  CFF4 F00A          	movff	prodh,??_ISR+9
  2488  000D18  CFF6 F00B          	movff	tblptrl,??_ISR+10
  2489  000D1C  CFF7 F00C          	movff	tblptrh,??_ISR+11
  2490  000D20  CFF8 F00D          	movff	tblptru,??_ISR+12
  2491  000D24  CFF5 F00E          	movff	tablat,??_ISR+13
  2492                           
  2493                           ;Interrupt.c: 34: if(INTCON3bits.INT2IF){
  2494  000D28  A2F0               	btfss	intcon3,1,c	;volatile
  2495  000D2A  D005               	goto	i2l22
  2496                           
  2497                           ;Interrupt.c: 35: INTCON3bits.INT2IF = 0;
  2498  000D2C  92F0               	bcf	intcon3,1,c	;volatile
  2499                           
  2500                           ;Interrupt.c: 36: button = 1;
  2501  000D2E  0E00               	movlw	0
  2502  000D30  6E2A               	movwf	_button+1,c
  2503  000D32  0E01               	movlw	1
  2504  000D34  6E29               	movwf	_button,c
  2505  000D36                     i2l22:
  2506  000D36  C00E  FFF5         	movff	??_ISR+13,tablat
  2507  000D3A  C00D  FFF8         	movff	??_ISR+12,tblptru
  2508  000D3E  C00C  FFF7         	movff	??_ISR+11,tblptrh
  2509  000D42  C00B  FFF6         	movff	??_ISR+10,tblptrl
  2510  000D46  C00A  FFF4         	movff	??_ISR+9,prodh
  2511  000D4A  C009  FFF3         	movff	??_ISR+8,prodl
  2512  000D4E  C008  FFDA         	movff	??_ISR+7,fsr2h
  2513  000D52  C007  FFD9         	movff	??_ISR+6,fsr2l
  2514  000D56  C006  FFE2         	movff	??_ISR+5,fsr1h
  2515  000D5A  C005  FFE1         	movff	??_ISR+4,fsr1l
  2516  000D5E  C004  FFEA         	movff	??_ISR+3,fsr0h
  2517  000D62  C003  FFE9         	movff	??_ISR+2,fsr0l
  2518  000D66  C002  FFFB         	movff	??_ISR+1,pclatu
  2519  000D6A  C001  FFFA         	movff	??_ISR,pclath
  2520  000D6E  922B               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2521  000D70  0011               	retfie		f
  2522  000D72                     __end_of_ISR:
  2523                           	opt stack 0
  2524                           pclatu	equ	0xFFB
  2525                           pclath	equ	0xFFA
  2526                           tblptru	equ	0xFF8
  2527                           tblptrh	equ	0xFF7
  2528                           tblptrl	equ	0xFF6
  2529                           tablat	equ	0xFF5
  2530                           prodh	equ	0xFF4
  2531                           prodl	equ	0xFF3
  2532                           intcon	equ	0xFF2
  2533                           intcon2	equ	0xFF1
  2534                           intcon3	equ	0xFF0
  2535                           fsr0h	equ	0xFEA
  2536                           fsr0l	equ	0xFE9
  2537                           wreg	equ	0xFE8
  2538                           postinc1	equ	0xFE6
  2539                           fsr1h	equ	0xFE2
  2540                           fsr1l	equ	0xFE1
  2541                           indf2	equ	0xFDF
  2542                           postinc2	equ	0xFDE
  2543                           fsr2h	equ	0xFDA
  2544                           fsr2l	equ	0xFD9
  2545                           status	equ	0xFD8
  2546                           pclatu	equ	0xFFB
  2547                           pclath	equ	0xFFA
  2548                           tblptru	equ	0xFF8
  2549                           tblptrh	equ	0xFF7
  2550                           tblptrl	equ	0xFF6
  2551                           tablat	equ	0xFF5
  2552                           prodh	equ	0xFF4
  2553                           prodl	equ	0xFF3
  2554                           intcon	equ	0xFF2
  2555                           intcon2	equ	0xFF1
  2556                           intcon3	equ	0xFF0
  2557                           fsr0h	equ	0xFEA
  2558                           fsr0l	equ	0xFE9
  2559                           wreg	equ	0xFE8
  2560                           postinc1	equ	0xFE6
  2561                           fsr1h	equ	0xFE2
  2562                           fsr1l	equ	0xFE1
  2563                           indf2	equ	0xFDF
  2564                           postinc2	equ	0xFDE
  2565                           fsr2h	equ	0xFDA
  2566                           fsr2l	equ	0xFD9
  2567                           status	equ	0xFD8
  2568                           
  2569                           	psect	rparam
  2570  0000                     pclatu	equ	0xFFB
  2571                           pclath	equ	0xFFA
  2572                           tblptru	equ	0xFF8
  2573                           tblptrh	equ	0xFF7
  2574                           tblptrl	equ	0xFF6
  2575                           tablat	equ	0xFF5
  2576                           prodh	equ	0xFF4
  2577                           prodl	equ	0xFF3
  2578                           intcon	equ	0xFF2
  2579                           intcon2	equ	0xFF1
  2580                           intcon3	equ	0xFF0
  2581                           fsr0h	equ	0xFEA
  2582                           fsr0l	equ	0xFE9
  2583                           wreg	equ	0xFE8
  2584                           postinc1	equ	0xFE6
  2585                           fsr1h	equ	0xFE2
  2586                           fsr1l	equ	0xFE1
  2587                           indf2	equ	0xFDF
  2588                           postinc2	equ	0xFDE
  2589                           fsr2h	equ	0xFDA
  2590                           fsr2l	equ	0xFD9
  2591                           status	equ	0xFD8
  2592                           
  2593                           	psect	temp
  2594  00002B                     btemp:
  2595                           	opt stack 0
  2596  00002B                     	ds	1
  2597  0000                     int$flags	set	btemp
  2598                           pclatu	equ	0xFFB
  2599                           pclath	equ	0xFFA
  2600                           tblptru	equ	0xFF8
  2601                           tblptrh	equ	0xFF7
  2602                           tblptrl	equ	0xFF6
  2603                           tablat	equ	0xFF5
  2604                           prodh	equ	0xFF4
  2605                           prodl	equ	0xFF3
  2606                           intcon	equ	0xFF2
  2607                           intcon2	equ	0xFF1
  2608                           intcon3	equ	0xFF0
  2609                           fsr0h	equ	0xFEA
  2610                           fsr0l	equ	0xFE9
  2611                           wreg	equ	0xFE8
  2612                           postinc1	equ	0xFE6
  2613                           fsr1h	equ	0xFE2
  2614                           fsr1l	equ	0xFE1
  2615                           indf2	equ	0xFDF
  2616                           postinc2	equ	0xFDE
  2617                           fsr2h	equ	0xFDA
  2618                           fsr2l	equ	0xFD9
  2619                           status	equ	0xFD8


Data Sizes:
    Strings     76
    Constant    0
    Data        0
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      42
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    cmpPass@toque	PTR unsigned char  size(2) Largest target is 2
		 -> main@toc(COMRAM[2]), 

    cmpPass@pass	PTR unsigned char  size(2) Largest target is 2
		 -> main@pass(COMRAM[2]), 

    lerToque@toque	PTR unsigned char  size(2) Largest target is 2
		 -> main@toc(COMRAM[2]), 

    cadastrarSenha@pass	PTR unsigned char  size(2) Largest target is 2
		 -> main@pass(COMRAM[2]), 

    cmpSignal@toc	PTR unsigned char  size(2) Largest target is 2
		 -> main@toc(COMRAM[2]), 

    cmpSignal@pass	PTR unsigned char  size(2) Largest target is 2
		 -> main@pass(COMRAM[2]), 

    readSignal@signal	PTR unsigned char  size(2) Largest target is 2
		 -> main@toc(COMRAM[2]), main@pass(COMRAM[2]), 

    write_LCD@c	PTR unsigned char  size(2) Largest target is 14
		 -> STR_9(CODE[14]), STR_8(CODE[10]), STR_7(CODE[10]), STR_6(CODE[10]), 
		 -> STR_5(CODE[14]), STR_4(CODE[11]), STR_3(CODE[8]), STR_2(CODE[6]), 
		 -> STR_1(CODE[13]), 


Critical Paths under _main in COMRAM

    _main->_cadastrarSenha
    _lerToque->_readSignal
    _init_LCD->_send_cfg
    _cmpPass->_write_LCD
    _cadastrarSenha->_readSignal
    _write_LCD->_send_msg
    _send_msg->_ena_pulse
    _set_line->_send_cfg
    _readSignal->_read_ADC
    _clearLCD->_send_cfg
    _send_cfg->_ena_pulse

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   10744
                                             36 COMRAM     4     4      0
                     _cadastrarSenha
                            _cmpPass
                           _init_ADC
                        _init_INTRB2
                           _init_LCD
                           _lerToque
 ---------------------------------------------------------------------------------
 (1) _lerToque                                             4     2      2    3739
                                             30 COMRAM     4     2      2
                           _clearLCD
                         _readSignal
                           _send_msg
                           _set_line
                          _write_LCD
 ---------------------------------------------------------------------------------
 (1) _init_LCD                                             0     0      0      15
                           _send_cfg
 ---------------------------------------------------------------------------------
 (1) _init_INTRB2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _cmpPass                                              6     2      4    3011
                                             23 COMRAM     6     2      4
                                _bip
                           _clearLCD
                          _cmpSignal
                           _set_line
                          _write_LCD
 ---------------------------------------------------------------------------------
 (2) _cmpSignal                                            6     2      4     216
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _bip                                                  8     4      4     391
                                             14 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _cadastrarSenha                                       6     4      2    3803
                                             30 COMRAM     6     4      2
                           _clearLCD
                         _readSignal
                           _send_msg
                           _set_line
                          _write_LCD
 ---------------------------------------------------------------------------------
 (2) _write_LCD                                            6     4      2     681
                                             17 COMRAM     6     4      2
                           _send_msg
 ---------------------------------------------------------------------------------
 (3) _send_msg                                             2     2      0      15
                                             15 COMRAM     2     2      0
                          _ena_pulse
 ---------------------------------------------------------------------------------
 (2) _set_line                                             5     1      4    1513
                                             17 COMRAM     5     1      4
                           _send_cfg
 ---------------------------------------------------------------------------------
 (2) _readSignal                                          12     8      4    1207
                                             18 COMRAM    12     8      4
                           _read_ADC
 ---------------------------------------------------------------------------------
 (3) _read_ADC                                             4     2      2      23
                                             14 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _clearLCD                                             0     0      0      15
                           _send_cfg
 ---------------------------------------------------------------------------------
 (3) _send_cfg                                             2     2      0      15
                                             15 COMRAM     2     2      0
                          _ena_pulse
 ---------------------------------------------------------------------------------
 (4) _ena_pulse                                            1     1      0       0
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                 14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _cadastrarSenha
     _clearLCD
       _send_cfg
         _ena_pulse
     _readSignal
       _read_ADC
     _send_msg
       _ena_pulse
     _set_line
       _send_cfg
         _ena_pulse
     _write_LCD
       _send_msg
         _ena_pulse
   _cmpPass
     _bip
     _clearLCD
       _send_cfg
         _ena_pulse
     _cmpSignal
     _set_line
       _send_cfg
         _ena_pulse
     _write_LCD
       _send_msg
         _ena_pulse
   _init_ADC
   _init_INTRB2
   _init_LCD
     _send_cfg
       _ena_pulse
   _lerToque
     _clearLCD
       _send_cfg
         _ena_pulse
     _readSignal
       _read_ADC
     _send_msg
       _ena_pulse
     _set_line
       _send_cfg
         _ena_pulse
     _write_LCD
       _send_msg
         _ena_pulse

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      2A       1       44.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      2A      20        0.0%
DATA                 0      0      2A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Sat Jul  1 03:01:04 2017

            __CFG_BOR$ON 000000              __CFG_BORV$3 000000             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
                    l203 0C4A                      l163 0F34                      l243 0AB0  
                    l174 0CD8             __CFG_CPB$OFF 000000                      u450 0BAE  
           __CFG_CPD$OFF 000000                      u380 0C8C                      u508 0C0A  
                    _ISR 0008                      u394 0C9C                      u490 0C08  
                    u707 0E80                      u395 0C98                      u627 0BC8  
                    u468 0BB0                      u717 0E92                      u637 0C22  
                    u647 09AE                      u657 0EAC                      u667 0EC0  
                    u677 0CB2                      u687 0F0A                      u697 0E6E  
                    _bip 0B8A         ??_cadastrarSenha 0021                      wreg 000FE8  
           __CFG_FOSC$HS 000000             __CFG_LVP$OFF 000000                     ?_ISR 0001  
           __CFG_WDT$OFF 000000                     l1200 0E26                     l1210 0F24  
                   l1220 0C64                     l1204 0E46                     l1222 0C72  
                   l1302 0934                     l1224 0C7C                     l1232 0CC0  
                   l1304 094C                     l1306 0950                     l1228 0CAC  
                   l1308 0960                     l1260 0BD8                     l1244 0E12  
                   l1332 0A06                     l1270 0C34                     l1262 0BEE  
                   l1342 0A5E                     l1350 0A9E                     l1256 0BA4  
                   l1266 0BFE                     l1346 0A82                     l1338 0A40  
                   ?_bip 000F                     l1348 0A9A                     l1294 08F2  
                   l1288 08B8                     l1368 0B30                     l1298 0910  
                   l1396 0D9A                     STR_1 081D                     STR_2 0847  
                   STR_3 083F                     STR_4 082A                     STR_5 0801  
                   STR_6 0835                     STR_7 0813                     STR_8 0835  
                   STR_9 080F                     _BRGH 007D62                     _CREN 007D5C  
                   _RCIF 007CF5                     i2l22 0D36                     _SPEN 007D5F  
                   _TRMT 007D61                     _TXEN 007D65                     _SYNC 007D64  
                   bip@j 0015                     _main 0D72                     fsr0h 000FEA  
                   fsr1h 000FE2                     fsr2h 000FDA                     fsr0l 000FE9  
                   indf2 000FDF                     fsr1l 000FE1                     fsr2l 000FD9  
                   btemp 002B                     prodh 000FF4                     prodl 000FF3  
                   start 000E            __CFG_IESO$OFF 000000             ?_init_INTRB2 0001  
          __CFG_MCLRE$ON 000000             ___param_bank 000000                    ??_ISR 0001  
                  ??_bip 0013            __CFG_PLLDIV$1 000000           __CFG_CCP2MX$ON 000000  
                  ?_main 0001                    _ADRES 000FC3                    _RCREG 000FAE  
                  _TMR0H 000FD7                    _TMR0L 000FD6                    _SPBRG 000FAF  
                  _PORTD 000F83            __CFG_USBDIV$1 000000                    _TRISB 000F93  
                  _TRISD 000F95                    _TRISE 000F96                    _TXREG 000FAD  
          __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000  
          __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000          __end_of_cmpPass 0B8A  
         __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000  
         __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000  
                  pclath 000FFA                    tablat 000FF5                    status 000FD8  
         __CFG_ICPRT$OFF 000000          __initialization 0F4A             __end_of_main 0DD0  
                 ??_main 0025            __activetblptr 000001                   _ADCON0 000FC2  
                 _ADCON1 000FC1                   _ADCON2 000FC0                   _TRISC6 007CA6  
                 _TRISC7 007CA7         __end_of_clearLCD 0F8A           __CFG_XINST$OFF 000000  
         __CFG_STVREN$ON 000000         __end_of_init_ADC 0F72              readSignal@i 001B  
            readSignal@j 001D         __end_of_lerToque 0AB2         __end_of_init_LCD 0EF8  
       __end_of_read_ADC 0F4A                   _button 0029                ??_cmpPass 001C  
       __end_of_send_cfg 0F16         __end_of_send_msg 0ECE         __end_of_set_line 0F32  
           __mediumconst 0000                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8               __accesstop 0060  __end_of__initialization 0F4E  
        __CFG_PBADEN$OFF 000000            ___rparam_used 000001           __pcstackCOMRAM 0001  
   __size_of_init_INTRB2 0010       __size_of_cmpSignal 004C       __size_of_ena_pulse 0038  
              ?_clearLCD 0001              send_cfg@cmd 0011                ?_init_ADC 0001  
              ?_lerToque 001F                ?_init_LCD 0001          __CFG_VREGEN$OFF 000000  
              ?_read_ADC 000F              send_msg@msg 0011       __size_of_write_LCD 004A  
      __end_of_cmpSignal 0E1C                ?_send_cfg 0001                  __Hparam 0000  
              ?_send_msg 0001        __end_of_ena_pulse 0E9E                  __Lparam 0000  
              ?_set_line 0012               _readSignal 0C4C             __psmallconst 0800  
                __pcinit 0F4A                  __ramtop 0800                  _cmpPass 0AB2  
                __ptext0 0D72                  __ptext1 09BC                  __ptext2 0ECE  
                __ptext3 0F72                  __ptext4 0F60                  __ptext5 0AB2  
                __ptext6 0DD0                  __ptext7 0B8A                  __ptext8 084E  
                __ptext9 0E1C                _T0CONbits 000FD5       cadastrarSenha@pass 001F  
           __size_of_ISR 0D6A                  bip@time 0011             __size_of_bip 00C2  
             ??_clearLCD 0012              set_line@pos 0014                  main@toc 0025  
         __pintcode_body 0CEE     end_of_initialization 0F4E               ??_init_ADC 000F  
             ??_lerToque 0021               ??_init_LCD 0012               ??_read_ADC 0011  
__size_of_cadastrarSenha 016E                  int_func 0CEE               ??_send_cfg 0010  
             ??_send_msg 0010               ??_set_line 0016           set_line@cursor 0016  
                postinc1 000FE6                  postinc2 000FDE                _PORTBbits 000F81  
              _PORTCbits 000F82                _PORTEbits 000F84        __end_of_write_LCD 0E66  
              _TRISAbits 000F92                _TRISBbits 000F93                _TRISCbits 000F94  
            ?_readSignal 0013      start_initialization 0F4A              __end_of_ISR 0D72  
            __end_of_bip 0C4C            ??_init_INTRB2 000F            lerToque@toque 001F  
       __CFG_LPT1OSC$OFF 000000              __pbssCOMRAM 0029        __size_of_clearLCD 0008  
          read_ADC@value 0011      __size_of_readSignal 00A2           _cadastrarSenha 084E  
      __size_of_init_ADC 0012        __size_of_lerToque 00F6        __size_of_init_LCD 002A  
      __size_of_read_ADC 0018                __pintcode 0008                _cmpSignal 0DD0  
      __size_of_send_cfg 001E        __size_of_send_msg 0030        __size_of_set_line 001C  
              _ena_pulse 0E66          cadastrarSenha@i 0023      __end_of_init_INTRB2 0F82  
               ?_cmpPass 0018              __smallconst 0800         readSignal@limite 0019  
              bip@rounds 000F         readSignal@signal 0013   __end_of_cadastrarSenha 09BC  
       __CFG_WDTPS$32768 000000               ?_cmpSignal 000F               ?_ena_pulse 0001  
          cmpSignal@pass 000F               _ADCON0bits 000FC2                _write_LCD 0E1C  
            _INTCON2bits 000FF1              _INTCON3bits 000FF0          ?_cadastrarSenha 001F  
              lerToque@i 0021              _init_INTRB2 0F72                 __Hrparam 0000  
               __Lrparam 0000             __Lsmallconst 0800             ??_readSignal 0017  
       __size_of_cmpPass 00D8                 _clearLCD 0F82             cmpPass@toque 001A  
             ?_write_LCD 0012                 __ptext10 0E9E                 __ptext11 0F16  
               __ptext12 0C4C                 __ptext13 0F32                 __ptext14 0F82  
               __ptext15 0EF8                 __ptext16 0E66            readSignal@pos 0015  
               _init_ADC 0F60                 _lerToque 09BC                 _init_LCD 0ECE  
               _read_ADC 0F32       __end_of_readSignal 0CEE            __size_of_main 005E  
               _send_cfg 0EF8                 _send_msg 0E9E                 cmpPass@i 001C  
             write_LCD@c 0012               write_LCD@i 0016                 _set_line 0F16  
           set_line@line 0012              ??_cmpSignal 0013                 int$flags 002B  
           cmpSignal@toc 0011              ??_ena_pulse 000F                 main@pass 0027  
  __CFG_CPUDIV$OSC1_PLL2 000000               _INTCONbits 000FF2                 intlevel2 0000  
            cmpPass@pass 0018              ??_write_LCD 0014  
