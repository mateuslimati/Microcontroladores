

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Tue Jul 11 00:25:30 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    39                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    42                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    43                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    44  0000                     
    45                           ; Version 1.41
    46                           ; Generated 25/01/2017 GMT
    47                           ; 
    48                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    49                           ; All rights reserved.
    50                           ; 
    51                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    52                           ; 
    53                           ; Redistribution and use in source and binary forms, with or without modification, are
    54                           ; permitted provided that the following conditions are met:
    55                           ; 
    56                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    57                           ;        conditions and the following disclaimer.
    58                           ; 
    59                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    60                           ;        of conditions and the following disclaimer in the documentation and/or other
    61                           ;        materials provided with the distribution.
    62                           ; 
    63                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    64                           ;        software without specific prior written permission.
    65                           ; 
    66                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    67                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    68                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    69                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    70                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    71                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    72                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    73                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    74                           ; 
    75                           ; 
    76                           ; Code-generator required, PIC18F4550 Definitions
    77                           ; 
    78                           ; SFR Addresses
    79  0000                     
    80                           	psect	idataCOMRAM
    81  001452                     __pidataCOMRAM:
    82                           	opt stack 0
    83                           
    84                           ;initializer for _doorState
    85  001452  0001               	dw	1
    86  0000                     _ADRES	set	4035
    87  0000                     _CCP1CONbits	set	4029
    88  0000                     _CCPR1L	set	4030
    89  0000                     _CCP1CON	set	4029
    90  0000                     _PR2	set	4043
    91  0000                     _T2CON	set	4042
    92  0000                     _PORTCbits	set	3970
    93  0000                     _TRISCbits	set	3988
    94  0000                     _ADCON0bits	set	4034
    95  0000                     _ADCON2	set	4032
    96  0000                     _ADCON1	set	4033
    97  0000                     _ADCON0	set	4034
    98  0000                     _TRISAbits	set	3986
    99  0000                     _RCREG	set	4014
   100  0000                     _TXREG	set	4013
   101  0000                     _SPBRG	set	4015
   102  0000                     _TRISE	set	3990
   103  0000                     _TRISB	set	3987
   104  0000                     _PORTBbits	set	3969
   105  0000                     _PORTD	set	3971
   106  0000                     _PORTEbits	set	3972
   107  0000                     _TMR0L	set	4054
   108  0000                     _TMR0H	set	4055
   109  0000                     _T0CONbits	set	4053
   110  0000                     _TRISD	set	3989
   111  0000                     _INTCON2bits	set	4081
   112  0000                     _TRISBbits	set	3987
   113  0000                     _INTCONbits	set	4082
   114  0000                     _INTCON3bits	set	4080
   115  0000                     _RCIF	set	31989
   116  0000                     _TRMT	set	32097
   117  0000                     _TXEN	set	32101
   118  0000                     _CREN	set	32092
   119  0000                     _TRISC6	set	31910
   120  0000                     _TRISC7	set	31911
   121  0000                     _SPEN	set	32095
   122  0000                     _SYNC	set	32100
   123  0000                     _BRGH	set	32098
   124                           
   125                           	psect	smallconst
   126  000800                     __psmallconst:
   127                           	opt stack 0
   128  000800  00                 	db	0
   129  000801                     STR_1:
   130  000801  42                 	db	66	;'B'
   131  000802  61                 	db	97	;'a'
   132  000803  74                 	db	116	;'t'
   133  000804  61                 	db	97	;'a'
   134  000805  20                 	db	32
   135  000806  6E                 	db	110	;'n'
   136  000807  61                 	db	97	;'a'
   137  000808  20                 	db	32
   138  000809  70                 	db	112	;'p'
   139  00080A  6F                 	db	111	;'o'
   140  00080B  72                 	db	114	;'r'
   141  00080C  74                 	db	116	;'t'
   142  00080D  61                 	db	97	;'a'
   143  00080E  00                 	db	0
   144  00080F                     STR_6:
   145  00080F  6E                 	db	110	;'n'
   146  000810  61                 	db	97	;'a'
   147  000811  6F                 	db	111	;'o'
   148  000812  20                 	db	32
   149  000813  63                 	db	99	;'c'
   150  000814  6F                 	db	111	;'o'
   151  000815  69                 	db	105	;'i'
   152  000816  6E                 	db	110	;'n'
   153  000817  63                 	db	99	;'c'
   154  000818  69                 	db	105	;'i'
   155  000819  64                 	db	100	;'d'
   156  00081A  65                 	db	101	;'e'
   157  00081B  6D                 	db	109	;'m'
   158  00081C  00                 	db	0
   159  00081D                     STR_11:
   160  00081D  43                 	db	67	;'C'
   161  00081E  6F                 	db	111	;'o'
   162  00081F  6E                 	db	110	;'n'
   163  000820  66                 	db	102	;'f'
   164  000821  69                 	db	105	;'i'
   165  000822  72                 	db	114	;'r'
   166  000823  6D                 	db	109	;'m'
   167  000824  65                 	db	101	;'e'
   168  000825  20                 	db	32
   169  000826  73                 	db	115	;'s'
   170  000827  75                 	db	117	;'u'
   171  000828  61                 	db	97	;'a'
   172  000829  00                 	db	0
   173  00082A                     STR_13:
   174  00082A  43                 	db	67	;'C'
   175  00082B  61                 	db	97	;'a'
   176  00082C  64                 	db	100	;'d'
   177  00082D  61                 	db	97	;'a'
   178  00082E  73                 	db	115	;'s'
   179  00082F  74                 	db	116	;'t'
   180  000830  72                 	db	114	;'r'
   181  000831  65                 	db	101	;'e'
   182  000832  20                 	db	32
   183  000833  73                 	db	115	;'s'
   184  000834  75                 	db	117	;'u'
   185  000835  61                 	db	97	;'a'
   186  000836  00                 	db	0
   187  000837                     STR_4:
   188  000837  44                 	db	68	;'D'
   189  000838  65                 	db	101	;'e'
   190  000839  73                 	db	115	;'s'
   191  00083A  74                 	db	116	;'t'
   192  00083B  72                 	db	114	;'r'
   193  00083C  61                 	db	97	;'a'
   194  00083D  76                 	db	118	;'v'
   195  00083E  61                 	db	97	;'a'
   196  00083F  64                 	db	100	;'d'
   197  000840  61                 	db	97	;'a'
   198  000841  21                 	db	33
   199  000842  00                 	db	0
   200  000843                     STR_18:
   201  000843  43                 	db	67	;'C'
   202  000844  61                 	db	97	;'a'
   203  000845  64                 	db	100	;'d'
   204  000846  61                 	db	97	;'a'
   205  000847  73                 	db	115	;'s'
   206  000848  74                 	db	116	;'t'
   207  000849  72                 	db	114	;'r'
   208  00084A  61                 	db	97	;'a'
   209  00084B  64                 	db	100	;'d'
   210  00084C  61                 	db	97	;'a'
   211  00084D  00                 	db	0
   212  00084E                     STR_15:
   213  00084E  52                 	db	82	;'R'
   214  00084F  65                 	db	101	;'e'
   215  000850  70                 	db	112	;'p'
   216  000851  69                 	db	105	;'i'
   217  000852  74                 	db	116	;'t'
   218  000853  61                 	db	97	;'a'
   219  000854  20                 	db	32
   220  000855  73                 	db	115	;'s'
   221  000856  75                 	db	117	;'u'
   222  000857  61                 	db	97	;'a'
   223  000858  00                 	db	0
   224  000859                     STR_5:
   225  000859  41                 	db	65	;'A'
   226  00085A  73                 	db	115	;'s'
   227  00085B  20                 	db	32
   228  00085C  73                 	db	115	;'s'
   229  00085D  65                 	db	101	;'e'
   230  00085E  6E                 	db	110	;'n'
   231  00085F  68                 	db	104	;'h'
   232  000860  61                 	db	97	;'a'
   233  000861  73                 	db	115	;'s'
   234  000862  00                 	db	0
   235  000863                     STR_17:
   236  000863  53                 	db	83	;'S'
   237  000864  65                 	db	101	;'e'
   238  000865  6E                 	db	110	;'n'
   239  000866  68                 	db	104	;'h'
   240  000867  61                 	db	97	;'a'
   241  000868  00                 	db	0
   242  000869                     STR_12:
   243  000869  73                 	db	115	;'s'
   244  00086A  65                 	db	101	;'e'
   245  00086B  6E                 	db	110	;'n'
   246  00086C  68                 	db	104	;'h'
   247  00086D  61                 	db	97	;'a'
   248  00086E  00                 	db	0
   249  00086F                     STR_3:
   250  00086F  50                 	db	80	;'P'
   251  000870  6F                 	db	111	;'o'
   252  000871  72                 	db	114	;'r'
   253  000872  74                 	db	116	;'t'
   254  000873  61                 	db	97	;'a'
   255  000874  00                 	db	0
   256  0000                     
   257                           ; #config settings
   258  000875  00                 	db	0	; dummy byte at the end
   259  0000                     
   260                           	psect	cinit
   261  0012F6                     __pcinit:
   262                           	opt stack 0
   263  0012F6                     start_initialization:
   264                           	opt stack 0
   265  0012F6                     __initialization:
   266                           	opt stack 0
   267                           
   268                           ; Initialize objects allocated to COMRAM (2 bytes)
   269                           ; load TBLPTR registers with __pidataCOMRAM
   270  0012F6  0E52               	movlw	low __pidataCOMRAM
   271  0012F8  6EF6               	movwf	tblptrl,c
   272  0012FA  0E14               	movlw	high __pidataCOMRAM
   273  0012FC  6EF7               	movwf	tblptrh,c
   274  0012FE  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   275  001300  6EF8               	movwf	tblptru,c
   276  001302  0009               	tblrd		*+	;fetch initializer
   277  001304  CFF5 F03D          	movff	tablat,__pdataCOMRAM
   278  001308  0009               	tblrd		*+	;fetch initializer
   279  00130A  CFF5 F03E          	movff	tablat,__pdataCOMRAM+1
   280                           
   281                           ; Clear objects allocated to COMRAM (4 bytes)
   282  00130E  6A3C               	clrf	(__pbssCOMRAM+3)& (0+255),c
   283  001310  6A3B               	clrf	(__pbssCOMRAM+2)& (0+255),c
   284  001312  6A3A               	clrf	(__pbssCOMRAM+1)& (0+255),c
   285  001314  6A39               	clrf	__pbssCOMRAM& (0+255),c
   286  001316                     end_of_initialization:
   287                           	opt stack 0
   288  001316                     __end_of__initialization:
   289                           	opt stack 0
   290  001316  903F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   291  001318  923F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   292  00131A  0E00               	movlw	low (__Lsmallconst shr (0+16))
   293  00131C  6EF8               	movwf	tblptru,c
   294  00131E  0E08               	movlw	high __Lsmallconst
   295  001320  6EF7               	movwf	tblptrh,c
   296  001322  0100               	movlb	0
   297  001324  EF59  F008         	goto	_main	;jump to C main() function
   298                           tblptru	equ	0xFF8
   299                           tblptrh	equ	0xFF7
   300                           tblptrl	equ	0xFF6
   301                           tablat	equ	0xFF5
   302                           
   303                           	psect	bssCOMRAM
   304  000039                     __pbssCOMRAM:
   305                           	opt stack 0
   306  000039                     _buttonConfirm_Cad:
   307                           	opt stack 0
   308  000039                     	ds	2
   309  00003B                     _buttonCancel_Lock:
   310                           	opt stack 0
   311  00003B                     	ds	2
   312                           tblptru	equ	0xFF8
   313                           tblptrh	equ	0xFF7
   314                           tblptrl	equ	0xFF6
   315                           tablat	equ	0xFF5
   316                           
   317                           	psect	dataCOMRAM
   318  00003D                     __pdataCOMRAM:
   319                           	opt stack 0
   320  00003D                     _doorState:
   321                           	opt stack 0
   322  00003D                     	ds	2
   323                           tblptru	equ	0xFF8
   324                           tblptrh	equ	0xFF7
   325                           tblptrl	equ	0xFF6
   326                           tablat	equ	0xFF5
   327                           
   328                           	psect	cstackCOMRAM
   329  000001                     __pcstackCOMRAM:
   330                           	opt stack 0
   331  000001                     i2DutyCycle_PWM@Valor:
   332                           	opt stack 0
   333                           
   334                           ; 2 bytes @ 0x0
   335  000001                     	ds	2
   336  000003                     ??i2_DutyCycle_PWM:
   337                           
   338                           ; 1 bytes @ 0x2
   339  000003                     	ds	2
   340  000005                     ??_ISR:
   341                           
   342                           ; 1 bytes @ 0x4
   343  000005                     	ds	16
   344  000015                     ??_ena_pulse:
   345  000015                     ?_cmp_MSG1:
   346                           	opt stack 0
   347  000015                     ?_cmp_MSG2:
   348                           	opt stack 0
   349  000015                     ?_read_ADC:
   350                           	opt stack 0
   351  000015                     ?_cmpSignal:
   352                           	opt stack 0
   353  000015                     cmpSignal@pass:
   354                           	opt stack 0
   355  000015                     bip@rounds:
   356                           	opt stack 0
   357  000015                     DutyCycle_PWM@Valor:
   358                           	opt stack 0
   359                           
   360                           ; 2 bytes @ 0x14
   361  000015                     	ds	1
   362  000016                     ??_send_cfg:
   363  000016                     ??_send_msg:
   364                           
   365                           ; 1 bytes @ 0x15
   366  000016                     	ds	1
   367  000017                     ??_DutyCycle_PWM:
   368  000017                     ??_cmp_MSG2:
   369  000017                     send_cfg@cmd:
   370                           	opt stack 0
   371  000017                     send_msg@msg:
   372                           	opt stack 0
   373  000017                     cmp_MSG1@msg:
   374                           	opt stack 0
   375  000017                     read_ADC@value:
   376                           	opt stack 0
   377  000017                     cmpSignal@toc:
   378                           	opt stack 0
   379  000017                     bip@time:
   380                           	opt stack 0
   381                           
   382                           ; 2 bytes @ 0x16
   383  000017                     	ds	1
   384  000018                     cmp_MSG2@msg:
   385                           	opt stack 0
   386  000018                     write_LCD@c:
   387                           	opt stack 0
   388  000018                     set_line@line:
   389                           	opt stack 0
   390                           
   391                           ; 2 bytes @ 0x17
   392  000018                     	ds	1
   393  000019                     ??_bip:
   394  000019                     checkUSART@op:
   395                           	opt stack 0
   396  000019                     readSignal@signal:
   397                           	opt stack 0
   398                           
   399                           ; 2 bytes @ 0x18
   400  000019                     	ds	1
   401  00001A                     ??_write_LCD:
   402  00001A                     set_line@pos:
   403                           	opt stack 0
   404                           
   405                           ; 2 bytes @ 0x19
   406  00001A                     	ds	1
   407  00001B                     checkUSART@msg:
   408                           	opt stack 0
   409  00001B                     readSignal@pos:
   410                           	opt stack 0
   411  00001B                     bip@j:
   412                           	opt stack 0
   413                           
   414                           ; 2 bytes @ 0x1A
   415  00001B                     	ds	1
   416  00001C                     set_line@cursor:
   417                           	opt stack 0
   418  00001C                     write_LCD@i:
   419                           	opt stack 0
   420                           
   421                           ; 2 bytes @ 0x1B
   422  00001C                     	ds	1
   423  00001D                     ??_readSignal:
   424                           
   425                           ; 1 bytes @ 0x1C
   426  00001D                     	ds	1
   427  00001E                     ?_cmpPass:
   428                           	opt stack 0
   429  00001E                     ?_confirmarSenha:
   430                           	opt stack 0
   431  00001E                     cmpPass@pass:
   432                           	opt stack 0
   433                           
   434                           ; 2 bytes @ 0x1D
   435  00001E                     	ds	1
   436  00001F                     readSignal@limite:
   437                           	opt stack 0
   438                           
   439                           ; 2 bytes @ 0x1E
   440  00001F                     	ds	1
   441  000020                     cmpPass@toque:
   442                           	opt stack 0
   443                           
   444                           ; 2 bytes @ 0x1F
   445  000020                     	ds	1
   446  000021                     readSignal@i:
   447                           	opt stack 0
   448                           
   449                           ; 2 bytes @ 0x20
   450  000021                     	ds	1
   451  000022                     cmpPass@i:
   452                           	opt stack 0
   453                           
   454                           ; 2 bytes @ 0x21
   455  000022                     	ds	1
   456  000023                     readSignal@j:
   457                           	opt stack 0
   458                           
   459                           ; 2 bytes @ 0x22
   460  000023                     	ds	2
   461  000025                     lerToque@toque:
   462                           	opt stack 0
   463  000025                     destravarPorta@pass:
   464                           	opt stack 0
   465                           
   466                           ; 2 bytes @ 0x24
   467  000025                     	ds	2
   468  000027                     lerToque@i:
   469                           	opt stack 0
   470  000027                     destravarPorta@toque:
   471                           	opt stack 0
   472                           
   473                           ; 2 bytes @ 0x26
   474  000027                     	ds	2
   475  000029                     ??_destravarPorta:
   476  000029                     cadastrarSenha@pass:
   477                           	opt stack 0
   478                           
   479                           ; 2 bytes @ 0x28
   480  000029                     	ds	2
   481  00002B                     ??_cadastrarSenha:
   482  00002B                     destravarPorta@i:
   483                           	opt stack 0
   484                           
   485                           ; 2 bytes @ 0x2A
   486  00002B                     	ds	2
   487  00002D                     cadastrarSenha@i:
   488                           	opt stack 0
   489                           
   490                           ; 2 bytes @ 0x2C
   491  00002D                     	ds	2
   492  00002F                     cadastrarSenha@j:
   493                           	opt stack 0
   494                           
   495                           ; 2 bytes @ 0x2E
   496  00002F                     	ds	2
   497  000031                     cadastrarSenha@temp2:
   498                           	opt stack 0
   499                           
   500                           ; 2 bytes @ 0x30
   501  000031                     	ds	2
   502  000033                     cadastrarSenha@temp1:
   503                           	opt stack 0
   504                           
   505                           ; 2 bytes @ 0x32
   506  000033                     	ds	2
   507  000035                     main@toc:
   508                           	opt stack 0
   509                           
   510                           ; 2 bytes @ 0x34
   511  000035                     	ds	2
   512  000037                     main@pass:
   513                           	opt stack 0
   514                           
   515                           ; 2 bytes @ 0x36
   516  000037                     	ds	2
   517                           tblptru	equ	0xFF8
   518                           tblptrh	equ	0xFF7
   519                           tblptrl	equ	0xFF6
   520                           tablat	equ	0xFF5
   521                           
   522 ;;
   523 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   524 ;;
   525 ;; *************** function _main *****************
   526 ;; Defined at:
   527 ;;		line 24 in file "main.c"
   528 ;; Parameters:    Size  Location     Type
   529 ;;		None
   530 ;; Auto vars:     Size  Location     Type
   531 ;;  pass            2   54[COMRAM] unsigned char [2]
   532 ;;  toc             2   52[COMRAM] unsigned char [2]
   533 ;; Return value:  Size  Location     Type
   534 ;;                  1    wreg      void 
   535 ;; Registers used:
   536 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   537 ;; Tracked objects:
   538 ;;		On entry : 0/0
   539 ;;		On exit  : 0/0
   540 ;;		Unchanged: 0/0
   541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   542 ;;      Params:         0       0       0       0       0       0       0       0       0
   543 ;;      Locals:         4       0       0       0       0       0       0       0       0
   544 ;;      Temps:          0       0       0       0       0       0       0       0       0
   545 ;;      Totals:         4       0       0       0       0       0       0       0       0
   546 ;;Total ram usage:        4 bytes
   547 ;; Hardware stack levels required when called:    7
   548 ;; This function calls:
   549 ;;		_cadastrarSenha
   550 ;;		_destravarPorta
   551 ;;		_init_ADC
   552 ;;		_init_INTRB2
   553 ;;		_init_LCD
   554 ;;		_init_PWM
   555 ;;		_init_UART
   556 ;; This function is called by:
   557 ;;		Startup code after reset
   558 ;; This function uses a non-reentrant model
   559 ;;
   560                           
   561                           	psect	text0
   562  0010B2                     __ptext0:
   563                           	opt stack 0
   564  0010B2                     _main:
   565                           	opt stack 24
   566                           
   567                           ;main.c: 26: init_PWM();
   568                           
   569                           ;incstack = 0
   570  0010B2  EC03  F00A         	call	_init_PWM	;wreg free
   571                           
   572                           ;main.c: 27: init_INTRB2();
   573  0010B6  EC15  F00A         	call	_init_INTRB2	;wreg free
   574                           
   575                           ;main.c: 28: init_LCD();
   576  0010BA  ECAC  F009         	call	_init_LCD	;wreg free
   577                           
   578                           ;main.c: 29: init_ADC();
   579  0010BE  EC0C  F00A         	call	_init_ADC	;wreg free
   580                           
   581                           ;main.c: 30: init_UART();
   582  0010C2  ECF9  F009         	call	_init_UART	;wreg free
   583                           
   584                           ;main.c: 32: char pass[2];
   585                           ;main.c: 33: pass[0] = 0x00;
   586  0010C6  0E00               	movlw	0
   587  0010C8  6E37               	movwf	main@pass,c
   588                           
   589                           ;main.c: 34: pass[1] = 0x00;
   590  0010CA  0E00               	movlw	0
   591  0010CC  6E38               	movwf	main@pass+1,c
   592                           
   593                           ;main.c: 35: char toc[2];
   594                           ;main.c: 36: toc[0] = 0x00;
   595  0010CE  0E00               	movlw	0
   596  0010D0  6E35               	movwf	main@toc,c
   597                           
   598                           ;main.c: 37: toc[1] = 0x00;
   599  0010D2  0E00               	movlw	0
   600  0010D4  6E36               	movwf	main@toc+1,c
   601                           
   602                           ;main.c: 39: cadastrarSenha(pass);
   603  0010D6  0E37               	movlw	low main@pass
   604  0010D8  6E29               	movwf	cadastrarSenha@pass,c
   605  0010DA  0E00               	movlw	high main@pass
   606  0010DC  6E2A               	movwf	cadastrarSenha@pass+1,c
   607  0010DE  EC40  F005         	call	_cadastrarSenha	;wreg free
   608  0010E2                     l1888:
   609                           
   610                           ;main.c: 43: destravarPorta(pass, toc);
   611  0010E2  0E37               	movlw	low main@pass
   612  0010E4  6E25               	movwf	destravarPorta@pass,c
   613  0010E6  0E00               	movlw	high main@pass
   614  0010E8  6E26               	movwf	destravarPorta@pass+1,c
   615  0010EA  0E35               	movlw	low main@toc
   616  0010EC  6E27               	movwf	destravarPorta@toque,c
   617  0010EE  0E00               	movlw	high main@toc
   618  0010F0  6E28               	movwf	destravarPorta@toque+1,c
   619  0010F2  EC3B  F004         	call	_destravarPorta	;wreg free
   620                           
   621                           ;main.c: 44: if(buttonConfirm_Cad == 1){
   622  0010F6  0439               	decf	_buttonConfirm_Cad,w,c
   623  0010F8  103A               	iorwf	_buttonConfirm_Cad+1,w,c
   624  0010FA  A4D8               	btfss	status,2,c
   625  0010FC  D7F2               	goto	l1888
   626                           
   627                           ;main.c: 45: buttonConfirm_Cad = 0;
   628  0010FE  0E00               	movlw	0
   629  001100  6E3A               	movwf	_buttonConfirm_Cad+1,c
   630  001102  0E00               	movlw	0
   631  001104  6E39               	movwf	_buttonConfirm_Cad,c
   632                           
   633                           ;main.c: 46: cadastrarSenha(pass);
   634  001106  0E37               	movlw	low main@pass
   635  001108  6E29               	movwf	cadastrarSenha@pass,c
   636  00110A  0E00               	movlw	high main@pass
   637  00110C  6E2A               	movwf	cadastrarSenha@pass+1,c
   638  00110E  EC40  F005         	call	_cadastrarSenha	;wreg free
   639                           
   640                           ;main.c: 47: }
   641                           ;main.c: 49: }while(1);
   642  001112  D7E7               	goto	l1888
   643  001114                     __end_of_main:
   644                           	opt stack 0
   645                           tblptru	equ	0xFF8
   646                           tblptrh	equ	0xFF7
   647                           tblptrl	equ	0xFF6
   648                           tablat	equ	0xFF5
   649                           status	equ	0xFD8
   650                           
   651 ;; *************** function _init_UART *****************
   652 ;; Defined at:
   653 ;;		line 13 in file "USART.c"
   654 ;; Parameters:    Size  Location     Type
   655 ;;		None
   656 ;; Auto vars:     Size  Location     Type
   657 ;;		None
   658 ;; Return value:  Size  Location     Type
   659 ;;                  1    wreg      void 
   660 ;; Registers used:
   661 ;;		wreg, status,2
   662 ;; Tracked objects:
   663 ;;		On entry : 0/0
   664 ;;		On exit  : 0/0
   665 ;;		Unchanged: 0/0
   666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   667 ;;      Params:         0       0       0       0       0       0       0       0       0
   668 ;;      Locals:         0       0       0       0       0       0       0       0       0
   669 ;;      Temps:          0       0       0       0       0       0       0       0       0
   670 ;;      Totals:         0       0       0       0       0       0       0       0       0
   671 ;;Total ram usage:        0 bytes
   672 ;; Hardware stack levels used:    1
   673 ;; Hardware stack levels required when called:    2
   674 ;; This function calls:
   675 ;;		Nothing
   676 ;; This function is called by:
   677 ;;		_main
   678 ;; This function uses a non-reentrant model
   679 ;;
   680                           
   681                           	psect	text1
   682  0013F2                     __ptext1:
   683                           	opt stack 0
   684  0013F2                     _init_UART:
   685                           	opt stack 28
   686                           
   687                           ;USART.c: 15: SPBRG = 25;
   688                           
   689                           ;incstack = 0
   690  0013F2  0E19               	movlw	25
   691  0013F4  6EAF               	movwf	4015,c	;volatile
   692                           
   693                           ;USART.c: 16: BRGH = 0;
   694  0013F6  94AC               	bcf	4012,2,c	;volatile
   695                           
   696                           ;USART.c: 17: SYNC = 0;
   697  0013F8  98AC               	bcf	4012,4,c	;volatile
   698                           
   699                           ;USART.c: 18: SPEN = 1;
   700  0013FA  8EAB               	bsf	4011,7,c	;volatile
   701                           
   702                           ;USART.c: 19: TRISC7 = 1;
   703  0013FC  8E94               	bsf	3988,7,c	;volatile
   704                           
   705                           ;USART.c: 20: TRISC6 = 1;
   706  0013FE  8C94               	bsf	3988,6,c	;volatile
   707                           
   708                           ;USART.c: 21: CREN = 1;
   709  001400  88AB               	bsf	4011,4,c	;volatile
   710                           
   711                           ;USART.c: 22: TXEN = 1;
   712  001402  8AAC               	bsf	4012,5,c	;volatile
   713  001404  0012               	return		;funcret
   714  001406                     __end_of_init_UART:
   715                           	opt stack 0
   716                           tblptru	equ	0xFF8
   717                           tblptrh	equ	0xFF7
   718                           tblptrl	equ	0xFF6
   719                           tablat	equ	0xFF5
   720                           status	equ	0xFD8
   721                           
   722 ;; *************** function _init_PWM *****************
   723 ;; Defined at:
   724 ;;		line 14 in file "PWM.c"
   725 ;; Parameters:    Size  Location     Type
   726 ;;		None
   727 ;; Auto vars:     Size  Location     Type
   728 ;;		None
   729 ;; Return value:  Size  Location     Type
   730 ;;                  1    wreg      void 
   731 ;; Registers used:
   732 ;;		wreg, status,2
   733 ;; Tracked objects:
   734 ;;		On entry : 0/0
   735 ;;		On exit  : 0/0
   736 ;;		Unchanged: 0/0
   737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   738 ;;      Params:         0       0       0       0       0       0       0       0       0
   739 ;;      Locals:         0       0       0       0       0       0       0       0       0
   740 ;;      Temps:          0       0       0       0       0       0       0       0       0
   741 ;;      Totals:         0       0       0       0       0       0       0       0       0
   742 ;;Total ram usage:        0 bytes
   743 ;; Hardware stack levels used:    1
   744 ;; Hardware stack levels required when called:    2
   745 ;; This function calls:
   746 ;;		Nothing
   747 ;; This function is called by:
   748 ;;		_main
   749 ;; This function uses a non-reentrant model
   750 ;;
   751                           
   752                           	psect	text2
   753  001406                     __ptext2:
   754                           	opt stack 0
   755  001406                     _init_PWM:
   756                           	opt stack 28
   757                           
   758                           ;PWM.c: 15: TRISCbits.TRISC2 = 0;
   759                           
   760                           ;incstack = 0
   761  001406  9494               	bcf	3988,2,c	;volatile
   762                           
   763                           ;PWM.c: 16: T2CON = 0x04;
   764  001408  0E04               	movlw	4
   765  00140A  6ECA               	movwf	4042,c	;volatile
   766                           
   767                           ;PWM.c: 17: PR2 = 0xFF;
   768  00140C  68CB               	setf	4043,c	;volatile
   769                           
   770                           ;PWM.c: 18: CCP1CON = 0x3F;
   771  00140E  0E3F               	movlw	63
   772  001410  6EBD               	movwf	4029,c	;volatile
   773                           
   774                           ;PWM.c: 19: CCPR1L = 0x00;
   775  001412  0E00               	movlw	0
   776  001414  6EBE               	movwf	4030,c	;volatile
   777  001416  0012               	return		;funcret
   778  001418                     __end_of_init_PWM:
   779                           	opt stack 0
   780                           tblptru	equ	0xFF8
   781                           tblptrh	equ	0xFF7
   782                           tblptrl	equ	0xFF6
   783                           tablat	equ	0xFF5
   784                           status	equ	0xFD8
   785                           
   786 ;; *************** function _init_LCD *****************
   787 ;; Defined at:
   788 ;;		line 45 in file "LCD.c"
   789 ;; Parameters:    Size  Location     Type
   790 ;;		None
   791 ;; Auto vars:     Size  Location     Type
   792 ;;		None
   793 ;; Return value:  Size  Location     Type
   794 ;;                  1    wreg      void 
   795 ;; Registers used:
   796 ;;		wreg, status,2, cstack
   797 ;; Tracked objects:
   798 ;;		On entry : 0/0
   799 ;;		On exit  : 0/0
   800 ;;		Unchanged: 0/0
   801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   802 ;;      Params:         0       0       0       0       0       0       0       0       0
   803 ;;      Locals:         0       0       0       0       0       0       0       0       0
   804 ;;      Temps:          0       0       0       0       0       0       0       0       0
   805 ;;      Totals:         0       0       0       0       0       0       0       0       0
   806 ;;Total ram usage:        0 bytes
   807 ;; Hardware stack levels used:    1
   808 ;; Hardware stack levels required when called:    4
   809 ;; This function calls:
   810 ;;		_send_cfg
   811 ;; This function is called by:
   812 ;;		_main
   813 ;; This function uses a non-reentrant model
   814 ;;
   815                           
   816                           	psect	text3
   817  001358                     __ptext3:
   818                           	opt stack 0
   819  001358                     _init_LCD:
   820                           	opt stack 26
   821                           
   822                           ;LCD.c: 47: TRISB = 0x04;
   823                           
   824                           ;incstack = 0
   825  001358  0E04               	movlw	4
   826  00135A  6E93               	movwf	3987,c	;volatile
   827                           
   828                           ;LCD.c: 48: TRISD = 0x00;
   829  00135C  0E00               	movlw	0
   830  00135E  6E95               	movwf	3989,c	;volatile
   831                           
   832                           ;LCD.c: 49: TRISE = 0x00;
   833  001360  0E00               	movlw	0
   834  001362  6E96               	movwf	3990,c	;volatile
   835                           
   836                           ;LCD.c: 50: PORTD = 0x00;
   837  001364  0E00               	movlw	0
   838  001366  6E83               	movwf	3971,c	;volatile
   839                           
   840                           ;LCD.c: 52: send_cfg(0x01);
   841  001368  0E01               	movlw	1
   842  00136A  ECD0  F009         	call	_send_cfg
   843                           
   844                           ;LCD.c: 53: send_cfg(0x38);
   845  00136E  0E38               	movlw	56
   846  001370  ECD0  F009         	call	_send_cfg
   847                           
   848                           ;LCD.c: 54: send_cfg(0x80);
   849  001374  0E80               	movlw	128
   850  001376  ECD0  F009         	call	_send_cfg
   851                           
   852                           ;LCD.c: 55: send_cfg(0x0F);
   853  00137A  0E0F               	movlw	15
   854  00137C  ECD0  F009         	call	_send_cfg
   855  001380  0012               	return		;funcret
   856  001382                     __end_of_init_LCD:
   857                           	opt stack 0
   858                           tblptru	equ	0xFF8
   859                           tblptrh	equ	0xFF7
   860                           tblptrl	equ	0xFF6
   861                           tablat	equ	0xFF5
   862                           status	equ	0xFD8
   863                           
   864 ;; *************** function _init_INTRB2 *****************
   865 ;; Defined at:
   866 ;;		line 51 in file "Interrupt.c"
   867 ;; Parameters:    Size  Location     Type
   868 ;;		None
   869 ;; Auto vars:     Size  Location     Type
   870 ;;		None
   871 ;; Return value:  Size  Location     Type
   872 ;;                  1    wreg      void 
   873 ;; Registers used:
   874 ;;		None
   875 ;; Tracked objects:
   876 ;;		On entry : 0/0
   877 ;;		On exit  : 0/0
   878 ;;		Unchanged: 0/0
   879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   880 ;;      Params:         0       0       0       0       0       0       0       0       0
   881 ;;      Locals:         0       0       0       0       0       0       0       0       0
   882 ;;      Temps:          0       0       0       0       0       0       0       0       0
   883 ;;      Totals:         0       0       0       0       0       0       0       0       0
   884 ;;Total ram usage:        0 bytes
   885 ;; Hardware stack levels used:    1
   886 ;; Hardware stack levels required when called:    2
   887 ;; This function calls:
   888 ;;		Nothing
   889 ;; This function is called by:
   890 ;;		_main
   891 ;; This function uses a non-reentrant model
   892 ;;
   893                           
   894                           	psect	text4
   895  00142A                     __ptext4:
   896                           	opt stack 0
   897  00142A                     _init_INTRB2:
   898                           	opt stack 28
   899                           
   900                           ;Interrupt.c: 53: INTCONbits.GIE = 0;
   901                           
   902                           ;incstack = 0
   903  00142A  9EF2               	bcf	intcon,7,c	;volatile
   904                           
   905                           ;Interrupt.c: 54: INTCONbits.PEIE = 0;
   906  00142C  9CF2               	bcf	intcon,6,c	;volatile
   907                           
   908                           ;Interrupt.c: 55: TRISBbits.RB2 = 1;
   909  00142E  8493               	bsf	3987,2,c	;volatile
   910                           
   911                           ;Interrupt.c: 56: INTCON2bits.INTEDG0 = 1;
   912  001430  8CF1               	bsf	intcon2,6,c	;volatile
   913                           
   914                           ;Interrupt.c: 57: INTCON3bits.INT2IF = 0;
   915  001432  92F0               	bcf	intcon3,1,c	;volatile
   916                           
   917                           ;Interrupt.c: 58: INTCON3bits.INT2IE = 1;
   918  001434  88F0               	bsf	intcon3,4,c	;volatile
   919                           
   920                           ;Interrupt.c: 59: INTCONbits.GIE = 1;
   921  001436  8EF2               	bsf	intcon,7,c	;volatile
   922  001438  0012               	return		;funcret
   923  00143A                     __end_of_init_INTRB2:
   924                           	opt stack 0
   925                           tblptru	equ	0xFF8
   926                           tblptrh	equ	0xFF7
   927                           tblptrl	equ	0xFF6
   928                           tablat	equ	0xFF5
   929                           intcon	equ	0xFF2
   930                           intcon2	equ	0xFF1
   931                           intcon3	equ	0xFF0
   932                           status	equ	0xFD8
   933                           
   934 ;; *************** function _init_ADC *****************
   935 ;; Defined at:
   936 ;;		line 11 in file "ADC.c"
   937 ;; Parameters:    Size  Location     Type
   938 ;;		None
   939 ;; Auto vars:     Size  Location     Type
   940 ;;		None
   941 ;; Return value:  Size  Location     Type
   942 ;;                  1    wreg      void 
   943 ;; Registers used:
   944 ;;		wreg, status,2
   945 ;; Tracked objects:
   946 ;;		On entry : 0/0
   947 ;;		On exit  : 0/0
   948 ;;		Unchanged: 0/0
   949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   950 ;;      Params:         0       0       0       0       0       0       0       0       0
   951 ;;      Locals:         0       0       0       0       0       0       0       0       0
   952 ;;      Temps:          0       0       0       0       0       0       0       0       0
   953 ;;      Totals:         0       0       0       0       0       0       0       0       0
   954 ;;Total ram usage:        0 bytes
   955 ;; Hardware stack levels used:    1
   956 ;; Hardware stack levels required when called:    2
   957 ;; This function calls:
   958 ;;		Nothing
   959 ;; This function is called by:
   960 ;;		_main
   961 ;; This function uses a non-reentrant model
   962 ;;
   963                           
   964                           	psect	text5
   965  001418                     __ptext5:
   966                           	opt stack 0
   967  001418                     _init_ADC:
   968                           	opt stack 28
   969                           
   970                           ;ADC.c: 12: TRISAbits.TRISA0 = 1;
   971                           
   972                           ;incstack = 0
   973  001418  8092               	bsf	3986,0,c	;volatile
   974                           
   975                           ;ADC.c: 13: ADCON0 = 0;
   976  00141A  0E00               	movlw	0
   977  00141C  6EC2               	movwf	4034,c	;volatile
   978                           
   979                           ;ADC.c: 14: ADCON1 = 0x0e;
   980  00141E  0E0E               	movlw	14
   981  001420  6EC1               	movwf	4033,c	;volatile
   982                           
   983                           ;ADC.c: 15: ADCON2 = 0xd9;
   984  001422  0ED9               	movlw	217
   985  001424  6EC0               	movwf	4032,c	;volatile
   986                           
   987                           ;ADC.c: 16: ADCON0bits.ADON = 1;
   988  001426  80C2               	bsf	4034,0,c	;volatile
   989  001428  0012               	return		;funcret
   990  00142A                     __end_of_init_ADC:
   991                           	opt stack 0
   992                           tblptru	equ	0xFF8
   993                           tblptrh	equ	0xFF7
   994                           tblptrl	equ	0xFF6
   995                           tablat	equ	0xFF5
   996                           intcon	equ	0xFF2
   997                           intcon2	equ	0xFF1
   998                           intcon3	equ	0xFF0
   999                           status	equ	0xFD8
  1000                           
  1001 ;; *************** function _destravarPorta *****************
  1002 ;; Defined at:
  1003 ;;		line 53 in file "TOCTOC.c"
  1004 ;; Parameters:    Size  Location     Type
  1005 ;;  pass            2   36[COMRAM] PTR unsigned char 
  1006 ;;		 -> main@pass(2), 
  1007 ;;  toque           2   38[COMRAM] PTR unsigned char 
  1008 ;;		 -> main@toc(2), 
  1009 ;; Auto vars:     Size  Location     Type
  1010 ;;  i               2   42[COMRAM] int 
  1011 ;; Return value:  Size  Location     Type
  1012 ;;                  1    wreg      void 
  1013 ;; Registers used:
  1014 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1015 ;; Tracked objects:
  1016 ;;		On entry : 0/0
  1017 ;;		On exit  : 0/0
  1018 ;;		Unchanged: 0/0
  1019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1020 ;;      Params:         4       0       0       0       0       0       0       0       0
  1021 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1022 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1023 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1024 ;;Total ram usage:        8 bytes
  1025 ;; Hardware stack levels used:    1
  1026 ;; Hardware stack levels required when called:    6
  1027 ;; This function calls:
  1028 ;;		_DutyCycle_PWM
  1029 ;;		_checkUSART
  1030 ;;		_clearLCD
  1031 ;;		_cmpPass
  1032 ;;		_readSignal
  1033 ;;		_read_ADC
  1034 ;;		_send_msg
  1035 ;;		_set_line
  1036 ;;		_write_LCD
  1037 ;; This function is called by:
  1038 ;;		_main
  1039 ;; This function uses a non-reentrant model
  1040 ;;
  1041                           
  1042                           	psect	text6
  1043  000876                     __ptext6:
  1044                           	opt stack 0
  1045  000876                     _destravarPorta:
  1046                           	opt stack 24
  1047                           
  1048                           ;TOCTOC.c: 55: int i = 0;
  1049                           
  1050                           ;incstack = 0
  1051  000876  0E00               	movlw	0
  1052  000878  6E2C               	movwf	destravarPorta@i+1,c
  1053  00087A  0E00               	movlw	0
  1054  00087C  6E2B               	movwf	destravarPorta@i,c
  1055                           
  1056                           ;TOCTOC.c: 57: toque[0] = 0x00;
  1057  00087E  C027  FFD9         	movff	destravarPorta@toque,fsr2l
  1058  000882  C028  FFDA         	movff	destravarPorta@toque+1,fsr2h
  1059  000886  0E00               	movlw	0
  1060  000888  6EDF               	movwf	indf2,c
  1061                           
  1062                           ;TOCTOC.c: 58: toque[1] = 0x00;
  1063  00088A  EE20 F001          	lfsr	2,1
  1064  00088E  5027               	movf	destravarPorta@toque,w,c
  1065  000890  26D9               	addwf	fsr2l,f,c
  1066  000892  5028               	movf	destravarPorta@toque+1,w,c
  1067  000894  22DA               	addwfc	fsr2h,f,c
  1068  000896  0E00               	movlw	0
  1069  000898  6EDF               	movwf	indf2,c
  1070                           
  1071                           ;TOCTOC.c: 60: clearLCD();
  1072  00089A  EC25  F00A         	call	_clearLCD	;wreg free
  1073                           
  1074                           ;TOCTOC.c: 61: set_line(0,0);
  1075  00089E  0E00               	movlw	0
  1076  0008A0  6E19               	movwf	set_line@line+1,c
  1077  0008A2  0E00               	movlw	0
  1078  0008A4  6E18               	movwf	set_line@line,c
  1079  0008A6  0E00               	movlw	0
  1080  0008A8  6E1B               	movwf	set_line@pos+1,c
  1081  0008AA  0E00               	movlw	0
  1082  0008AC  6E1A               	movwf	set_line@pos,c
  1083  0008AE  ECDF  F009         	call	_set_line	;wreg free
  1084                           
  1085                           ;TOCTOC.c: 62: write_LCD("Bata na porta");
  1086  0008B2  0E01               	movlw	low STR_1
  1087  0008B4  6E18               	movwf	write_LCD@c,c
  1088  0008B6  0E08               	movlw	high STR_1
  1089  0008B8  6E19               	movwf	write_LCD@c+1,c
  1090  0008BA  ECE0  F008         	call	_write_LCD	;wreg free
  1091                           
  1092                           ;TOCTOC.c: 64: while((int)read_ADC() < 25){
  1093  0008BE  D00D               	goto	l1794
  1094  0008C0                     l1784:
  1095                           
  1096                           ;TOCTOC.c: 65: checkUSART();
  1097  0008C0  EC8A  F008         	call	_checkUSART	;wreg free
  1098                           
  1099                           ;TOCTOC.c: 66: if(PORTBbits.RB4 == 1 || buttonConfirm_Cad == 1){
  1100  0008C4  B881               	btfsc	3969,4,c	;volatile
  1101  0008C6  D004               	goto	l1790
  1102  0008C8  0439               	decf	_buttonConfirm_Cad,w,c
  1103  0008CA  103A               	iorwf	_buttonConfirm_Cad+1,w,c
  1104  0008CC  A4D8               	btfss	status,2,c
  1105  0008CE  D005               	goto	l1794
  1106  0008D0                     l1790:
  1107                           
  1108                           ;TOCTOC.c: 67: buttonConfirm_Cad = 1;
  1109  0008D0  0E00               	movlw	0
  1110  0008D2  6E3A               	movwf	_buttonConfirm_Cad+1,c
  1111  0008D4  0E01               	movlw	1
  1112  0008D6  6E39               	movwf	_buttonConfirm_Cad,c
  1113                           
  1114                           ;TOCTOC.c: 68: return;
  1115  0008D8  0012               	return	
  1116  0008DA                     l1794:
  1117  0008DA  ECED  F009         	call	_read_ADC	;wreg free
  1118  0008DE  BE16               	btfsc	?_read_ADC+1,7,c
  1119  0008E0  D7EF               	goto	l1784
  1120  0008E2  5016               	movf	?_read_ADC+1,w,c
  1121  0008E4  E151               	bnz	l1814
  1122  0008E6  0E19               	movlw	25
  1123  0008E8  5C15               	subwf	?_read_ADC,w,c
  1124  0008EA  B0D8               	btfsc	status,0,c
  1125  0008EC  D04D               	goto	l1814
  1126  0008EE  D7E8               	goto	l1784
  1127  0008F0                     l1796:
  1128                           
  1129                           ;TOCTOC.c: 73: set_line(1,0);
  1130  0008F0  0E00               	movlw	0
  1131  0008F2  6E19               	movwf	set_line@line+1,c
  1132  0008F4  0E01               	movlw	1
  1133  0008F6  6E18               	movwf	set_line@line,c
  1134  0008F8  0E00               	movlw	0
  1135  0008FA  6E1B               	movwf	set_line@pos+1,c
  1136  0008FC  0E00               	movlw	0
  1137  0008FE  6E1A               	movwf	set_line@pos,c
  1138  000900  ECDF  F009         	call	_set_line	;wreg free
  1139                           
  1140                           ;TOCTOC.c: 74: send_msg('1'+ i);
  1141  000904  502B               	movf	destravarPorta@i,w,c
  1142  000906  0F31               	addlw	49
  1143  000908  EC94  F009         	call	_send_msg
  1144                           
  1145                           ;TOCTOC.c: 75: if(i == 0)
  1146  00090C  502B               	movf	destravarPorta@i,w,c
  1147  00090E  102C               	iorwf	destravarPorta@i+1,w,c
  1148  000910  A4D8               	btfss	status,2,c
  1149  000912  D00B               	goto	l1802
  1150                           
  1151                           ;TOCTOC.c: 76: readSignal(&toque[0], 0);
  1152  000914  C027  F019         	movff	destravarPorta@toque,readSignal@signal
  1153  000918  C028  F01A         	movff	destravarPorta@toque+1,readSignal@signal+1
  1154  00091C  0E00               	movlw	0
  1155  00091E  6E1C               	movwf	readSignal@pos+1,c
  1156  000920  0E00               	movlw	0
  1157  000922  6E1B               	movwf	readSignal@pos,c
  1158  000924  ECCD  F007         	call	_readSignal	;wreg free
  1159  000928  D02D               	goto	l1812
  1160  00092A                     l1802:
  1161                           
  1162                           ;TOCTOC.c: 77: else if(i == 1)
  1163  00092A  042B               	decf	destravarPorta@i,w,c
  1164  00092C  102C               	iorwf	destravarPorta@i+1,w,c
  1165  00092E  A4D8               	btfss	status,2,c
  1166  000930  D00B               	goto	l1806
  1167                           
  1168                           ;TOCTOC.c: 78: readSignal(&toque[0], 1);
  1169  000932  C027  F019         	movff	destravarPorta@toque,readSignal@signal
  1170  000936  C028  F01A         	movff	destravarPorta@toque+1,readSignal@signal+1
  1171  00093A  0E00               	movlw	0
  1172  00093C  6E1C               	movwf	readSignal@pos+1,c
  1173  00093E  0E01               	movlw	1
  1174  000940  6E1B               	movwf	readSignal@pos,c
  1175  000942  ECCD  F007         	call	_readSignal	;wreg free
  1176  000946  D01E               	goto	l1812
  1177  000948                     l1806:
  1178                           
  1179                           ;TOCTOC.c: 79: else if(i == 2)
  1180  000948  0E02               	movlw	2
  1181  00094A  182B               	xorwf	destravarPorta@i,w,c
  1182  00094C  102C               	iorwf	destravarPorta@i+1,w,c
  1183  00094E  A4D8               	btfss	status,2,c
  1184  000950  D00D               	goto	l1810
  1185                           
  1186                           ;TOCTOC.c: 80: readSignal(&toque[1], 0);
  1187  000952  0E01               	movlw	1
  1188  000954  2427               	addwf	destravarPorta@toque,w,c
  1189  000956  6E19               	movwf	readSignal@signal,c
  1190  000958  0E00               	movlw	0
  1191  00095A  2028               	addwfc	destravarPorta@toque+1,w,c
  1192  00095C  6E1A               	movwf	readSignal@signal+1,c
  1193  00095E  0E00               	movlw	0
  1194  000960  6E1C               	movwf	readSignal@pos+1,c
  1195  000962  0E00               	movlw	0
  1196  000964  6E1B               	movwf	readSignal@pos,c
  1197  000966  ECCD  F007         	call	_readSignal	;wreg free
  1198  00096A  D00C               	goto	l1812
  1199  00096C                     l1810:
  1200                           
  1201                           ;TOCTOC.c: 81: else
  1202                           ;TOCTOC.c: 82: readSignal(&toque[1], 1);
  1203  00096C  0E01               	movlw	1
  1204  00096E  2427               	addwf	destravarPorta@toque,w,c
  1205  000970  6E19               	movwf	readSignal@signal,c
  1206  000972  0E00               	movlw	0
  1207  000974  2028               	addwfc	destravarPorta@toque+1,w,c
  1208  000976  6E1A               	movwf	readSignal@signal+1,c
  1209  000978  0E00               	movlw	0
  1210  00097A  6E1C               	movwf	readSignal@pos+1,c
  1211  00097C  0E01               	movlw	1
  1212  00097E  6E1B               	movwf	readSignal@pos,c
  1213  000980  ECCD  F007         	call	_readSignal	;wreg free
  1214  000984                     l1812:
  1215                           
  1216                           ;TOCTOC.c: 83: i++;
  1217  000984  4A2B               	infsnz	destravarPorta@i,f,c
  1218  000986  2A2C               	incf	destravarPorta@i+1,f,c
  1219  000988                     l1814:
  1220  000988  BE2C               	btfsc	destravarPorta@i+1,7,c
  1221  00098A  D7B2               	goto	l1796
  1222  00098C  502C               	movf	destravarPorta@i+1,w,c
  1223  00098E  E104               	bnz	l1816
  1224  000990  0E04               	movlw	4
  1225  000992  5C2B               	subwf	destravarPorta@i,w,c
  1226  000994  A0D8               	btfss	status,0,c
  1227  000996  D7AC               	goto	l1796
  1228  000998                     l1816:
  1229                           
  1230                           ;TOCTOC.c: 84: }
  1231                           ;TOCTOC.c: 85: if(cmpPass(pass, toque)){
  1232  000998  C025  F01E         	movff	destravarPorta@pass,cmpPass@pass
  1233  00099C  C026  F01F         	movff	destravarPorta@pass+1,cmpPass@pass+1
  1234  0009A0  C027  F020         	movff	destravarPorta@toque,cmpPass@toque
  1235  0009A4  C028  F021         	movff	destravarPorta@toque+1,cmpPass@toque+1
  1236  0009A8  EC9C  F006         	call	_cmpPass	;wreg free
  1237  0009AC  501E               	movf	?_cmpPass,w,c
  1238  0009AE  101F               	iorwf	?_cmpPass+1,w,c
  1239  0009B0  B4D8               	btfsc	status,2,c
  1240  0009B2  D043               	goto	l1838
  1241                           
  1242                           ;TOCTOC.c: 86: clearLCD();
  1243  0009B4  EC25  F00A         	call	_clearLCD	;wreg free
  1244                           
  1245                           ;TOCTOC.c: 87: set_line(0,4);
  1246  0009B8  0E00               	movlw	0
  1247  0009BA  6E19               	movwf	set_line@line+1,c
  1248  0009BC  0E00               	movlw	0
  1249  0009BE  6E18               	movwf	set_line@line,c
  1250  0009C0  0E00               	movlw	0
  1251  0009C2  6E1B               	movwf	set_line@pos+1,c
  1252  0009C4  0E04               	movlw	4
  1253  0009C6  6E1A               	movwf	set_line@pos,c
  1254  0009C8  ECDF  F009         	call	_set_line	;wreg free
  1255                           
  1256                           ;TOCTOC.c: 88: write_LCD("Porta");
  1257  0009CC  0E6F               	movlw	low STR_3
  1258  0009CE  6E18               	movwf	write_LCD@c,c
  1259  0009D0  0E08               	movlw	high STR_3
  1260  0009D2  6E19               	movwf	write_LCD@c+1,c
  1261  0009D4  ECE0  F008         	call	_write_LCD	;wreg free
  1262                           
  1263                           ;TOCTOC.c: 89: set_line(1,2);
  1264  0009D8  0E00               	movlw	0
  1265  0009DA  6E19               	movwf	set_line@line+1,c
  1266  0009DC  0E01               	movlw	1
  1267  0009DE  6E18               	movwf	set_line@line,c
  1268  0009E0  0E00               	movlw	0
  1269  0009E2  6E1B               	movwf	set_line@pos+1,c
  1270  0009E4  0E02               	movlw	2
  1271  0009E6  6E1A               	movwf	set_line@pos,c
  1272  0009E8  ECDF  F009         	call	_set_line	;wreg free
  1273                           
  1274                           ;TOCTOC.c: 90: write_LCD("Destravada!");
  1275  0009EC  0E37               	movlw	low STR_4
  1276  0009EE  6E18               	movwf	write_LCD@c,c
  1277  0009F0  0E08               	movlw	high STR_4
  1278  0009F2  6E19               	movwf	write_LCD@c+1,c
  1279  0009F4  ECE0  F008         	call	_write_LCD	;wreg free
  1280                           
  1281                           ;TOCTOC.c: 91: if(doorState == 0){
  1282  0009F8  503D               	movf	_doorState,w,c
  1283  0009FA  103E               	iorwf	_doorState+1,w,c
  1284  0009FC  A4D8               	btfss	status,2,c
  1285  0009FE  0012               	return	
  1286                           
  1287                           ;TOCTOC.c: 92: doorState = 1;
  1288  000A00  0E00               	movlw	0
  1289  000A02  6E3E               	movwf	_doorState+1,c
  1290  000A04  0E01               	movlw	1
  1291  000A06  6E3D               	movwf	_doorState,c
  1292                           
  1293                           ;TOCTOC.c: 93: DutyCycle_PWM(8);
  1294  000A08  0E00               	movlw	0
  1295  000A0A  6E16               	movwf	DutyCycle_PWM@Valor+1,c
  1296  000A0C  0E08               	movlw	8
  1297  000A0E  6E15               	movwf	DutyCycle_PWM@Valor,c
  1298  000A10  EC05  F009         	call	_DutyCycle_PWM	;wreg free
  1299                           
  1300                           ;TOCTOC.c: 94: _delay((unsigned long)((175)*(16000000/4000.0)));
  1301  000A14  0E04               	movlw	4
  1302  000A16  6E2A               	movwf	(??_destravarPorta+1)& (0+255),c
  1303  000A18  0E8E               	movlw	142
  1304  000A1A  6E29               	movwf	??_destravarPorta& (0+255),c
  1305  000A1C  0E12               	movlw	18
  1306  000A1E                     u1097:
  1307  000A1E  2EE8               	decfsz	wreg,f,c
  1308  000A20  D7FE               	bra	u1097
  1309  000A22  2E29               	decfsz	??_destravarPorta& (0+255),f,c
  1310  000A24  D7FC               	bra	u1097
  1311  000A26  2E2A               	decfsz	(??_destravarPorta+1)& (0+255),f,c
  1312  000A28  D7FA               	bra	u1097
  1313  000A2A  D000               	nop2	
  1314                           
  1315                           ;TOCTOC.c: 95: DutyCycle_PWM(0);
  1316  000A2C  0E00               	movlw	0
  1317  000A2E  6E16               	movwf	DutyCycle_PWM@Valor+1,c
  1318  000A30  0E00               	movlw	0
  1319  000A32  6E15               	movwf	DutyCycle_PWM@Valor,c
  1320  000A34  EC05  F009         	call	_DutyCycle_PWM	;wreg free
  1321                           
  1322                           ;TOCTOC.c: 96: }
  1323                           ;TOCTOC.c: 98: }
  1324  000A38  0012               	return	
  1325  000A3A                     l1838:
  1326                           
  1327                           ;TOCTOC.c: 99: else{
  1328                           ;TOCTOC.c: 100: clearLCD();
  1329  000A3A  EC25  F00A         	call	_clearLCD	;wreg free
  1330                           
  1331                           ;TOCTOC.c: 101: set_line(0,3);
  1332  000A3E  0E00               	movlw	0
  1333  000A40  6E19               	movwf	set_line@line+1,c
  1334  000A42  0E00               	movlw	0
  1335  000A44  6E18               	movwf	set_line@line,c
  1336  000A46  0E00               	movlw	0
  1337  000A48  6E1B               	movwf	set_line@pos+1,c
  1338  000A4A  0E03               	movlw	3
  1339  000A4C  6E1A               	movwf	set_line@pos,c
  1340  000A4E  ECDF  F009         	call	_set_line	;wreg free
  1341                           
  1342                           ;TOCTOC.c: 102: write_LCD("As senhas");
  1343  000A52  0E59               	movlw	low STR_5
  1344  000A54  6E18               	movwf	write_LCD@c,c
  1345  000A56  0E08               	movlw	high STR_5
  1346  000A58  6E19               	movwf	write_LCD@c+1,c
  1347  000A5A  ECE0  F008         	call	_write_LCD	;wreg free
  1348                           
  1349                           ;TOCTOC.c: 103: set_line(1,1);
  1350  000A5E  0E00               	movlw	0
  1351  000A60  6E19               	movwf	set_line@line+1,c
  1352  000A62  0E01               	movlw	1
  1353  000A64  6E18               	movwf	set_line@line,c
  1354  000A66  0E00               	movlw	0
  1355  000A68  6E1B               	movwf	set_line@pos+1,c
  1356  000A6A  0E01               	movlw	1
  1357  000A6C  6E1A               	movwf	set_line@pos,c
  1358  000A6E  ECDF  F009         	call	_set_line	;wreg free
  1359                           
  1360                           ;TOCTOC.c: 104: write_LCD("nao coincidem");
  1361  000A72  0E0F               	movlw	low STR_6
  1362  000A74  6E18               	movwf	write_LCD@c,c
  1363  000A76  0E08               	movlw	high STR_6
  1364  000A78  6E19               	movwf	write_LCD@c+1,c
  1365  000A7A  ECE0  F008         	call	_write_LCD	;wreg free
  1366  000A7E  0012               	return	
  1367  000A80                     __end_of_destravarPorta:
  1368                           	opt stack 0
  1369                           tblptru	equ	0xFF8
  1370                           tblptrh	equ	0xFF7
  1371                           tblptrl	equ	0xFF6
  1372                           tablat	equ	0xFF5
  1373                           intcon	equ	0xFF2
  1374                           intcon2	equ	0xFF1
  1375                           intcon3	equ	0xFF0
  1376                           wreg	equ	0xFE8
  1377                           indf2	equ	0xFDF
  1378                           fsr2h	equ	0xFDA
  1379                           fsr2l	equ	0xFD9
  1380                           status	equ	0xFD8
  1381                           
  1382 ;; *************** function _DutyCycle_PWM *****************
  1383 ;; Defined at:
  1384 ;;		line 43 in file "PWM.c"
  1385 ;; Parameters:    Size  Location     Type
  1386 ;;  Valor           2   20[COMRAM] unsigned int 
  1387 ;; Auto vars:     Size  Location     Type
  1388 ;;		None
  1389 ;; Return value:  Size  Location     Type
  1390 ;;                  1    wreg      void 
  1391 ;; Registers used:
  1392 ;;		wreg, status,2, status,0
  1393 ;; Tracked objects:
  1394 ;;		On entry : 0/0
  1395 ;;		On exit  : 0/0
  1396 ;;		Unchanged: 0/0
  1397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1398 ;;      Params:         2       0       0       0       0       0       0       0       0
  1399 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1400 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1401 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1402 ;;Total ram usage:        4 bytes
  1403 ;; Hardware stack levels used:    1
  1404 ;; Hardware stack levels required when called:    2
  1405 ;; This function calls:
  1406 ;;		Nothing
  1407 ;; This function is called by:
  1408 ;;		_destravarPorta
  1409 ;; This function uses a non-reentrant model
  1410 ;;
  1411                           
  1412                           	psect	text7
  1413  00120A                     __ptext7:
  1414                           	opt stack 0
  1415  00120A                     _DutyCycle_PWM:
  1416                           	opt stack 27
  1417                           
  1418                           ;PWM.c: 44: CCP1CONbits.DC1B0 = Valor;
  1419                           
  1420                           ;incstack = 0
  1421  00120A  B015               	btfsc	DutyCycle_PWM@Valor,0,c
  1422  00120C  D002               	bra	u845
  1423  00120E  98BD               	bcf	4029,4,c	;volatile
  1424  001210  D001               	bra	u846
  1425  001212                     u845:
  1426  001212  88BD               	bsf	4029,4,c	;volatile
  1427  001214                     u846:
  1428                           
  1429                           ;PWM.c: 45: CCP1CONbits.DC1B1 = Valor >> 1;
  1430  001214  90D8               	bcf	status,0,c
  1431  001216  3016               	rrcf	DutyCycle_PWM@Valor+1,w,c
  1432  001218  6E18               	movwf	(??_DutyCycle_PWM+1)& (0+255),c
  1433  00121A  3015               	rrcf	DutyCycle_PWM@Valor,w,c
  1434  00121C  6E17               	movwf	??_DutyCycle_PWM& (0+255),c
  1435  00121E  3A17               	swapf	??_DutyCycle_PWM,f,c
  1436  001220  4617               	rlncf	??_DutyCycle_PWM,f,c
  1437  001222  50BD               	movf	4029,w,c	;volatile
  1438  001224  1817               	xorwf	??_DutyCycle_PWM,w,c
  1439  001226  0BDF               	andlw	-33
  1440  001228  1817               	xorwf	??_DutyCycle_PWM,w,c
  1441  00122A  6EBD               	movwf	4029,c	;volatile
  1442                           
  1443                           ;PWM.c: 46: CCPR1L = Valor >> 2;
  1444  00122C  C015  F017         	movff	DutyCycle_PWM@Valor,??_DutyCycle_PWM
  1445  001230  C016  F018         	movff	DutyCycle_PWM@Valor+1,??_DutyCycle_PWM+1
  1446  001234  90D8               	bcf	status,0,c
  1447  001236  3218               	rrcf	??_DutyCycle_PWM+1,f,c
  1448  001238  3217               	rrcf	??_DutyCycle_PWM,f,c
  1449  00123A  90D8               	bcf	status,0,c
  1450  00123C  3218               	rrcf	??_DutyCycle_PWM+1,f,c
  1451  00123E  3217               	rrcf	??_DutyCycle_PWM,f,c
  1452  001240  5017               	movf	??_DutyCycle_PWM,w,c
  1453  001242  6EBE               	movwf	4030,c	;volatile
  1454  001244  0012               	return		;funcret
  1455  001246                     __end_of_DutyCycle_PWM:
  1456                           	opt stack 0
  1457                           tblptru	equ	0xFF8
  1458                           tblptrh	equ	0xFF7
  1459                           tblptrl	equ	0xFF6
  1460                           tablat	equ	0xFF5
  1461                           intcon	equ	0xFF2
  1462                           intcon2	equ	0xFF1
  1463                           intcon3	equ	0xFF0
  1464                           wreg	equ	0xFE8
  1465                           indf2	equ	0xFDF
  1466                           fsr2h	equ	0xFDA
  1467                           fsr2l	equ	0xFD9
  1468                           status	equ	0xFD8
  1469                           
  1470 ;; *************** function _cadastrarSenha *****************
  1471 ;; Defined at:
  1472 ;;		line 150 in file "TOCTOC.c"
  1473 ;; Parameters:    Size  Location     Type
  1474 ;;  pass            2   40[COMRAM] PTR unsigned char 
  1475 ;;		 -> main@pass(2), 
  1476 ;; Auto vars:     Size  Location     Type
  1477 ;;  temp1           2   50[COMRAM] unsigned char [2]
  1478 ;;  temp2           2   48[COMRAM] unsigned char [2]
  1479 ;;  j               2   46[COMRAM] int 
  1480 ;;  i               2   44[COMRAM] int 
  1481 ;; Return value:  Size  Location     Type
  1482 ;;                  1    wreg      void 
  1483 ;; Registers used:
  1484 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1485 ;; Tracked objects:
  1486 ;;		On entry : 0/0
  1487 ;;		On exit  : 0/0
  1488 ;;		Unchanged: 0/0
  1489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1490 ;;      Params:         2       0       0       0       0       0       0       0       0
  1491 ;;      Locals:         8       0       0       0       0       0       0       0       0
  1492 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1493 ;;      Totals:        12       0       0       0       0       0       0       0       0
  1494 ;;Total ram usage:       12 bytes
  1495 ;; Hardware stack levels used:    1
  1496 ;; Hardware stack levels required when called:    6
  1497 ;; This function calls:
  1498 ;;		_clearLCD
  1499 ;;		_cmpPass
  1500 ;;		_confirmarSenha
  1501 ;;		_lerToque
  1502 ;;		_set_line
  1503 ;;		_write_LCD
  1504 ;; This function is called by:
  1505 ;;		_main
  1506 ;; This function uses a non-reentrant model
  1507 ;;
  1508                           
  1509                           	psect	text8
  1510  000A80                     __ptext8:
  1511                           	opt stack 0
  1512  000A80                     _cadastrarSenha:
  1513                           	opt stack 24
  1514                           
  1515                           ;TOCTOC.c: 152: TRISBbits.RB4 = 1;
  1516                           
  1517                           ;incstack = 0
  1518  000A80  8893               	bsf	3987,4,c	;volatile
  1519                           
  1520                           ;TOCTOC.c: 154: int i = 0;
  1521  000A82  0E00               	movlw	0
  1522  000A84  6E2E               	movwf	cadastrarSenha@i+1,c
  1523  000A86  0E00               	movlw	0
  1524  000A88  6E2D               	movwf	cadastrarSenha@i,c
  1525                           
  1526                           ;TOCTOC.c: 155: int j = 0;
  1527  000A8A  0E00               	movlw	0
  1528  000A8C  6E30               	movwf	cadastrarSenha@j+1,c
  1529  000A8E  0E00               	movlw	0
  1530  000A90  6E2F               	movwf	cadastrarSenha@j,c
  1531                           
  1532                           ;TOCTOC.c: 157: char temp1[2];
  1533                           ;TOCTOC.c: 158: temp1[0] = 0x00;
  1534  000A92  0E00               	movlw	0
  1535  000A94  6E33               	movwf	cadastrarSenha@temp1,c
  1536                           
  1537                           ;TOCTOC.c: 159: temp1[1] = 0x00;
  1538  000A96  0E00               	movlw	0
  1539  000A98  6E34               	movwf	cadastrarSenha@temp1+1,c
  1540                           
  1541                           ;TOCTOC.c: 161: char temp2[2];
  1542                           ;TOCTOC.c: 162: temp2[0] = 0x00;
  1543  000A9A  0E00               	movlw	0
  1544  000A9C  6E31               	movwf	cadastrarSenha@temp2,c
  1545                           
  1546                           ;TOCTOC.c: 163: temp2[1] = 0x00;
  1547  000A9E  0E00               	movlw	0
  1548  000AA0  6E32               	movwf	cadastrarSenha@temp2+1,c
  1549                           
  1550                           ;TOCTOC.c: 165: pass[0] = 0x00;
  1551  000AA2  C029  FFD9         	movff	cadastrarSenha@pass,fsr2l
  1552  000AA6  C02A  FFDA         	movff	cadastrarSenha@pass+1,fsr2h
  1553  000AAA  0E00               	movlw	0
  1554  000AAC  6EDF               	movwf	indf2,c
  1555                           
  1556                           ;TOCTOC.c: 166: pass[1] = 0x00;
  1557  000AAE  EE20 F001          	lfsr	2,1
  1558  000AB2  5029               	movf	cadastrarSenha@pass,w,c
  1559  000AB4  26D9               	addwf	fsr2l,f,c
  1560  000AB6  502A               	movf	cadastrarSenha@pass+1,w,c
  1561  000AB8  22DA               	addwfc	fsr2h,f,c
  1562  000ABA  0E00               	movlw	0
  1563  000ABC  6EDF               	movwf	indf2,c
  1564  000ABE                     l1722:
  1565                           
  1566                           ;TOCTOC.c: 169: clearLCD();
  1567  000ABE  EC25  F00A         	call	_clearLCD	;wreg free
  1568                           
  1569                           ;TOCTOC.c: 170: set_line(0,1);
  1570  000AC2  0E00               	movlw	0
  1571  000AC4  6E19               	movwf	set_line@line+1,c
  1572  000AC6  0E00               	movlw	0
  1573  000AC8  6E18               	movwf	set_line@line,c
  1574  000ACA  0E00               	movlw	0
  1575  000ACC  6E1B               	movwf	set_line@pos+1,c
  1576  000ACE  0E01               	movlw	1
  1577  000AD0  6E1A               	movwf	set_line@pos,c
  1578  000AD2  ECDF  F009         	call	_set_line	;wreg free
  1579                           
  1580                           ;TOCTOC.c: 171: write_LCD("Cadastre sua");
  1581  000AD6  0E2A               	movlw	low STR_13
  1582  000AD8  6E18               	movwf	write_LCD@c,c
  1583  000ADA  0E08               	movlw	high STR_13
  1584  000ADC  6E19               	movwf	write_LCD@c+1,c
  1585  000ADE  ECE0  F008         	call	_write_LCD	;wreg free
  1586                           
  1587                           ;TOCTOC.c: 172: set_line(1,5);
  1588  000AE2  0E00               	movlw	0
  1589  000AE4  6E19               	movwf	set_line@line+1,c
  1590  000AE6  0E01               	movlw	1
  1591  000AE8  6E18               	movwf	set_line@line,c
  1592  000AEA  0E00               	movlw	0
  1593  000AEC  6E1B               	movwf	set_line@pos+1,c
  1594  000AEE  0E05               	movlw	5
  1595  000AF0  6E1A               	movwf	set_line@pos,c
  1596  000AF2  ECDF  F009         	call	_set_line	;wreg free
  1597                           
  1598                           ;TOCTOC.c: 173: write_LCD("senha");
  1599  000AF6  0E69               	movlw	low STR_12
  1600  000AF8  6E18               	movwf	write_LCD@c,c
  1601  000AFA  0E08               	movlw	high STR_12
  1602  000AFC  6E19               	movwf	write_LCD@c+1,c
  1603  000AFE  ECE0  F008         	call	_write_LCD	;wreg free
  1604                           
  1605                           ;TOCTOC.c: 174: _delay((unsigned long)((2000)*(16000000/4000.0)));
  1606  000B02  0E29               	movlw	41
  1607  000B04  6E2C               	movwf	(??_cadastrarSenha+1)& (0+255),c
  1608  000B06  0E96               	movlw	150
  1609  000B08  6E2B               	movwf	??_cadastrarSenha& (0+255),c
  1610  000B0A  0E7F               	movlw	127
  1611  000B0C                     u1107:
  1612  000B0C  2EE8               	decfsz	wreg,f,c
  1613  000B0E  D7FE               	bra	u1107
  1614  000B10  2E2B               	decfsz	??_cadastrarSenha& (0+255),f,c
  1615  000B12  D7FC               	bra	u1107
  1616  000B14  2E2C               	decfsz	(??_cadastrarSenha+1)& (0+255),f,c
  1617  000B16  D7FA               	bra	u1107
  1618  000B18  F000               	nop	
  1619                           
  1620                           ;TOCTOC.c: 176: lerToque(&temp1);
  1621  000B1A  0E33               	movlw	low cadastrarSenha@temp1
  1622  000B1C  6E25               	movwf	lerToque@toque,c
  1623  000B1E  0E00               	movlw	high cadastrarSenha@temp1
  1624  000B20  6E26               	movwf	lerToque@toque+1,c
  1625  000B22  EC17  F006         	call	_lerToque	;wreg free
  1626                           
  1627                           ;TOCTOC.c: 177: clearLCD();
  1628  000B26  EC25  F00A         	call	_clearLCD	;wreg free
  1629                           
  1630                           ;TOCTOC.c: 178: set_line(0,2);
  1631  000B2A  0E00               	movlw	0
  1632  000B2C  6E19               	movwf	set_line@line+1,c
  1633  000B2E  0E00               	movlw	0
  1634  000B30  6E18               	movwf	set_line@line,c
  1635  000B32  0E00               	movlw	0
  1636  000B34  6E1B               	movwf	set_line@pos+1,c
  1637  000B36  0E02               	movlw	2
  1638  000B38  6E1A               	movwf	set_line@pos,c
  1639  000B3A  ECDF  F009         	call	_set_line	;wreg free
  1640                           
  1641                           ;TOCTOC.c: 179: write_LCD("Repita sua");
  1642  000B3E  0E4E               	movlw	low STR_15
  1643  000B40  6E18               	movwf	write_LCD@c,c
  1644  000B42  0E08               	movlw	high STR_15
  1645  000B44  6E19               	movwf	write_LCD@c+1,c
  1646  000B46  ECE0  F008         	call	_write_LCD	;wreg free
  1647                           
  1648                           ;TOCTOC.c: 180: set_line(1,5);
  1649  000B4A  0E00               	movlw	0
  1650  000B4C  6E19               	movwf	set_line@line+1,c
  1651  000B4E  0E01               	movlw	1
  1652  000B50  6E18               	movwf	set_line@line,c
  1653  000B52  0E00               	movlw	0
  1654  000B54  6E1B               	movwf	set_line@pos+1,c
  1655  000B56  0E05               	movlw	5
  1656  000B58  6E1A               	movwf	set_line@pos,c
  1657  000B5A  ECDF  F009         	call	_set_line	;wreg free
  1658                           
  1659                           ;TOCTOC.c: 181: write_LCD("senha");
  1660  000B5E  0E69               	movlw	low STR_12
  1661  000B60  6E18               	movwf	write_LCD@c,c
  1662  000B62  0E08               	movlw	high STR_12
  1663  000B64  6E19               	movwf	write_LCD@c+1,c
  1664  000B66  ECE0  F008         	call	_write_LCD	;wreg free
  1665                           
  1666                           ;TOCTOC.c: 182: _delay((unsigned long)((2000)*(16000000/4000.0)));
  1667  000B6A  0E29               	movlw	41
  1668  000B6C  6E2C               	movwf	(??_cadastrarSenha+1)& (0+255),c
  1669  000B6E  0E96               	movlw	150
  1670  000B70  6E2B               	movwf	??_cadastrarSenha& (0+255),c
  1671  000B72  0E7F               	movlw	127
  1672  000B74                     u1117:
  1673  000B74  2EE8               	decfsz	wreg,f,c
  1674  000B76  D7FE               	bra	u1117
  1675  000B78  2E2B               	decfsz	??_cadastrarSenha& (0+255),f,c
  1676  000B7A  D7FC               	bra	u1117
  1677  000B7C  2E2C               	decfsz	(??_cadastrarSenha+1)& (0+255),f,c
  1678  000B7E  D7FA               	bra	u1117
  1679  000B80  F000               	nop	
  1680                           
  1681                           ;TOCTOC.c: 184: lerToque(&temp2);
  1682  000B82  0E31               	movlw	low cadastrarSenha@temp2
  1683  000B84  6E25               	movwf	lerToque@toque,c
  1684  000B86  0E00               	movlw	high cadastrarSenha@temp2
  1685  000B88  6E26               	movwf	lerToque@toque+1,c
  1686  000B8A  EC17  F006         	call	_lerToque	;wreg free
  1687                           
  1688                           ;TOCTOC.c: 185: if(cmpPass(temp1, temp2))
  1689  000B8E  0E33               	movlw	low cadastrarSenha@temp1
  1690  000B90  6E1E               	movwf	cmpPass@pass,c
  1691  000B92  0E00               	movlw	high cadastrarSenha@temp1
  1692  000B94  6E1F               	movwf	cmpPass@pass+1,c
  1693  000B96  0E31               	movlw	low cadastrarSenha@temp2
  1694  000B98  6E20               	movwf	cmpPass@toque,c
  1695  000B9A  0E00               	movlw	high cadastrarSenha@temp2
  1696  000B9C  6E21               	movwf	cmpPass@toque+1,c
  1697  000B9E  EC9C  F006         	call	_cmpPass	;wreg free
  1698  000BA2  501E               	movf	?_cmpPass,w,c
  1699  000BA4  101F               	iorwf	?_cmpPass+1,w,c
  1700  000BA6  B4D8               	btfsc	status,2,c
  1701  000BA8  D78A               	goto	l1722
  1702                           
  1703                           ;TOCTOC.c: 186: if(confirmarSenha())
  1704  000BAA  EC1E  F008         	call	_confirmarSenha	;wreg free
  1705  000BAE  501E               	movf	?_confirmarSenha,w,c
  1706  000BB0  101F               	iorwf	?_confirmarSenha+1,w,c
  1707  000BB2  B4D8               	btfsc	status,2,c
  1708  000BB4  D784               	goto	l1722
  1709                           
  1710                           ;TOCTOC.c: 189: }
  1711                           ;TOCTOC.c: 191: pass[0] = temp1[0];
  1712                           
  1713                           ;TOCTOC.c: 187: break;
  1714  000BB6  C029  FFD9         	movff	cadastrarSenha@pass,fsr2l
  1715  000BBA  C02A  FFDA         	movff	cadastrarSenha@pass+1,fsr2h
  1716  000BBE  C033  FFDF         	movff	cadastrarSenha@temp1,indf2
  1717                           
  1718                           ;TOCTOC.c: 192: pass[1] = temp1[1];
  1719  000BC2  EE20 F001          	lfsr	2,1
  1720  000BC6  5029               	movf	cadastrarSenha@pass,w,c
  1721  000BC8  26D9               	addwf	fsr2l,f,c
  1722  000BCA  502A               	movf	cadastrarSenha@pass+1,w,c
  1723  000BCC  22DA               	addwfc	fsr2h,f,c
  1724  000BCE  C034  FFDF         	movff	cadastrarSenha@temp1+1,indf2
  1725                           
  1726                           ;TOCTOC.c: 194: clearLCD();
  1727  000BD2  EC25  F00A         	call	_clearLCD	;wreg free
  1728                           
  1729                           ;TOCTOC.c: 195: set_line(0,6);
  1730  000BD6  0E00               	movlw	0
  1731  000BD8  6E19               	movwf	set_line@line+1,c
  1732  000BDA  0E00               	movlw	0
  1733  000BDC  6E18               	movwf	set_line@line,c
  1734  000BDE  0E00               	movlw	0
  1735  000BE0  6E1B               	movwf	set_line@pos+1,c
  1736  000BE2  0E06               	movlw	6
  1737  000BE4  6E1A               	movwf	set_line@pos,c
  1738  000BE6  ECDF  F009         	call	_set_line	;wreg free
  1739                           
  1740                           ;TOCTOC.c: 196: write_LCD("Senha");
  1741  000BEA  0E63               	movlw	low STR_17
  1742  000BEC  6E18               	movwf	write_LCD@c,c
  1743  000BEE  0E08               	movlw	high STR_17
  1744  000BF0  6E19               	movwf	write_LCD@c+1,c
  1745  000BF2  ECE0  F008         	call	_write_LCD	;wreg free
  1746                           
  1747                           ;TOCTOC.c: 197: set_line(1,3);
  1748  000BF6  0E00               	movlw	0
  1749  000BF8  6E19               	movwf	set_line@line+1,c
  1750  000BFA  0E01               	movlw	1
  1751  000BFC  6E18               	movwf	set_line@line,c
  1752  000BFE  0E00               	movlw	0
  1753  000C00  6E1B               	movwf	set_line@pos+1,c
  1754  000C02  0E03               	movlw	3
  1755  000C04  6E1A               	movwf	set_line@pos,c
  1756  000C06  ECDF  F009         	call	_set_line	;wreg free
  1757                           
  1758                           ;TOCTOC.c: 198: write_LCD("Cadastrada");
  1759  000C0A  0E43               	movlw	low STR_18
  1760  000C0C  6E18               	movwf	write_LCD@c,c
  1761  000C0E  0E08               	movlw	high STR_18
  1762  000C10  6E19               	movwf	write_LCD@c+1,c
  1763  000C12  ECE0  F008         	call	_write_LCD	;wreg free
  1764                           
  1765                           ;TOCTOC.c: 199: _delay((unsigned long)((3000)*(16000000/4000.0)));
  1766  000C16  0E3D               	movlw	61
  1767  000C18  6E2C               	movwf	(??_cadastrarSenha+1)& (0+255),c
  1768  000C1A  0EE1               	movlw	225
  1769  000C1C  6E2B               	movwf	??_cadastrarSenha& (0+255),c
  1770  000C1E  0E40               	movlw	64
  1771  000C20                     u1127:
  1772  000C20  2EE8               	decfsz	wreg,f,c
  1773  000C22  D7FE               	bra	u1127
  1774  000C24  2E2B               	decfsz	??_cadastrarSenha& (0+255),f,c
  1775  000C26  D7FC               	bra	u1127
  1776  000C28  2E2C               	decfsz	(??_cadastrarSenha+1)& (0+255),f,c
  1777  000C2A  D7FA               	bra	u1127
  1778  000C2C  0012               	return		;funcret
  1779  000C2E                     __end_of_cadastrarSenha:
  1780                           	opt stack 0
  1781                           tblptru	equ	0xFF8
  1782                           tblptrh	equ	0xFF7
  1783                           tblptrl	equ	0xFF6
  1784                           tablat	equ	0xFF5
  1785                           intcon	equ	0xFF2
  1786                           intcon2	equ	0xFF1
  1787                           intcon3	equ	0xFF0
  1788                           wreg	equ	0xFE8
  1789                           indf2	equ	0xFDF
  1790                           fsr2h	equ	0xFDA
  1791                           fsr2l	equ	0xFD9
  1792                           status	equ	0xFD8
  1793                           
  1794 ;; *************** function _lerToque *****************
  1795 ;; Defined at:
  1796 ;;		line 26 in file "TOCTOC.c"
  1797 ;; Parameters:    Size  Location     Type
  1798 ;;  toque           2   36[COMRAM] PTR unsigned char 
  1799 ;;		 -> cadastrarSenha@temp2(2), cadastrarSenha@temp1(2), 
  1800 ;; Auto vars:     Size  Location     Type
  1801 ;;  i               2   38[COMRAM] int 
  1802 ;; Return value:  Size  Location     Type
  1803 ;;                  1    wreg      void 
  1804 ;; Registers used:
  1805 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1806 ;; Tracked objects:
  1807 ;;		On entry : 0/0
  1808 ;;		On exit  : 0/0
  1809 ;;		Unchanged: 0/0
  1810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1811 ;;      Params:         2       0       0       0       0       0       0       0       0
  1812 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1813 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1814 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1815 ;;Total ram usage:        4 bytes
  1816 ;; Hardware stack levels used:    1
  1817 ;; Hardware stack levels required when called:    5
  1818 ;; This function calls:
  1819 ;;		_clearLCD
  1820 ;;		_readSignal
  1821 ;;		_read_ADC
  1822 ;;		_send_msg
  1823 ;;		_set_line
  1824 ;;		_write_LCD
  1825 ;; This function is called by:
  1826 ;;		_cadastrarSenha
  1827 ;; This function uses a non-reentrant model
  1828 ;;
  1829                           
  1830                           	psect	text9
  1831  000C2E                     __ptext9:
  1832                           	opt stack 0
  1833  000C2E                     _lerToque:
  1834                           	opt stack 24
  1835                           
  1836                           ;TOCTOC.c: 28: int i = 0;
  1837                           
  1838                           ;incstack = 0
  1839  000C2E  0E00               	movlw	0
  1840  000C30  6E28               	movwf	lerToque@i+1,c
  1841  000C32  0E00               	movlw	0
  1842  000C34  6E27               	movwf	lerToque@i,c
  1843                           
  1844                           ;TOCTOC.c: 30: toque[0] = 0x00;
  1845  000C36  C025  FFD9         	movff	lerToque@toque,fsr2l
  1846  000C3A  C026  FFDA         	movff	lerToque@toque+1,fsr2h
  1847  000C3E  0E00               	movlw	0
  1848  000C40  6EDF               	movwf	indf2,c
  1849                           
  1850                           ;TOCTOC.c: 31: toque[1] = 0x00;
  1851  000C42  EE20 F001          	lfsr	2,1
  1852  000C46  5025               	movf	lerToque@toque,w,c
  1853  000C48  26D9               	addwf	fsr2l,f,c
  1854  000C4A  5026               	movf	lerToque@toque+1,w,c
  1855  000C4C  22DA               	addwfc	fsr2h,f,c
  1856  000C4E  0E00               	movlw	0
  1857  000C50  6EDF               	movwf	indf2,c
  1858                           
  1859                           ;TOCTOC.c: 33: clearLCD();
  1860  000C52  EC25  F00A         	call	_clearLCD	;wreg free
  1861                           
  1862                           ;TOCTOC.c: 34: set_line(0,0);
  1863  000C56  0E00               	movlw	0
  1864  000C58  6E19               	movwf	set_line@line+1,c
  1865  000C5A  0E00               	movlw	0
  1866  000C5C  6E18               	movwf	set_line@line,c
  1867  000C5E  0E00               	movlw	0
  1868  000C60  6E1B               	movwf	set_line@pos+1,c
  1869  000C62  0E00               	movlw	0
  1870  000C64  6E1A               	movwf	set_line@pos,c
  1871  000C66  ECDF  F009         	call	_set_line	;wreg free
  1872                           
  1873                           ;TOCTOC.c: 35: write_LCD("Bata na porta");
  1874  000C6A  0E01               	movlw	low STR_1
  1875  000C6C  6E18               	movwf	write_LCD@c,c
  1876  000C6E  0E08               	movlw	high STR_1
  1877  000C70  6E19               	movwf	write_LCD@c+1,c
  1878  000C72  ECE0  F008         	call	_write_LCD	;wreg free
  1879  000C76                     l1634:
  1880  000C76  ECED  F009         	call	_read_ADC	;wreg free
  1881  000C7A  BE16               	btfsc	?_read_ADC+1,7,c
  1882  000C7C  D7FC               	goto	l1634
  1883  000C7E  5016               	movf	?_read_ADC+1,w,c
  1884  000C80  E151               	bnz	l1654
  1885  000C82  0E19               	movlw	25
  1886  000C84  5C15               	subwf	?_read_ADC,w,c
  1887  000C86  B0D8               	btfsc	status,0,c
  1888  000C88  D04D               	goto	l1654
  1889  000C8A  D7F5               	goto	l1634
  1890  000C8C                     l1636:
  1891                           
  1892                           ;TOCTOC.c: 39: set_line(1,0);
  1893  000C8C  0E00               	movlw	0
  1894  000C8E  6E19               	movwf	set_line@line+1,c
  1895  000C90  0E01               	movlw	1
  1896  000C92  6E18               	movwf	set_line@line,c
  1897  000C94  0E00               	movlw	0
  1898  000C96  6E1B               	movwf	set_line@pos+1,c
  1899  000C98  0E00               	movlw	0
  1900  000C9A  6E1A               	movwf	set_line@pos,c
  1901  000C9C  ECDF  F009         	call	_set_line	;wreg free
  1902                           
  1903                           ;TOCTOC.c: 40: send_msg('1'+ i);
  1904  000CA0  5027               	movf	lerToque@i,w,c
  1905  000CA2  0F31               	addlw	49
  1906  000CA4  EC94  F009         	call	_send_msg
  1907                           
  1908                           ;TOCTOC.c: 41: if(i == 0)
  1909  000CA8  5027               	movf	lerToque@i,w,c
  1910  000CAA  1028               	iorwf	lerToque@i+1,w,c
  1911  000CAC  A4D8               	btfss	status,2,c
  1912  000CAE  D00B               	goto	l1642
  1913                           
  1914                           ;TOCTOC.c: 42: readSignal(&toque[0], 0);
  1915  000CB0  C025  F019         	movff	lerToque@toque,readSignal@signal
  1916  000CB4  C026  F01A         	movff	lerToque@toque+1,readSignal@signal+1
  1917  000CB8  0E00               	movlw	0
  1918  000CBA  6E1C               	movwf	readSignal@pos+1,c
  1919  000CBC  0E00               	movlw	0
  1920  000CBE  6E1B               	movwf	readSignal@pos,c
  1921  000CC0  ECCD  F007         	call	_readSignal	;wreg free
  1922  000CC4  D02D               	goto	l1652
  1923  000CC6                     l1642:
  1924                           
  1925                           ;TOCTOC.c: 43: else if(i == 1)
  1926  000CC6  0427               	decf	lerToque@i,w,c
  1927  000CC8  1028               	iorwf	lerToque@i+1,w,c
  1928  000CCA  A4D8               	btfss	status,2,c
  1929  000CCC  D00B               	goto	l1646
  1930                           
  1931                           ;TOCTOC.c: 44: readSignal(&toque[0], 1);
  1932  000CCE  C025  F019         	movff	lerToque@toque,readSignal@signal
  1933  000CD2  C026  F01A         	movff	lerToque@toque+1,readSignal@signal+1
  1934  000CD6  0E00               	movlw	0
  1935  000CD8  6E1C               	movwf	readSignal@pos+1,c
  1936  000CDA  0E01               	movlw	1
  1937  000CDC  6E1B               	movwf	readSignal@pos,c
  1938  000CDE  ECCD  F007         	call	_readSignal	;wreg free
  1939  000CE2  D01E               	goto	l1652
  1940  000CE4                     l1646:
  1941                           
  1942                           ;TOCTOC.c: 45: else if(i == 2)
  1943  000CE4  0E02               	movlw	2
  1944  000CE6  1827               	xorwf	lerToque@i,w,c
  1945  000CE8  1028               	iorwf	lerToque@i+1,w,c
  1946  000CEA  A4D8               	btfss	status,2,c
  1947  000CEC  D00D               	goto	l1650
  1948                           
  1949                           ;TOCTOC.c: 46: readSignal(&toque[1], 0);
  1950  000CEE  0E01               	movlw	1
  1951  000CF0  2425               	addwf	lerToque@toque,w,c
  1952  000CF2  6E19               	movwf	readSignal@signal,c
  1953  000CF4  0E00               	movlw	0
  1954  000CF6  2026               	addwfc	lerToque@toque+1,w,c
  1955  000CF8  6E1A               	movwf	readSignal@signal+1,c
  1956  000CFA  0E00               	movlw	0
  1957  000CFC  6E1C               	movwf	readSignal@pos+1,c
  1958  000CFE  0E00               	movlw	0
  1959  000D00  6E1B               	movwf	readSignal@pos,c
  1960  000D02  ECCD  F007         	call	_readSignal	;wreg free
  1961  000D06  D00C               	goto	l1652
  1962  000D08                     l1650:
  1963                           
  1964                           ;TOCTOC.c: 47: else
  1965                           ;TOCTOC.c: 48: readSignal(&toque[1], 1);
  1966  000D08  0E01               	movlw	1
  1967  000D0A  2425               	addwf	lerToque@toque,w,c
  1968  000D0C  6E19               	movwf	readSignal@signal,c
  1969  000D0E  0E00               	movlw	0
  1970  000D10  2026               	addwfc	lerToque@toque+1,w,c
  1971  000D12  6E1A               	movwf	readSignal@signal+1,c
  1972  000D14  0E00               	movlw	0
  1973  000D16  6E1C               	movwf	readSignal@pos+1,c
  1974  000D18  0E01               	movlw	1
  1975  000D1A  6E1B               	movwf	readSignal@pos,c
  1976  000D1C  ECCD  F007         	call	_readSignal	;wreg free
  1977  000D20                     l1652:
  1978                           
  1979                           ;TOCTOC.c: 49: i++;
  1980  000D20  4A27               	infsnz	lerToque@i,f,c
  1981  000D22  2A28               	incf	lerToque@i+1,f,c
  1982  000D24                     l1654:
  1983  000D24  BE28               	btfsc	lerToque@i+1,7,c
  1984  000D26  D7B2               	goto	l1636
  1985  000D28  5028               	movf	lerToque@i+1,w,c
  1986  000D2A  E105               	bnz	l288
  1987  000D2C  0E04               	movlw	4
  1988  000D2E  5C27               	subwf	lerToque@i,w,c
  1989  000D30  B0D8               	btfsc	status,0,c
  1990  000D32  0012               	return	
  1991  000D34  D7AB               	goto	l1636
  1992  000D36                     l288:
  1993  000D36  0012               	return		;funcret
  1994  000D38                     __end_of_lerToque:
  1995                           	opt stack 0
  1996                           tblptru	equ	0xFF8
  1997                           tblptrh	equ	0xFF7
  1998                           tblptrl	equ	0xFF6
  1999                           tablat	equ	0xFF5
  2000                           intcon	equ	0xFF2
  2001                           intcon2	equ	0xFF1
  2002                           intcon3	equ	0xFF0
  2003                           wreg	equ	0xFE8
  2004                           indf2	equ	0xFDF
  2005                           fsr2h	equ	0xFDA
  2006                           fsr2l	equ	0xFD9
  2007                           status	equ	0xFD8
  2008                           
  2009 ;; *************** function _readSignal *****************
  2010 ;; Defined at:
  2011 ;;		line 13 in file "ReadSignal.c"
  2012 ;; Parameters:    Size  Location     Type
  2013 ;;  signal          2   24[COMRAM] PTR unsigned char 
  2014 ;;		 -> cadastrarSenha@temp2(2), cadastrarSenha@temp1(2), main@toc(2), 
  2015 ;;  pos             2   26[COMRAM] int 
  2016 ;; Auto vars:     Size  Location     Type
  2017 ;;  j               2   34[COMRAM] int 
  2018 ;;  i               2   32[COMRAM] int 
  2019 ;;  limite          2   30[COMRAM] int 
  2020 ;; Return value:  Size  Location     Type
  2021 ;;                  1    wreg      void 
  2022 ;; Registers used:
  2023 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2024 ;; Tracked objects:
  2025 ;;		On entry : 0/0
  2026 ;;		On exit  : 0/0
  2027 ;;		Unchanged: 0/0
  2028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2029 ;;      Params:         4       0       0       0       0       0       0       0       0
  2030 ;;      Locals:         6       0       0       0       0       0       0       0       0
  2031 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2032 ;;      Totals:        12       0       0       0       0       0       0       0       0
  2033 ;;Total ram usage:       12 bytes
  2034 ;; Hardware stack levels used:    1
  2035 ;; Hardware stack levels required when called:    3
  2036 ;; This function calls:
  2037 ;;		_read_ADC
  2038 ;; This function is called by:
  2039 ;;		_lerToque
  2040 ;;		_destravarPorta
  2041 ;; This function uses a non-reentrant model
  2042 ;;
  2043                           
  2044                           	psect	text10
  2045  000F9A                     __ptext10:
  2046                           	opt stack 0
  2047  000F9A                     _readSignal:
  2048                           	opt stack 26
  2049                           
  2050                           ;ReadSignal.c: 15: int j = 0;
  2051                           
  2052                           ;incstack = 0
  2053  000F9A  0E00               	movlw	0
  2054  000F9C  6E24               	movwf	readSignal@j+1,c
  2055  000F9E  0E00               	movlw	0
  2056  000FA0  6E23               	movwf	readSignal@j,c
  2057                           
  2058                           ;ReadSignal.c: 16: if(pos == 1)
  2059  000FA2  041B               	decf	readSignal@pos,w,c
  2060  000FA4  101C               	iorwf	readSignal@pos+1,w,c
  2061  000FA6  A4D8               	btfss	status,2,c
  2062  000FA8  D004               	goto	l1566
  2063                           
  2064                           ;ReadSignal.c: 17: j = 4;
  2065  000FAA  0E00               	movlw	0
  2066  000FAC  6E24               	movwf	readSignal@j+1,c
  2067  000FAE  0E04               	movlw	4
  2068  000FB0  6E23               	movwf	readSignal@j,c
  2069  000FB2                     l1566:
  2070                           
  2071                           ;ReadSignal.c: 18: int limite;
  2072                           ;ReadSignal.c: 19: limite = j + 4;
  2073  000FB2  0E04               	movlw	4
  2074  000FB4  2423               	addwf	readSignal@j,w,c
  2075  000FB6  6E1F               	movwf	readSignal@limite,c
  2076  000FB8  0E00               	movlw	0
  2077  000FBA  2024               	addwfc	readSignal@j+1,w,c
  2078  000FBC  6E20               	movwf	readSignal@limite+1,c
  2079                           
  2080                           ;ReadSignal.c: 20: int i;
  2081                           ;ReadSignal.c: 22: while(j < limite){
  2082  000FBE  D033               	goto	l210
  2083  000FC0                     l1568:
  2084                           
  2085                           ;ReadSignal.c: 24: i = 0;
  2086  000FC0  0E00               	movlw	0
  2087  000FC2  6E22               	movwf	readSignal@i+1,c
  2088  000FC4  0E00               	movlw	0
  2089  000FC6  6E21               	movwf	readSignal@i,c
  2090                           
  2091                           ;ReadSignal.c: 25: while(i < 500){
  2092  000FC8  D022               	goto	l1578
  2093  000FCA                     l1570:
  2094                           
  2095                           ;ReadSignal.c: 26: if((int)read_ADC() > 25){
  2096  000FCA  ECED  F009         	call	_read_ADC	;wreg free
  2097  000FCE  5016               	movf	?_read_ADC+1,w,c
  2098  000FD0  E104               	bnz	u700
  2099  000FD2  0E1A               	movlw	26
  2100  000FD4  5C15               	subwf	?_read_ADC,w,c
  2101  000FD6  A0D8               	btfss	status,0,c
  2102  000FD8  D010               	goto	l1574
  2103  000FDA                     u700:
  2104                           
  2105                           ;ReadSignal.c: 27: *signal |= (0x03<<j);
  2106  000FDA  C023  F01D         	movff	readSignal@j,??_readSignal
  2107  000FDE  0E03               	movlw	3
  2108  000FE0  6E1E               	movwf	(??_readSignal+1)& (0+255),c
  2109  000FE2  2A1D               	incf	??_readSignal,f,c
  2110  000FE4  D002               	goto	u714
  2111  000FE6                     u715:
  2112  000FE6  90D8               	bcf	status,0,c
  2113  000FE8  361E               	rlcf	??_readSignal+1,f,c
  2114  000FEA                     u714:
  2115  000FEA  2E1D               	decfsz	??_readSignal,f,c
  2116  000FEC  D7FC               	goto	u715
  2117  000FEE  C019  FFD9         	movff	readSignal@signal,fsr2l
  2118  000FF2  C01A  FFDA         	movff	readSignal@signal+1,fsr2h
  2119  000FF6  501E               	movf	??_readSignal+1,w,c
  2120  000FF8  12DF               	iorwf	indf2,f,c
  2121  000FFA                     l1574:
  2122                           
  2123                           ;ReadSignal.c: 28: }
  2124                           ;ReadSignal.c: 29: _delay((unsigned long)((1)*(16000000/4000.0)));
  2125  000FFA  0E06               	movlw	6
  2126  000FFC  6E1D               	movwf	??_readSignal& (0+255),c
  2127  000FFE  0E30               	movlw	48
  2128  001000                     u1137:
  2129  001000  2EE8               	decfsz	wreg,f,c
  2130  001002  D7FE               	bra	u1137
  2131  001004  2E1D               	decfsz	??_readSignal& (0+255),f,c
  2132  001006  D7FC               	bra	u1137
  2133  001008  D000               	nop2	
  2134                           
  2135                           ;ReadSignal.c: 30: i++;
  2136  00100A  4A21               	infsnz	readSignal@i,f,c
  2137  00100C  2A22               	incf	readSignal@i+1,f,c
  2138  00100E                     l1578:
  2139  00100E  BE22               	btfsc	readSignal@i+1,7,c
  2140  001010  D7DC               	goto	l1570
  2141  001012  0EF4               	movlw	244
  2142  001014  5C21               	subwf	readSignal@i,w,c
  2143  001016  0E01               	movlw	1
  2144  001018  5822               	subwfb	readSignal@i+1,w,c
  2145  00101A  A0D8               	btfss	status,0,c
  2146  00101C  D7D6               	goto	l1570
  2147                           
  2148                           ;ReadSignal.c: 31: }
  2149                           ;ReadSignal.c: 32: j+=2;
  2150  00101E  0E02               	movlw	2
  2151  001020  2623               	addwf	readSignal@j,f,c
  2152  001022  0E00               	movlw	0
  2153  001024  2224               	addwfc	readSignal@j+1,f,c
  2154  001026                     l210:
  2155  001026  501F               	movf	readSignal@limite,w,c
  2156  001028  5C23               	subwf	readSignal@j,w,c
  2157  00102A  5024               	movf	readSignal@j+1,w,c
  2158  00102C  0A80               	xorlw	128
  2159  00102E  6E1D               	movwf	??_readSignal& (0+255),c
  2160  001030  5020               	movf	readSignal@limite+1,w,c
  2161  001032  0A80               	xorlw	128
  2162  001034  581D               	subwfb	??_readSignal& (0+255),w,c
  2163  001036  B0D8               	btfsc	status,0,c
  2164  001038  0012               	return	
  2165  00103A  D7C2               	goto	l1568
  2166  00103C                     __end_of_readSignal:
  2167                           	opt stack 0
  2168                           tblptru	equ	0xFF8
  2169                           tblptrh	equ	0xFF7
  2170                           tblptrl	equ	0xFF6
  2171                           tablat	equ	0xFF5
  2172                           intcon	equ	0xFF2
  2173                           intcon2	equ	0xFF1
  2174                           intcon3	equ	0xFF0
  2175                           wreg	equ	0xFE8
  2176                           indf2	equ	0xFDF
  2177                           fsr2h	equ	0xFDA
  2178                           fsr2l	equ	0xFD9
  2179                           status	equ	0xFD8
  2180                           
  2181 ;; *************** function _read_ADC *****************
  2182 ;; Defined at:
  2183 ;;		line 20 in file "ADC.c"
  2184 ;; Parameters:    Size  Location     Type
  2185 ;;		None
  2186 ;; Auto vars:     Size  Location     Type
  2187 ;;  value           2   22[COMRAM] unsigned int 
  2188 ;; Return value:  Size  Location     Type
  2189 ;;                  2   20[COMRAM] unsigned int 
  2190 ;; Registers used:
  2191 ;;		None
  2192 ;; Tracked objects:
  2193 ;;		On entry : 0/0
  2194 ;;		On exit  : 0/0
  2195 ;;		Unchanged: 0/0
  2196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2197 ;;      Params:         2       0       0       0       0       0       0       0       0
  2198 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2199 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2200 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2201 ;;Total ram usage:        4 bytes
  2202 ;; Hardware stack levels used:    1
  2203 ;; Hardware stack levels required when called:    2
  2204 ;; This function calls:
  2205 ;;		Nothing
  2206 ;; This function is called by:
  2207 ;;		_readSignal
  2208 ;;		_lerToque
  2209 ;;		_destravarPorta
  2210 ;; This function uses a non-reentrant model
  2211 ;;
  2212                           
  2213                           	psect	text11
  2214  0013DA                     __ptext11:
  2215                           	opt stack 0
  2216  0013DA                     _read_ADC:
  2217                           	opt stack 27
  2218                           
  2219                           ;ADC.c: 21: unsigned int value;
  2220                           ;ADC.c: 22: ADCON0bits.GO = 1;
  2221                           
  2222                           ;incstack = 0
  2223  0013DA  82C2               	bsf	4034,1,c	;volatile
  2224  0013DC                     l199:
  2225  0013DC  B2C2               	btfsc	4034,1,c	;volatile
  2226  0013DE  D7FE               	goto	l199
  2227                           
  2228                           ;ADC.c: 25: value = ADRES;
  2229  0013E0  CFC3 F017          	movff	4035,read_ADC@value	;volatile
  2230  0013E4  CFC4 F018          	movff	4036,read_ADC@value+1	;volatile
  2231                           
  2232                           ;ADC.c: 27: return value;
  2233  0013E8  C017  F015         	movff	read_ADC@value,?_read_ADC
  2234  0013EC  C018  F016         	movff	read_ADC@value+1,?_read_ADC+1
  2235  0013F0  0012               	return		;funcret
  2236  0013F2                     __end_of_read_ADC:
  2237                           	opt stack 0
  2238                           tblptru	equ	0xFF8
  2239                           tblptrh	equ	0xFF7
  2240                           tblptrl	equ	0xFF6
  2241                           tablat	equ	0xFF5
  2242                           intcon	equ	0xFF2
  2243                           intcon2	equ	0xFF1
  2244                           intcon3	equ	0xFF0
  2245                           wreg	equ	0xFE8
  2246                           indf2	equ	0xFDF
  2247                           fsr2h	equ	0xFDA
  2248                           fsr2l	equ	0xFD9
  2249                           status	equ	0xFD8
  2250                           
  2251 ;; *************** function _confirmarSenha *****************
  2252 ;; Defined at:
  2253 ;;		line 133 in file "TOCTOC.c"
  2254 ;; Parameters:    Size  Location     Type
  2255 ;;		None
  2256 ;; Auto vars:     Size  Location     Type
  2257 ;;		None
  2258 ;; Return value:  Size  Location     Type
  2259 ;;                  2   29[COMRAM] int 
  2260 ;; Registers used:
  2261 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2262 ;; Tracked objects:
  2263 ;;		On entry : 0/0
  2264 ;;		On exit  : 0/0
  2265 ;;		Unchanged: 0/0
  2266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2267 ;;      Params:         2       0       0       0       0       0       0       0       0
  2268 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2269 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2270 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2271 ;;Total ram usage:        2 bytes
  2272 ;; Hardware stack levels used:    1
  2273 ;; Hardware stack levels required when called:    5
  2274 ;; This function calls:
  2275 ;;		_checkUSART
  2276 ;;		_clearLCD
  2277 ;;		_set_line
  2278 ;;		_write_LCD
  2279 ;; This function is called by:
  2280 ;;		_cadastrarSenha
  2281 ;; This function uses a non-reentrant model
  2282 ;;
  2283                           
  2284                           	psect	text12
  2285  00103C                     __ptext12:
  2286                           	opt stack 0
  2287  00103C                     _confirmarSenha:
  2288                           	opt stack 24
  2289                           
  2290                           ;TOCTOC.c: 134: clearLCD();
  2291                           
  2292                           ;incstack = 0
  2293  00103C  EC25  F00A         	call	_clearLCD	;wreg free
  2294                           
  2295                           ;TOCTOC.c: 135: set_line(0,1);
  2296  001040  0E00               	movlw	0
  2297  001042  6E19               	movwf	set_line@line+1,c
  2298  001044  0E00               	movlw	0
  2299  001046  6E18               	movwf	set_line@line,c
  2300  001048  0E00               	movlw	0
  2301  00104A  6E1B               	movwf	set_line@pos+1,c
  2302  00104C  0E01               	movlw	1
  2303  00104E  6E1A               	movwf	set_line@pos,c
  2304  001050  ECDF  F009         	call	_set_line	;wreg free
  2305                           
  2306                           ;TOCTOC.c: 136: write_LCD("Confirme sua");
  2307  001054  0E1D               	movlw	low STR_11
  2308  001056  6E18               	movwf	write_LCD@c,c
  2309  001058  0E08               	movlw	high STR_11
  2310  00105A  6E19               	movwf	write_LCD@c+1,c
  2311  00105C  ECE0  F008         	call	_write_LCD	;wreg free
  2312                           
  2313                           ;TOCTOC.c: 137: set_line(1,5);
  2314  001060  0E00               	movlw	0
  2315  001062  6E19               	movwf	set_line@line+1,c
  2316  001064  0E01               	movlw	1
  2317  001066  6E18               	movwf	set_line@line,c
  2318  001068  0E00               	movlw	0
  2319  00106A  6E1B               	movwf	set_line@pos+1,c
  2320  00106C  0E05               	movlw	5
  2321  00106E  6E1A               	movwf	set_line@pos,c
  2322  001070  ECDF  F009         	call	_set_line	;wreg free
  2323                           
  2324                           ;TOCTOC.c: 138: write_LCD("senha");
  2325  001074  0E69               	movlw	low STR_12
  2326  001076  6E18               	movwf	write_LCD@c,c
  2327  001078  0E08               	movlw	high STR_12
  2328  00107A  6E19               	movwf	write_LCD@c+1,c
  2329  00107C  ECE0  F008         	call	_write_LCD	;wreg free
  2330  001080                     l1698:
  2331                           
  2332                           ;TOCTOC.c: 140: checkUSART();
  2333  001080  EC8A  F008         	call	_checkUSART	;wreg free
  2334                           
  2335                           ;TOCTOC.c: 141: if(buttonCancel_Lock == 1){
  2336  001084  043B               	decf	_buttonCancel_Lock,w,c
  2337  001086  103C               	iorwf	_buttonCancel_Lock+1,w,c
  2338  001088  A4D8               	btfss	status,2,c
  2339  00108A  D009               	goto	l318
  2340                           
  2341                           ;TOCTOC.c: 142: buttonCancel_Lock = 0;
  2342  00108C  0E00               	movlw	0
  2343  00108E  6E3C               	movwf	_buttonCancel_Lock+1,c
  2344  001090  0E00               	movlw	0
  2345  001092  6E3B               	movwf	_buttonCancel_Lock,c
  2346                           
  2347                           ;TOCTOC.c: 143: return 0;
  2348  001094  0E00               	movlw	0
  2349  001096  6E1F               	movwf	?_confirmarSenha+1,c
  2350  001098  0E00               	movlw	0
  2351  00109A  6E1E               	movwf	?_confirmarSenha,c
  2352  00109C  0012               	return	
  2353  00109E                     l318:
  2354                           
  2355                           ;TOCTOC.c: 145: else if(PORTBbits.RB4 || buttonConfirm_Cad == 1)
  2356  00109E  B881               	btfsc	3969,4,c	;volatile
  2357  0010A0  D004               	goto	l1710
  2358  0010A2  0439               	decf	_buttonConfirm_Cad,w,c
  2359  0010A4  103A               	iorwf	_buttonConfirm_Cad+1,w,c
  2360  0010A6  A4D8               	btfss	status,2,c
  2361  0010A8  D7EB               	goto	l1698
  2362  0010AA                     l1710:
  2363                           
  2364                           ;TOCTOC.c: 146: return 1;
  2365  0010AA  0E00               	movlw	0
  2366  0010AC  6E1F               	movwf	?_confirmarSenha+1,c
  2367  0010AE  0E01               	movlw	1
  2368  0010B0  D7F4               	goto	L1
  2369  0010B2                     __end_of_confirmarSenha:
  2370                           	opt stack 0
  2371                           tblptru	equ	0xFF8
  2372                           tblptrh	equ	0xFF7
  2373                           tblptrl	equ	0xFF6
  2374                           tablat	equ	0xFF5
  2375                           intcon	equ	0xFF2
  2376                           intcon2	equ	0xFF1
  2377                           intcon3	equ	0xFF0
  2378                           wreg	equ	0xFE8
  2379                           indf2	equ	0xFDF
  2380                           fsr2h	equ	0xFDA
  2381                           fsr2l	equ	0xFD9
  2382                           status	equ	0xFD8
  2383                           
  2384 ;; *************** function _checkUSART *****************
  2385 ;; Defined at:
  2386 ;;		line 72 in file "USART.c"
  2387 ;; Parameters:    Size  Location     Type
  2388 ;;		None
  2389 ;; Auto vars:     Size  Location     Type
  2390 ;;  op              2   24[COMRAM] int 
  2391 ;;  msg             1   26[COMRAM] unsigned char 
  2392 ;; Return value:  Size  Location     Type
  2393 ;;                  1    wreg      void 
  2394 ;; Registers used:
  2395 ;;		wreg, status,2, status,0, cstack
  2396 ;; Tracked objects:
  2397 ;;		On entry : 0/0
  2398 ;;		On exit  : 0/0
  2399 ;;		Unchanged: 0/0
  2400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2401 ;;      Params:         0       0       0       0       0       0       0       0       0
  2402 ;;      Locals:         3       0       0       0       0       0       0       0       0
  2403 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2404 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2405 ;;Total ram usage:        3 bytes
  2406 ;; Hardware stack levels used:    1
  2407 ;; Hardware stack levels required when called:    3
  2408 ;; This function calls:
  2409 ;;		_UART_Data_Ready
  2410 ;;		_UART_Read
  2411 ;;		_cmp_MSG1
  2412 ;;		_cmp_MSG2
  2413 ;; This function is called by:
  2414 ;;		_destravarPorta
  2415 ;;		_confirmarSenha
  2416 ;; This function uses a non-reentrant model
  2417 ;;
  2418                           
  2419                           	psect	text13
  2420  001114                     __ptext13:
  2421                           	opt stack 0
  2422  001114                     _checkUSART:
  2423                           	opt stack 26
  2424                           
  2425                           ;USART.c: 74: if(UART_Data_Ready()){
  2426                           
  2427                           ;incstack = 0
  2428  001114  EC21  F00A         	call	_UART_Data_Ready	;wreg free
  2429  001118  0900               	iorlw	0
  2430  00111A  B4D8               	btfsc	status,2,c
  2431  00111C  0012               	return	
  2432                           
  2433                           ;USART.c: 75: char msg = UART_Read();
  2434  00111E  EC1D  F00A         	call	_UART_Read	;wreg free
  2435  001122  6E1B               	movwf	checkUSART@msg,c
  2436                           
  2437                           ;USART.c: 76: if(cmp_MSG1(msg)){
  2438  001124  501B               	movf	checkUSART@msg,w,c
  2439  001126  ECC1  F009         	call	_cmp_MSG1
  2440  00112A  5015               	movf	?_cmp_MSG1,w,c
  2441  00112C  1016               	iorwf	?_cmp_MSG1+1,w,c
  2442  00112E  B4D8               	btfsc	status,2,c
  2443  001130  0012               	return	
  2444                           
  2445                           ;USART.c: 77: if(UART_Data_Ready()){
  2446  001132  EC21  F00A         	call	_UART_Data_Ready	;wreg free
  2447  001136  0900               	iorlw	0
  2448  001138  B4D8               	btfsc	status,2,c
  2449  00113A  0012               	return	
  2450                           
  2451                           ;USART.c: 78: msg = UART_Read();
  2452  00113C  EC1D  F00A         	call	_UART_Read	;wreg free
  2453  001140  6E1B               	movwf	checkUSART@msg,c
  2454                           
  2455                           ;USART.c: 79: int op = cmp_MSG2(msg);
  2456  001142  501B               	movf	checkUSART@msg,w,c
  2457  001144  EC23  F009         	call	_cmp_MSG2
  2458  001148  C015  F019         	movff	?_cmp_MSG2,checkUSART@op
  2459  00114C  C016  F01A         	movff	?_cmp_MSG2+1,checkUSART@op+1
  2460                           
  2461                           ;USART.c: 80: if(op == 0)
  2462  001150  5019               	movf	checkUSART@op,w,c
  2463  001152  101A               	iorwf	checkUSART@op+1,w,c
  2464  001154  A4D8               	btfss	status,2,c
  2465  001156  D005               	goto	l1556
  2466                           
  2467                           ;USART.c: 81: buttonCancel_Lock = 1;
  2468  001158  0E00               	movlw	0
  2469  00115A  6E3C               	movwf	_buttonCancel_Lock+1,c
  2470  00115C  0E01               	movlw	1
  2471  00115E  6E3B               	movwf	_buttonCancel_Lock,c
  2472  001160  0012               	return	
  2473  001162                     l1556:
  2474                           
  2475                           ;USART.c: 82: else if(op == 1)
  2476  001162  0419               	decf	checkUSART@op,w,c
  2477  001164  101A               	iorwf	checkUSART@op+1,w,c
  2478  001166  A4D8               	btfss	status,2,c
  2479  001168  0012               	return	
  2480                           
  2481                           ;USART.c: 83: buttonConfirm_Cad = 1;
  2482  00116A  0E00               	movlw	0
  2483  00116C  6E3A               	movwf	_buttonConfirm_Cad+1,c
  2484  00116E  0E01               	movlw	1
  2485  001170  6E39               	movwf	_buttonConfirm_Cad,c
  2486  001172  0012               	return	
  2487  001174                     __end_of_checkUSART:
  2488                           	opt stack 0
  2489                           tblptru	equ	0xFF8
  2490                           tblptrh	equ	0xFF7
  2491                           tblptrl	equ	0xFF6
  2492                           tablat	equ	0xFF5
  2493                           intcon	equ	0xFF2
  2494                           intcon2	equ	0xFF1
  2495                           intcon3	equ	0xFF0
  2496                           wreg	equ	0xFE8
  2497                           indf2	equ	0xFDF
  2498                           fsr2h	equ	0xFDA
  2499                           fsr2l	equ	0xFD9
  2500                           status	equ	0xFD8
  2501                           
  2502 ;; *************** function _cmp_MSG2 *****************
  2503 ;; Defined at:
  2504 ;;		line 61 in file "USART.c"
  2505 ;; Parameters:    Size  Location     Type
  2506 ;;  msg             1    wreg     unsigned char 
  2507 ;; Auto vars:     Size  Location     Type
  2508 ;;  msg             1   23[COMRAM] unsigned char 
  2509 ;; Return value:  Size  Location     Type
  2510 ;;                  2   20[COMRAM] int 
  2511 ;; Registers used:
  2512 ;;		wreg, status,2, status,0
  2513 ;; Tracked objects:
  2514 ;;		On entry : 0/0
  2515 ;;		On exit  : 0/0
  2516 ;;		Unchanged: 0/0
  2517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2518 ;;      Params:         2       0       0       0       0       0       0       0       0
  2519 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2520 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2521 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2522 ;;Total ram usage:        4 bytes
  2523 ;; Hardware stack levels used:    1
  2524 ;; Hardware stack levels required when called:    2
  2525 ;; This function calls:
  2526 ;;		Nothing
  2527 ;; This function is called by:
  2528 ;;		_checkUSART
  2529 ;; This function uses a non-reentrant model
  2530 ;;
  2531                           
  2532                           	psect	text14
  2533  001246                     __ptext14:
  2534                           	opt stack 0
  2535  001246                     _cmp_MSG2:
  2536                           	opt stack 26
  2537                           
  2538                           ;incstack = 0
  2539                           ;cmp_MSG2@msg stored from wreg
  2540  001246  6E18               	movwf	cmp_MSG2@msg,c
  2541                           
  2542                           ;USART.c: 62: if((msg & 0x1C) == 0x04){
  2543  001248  5018               	movf	cmp_MSG2@msg,w,c
  2544  00124A  0B1C               	andlw	28
  2545  00124C  0A04               	xorlw	4
  2546  00124E  A4D8               	btfss	status,2,c
  2547  001250  D015               	goto	l169
  2548                           
  2549                           ;USART.c: 63: if((msg & 0x03) == 0x0)
  2550  001252  C018  F017         	movff	cmp_MSG2@msg,??_cmp_MSG2
  2551  001256  0E03               	movlw	3
  2552  001258  1617               	andwf	??_cmp_MSG2,f,c
  2553  00125A  A4D8               	btfss	status,2,c
  2554  00125C  D005               	goto	l1516
  2555                           
  2556                           ;USART.c: 64: return 0;
  2557  00125E  0E00               	movlw	0
  2558  001260  6E16               	movwf	?_cmp_MSG2+1,c
  2559  001262  0E00               	movlw	0
  2560  001264  6E15               	movwf	?_cmp_MSG2,c
  2561  001266  0012               	return	
  2562  001268                     l1516:
  2563                           
  2564                           ;USART.c: 65: if((msg & 0x03) == 0x1)
  2565  001268  5018               	movf	cmp_MSG2@msg,w,c
  2566  00126A  0B03               	andlw	3
  2567  00126C  06E8               	decf	wreg,f,c
  2568  00126E  A4D8               	btfss	status,2,c
  2569  001270  D005               	goto	l169
  2570                           
  2571                           ;USART.c: 66: return 1;
  2572  001272  0E00               	movlw	0
  2573  001274  6E16               	movwf	?_cmp_MSG2+1,c
  2574  001276  0E01               	movlw	1
  2575  001278  6E15               	movwf	?_cmp_MSG2,c
  2576  00127A  0012               	return	
  2577  00127C                     l169:
  2578                           
  2579                           ;USART.c: 67: }
  2580                           ;USART.c: 68: return -1;
  2581  00127C  6815               	setf	?_cmp_MSG2,c
  2582  00127E  6816               	setf	?_cmp_MSG2+1,c
  2583  001280  0012               	return		;funcret
  2584  001282                     __end_of_cmp_MSG2:
  2585                           	opt stack 0
  2586                           tblptru	equ	0xFF8
  2587                           tblptrh	equ	0xFF7
  2588                           tblptrl	equ	0xFF6
  2589                           tablat	equ	0xFF5
  2590                           intcon	equ	0xFF2
  2591                           intcon2	equ	0xFF1
  2592                           intcon3	equ	0xFF0
  2593                           wreg	equ	0xFE8
  2594                           indf2	equ	0xFDF
  2595                           fsr2h	equ	0xFDA
  2596                           fsr2l	equ	0xFD9
  2597                           status	equ	0xFD8
  2598                           
  2599 ;; *************** function _cmp_MSG1 *****************
  2600 ;; Defined at:
  2601 ;;		line 55 in file "USART.c"
  2602 ;; Parameters:    Size  Location     Type
  2603 ;;  msg             1    wreg     unsigned char 
  2604 ;; Auto vars:     Size  Location     Type
  2605 ;;  msg             1   22[COMRAM] unsigned char 
  2606 ;; Return value:  Size  Location     Type
  2607 ;;                  2   20[COMRAM] int 
  2608 ;; Registers used:
  2609 ;;		wreg, status,2, status,0
  2610 ;; Tracked objects:
  2611 ;;		On entry : 0/0
  2612 ;;		On exit  : 0/0
  2613 ;;		Unchanged: 0/0
  2614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2615 ;;      Params:         2       0       0       0       0       0       0       0       0
  2616 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2617 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2618 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2619 ;;Total ram usage:        3 bytes
  2620 ;; Hardware stack levels used:    1
  2621 ;; Hardware stack levels required when called:    2
  2622 ;; This function calls:
  2623 ;;		Nothing
  2624 ;; This function is called by:
  2625 ;;		_checkUSART
  2626 ;; This function uses a non-reentrant model
  2627 ;;
  2628                           
  2629                           	psect	text15
  2630  001382                     __ptext15:
  2631                           	opt stack 0
  2632  001382                     _cmp_MSG1:
  2633                           	opt stack 26
  2634                           
  2635                           ;incstack = 0
  2636                           ;cmp_MSG1@msg stored from wreg
  2637  001382  6E17               	movwf	cmp_MSG1@msg,c
  2638                           
  2639                           ;USART.c: 56: if(msg == 0x40)
  2640  001384  0E40               	movlw	64
  2641  001386  1817               	xorwf	cmp_MSG1@msg,w,c
  2642  001388  A4D8               	btfss	status,2,c
  2643  00138A  D005               	goto	l1504
  2644                           
  2645                           ;USART.c: 57: return 1;
  2646  00138C  0E00               	movlw	0
  2647  00138E  6E16               	movwf	?_cmp_MSG1+1,c
  2648  001390  0E01               	movlw	1
  2649  001392  6E15               	movwf	?_cmp_MSG1,c
  2650  001394  0012               	return	
  2651  001396                     l1504:
  2652                           
  2653                           ;USART.c: 58: return 0;
  2654  001396  0E00               	movlw	0
  2655  001398  6E16               	movwf	?_cmp_MSG1+1,c
  2656  00139A  0E00               	movlw	0
  2657  00139C  6E15               	movwf	?_cmp_MSG1,c
  2658  00139E  0012               	return	
  2659  0013A0                     __end_of_cmp_MSG1:
  2660                           	opt stack 0
  2661                           tblptru	equ	0xFF8
  2662                           tblptrh	equ	0xFF7
  2663                           tblptrl	equ	0xFF6
  2664                           tablat	equ	0xFF5
  2665                           intcon	equ	0xFF2
  2666                           intcon2	equ	0xFF1
  2667                           intcon3	equ	0xFF0
  2668                           wreg	equ	0xFE8
  2669                           indf2	equ	0xFDF
  2670                           fsr2h	equ	0xFDA
  2671                           fsr2l	equ	0xFD9
  2672                           status	equ	0xFD8
  2673                           
  2674 ;; *************** function _UART_Read *****************
  2675 ;; Defined at:
  2676 ;;		line 44 in file "USART.c"
  2677 ;; Parameters:    Size  Location     Type
  2678 ;;		None
  2679 ;; Auto vars:     Size  Location     Type
  2680 ;;		None
  2681 ;; Return value:  Size  Location     Type
  2682 ;;                  1    wreg      unsigned char 
  2683 ;; Registers used:
  2684 ;;		wreg, status,2
  2685 ;; Tracked objects:
  2686 ;;		On entry : 0/0
  2687 ;;		On exit  : 0/0
  2688 ;;		Unchanged: 0/0
  2689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2690 ;;      Params:         0       0       0       0       0       0       0       0       0
  2691 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2692 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2693 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2694 ;;Total ram usage:        0 bytes
  2695 ;; Hardware stack levels used:    1
  2696 ;; Hardware stack levels required when called:    2
  2697 ;; This function calls:
  2698 ;;		Nothing
  2699 ;; This function is called by:
  2700 ;;		_checkUSART
  2701 ;;		_UART_Read_Text
  2702 ;; This function uses a non-reentrant model
  2703 ;;
  2704                           
  2705                           	psect	text16
  2706  00143A                     __ptext16:
  2707                           	opt stack 0
  2708  00143A                     _UART_Read:
  2709                           	opt stack 26
  2710  00143A                     l153:
  2711  00143A  AA9E               	btfss	3998,5,c	;volatile
  2712  00143C  D7FE               	goto	l153
  2713                           
  2714                           ;USART.c: 46: return RCREG;
  2715  00143E  50AE               	movf	4014,w,c	;volatile
  2716  001440  0012               	return	
  2717  001442                     __end_of_UART_Read:
  2718                           	opt stack 0
  2719                           tblptru	equ	0xFF8
  2720                           tblptrh	equ	0xFF7
  2721                           tblptrl	equ	0xFF6
  2722                           tablat	equ	0xFF5
  2723                           intcon	equ	0xFF2
  2724                           intcon2	equ	0xFF1
  2725                           intcon3	equ	0xFF0
  2726                           wreg	equ	0xFE8
  2727                           indf2	equ	0xFDF
  2728                           fsr2h	equ	0xFDA
  2729                           fsr2l	equ	0xFD9
  2730                           status	equ	0xFD8
  2731                           
  2732 ;; *************** function _UART_Data_Ready *****************
  2733 ;; Defined at:
  2734 ;;		line 40 in file "USART.c"
  2735 ;; Parameters:    Size  Location     Type
  2736 ;;		None
  2737 ;; Auto vars:     Size  Location     Type
  2738 ;;		None
  2739 ;; Return value:  Size  Location     Type
  2740 ;;                  1    wreg      unsigned char 
  2741 ;; Registers used:
  2742 ;;		wreg
  2743 ;; Tracked objects:
  2744 ;;		On entry : 0/0
  2745 ;;		On exit  : 0/0
  2746 ;;		Unchanged: 0/0
  2747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2748 ;;      Params:         0       0       0       0       0       0       0       0       0
  2749 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2750 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2751 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2752 ;;Total ram usage:        0 bytes
  2753 ;; Hardware stack levels used:    1
  2754 ;; Hardware stack levels required when called:    2
  2755 ;; This function calls:
  2756 ;;		Nothing
  2757 ;; This function is called by:
  2758 ;;		_checkUSART
  2759 ;; This function uses a non-reentrant model
  2760 ;;
  2761                           
  2762                           	psect	text17
  2763  001442                     __ptext17:
  2764                           	opt stack 0
  2765  001442                     _UART_Data_Ready:
  2766                           	opt stack 26
  2767                           
  2768                           ;USART.c: 41: return RCIF;
  2769                           
  2770                           ;incstack = 0
  2771  001442  0E00               	movlw	0
  2772  001444  BA9E               	btfsc	3998,5,c	;volatile
  2773  001446  0E01               	movlw	1
  2774  001448  0012               	return	
  2775  00144A                     __end_of_UART_Data_Ready:
  2776                           	opt stack 0
  2777                           tblptru	equ	0xFF8
  2778                           tblptrh	equ	0xFF7
  2779                           tblptrl	equ	0xFF6
  2780                           tablat	equ	0xFF5
  2781                           intcon	equ	0xFF2
  2782                           intcon2	equ	0xFF1
  2783                           intcon3	equ	0xFF0
  2784                           wreg	equ	0xFE8
  2785                           indf2	equ	0xFDF
  2786                           fsr2h	equ	0xFDA
  2787                           fsr2l	equ	0xFD9
  2788                           status	equ	0xFD8
  2789                           
  2790 ;; *************** function _cmpPass *****************
  2791 ;; Defined at:
  2792 ;;		line 109 in file "TOCTOC.c"
  2793 ;; Parameters:    Size  Location     Type
  2794 ;;  pass            2   29[COMRAM] PTR unsigned char 
  2795 ;;		 -> cadastrarSenha@temp1(2), main@pass(2), 
  2796 ;;  toque           2   31[COMRAM] PTR unsigned char 
  2797 ;;		 -> cadastrarSenha@temp2(2), main@toc(2), 
  2798 ;; Auto vars:     Size  Location     Type
  2799 ;;  i               2   33[COMRAM] int 
  2800 ;; Return value:  Size  Location     Type
  2801 ;;                  2   29[COMRAM] int 
  2802 ;; Registers used:
  2803 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2804 ;; Tracked objects:
  2805 ;;		On entry : 0/0
  2806 ;;		On exit  : 0/0
  2807 ;;		Unchanged: 0/0
  2808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2809 ;;      Params:         4       0       0       0       0       0       0       0       0
  2810 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2811 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2812 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2813 ;;Total ram usage:        6 bytes
  2814 ;; Hardware stack levels used:    1
  2815 ;; Hardware stack levels required when called:    5
  2816 ;; This function calls:
  2817 ;;		_bip
  2818 ;;		_clearLCD
  2819 ;;		_cmpSignal
  2820 ;;		_set_line
  2821 ;;		_write_LCD
  2822 ;; This function is called by:
  2823 ;;		_destravarPorta
  2824 ;;		_cadastrarSenha
  2825 ;; This function uses a non-reentrant model
  2826 ;;
  2827                           
  2828                           	psect	text18
  2829  000D38                     __ptext18:
  2830                           	opt stack 0
  2831  000D38                     _cmpPass:
  2832                           	opt stack 24
  2833                           
  2834                           ;TOCTOC.c: 111: int i = cmpSignal(pass, toque);
  2835                           
  2836                           ;incstack = 0
  2837  000D38  C01E  F015         	movff	cmpPass@pass,cmpSignal@pass
  2838  000D3C  C01F  F016         	movff	cmpPass@pass+1,cmpSignal@pass+1
  2839  000D40  C020  F017         	movff	cmpPass@toque,cmpSignal@toc
  2840  000D44  C021  F018         	movff	cmpPass@toque+1,cmpSignal@toc+1
  2841  000D48  ECBA  F008         	call	_cmpSignal	;wreg free
  2842  000D4C  C015  F022         	movff	?_cmpSignal,cmpPass@i
  2843  000D50  C016  F023         	movff	?_cmpSignal+1,cmpPass@i+1
  2844                           
  2845                           ;TOCTOC.c: 113: if(i == 1){
  2846  000D54  0422               	decf	cmpPass@i,w,c
  2847  000D56  1023               	iorwf	cmpPass@i+1,w,c
  2848  000D58  A4D8               	btfss	status,2,c
  2849  000D5A  D02D               	goto	l1672
  2850                           
  2851                           ;TOCTOC.c: 114: clearLCD();
  2852  000D5C  EC25  F00A         	call	_clearLCD	;wreg free
  2853                           
  2854                           ;TOCTOC.c: 115: set_line(0,3);
  2855  000D60  0E00               	movlw	0
  2856  000D62  6E19               	movwf	set_line@line+1,c
  2857  000D64  0E00               	movlw	0
  2858  000D66  6E18               	movwf	set_line@line,c
  2859  000D68  0E00               	movlw	0
  2860  000D6A  6E1B               	movwf	set_line@pos+1,c
  2861  000D6C  0E03               	movlw	3
  2862  000D6E  6E1A               	movwf	set_line@pos,c
  2863  000D70  ECDF  F009         	call	_set_line	;wreg free
  2864                           
  2865                           ;TOCTOC.c: 116: write_LCD("As senhas");
  2866  000D74  0E59               	movlw	low STR_5
  2867  000D76  6E18               	movwf	write_LCD@c,c
  2868  000D78  0E08               	movlw	high STR_5
  2869  000D7A  6E19               	movwf	write_LCD@c+1,c
  2870  000D7C  ECE0  F008         	call	_write_LCD	;wreg free
  2871                           
  2872                           ;TOCTOC.c: 117: set_line(1,3);
  2873  000D80  0E00               	movlw	0
  2874  000D82  6E19               	movwf	set_line@line+1,c
  2875  000D84  0E01               	movlw	1
  2876  000D86  6E18               	movwf	set_line@line,c
  2877  000D88  0E00               	movlw	0
  2878  000D8A  6E1B               	movwf	set_line@pos+1,c
  2879  000D8C  0E03               	movlw	3
  2880  000D8E  6E1A               	movwf	set_line@pos,c
  2881  000D90  ECDF  F009         	call	_set_line	;wreg free
  2882                           
  2883                           ;TOCTOC.c: 118: write_LCD("coincidem");
  2884  000D94  0E13               	movlw	low (STR_6+4)
  2885  000D96  6E18               	movwf	write_LCD@c,c
  2886  000D98  0E08               	movlw	high (STR_6+4)
  2887  000D9A  6E19               	movwf	write_LCD@c+1,c
  2888  000D9C  ECE0  F008         	call	_write_LCD	;wreg free
  2889                           
  2890                           ;TOCTOC.c: 119: bip(2, 1000);
  2891  000DA0  0E00               	movlw	0
  2892  000DA2  6E16               	movwf	bip@rounds+1,c
  2893  000DA4  0E02               	movlw	2
  2894  000DA6  6E15               	movwf	bip@rounds,c
  2895  000DA8  0E03               	movlw	3
  2896  000DAA  6E18               	movwf	bip@time+1,c
  2897  000DAC  0EE8               	movlw	232
  2898  000DAE  6E17               	movwf	bip@time,c
  2899  000DB0  EC6E  F007         	call	_bip	;wreg free
  2900                           
  2901                           ;TOCTOC.c: 120: }
  2902  000DB4  D02C               	goto	l1684
  2903  000DB6                     l1672:
  2904                           
  2905                           ;TOCTOC.c: 121: else{
  2906                           ;TOCTOC.c: 122: clearLCD();
  2907  000DB6  EC25  F00A         	call	_clearLCD	;wreg free
  2908                           
  2909                           ;TOCTOC.c: 123: set_line(0,3);
  2910  000DBA  0E00               	movlw	0
  2911  000DBC  6E19               	movwf	set_line@line+1,c
  2912  000DBE  0E00               	movlw	0
  2913  000DC0  6E18               	movwf	set_line@line,c
  2914  000DC2  0E00               	movlw	0
  2915  000DC4  6E1B               	movwf	set_line@pos+1,c
  2916  000DC6  0E03               	movlw	3
  2917  000DC8  6E1A               	movwf	set_line@pos,c
  2918  000DCA  ECDF  F009         	call	_set_line	;wreg free
  2919                           
  2920                           ;TOCTOC.c: 124: write_LCD("As senhas");
  2921  000DCE  0E59               	movlw	low STR_5
  2922  000DD0  6E18               	movwf	write_LCD@c,c
  2923  000DD2  0E08               	movlw	high STR_5
  2924  000DD4  6E19               	movwf	write_LCD@c+1,c
  2925  000DD6  ECE0  F008         	call	_write_LCD	;wreg free
  2926                           
  2927                           ;TOCTOC.c: 125: set_line(1,1);
  2928  000DDA  0E00               	movlw	0
  2929  000DDC  6E19               	movwf	set_line@line+1,c
  2930  000DDE  0E01               	movlw	1
  2931  000DE0  6E18               	movwf	set_line@line,c
  2932  000DE2  0E00               	movlw	0
  2933  000DE4  6E1B               	movwf	set_line@pos+1,c
  2934  000DE6  0E01               	movlw	1
  2935  000DE8  6E1A               	movwf	set_line@pos,c
  2936  000DEA  ECDF  F009         	call	_set_line	;wreg free
  2937                           
  2938                           ;TOCTOC.c: 126: write_LCD("nao coincidem");
  2939  000DEE  0E0F               	movlw	low STR_6
  2940  000DF0  6E18               	movwf	write_LCD@c,c
  2941  000DF2  0E08               	movlw	high STR_6
  2942  000DF4  6E19               	movwf	write_LCD@c+1,c
  2943  000DF6  ECE0  F008         	call	_write_LCD	;wreg free
  2944                           
  2945                           ;TOCTOC.c: 127: bip(4, 500);
  2946  000DFA  0E00               	movlw	0
  2947  000DFC  6E16               	movwf	bip@rounds+1,c
  2948  000DFE  0E04               	movlw	4
  2949  000E00  6E15               	movwf	bip@rounds,c
  2950  000E02  0E01               	movlw	1
  2951  000E04  6E18               	movwf	bip@time+1,c
  2952  000E06  0EF4               	movlw	244
  2953  000E08  6E17               	movwf	bip@time,c
  2954  000E0A  EC6E  F007         	call	_bip	;wreg free
  2955  000E0E                     l1684:
  2956                           
  2957                           ;TOCTOC.c: 128: }
  2958                           ;TOCTOC.c: 129: return i;
  2959  000E0E  C022  F01E         	movff	cmpPass@i,?_cmpPass
  2960  000E12  C023  F01F         	movff	cmpPass@i+1,?_cmpPass+1
  2961  000E16  0012               	return	
  2962  000E18                     __end_of_cmpPass:
  2963                           	opt stack 0
  2964                           tblptru	equ	0xFF8
  2965                           tblptrh	equ	0xFF7
  2966                           tblptrl	equ	0xFF6
  2967                           tablat	equ	0xFF5
  2968                           intcon	equ	0xFF2
  2969                           intcon2	equ	0xFF1
  2970                           intcon3	equ	0xFF0
  2971                           wreg	equ	0xFE8
  2972                           indf2	equ	0xFDF
  2973                           fsr2h	equ	0xFDA
  2974                           fsr2l	equ	0xFD9
  2975                           status	equ	0xFD8
  2976                           
  2977 ;; *************** function _write_LCD *****************
  2978 ;; Defined at:
  2979 ;;		line 59 in file "LCD.c"
  2980 ;; Parameters:    Size  Location     Type
  2981 ;;  c               2   23[COMRAM] PTR unsigned char 
  2982 ;;		 -> STR_18(11), STR_17(6), STR_16(6), STR_15(11), 
  2983 ;;		 -> STR_14(6), STR_13(13), STR_12(6), STR_11(13), 
  2984 ;;		 -> STR_10(14), STR_9(10), STR_8(10), STR_7(10), 
  2985 ;;		 -> STR_6(14), STR_5(10), STR_4(12), STR_3(6), 
  2986 ;;		 -> STR_2(14), STR_1(14), 
  2987 ;; Auto vars:     Size  Location     Type
  2988 ;;  i               2   27[COMRAM] int 
  2989 ;; Return value:  Size  Location     Type
  2990 ;;                  1    wreg      void 
  2991 ;; Registers used:
  2992 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2993 ;; Tracked objects:
  2994 ;;		On entry : 0/0
  2995 ;;		On exit  : 0/0
  2996 ;;		Unchanged: 0/0
  2997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2998 ;;      Params:         2       0       0       0       0       0       0       0       0
  2999 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3000 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3001 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3002 ;;Total ram usage:        6 bytes
  3003 ;; Hardware stack levels used:    1
  3004 ;; Hardware stack levels required when called:    4
  3005 ;; This function calls:
  3006 ;;		_send_msg
  3007 ;; This function is called by:
  3008 ;;		_lerToque
  3009 ;;		_destravarPorta
  3010 ;;		_cmpPass
  3011 ;;		_confirmarSenha
  3012 ;;		_cadastrarSenha
  3013 ;; This function uses a non-reentrant model
  3014 ;;
  3015                           
  3016                           	psect	text19
  3017  0011C0                     __ptext19:
  3018                           	opt stack 0
  3019  0011C0                     _write_LCD:
  3020                           	opt stack 25
  3021                           
  3022                           ;LCD.c: 61: int i = 0;
  3023                           
  3024                           ;incstack = 0
  3025  0011C0  0E00               	movlw	0
  3026  0011C2  6E1D               	movwf	write_LCD@i+1,c
  3027  0011C4  0E00               	movlw	0
  3028  0011C6  6E1C               	movwf	write_LCD@i,c
  3029                           
  3030                           ;LCD.c: 62: for(; c[i] != '\0'; i++)
  3031  0011C8  D010               	goto	l1530
  3032  0011CA                     l1526:
  3033                           
  3034                           ;LCD.c: 63: send_msg(c[i]);
  3035  0011CA  501C               	movf	write_LCD@i,w,c
  3036  0011CC  2418               	addwf	write_LCD@c,w,c
  3037  0011CE  6E1A               	movwf	??_write_LCD& (0+255),c
  3038  0011D0  501D               	movf	write_LCD@i+1,w,c
  3039  0011D2  2019               	addwfc	write_LCD@c+1,w,c
  3040  0011D4  6E1B               	movwf	(??_write_LCD+1)& (0+255),c
  3041  0011D6  C01A  FFF6         	movff	??_write_LCD,tblptrl
  3042  0011DA  C01B  FFF7         	movff	??_write_LCD+1,tblptrh
  3043  0011DE                     	if	0	;tblptru may be non-zero
  3044  0011DE                     	endif
  3045  0011DE                     	if	0	;tblptru may be non-zero
  3046  0011DE                     	endif
  3047  0011DE  0008               	tblrd		*
  3048  0011E0  50F5               	movf	tablat,w,c
  3049  0011E2  EC94  F009         	call	_send_msg
  3050  0011E6  4A1C               	infsnz	write_LCD@i,f,c
  3051  0011E8  2A1D               	incf	write_LCD@i+1,f,c
  3052  0011EA                     l1530:
  3053  0011EA  501C               	movf	write_LCD@i,w,c
  3054  0011EC  2418               	addwf	write_LCD@c,w,c
  3055  0011EE  6E1A               	movwf	??_write_LCD& (0+255),c
  3056  0011F0  501D               	movf	write_LCD@i+1,w,c
  3057  0011F2  2019               	addwfc	write_LCD@c+1,w,c
  3058  0011F4  6E1B               	movwf	(??_write_LCD+1)& (0+255),c
  3059  0011F6  C01A  FFF6         	movff	??_write_LCD,tblptrl
  3060  0011FA  C01B  FFF7         	movff	??_write_LCD+1,tblptrh
  3061  0011FE                     	if	0	;tblptru may be non-zero
  3062  0011FE                     	endif
  3063  0011FE                     	if	0	;tblptru may be non-zero
  3064  0011FE                     	endif
  3065  0011FE  0008               	tblrd		*
  3066  001200  50F5               	movf	tablat,w,c
  3067  001202  0900               	iorlw	0
  3068  001204  B4D8               	btfsc	status,2,c
  3069  001206  0012               	return	
  3070  001208  D7E0               	goto	l1526
  3071  00120A                     __end_of_write_LCD:
  3072                           	opt stack 0
  3073                           tblptru	equ	0xFF8
  3074                           tblptrh	equ	0xFF7
  3075                           tblptrl	equ	0xFF6
  3076                           tablat	equ	0xFF5
  3077                           intcon	equ	0xFF2
  3078                           intcon2	equ	0xFF1
  3079                           intcon3	equ	0xFF0
  3080                           wreg	equ	0xFE8
  3081                           indf2	equ	0xFDF
  3082                           fsr2h	equ	0xFDA
  3083                           fsr2l	equ	0xFD9
  3084                           status	equ	0xFD8
  3085                           
  3086 ;; *************** function _send_msg *****************
  3087 ;; Defined at:
  3088 ;;		line 35 in file "LCD.c"
  3089 ;; Parameters:    Size  Location     Type
  3090 ;;  msg             1    wreg     unsigned char 
  3091 ;; Auto vars:     Size  Location     Type
  3092 ;;  msg             1   22[COMRAM] unsigned char 
  3093 ;; Return value:  Size  Location     Type
  3094 ;;                  1    wreg      void 
  3095 ;; Registers used:
  3096 ;;		wreg, status,2, cstack
  3097 ;; Tracked objects:
  3098 ;;		On entry : 0/0
  3099 ;;		On exit  : 0/0
  3100 ;;		Unchanged: 0/0
  3101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3102 ;;      Params:         0       0       0       0       0       0       0       0       0
  3103 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3104 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3105 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3106 ;;Total ram usage:        2 bytes
  3107 ;; Hardware stack levels used:    1
  3108 ;; Hardware stack levels required when called:    3
  3109 ;; This function calls:
  3110 ;;		_ena_pulse
  3111 ;; This function is called by:
  3112 ;;		_write_LCD
  3113 ;;		_lerToque
  3114 ;;		_destravarPorta
  3115 ;; This function uses a non-reentrant model
  3116 ;;
  3117                           
  3118                           	psect	text20
  3119  001328                     __ptext20:
  3120                           	opt stack 0
  3121  001328                     _send_msg:
  3122                           	opt stack 25
  3123                           
  3124                           ;incstack = 0
  3125                           ;send_msg@msg stored from wreg
  3126  001328  6E17               	movwf	send_msg@msg,c
  3127                           
  3128                           ;LCD.c: 37: PORTD = msg;
  3129  00132A  C017  FF83         	movff	send_msg@msg,3971	;volatile
  3130                           
  3131                           ;LCD.c: 38: PORTBbits.RB3 = 1;
  3132  00132E  8681               	bsf	3969,3,c	;volatile
  3133                           
  3134                           ;LCD.c: 39: _delay((unsigned long)((1)*(16000000/4000.0)));
  3135  001330  0E06               	movlw	6
  3136  001332  6E16               	movwf	??_send_msg& (0+255),c
  3137  001334  0E30               	movlw	48
  3138  001336                     u1147:
  3139  001336  2EE8               	decfsz	wreg,f,c
  3140  001338  D7FE               	bra	u1147
  3141  00133A  2E16               	decfsz	??_send_msg& (0+255),f,c
  3142  00133C  D7FC               	bra	u1147
  3143  00133E  D000               	nop2	
  3144                           
  3145                           ;LCD.c: 40: ena_pulse();
  3146  001340  EC5F  F009         	call	_ena_pulse	;wreg free
  3147                           
  3148                           ;LCD.c: 41: _delay((unsigned long)((1)*(16000000/4000.0)));
  3149  001344  0E06               	movlw	6
  3150  001346  6E16               	movwf	??_send_msg& (0+255),c
  3151  001348  0E30               	movlw	48
  3152  00134A                     u1157:
  3153  00134A  2EE8               	decfsz	wreg,f,c
  3154  00134C  D7FE               	bra	u1157
  3155  00134E  2E16               	decfsz	??_send_msg& (0+255),f,c
  3156  001350  D7FC               	bra	u1157
  3157  001352  D000               	nop2	
  3158                           
  3159                           ;LCD.c: 42: PORTBbits.RB3 = 0;
  3160  001354  9681               	bcf	3969,3,c	;volatile
  3161  001356  0012               	return		;funcret
  3162  001358                     __end_of_send_msg:
  3163                           	opt stack 0
  3164                           tblptru	equ	0xFF8
  3165                           tblptrh	equ	0xFF7
  3166                           tblptrl	equ	0xFF6
  3167                           tablat	equ	0xFF5
  3168                           intcon	equ	0xFF2
  3169                           intcon2	equ	0xFF1
  3170                           intcon3	equ	0xFF0
  3171                           wreg	equ	0xFE8
  3172                           indf2	equ	0xFDF
  3173                           fsr2h	equ	0xFDA
  3174                           fsr2l	equ	0xFD9
  3175                           status	equ	0xFD8
  3176                           
  3177 ;; *************** function _set_line *****************
  3178 ;; Defined at:
  3179 ;;		line 66 in file "LCD.c"
  3180 ;; Parameters:    Size  Location     Type
  3181 ;;  line            2   23[COMRAM] int 
  3182 ;;  pos             2   25[COMRAM] int 
  3183 ;; Auto vars:     Size  Location     Type
  3184 ;;  cursor          1   27[COMRAM] unsigned char 
  3185 ;; Return value:  Size  Location     Type
  3186 ;;                  1    wreg      void 
  3187 ;; Registers used:
  3188 ;;		wreg, status,2, status,0, cstack
  3189 ;; Tracked objects:
  3190 ;;		On entry : 0/0
  3191 ;;		On exit  : 0/0
  3192 ;;		Unchanged: 0/0
  3193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3194 ;;      Params:         4       0       0       0       0       0       0       0       0
  3195 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3196 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3197 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3198 ;;Total ram usage:        5 bytes
  3199 ;; Hardware stack levels used:    1
  3200 ;; Hardware stack levels required when called:    4
  3201 ;; This function calls:
  3202 ;;		_send_cfg
  3203 ;; This function is called by:
  3204 ;;		_lerToque
  3205 ;;		_destravarPorta
  3206 ;;		_cmpPass
  3207 ;;		_confirmarSenha
  3208 ;;		_cadastrarSenha
  3209 ;; This function uses a non-reentrant model
  3210 ;;
  3211                           
  3212                           	psect	text21
  3213  0013BE                     __ptext21:
  3214                           	opt stack 0
  3215  0013BE                     _set_line:
  3216                           	opt stack 25
  3217                           
  3218                           ;LCD.c: 68: char cursor;
  3219                           ;LCD.c: 69: if(line == 0)
  3220                           
  3221                           ;incstack = 0
  3222  0013BE  5018               	movf	set_line@line,w,c
  3223  0013C0  1019               	iorwf	set_line@line+1,w,c
  3224  0013C2  A4D8               	btfss	status,2,c
  3225  0013C4  D003               	goto	l1536
  3226                           
  3227                           ;LCD.c: 70: cursor = 0x80 + pos;
  3228  0013C6  501A               	movf	set_line@pos,w,c
  3229  0013C8  0F80               	addlw	128
  3230  0013CA  D002               	goto	L2
  3231  0013CC                     l1536:
  3232                           
  3233                           ;LCD.c: 71: else
  3234                           ;LCD.c: 72: cursor = 0xC0 + pos;
  3235  0013CC  501A               	movf	set_line@pos,w,c
  3236  0013CE  0FC0               	addlw	192
  3237  0013D0                     L2:
  3238  0013D0  6E1C               	movwf	set_line@cursor,c
  3239                           
  3240                           ;LCD.c: 73: send_cfg(cursor);
  3241  0013D2  501C               	movf	set_line@cursor,w,c
  3242  0013D4  ECD0  F009         	call	_send_cfg
  3243  0013D8  0012               	return		;funcret
  3244  0013DA                     __end_of_set_line:
  3245                           	opt stack 0
  3246                           tblptru	equ	0xFF8
  3247                           tblptrh	equ	0xFF7
  3248                           tblptrl	equ	0xFF6
  3249                           tablat	equ	0xFF5
  3250                           intcon	equ	0xFF2
  3251                           intcon2	equ	0xFF1
  3252                           intcon3	equ	0xFF0
  3253                           wreg	equ	0xFE8
  3254                           indf2	equ	0xFDF
  3255                           fsr2h	equ	0xFDA
  3256                           fsr2l	equ	0xFD9
  3257                           status	equ	0xFD8
  3258                           
  3259 ;; *************** function _cmpSignal *****************
  3260 ;; Defined at:
  3261 ;;		line 36 in file "ReadSignal.c"
  3262 ;; Parameters:    Size  Location     Type
  3263 ;;  pass            2   20[COMRAM] PTR unsigned char 
  3264 ;;		 -> cadastrarSenha@temp1(2), main@pass(2), 
  3265 ;;  toc             2   22[COMRAM] PTR unsigned char 
  3266 ;;		 -> cadastrarSenha@temp2(2), main@toc(2), 
  3267 ;; Auto vars:     Size  Location     Type
  3268 ;;		None
  3269 ;; Return value:  Size  Location     Type
  3270 ;;                  2   20[COMRAM] int 
  3271 ;; Registers used:
  3272 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  3273 ;; Tracked objects:
  3274 ;;		On entry : 0/0
  3275 ;;		On exit  : 0/0
  3276 ;;		Unchanged: 0/0
  3277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3278 ;;      Params:         4       0       0       0       0       0       0       0       0
  3279 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3280 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3281 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3282 ;;Total ram usage:        6 bytes
  3283 ;; Hardware stack levels used:    1
  3284 ;; Hardware stack levels required when called:    2
  3285 ;; This function calls:
  3286 ;;		Nothing
  3287 ;; This function is called by:
  3288 ;;		_cmpPass
  3289 ;; This function uses a non-reentrant model
  3290 ;;
  3291                           
  3292                           	psect	text22
  3293  001174                     __ptext22:
  3294                           	opt stack 0
  3295  001174                     _cmpSignal:
  3296                           	opt stack 26
  3297                           
  3298                           ;ReadSignal.c: 38: if(pass[0] == toc[0] && pass[1] == toc[1])
  3299                           
  3300                           ;incstack = 0
  3301  001174  C017  FFD9         	movff	cmpSignal@toc,fsr2l
  3302  001178  C018  FFDA         	movff	cmpSignal@toc+1,fsr2h
  3303  00117C  C015  FFE1         	movff	cmpSignal@pass,fsr1l
  3304  001180  C016  FFE2         	movff	cmpSignal@pass+1,fsr1h
  3305  001184  50DE               	movf	postinc2,w,c
  3306  001186  18E6               	xorwf	postinc1,w,c
  3307  001188  A4D8               	btfss	status,2,c
  3308  00118A  D015               	goto	l1590
  3309  00118C  EE20 F001          	lfsr	2,1
  3310  001190  5017               	movf	cmpSignal@toc,w,c
  3311  001192  26D9               	addwf	fsr2l,f,c
  3312  001194  5018               	movf	cmpSignal@toc+1,w,c
  3313  001196  22DA               	addwfc	fsr2h,f,c
  3314  001198  EE10 F001          	lfsr	1,1
  3315  00119C  5015               	movf	cmpSignal@pass,w,c
  3316  00119E  26E1               	addwf	fsr1l,f,c
  3317  0011A0  5016               	movf	cmpSignal@pass+1,w,c
  3318  0011A2  22E2               	addwfc	fsr1h,f,c
  3319  0011A4  50DE               	movf	postinc2,w,c
  3320  0011A6  18E6               	xorwf	postinc1,w,c
  3321  0011A8  A4D8               	btfss	status,2,c
  3322  0011AA  D005               	goto	l1590
  3323                           
  3324                           ;ReadSignal.c: 39: return 1;
  3325  0011AC  0E00               	movlw	0
  3326  0011AE  6E16               	movwf	?_cmpSignal+1,c
  3327  0011B0  0E01               	movlw	1
  3328  0011B2  6E15               	movwf	?_cmpSignal,c
  3329  0011B4  0012               	return	
  3330  0011B6                     l1590:
  3331                           
  3332                           ;ReadSignal.c: 40: return 0;
  3333  0011B6  0E00               	movlw	0
  3334  0011B8  6E16               	movwf	?_cmpSignal+1,c
  3335  0011BA  0E00               	movlw	0
  3336  0011BC  6E15               	movwf	?_cmpSignal,c
  3337  0011BE  0012               	return	
  3338  0011C0                     __end_of_cmpSignal:
  3339                           	opt stack 0
  3340                           tblptru	equ	0xFF8
  3341                           tblptrh	equ	0xFF7
  3342                           tblptrl	equ	0xFF6
  3343                           tablat	equ	0xFF5
  3344                           intcon	equ	0xFF2
  3345                           intcon2	equ	0xFF1
  3346                           intcon3	equ	0xFF0
  3347                           wreg	equ	0xFE8
  3348                           postinc1	equ	0xFE6
  3349                           fsr1h	equ	0xFE2
  3350                           fsr1l	equ	0xFE1
  3351                           indf2	equ	0xFDF
  3352                           postinc2	equ	0xFDE
  3353                           fsr2h	equ	0xFDA
  3354                           fsr2l	equ	0xFD9
  3355                           status	equ	0xFD8
  3356                           
  3357 ;; *************** function _clearLCD *****************
  3358 ;; Defined at:
  3359 ;;		line 31 in file "LCD.c"
  3360 ;; Parameters:    Size  Location     Type
  3361 ;;		None
  3362 ;; Auto vars:     Size  Location     Type
  3363 ;;		None
  3364 ;; Return value:  Size  Location     Type
  3365 ;;                  1    wreg      void 
  3366 ;; Registers used:
  3367 ;;		wreg, cstack
  3368 ;; Tracked objects:
  3369 ;;		On entry : 0/0
  3370 ;;		On exit  : 0/0
  3371 ;;		Unchanged: 0/0
  3372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3373 ;;      Params:         0       0       0       0       0       0       0       0       0
  3374 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3375 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3376 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3377 ;;Total ram usage:        0 bytes
  3378 ;; Hardware stack levels used:    1
  3379 ;; Hardware stack levels required when called:    4
  3380 ;; This function calls:
  3381 ;;		_send_cfg
  3382 ;; This function is called by:
  3383 ;;		_lerToque
  3384 ;;		_destravarPorta
  3385 ;;		_cmpPass
  3386 ;;		_confirmarSenha
  3387 ;;		_cadastrarSenha
  3388 ;; This function uses a non-reentrant model
  3389 ;;
  3390                           
  3391                           	psect	text23
  3392  00144A                     __ptext23:
  3393                           	opt stack 0
  3394  00144A                     _clearLCD:
  3395                           	opt stack 24
  3396                           
  3397                           ;LCD.c: 32: send_cfg(0x01);
  3398                           
  3399                           ;incstack = 0
  3400  00144A  0E01               	movlw	1
  3401  00144C  ECD0  F009         	call	_send_cfg
  3402  001450  0012               	return		;funcret
  3403  001452                     __end_of_clearLCD:
  3404                           	opt stack 0
  3405                           tblptru	equ	0xFF8
  3406                           tblptrh	equ	0xFF7
  3407                           tblptrl	equ	0xFF6
  3408                           tablat	equ	0xFF5
  3409                           intcon	equ	0xFF2
  3410                           intcon2	equ	0xFF1
  3411                           intcon3	equ	0xFF0
  3412                           wreg	equ	0xFE8
  3413                           postinc1	equ	0xFE6
  3414                           fsr1h	equ	0xFE2
  3415                           fsr1l	equ	0xFE1
  3416                           indf2	equ	0xFDF
  3417                           postinc2	equ	0xFDE
  3418                           fsr2h	equ	0xFDA
  3419                           fsr2l	equ	0xFD9
  3420                           status	equ	0xFD8
  3421                           
  3422 ;; *************** function _send_cfg *****************
  3423 ;; Defined at:
  3424 ;;		line 22 in file "LCD.c"
  3425 ;; Parameters:    Size  Location     Type
  3426 ;;  cmd             1    wreg     unsigned char 
  3427 ;; Auto vars:     Size  Location     Type
  3428 ;;  cmd             1   22[COMRAM] unsigned char 
  3429 ;; Return value:  Size  Location     Type
  3430 ;;                  1    wreg      void 
  3431 ;; Registers used:
  3432 ;;		wreg, cstack
  3433 ;; Tracked objects:
  3434 ;;		On entry : 0/0
  3435 ;;		On exit  : 0/0
  3436 ;;		Unchanged: 0/0
  3437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3438 ;;      Params:         0       0       0       0       0       0       0       0       0
  3439 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3440 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3441 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3442 ;;Total ram usage:        2 bytes
  3443 ;; Hardware stack levels used:    1
  3444 ;; Hardware stack levels required when called:    3
  3445 ;; This function calls:
  3446 ;;		_ena_pulse
  3447 ;; This function is called by:
  3448 ;;		_clearLCD
  3449 ;;		_init_LCD
  3450 ;;		_set_line
  3451 ;; This function uses a non-reentrant model
  3452 ;;
  3453                           
  3454                           	psect	text24
  3455  0013A0                     __ptext24:
  3456                           	opt stack 0
  3457  0013A0                     _send_cfg:
  3458                           	opt stack 26
  3459                           
  3460                           ;incstack = 0
  3461                           ;send_cfg@cmd stored from wreg
  3462  0013A0  6E17               	movwf	send_cfg@cmd,c
  3463                           
  3464                           ;LCD.c: 24: PORTD = cmd;
  3465  0013A2  C017  FF83         	movff	send_cfg@cmd,3971	;volatile
  3466                           
  3467                           ;LCD.c: 25: PORTBbits.RB3 = 0;
  3468  0013A6  9681               	bcf	3969,3,c	;volatile
  3469                           
  3470                           ;LCD.c: 26: ena_pulse();
  3471  0013A8  EC5F  F009         	call	_ena_pulse	;wreg free
  3472                           
  3473                           ;LCD.c: 27: _delay((unsigned long)((1)*(16000000/4000.0)));
  3474  0013AC  0E06               	movlw	6
  3475  0013AE  6E16               	movwf	??_send_cfg& (0+255),c
  3476  0013B0  0E30               	movlw	48
  3477  0013B2                     u1167:
  3478  0013B2  2EE8               	decfsz	wreg,f,c
  3479  0013B4  D7FE               	bra	u1167
  3480  0013B6  2E16               	decfsz	??_send_cfg& (0+255),f,c
  3481  0013B8  D7FC               	bra	u1167
  3482  0013BA  D000               	nop2	
  3483  0013BC  0012               	return		;funcret
  3484  0013BE                     __end_of_send_cfg:
  3485                           	opt stack 0
  3486                           tblptru	equ	0xFF8
  3487                           tblptrh	equ	0xFF7
  3488                           tblptrl	equ	0xFF6
  3489                           tablat	equ	0xFF5
  3490                           intcon	equ	0xFF2
  3491                           intcon2	equ	0xFF1
  3492                           intcon3	equ	0xFF0
  3493                           wreg	equ	0xFE8
  3494                           postinc1	equ	0xFE6
  3495                           fsr1h	equ	0xFE2
  3496                           fsr1l	equ	0xFE1
  3497                           indf2	equ	0xFDF
  3498                           postinc2	equ	0xFDE
  3499                           fsr2h	equ	0xFDA
  3500                           fsr2l	equ	0xFD9
  3501                           status	equ	0xFD8
  3502                           
  3503 ;; *************** function _ena_pulse *****************
  3504 ;; Defined at:
  3505 ;;		line 11 in file "LCD.c"
  3506 ;; Parameters:    Size  Location     Type
  3507 ;;		None
  3508 ;; Auto vars:     Size  Location     Type
  3509 ;;		None
  3510 ;; Return value:  Size  Location     Type
  3511 ;;                  1    wreg      void 
  3512 ;; Registers used:
  3513 ;;		wreg
  3514 ;; Tracked objects:
  3515 ;;		On entry : 0/0
  3516 ;;		On exit  : 0/0
  3517 ;;		Unchanged: 0/0
  3518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3519 ;;      Params:         0       0       0       0       0       0       0       0       0
  3520 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3521 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3522 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3523 ;;Total ram usage:        1 bytes
  3524 ;; Hardware stack levels used:    1
  3525 ;; Hardware stack levels required when called:    2
  3526 ;; This function calls:
  3527 ;;		Nothing
  3528 ;; This function is called by:
  3529 ;;		_send_cfg
  3530 ;;		_send_msg
  3531 ;; This function uses a non-reentrant model
  3532 ;;
  3533                           
  3534                           	psect	text25
  3535  0012BE                     __ptext25:
  3536                           	opt stack 0
  3537  0012BE                     _ena_pulse:
  3538                           	opt stack 26
  3539                           
  3540                           ;LCD.c: 13: PORTEbits.RE1 = 0;
  3541                           
  3542                           ;incstack = 0
  3543  0012BE  9284               	bcf	3972,1,c	;volatile
  3544                           
  3545                           ;LCD.c: 14: _delay((unsigned long)((1)*(16000000/4000.0)));
  3546  0012C0  0E06               	movlw	6
  3547  0012C2  6E15               	movwf	??_ena_pulse& (0+255),c
  3548  0012C4  0E30               	movlw	48
  3549  0012C6                     u1177:
  3550  0012C6  2EE8               	decfsz	wreg,f,c
  3551  0012C8  D7FE               	bra	u1177
  3552  0012CA  2E15               	decfsz	??_ena_pulse& (0+255),f,c
  3553  0012CC  D7FC               	bra	u1177
  3554  0012CE  D000               	nop2	
  3555                           
  3556                           ;LCD.c: 15: PORTEbits.RE1 = 1;
  3557  0012D0  8284               	bsf	3972,1,c	;volatile
  3558                           
  3559                           ;LCD.c: 16: _delay((unsigned long)((1)*(16000000/4000.0)));
  3560  0012D2  0E06               	movlw	6
  3561  0012D4  6E15               	movwf	??_ena_pulse& (0+255),c
  3562  0012D6  0E30               	movlw	48
  3563  0012D8                     u1187:
  3564  0012D8  2EE8               	decfsz	wreg,f,c
  3565  0012DA  D7FE               	bra	u1187
  3566  0012DC  2E15               	decfsz	??_ena_pulse& (0+255),f,c
  3567  0012DE  D7FC               	bra	u1187
  3568  0012E0  D000               	nop2	
  3569                           
  3570                           ;LCD.c: 17: PORTEbits.RE1 = 0;
  3571  0012E2  9284               	bcf	3972,1,c	;volatile
  3572                           
  3573                           ;LCD.c: 18: _delay((unsigned long)((1)*(16000000/4000.0)));
  3574  0012E4  0E06               	movlw	6
  3575  0012E6  6E15               	movwf	??_ena_pulse& (0+255),c
  3576  0012E8  0E30               	movlw	48
  3577  0012EA                     u1197:
  3578  0012EA  2EE8               	decfsz	wreg,f,c
  3579  0012EC  D7FE               	bra	u1197
  3580  0012EE  2E15               	decfsz	??_ena_pulse& (0+255),f,c
  3581  0012F0  D7FC               	bra	u1197
  3582  0012F2  D000               	nop2	
  3583  0012F4  0012               	return		;funcret
  3584  0012F6                     __end_of_ena_pulse:
  3585                           	opt stack 0
  3586                           tblptru	equ	0xFF8
  3587                           tblptrh	equ	0xFF7
  3588                           tblptrl	equ	0xFF6
  3589                           tablat	equ	0xFF5
  3590                           intcon	equ	0xFF2
  3591                           intcon2	equ	0xFF1
  3592                           intcon3	equ	0xFF0
  3593                           wreg	equ	0xFE8
  3594                           postinc1	equ	0xFE6
  3595                           fsr1h	equ	0xFE2
  3596                           fsr1l	equ	0xFE1
  3597                           indf2	equ	0xFDF
  3598                           postinc2	equ	0xFDE
  3599                           fsr2h	equ	0xFDA
  3600                           fsr2l	equ	0xFD9
  3601                           status	equ	0xFD8
  3602                           
  3603 ;; *************** function _bip *****************
  3604 ;; Defined at:
  3605 ;;		line 14 in file "Buzzer.c"
  3606 ;; Parameters:    Size  Location     Type
  3607 ;;  rounds          2   20[COMRAM] int 
  3608 ;;  time            2   22[COMRAM] int 
  3609 ;; Auto vars:     Size  Location     Type
  3610 ;;  j               2   26[COMRAM] int 
  3611 ;; Return value:  Size  Location     Type
  3612 ;;                  1    wreg      void 
  3613 ;; Registers used:
  3614 ;;		wreg, status,2, status,0
  3615 ;; Tracked objects:
  3616 ;;		On entry : 0/0
  3617 ;;		On exit  : 0/0
  3618 ;;		Unchanged: 0/0
  3619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3620 ;;      Params:         4       0       0       0       0       0       0       0       0
  3621 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3622 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3623 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3624 ;;Total ram usage:        8 bytes
  3625 ;; Hardware stack levels used:    1
  3626 ;; Hardware stack levels required when called:    2
  3627 ;; This function calls:
  3628 ;;		Nothing
  3629 ;; This function is called by:
  3630 ;;		_cmpPass
  3631 ;; This function uses a non-reentrant model
  3632 ;;
  3633                           
  3634                           	psect	text26
  3635  000EDC                     __ptext26:
  3636                           	opt stack 0
  3637  000EDC                     _bip:
  3638                           	opt stack 26
  3639                           
  3640                           ;Buzzer.c: 16: TRISCbits.RC1 = 0;
  3641                           
  3642                           ;incstack = 0
  3643  000EDC  9294               	bcf	3988,1,c	;volatile
  3644                           
  3645                           ;Buzzer.c: 17: PORTCbits.RC1 = 0;
  3646  000EDE  9282               	bcf	3970,1,c	;volatile
  3647                           
  3648                           ;Buzzer.c: 19: int j = 0;
  3649  000EE0  0E00               	movlw	0
  3650  000EE2  6E1C               	movwf	bip@j+1,c
  3651  000EE4  0E00               	movlw	0
  3652  000EE6  6E1B               	movwf	bip@j,c
  3653                           
  3654                           ;Buzzer.c: 20: if(time == 500){
  3655  000EE8  0EF4               	movlw	244
  3656  000EEA  1817               	xorwf	bip@time,w,c
  3657  000EEC  E128               	bnz	l1608
  3658  000EEE  0418               	decf	bip@time+1,w,c
  3659  000EF0  B4D8               	btfsc	status,2,c
  3660  000EF2  D01A               	goto	l1606
  3661  000EF4  D024               	goto	l1608
  3662  000EF6                     l1602:
  3663                           
  3664                           ;Buzzer.c: 22: PORTCbits.RC1 = !PORTCbits.RC1;
  3665  000EF6  B282               	btfsc	3970,1,c	;volatile
  3666  000EF8  D003               	goto	u770
  3667  000EFA  6A19               	clrf	??_bip& (0+255),c
  3668  000EFC  2A19               	incf	??_bip& (0+255),f,c
  3669  000EFE  D001               	goto	u788
  3670  000F00                     u770:
  3671  000F00  6A19               	clrf	??_bip& (0+255),c
  3672  000F02                     u788:
  3673  000F02  4619               	rlncf	??_bip,f,c
  3674  000F04  5082               	movf	3970,w,c	;volatile
  3675  000F06  1819               	xorwf	??_bip,w,c
  3676  000F08  0BFD               	andlw	-3
  3677  000F0A  1819               	xorwf	??_bip,w,c
  3678  000F0C  6E82               	movwf	3970,c	;volatile
  3679                           
  3680                           ;Buzzer.c: 23: _delay((unsigned long)((500)*(16000000/4000.0)));
  3681  000F0E  0E0B               	movlw	11
  3682  000F10  6E1A               	movwf	(??_bip+1)& (0+255),c
  3683  000F12  0E26               	movlw	38
  3684  000F14  6E19               	movwf	??_bip& (0+255),c
  3685  000F16  0E5E               	movlw	94
  3686  000F18                     u1207:
  3687  000F18  2EE8               	decfsz	wreg,f,c
  3688  000F1A  D7FE               	bra	u1207
  3689  000F1C  2E19               	decfsz	??_bip& (0+255),f,c
  3690  000F1E  D7FC               	bra	u1207
  3691  000F20  2E1A               	decfsz	(??_bip+1)& (0+255),f,c
  3692  000F22  D7FA               	bra	u1207
  3693                           
  3694                           ;Buzzer.c: 24: j++;
  3695  000F24  4A1B               	infsnz	bip@j,f,c
  3696  000F26  2A1C               	incf	bip@j+1,f,c
  3697  000F28                     l1606:
  3698  000F28  5015               	movf	bip@rounds,w,c
  3699  000F2A  5C1B               	subwf	bip@j,w,c
  3700  000F2C  501C               	movf	bip@j+1,w,c
  3701  000F2E  0A80               	xorlw	128
  3702  000F30  6E19               	movwf	??_bip& (0+255),c
  3703  000F32  5016               	movf	bip@rounds+1,w,c
  3704  000F34  0A80               	xorlw	128
  3705  000F36  5819               	subwfb	??_bip& (0+255),w,c
  3706  000F38  B0D8               	btfsc	status,0,c
  3707  000F3A  0012               	return	
  3708  000F3C  D7DC               	goto	l1602
  3709  000F3E                     l1608:
  3710                           
  3711                           ;Buzzer.c: 27: else if(time == 1000){
  3712  000F3E  0EE8               	movlw	232
  3713  000F40  1817               	xorwf	bip@time,w,c
  3714  000F42  E12A               	bnz	l239
  3715  000F44  0E03               	movlw	3
  3716  000F46  1818               	xorwf	bip@time+1,w,c
  3717  000F48  A4D8               	btfss	status,2,c
  3718  000F4A  0012               	return	
  3719  000F4C  D01A               	goto	l1616
  3720  000F4E                     l1612:
  3721                           
  3722                           ;Buzzer.c: 29: PORTCbits.RC1 = !PORTCbits.RC1;
  3723  000F4E  B282               	btfsc	3970,1,c	;volatile
  3724  000F50  D003               	goto	u810
  3725  000F52  6A19               	clrf	??_bip& (0+255),c
  3726  000F54  2A19               	incf	??_bip& (0+255),f,c
  3727  000F56  D001               	goto	u828
  3728  000F58                     u810:
  3729  000F58  6A19               	clrf	??_bip& (0+255),c
  3730  000F5A                     u828:
  3731  000F5A  4619               	rlncf	??_bip,f,c
  3732  000F5C  5082               	movf	3970,w,c	;volatile
  3733  000F5E  1819               	xorwf	??_bip,w,c
  3734  000F60  0BFD               	andlw	-3
  3735  000F62  1819               	xorwf	??_bip,w,c
  3736  000F64  6E82               	movwf	3970,c	;volatile
  3737                           
  3738                           ;Buzzer.c: 30: _delay((unsigned long)((1000)*(16000000/4000.0)));
  3739  000F66  0E15               	movlw	21
  3740  000F68  6E1A               	movwf	(??_bip+1)& (0+255),c
  3741  000F6A  0E4B               	movlw	75
  3742  000F6C  6E19               	movwf	??_bip& (0+255),c
  3743  000F6E  0EBE               	movlw	190
  3744  000F70                     u1217:
  3745  000F70  2EE8               	decfsz	wreg,f,c
  3746  000F72  D7FE               	bra	u1217
  3747  000F74  2E19               	decfsz	??_bip& (0+255),f,c
  3748  000F76  D7FC               	bra	u1217
  3749  000F78  2E1A               	decfsz	(??_bip+1)& (0+255),f,c
  3750  000F7A  D7FA               	bra	u1217
  3751  000F7C  D000               	nop2	
  3752                           
  3753                           ;Buzzer.c: 31: j++;
  3754  000F7E  4A1B               	infsnz	bip@j,f,c
  3755  000F80  2A1C               	incf	bip@j+1,f,c
  3756  000F82                     l1616:
  3757  000F82  5015               	movf	bip@rounds,w,c
  3758  000F84  5C1B               	subwf	bip@j,w,c
  3759  000F86  501C               	movf	bip@j+1,w,c
  3760  000F88  0A80               	xorlw	128
  3761  000F8A  6E19               	movwf	??_bip& (0+255),c
  3762  000F8C  5016               	movf	bip@rounds+1,w,c
  3763  000F8E  0A80               	xorlw	128
  3764  000F90  5819               	subwfb	??_bip& (0+255),w,c
  3765  000F92  B0D8               	btfsc	status,0,c
  3766  000F94  0012               	return	
  3767  000F96  D7DB               	goto	l1612
  3768  000F98                     l239:
  3769  000F98  0012               	return		;funcret
  3770  000F9A                     __end_of_bip:
  3771                           	opt stack 0
  3772                           tblptru	equ	0xFF8
  3773                           tblptrh	equ	0xFF7
  3774                           tblptrl	equ	0xFF6
  3775                           tablat	equ	0xFF5
  3776                           intcon	equ	0xFF2
  3777                           intcon2	equ	0xFF1
  3778                           intcon3	equ	0xFF0
  3779                           wreg	equ	0xFE8
  3780                           postinc1	equ	0xFE6
  3781                           fsr1h	equ	0xFE2
  3782                           fsr1l	equ	0xFE1
  3783                           indf2	equ	0xFDF
  3784                           postinc2	equ	0xFDE
  3785                           fsr2h	equ	0xFDA
  3786                           fsr2l	equ	0xFD9
  3787                           status	equ	0xFD8
  3788                           
  3789 ;; *************** function _ISR *****************
  3790 ;; Defined at:
  3791 ;;		line 37 in file "Interrupt.c"
  3792 ;; Parameters:    Size  Location     Type
  3793 ;;		None
  3794 ;; Auto vars:     Size  Location     Type
  3795 ;;		None
  3796 ;; Return value:  Size  Location     Type
  3797 ;;                  1    wreg      void 
  3798 ;; Registers used:
  3799 ;;		wreg, status,2, status,0, cstack
  3800 ;; Tracked objects:
  3801 ;;		On entry : 0/0
  3802 ;;		On exit  : 0/0
  3803 ;;		Unchanged: 0/0
  3804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3805 ;;      Params:         0       0       0       0       0       0       0       0       0
  3806 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3807 ;;      Temps:         16       0       0       0       0       0       0       0       0
  3808 ;;      Totals:        16       0       0       0       0       0       0       0       0
  3809 ;;Total ram usage:       16 bytes
  3810 ;; Hardware stack levels used:    1
  3811 ;; Hardware stack levels required when called:    1
  3812 ;; This function calls:
  3813 ;;		i2_DutyCycle_PWM
  3814 ;; This function is called by:
  3815 ;;		Interrupt level 2
  3816 ;; This function uses a non-reentrant model
  3817 ;;
  3818                           
  3819                           	psect	intcode
  3820  000008                     __pintcode:
  3821                           	opt stack 0
  3822  000008                     _ISR:
  3823                           	opt stack 24
  3824                           
  3825                           ;incstack = 0
  3826  000008  823F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3827  00000A  ED0C  F007         	call	int_func,f	;refresh shadow registers
  3828                           tblptru	equ	0xFF8
  3829                           tblptrh	equ	0xFF7
  3830                           tblptrl	equ	0xFF6
  3831                           tablat	equ	0xFF5
  3832                           intcon	equ	0xFF2
  3833                           intcon2	equ	0xFF1
  3834                           intcon3	equ	0xFF0
  3835                           wreg	equ	0xFE8
  3836                           postinc1	equ	0xFE6
  3837                           fsr1h	equ	0xFE2
  3838                           fsr1l	equ	0xFE1
  3839                           indf2	equ	0xFDF
  3840                           postinc2	equ	0xFDE
  3841                           fsr2h	equ	0xFDA
  3842                           fsr2l	equ	0xFD9
  3843                           status	equ	0xFD8
  3844                           
  3845                           	psect	intcode_body
  3846  000E18                     __pintcode_body:
  3847                           	opt stack 24
  3848  000E18                     int_func:
  3849                           	opt stack 24
  3850  000E18  0006               	pop		; remove dummy address from shadow register refresh
  3851  000E1A  CFFA F007          	movff	pclath,??_ISR+2
  3852  000E1E  CFFB F008          	movff	pclatu,??_ISR+3
  3853  000E22  CFE9 F009          	movff	fsr0l,??_ISR+4
  3854  000E26  CFEA F00A          	movff	fsr0h,??_ISR+5
  3855  000E2A  CFE1 F00B          	movff	fsr1l,??_ISR+6
  3856  000E2E  CFE2 F00C          	movff	fsr1h,??_ISR+7
  3857  000E32  CFD9 F00D          	movff	fsr2l,??_ISR+8
  3858  000E36  CFDA F00E          	movff	fsr2h,??_ISR+9
  3859  000E3A  CFF3 F00F          	movff	prodl,??_ISR+10
  3860  000E3E  CFF4 F010          	movff	prodh,??_ISR+11
  3861  000E42  CFF6 F011          	movff	tblptrl,??_ISR+12
  3862  000E46  CFF7 F012          	movff	tblptrh,??_ISR+13
  3863  000E4A  CFF8 F013          	movff	tblptru,??_ISR+14
  3864  000E4E  CFF5 F014          	movff	tablat,??_ISR+15
  3865                           
  3866                           ;Interrupt.c: 39: if(INTCON3bits.INT2IF){
  3867  000E52  A2F0               	btfss	intcon3,1,c	;volatile
  3868  000E54  D025               	goto	i2l29
  3869                           
  3870                           ;Interrupt.c: 40: INTCON3bits.INT2IF = 0;
  3871  000E56  92F0               	bcf	intcon3,1,c	;volatile
  3872                           
  3873                           ;Interrupt.c: 41: buttonCancel_Lock = 1;
  3874  000E58  0E00               	movlw	0
  3875  000E5A  6E3C               	movwf	_buttonCancel_Lock+1,c
  3876  000E5C  0E01               	movlw	1
  3877  000E5E  6E3B               	movwf	_buttonCancel_Lock,c
  3878                           
  3879                           ;Interrupt.c: 42: if(doorState == 1){
  3880  000E60  043D               	decf	_doorState,w,c
  3881  000E62  103E               	iorwf	_doorState+1,w,c
  3882  000E64  A4D8               	btfss	status,2,c
  3883  000E66  D01C               	goto	i2l29
  3884                           
  3885                           ;Interrupt.c: 43: doorState = 0;
  3886  000E68  0E00               	movlw	0
  3887  000E6A  6E3E               	movwf	_doorState+1,c
  3888  000E6C  0E00               	movlw	0
  3889  000E6E  6E3D               	movwf	_doorState,c
  3890                           
  3891                           ;Interrupt.c: 44: DutyCycle_PWM(600);
  3892  000E70  0E02               	movlw	2
  3893  000E72  6E02               	movwf	i2DutyCycle_PWM@Valor+1,c
  3894  000E74  0E58               	movlw	88
  3895  000E76  6E01               	movwf	i2DutyCycle_PWM@Valor,c
  3896  000E78  EC41  F009         	call	i2_DutyCycle_PWM	;wreg free
  3897                           
  3898                           ;Interrupt.c: 45: _delay((unsigned long)((175)*(16000000/4000.0)));
  3899  000E7C  0E04               	movlw	4
  3900  000E7E  6E06               	movwf	(??_ISR+1)& (0+255),c
  3901  000E80  0E8E               	movlw	142
  3902  000E82  6E05               	movwf	??_ISR& (0+255),c
  3903  000E84  0E12               	movlw	18
  3904  000E86                     i2u122_47:
  3905  000E86  2EE8               	decfsz	wreg,f,c
  3906  000E88  D7FE               	bra	i2u122_47
  3907  000E8A  2E05               	decfsz	??_ISR& (0+255),f,c
  3908  000E8C  D7FC               	bra	i2u122_47
  3909  000E8E  2E06               	decfsz	(??_ISR+1)& (0+255),f,c
  3910  000E90  D7FA               	bra	i2u122_47
  3911  000E92  D000               	nop2	
  3912                           
  3913                           ;Interrupt.c: 46: DutyCycle_PWM(0);
  3914  000E94  0E00               	movlw	0
  3915  000E96  6E02               	movwf	i2DutyCycle_PWM@Valor+1,c
  3916  000E98  0E00               	movlw	0
  3917  000E9A  6E01               	movwf	i2DutyCycle_PWM@Valor,c
  3918  000E9C  EC41  F009         	call	i2_DutyCycle_PWM	;wreg free
  3919  000EA0                     i2l29:
  3920  000EA0  C014  FFF5         	movff	??_ISR+15,tablat
  3921  000EA4  C013  FFF8         	movff	??_ISR+14,tblptru
  3922  000EA8  C012  FFF7         	movff	??_ISR+13,tblptrh
  3923  000EAC  C011  FFF6         	movff	??_ISR+12,tblptrl
  3924  000EB0  C010  FFF4         	movff	??_ISR+11,prodh
  3925  000EB4  C00F  FFF3         	movff	??_ISR+10,prodl
  3926  000EB8  C00E  FFDA         	movff	??_ISR+9,fsr2h
  3927  000EBC  C00D  FFD9         	movff	??_ISR+8,fsr2l
  3928  000EC0  C00C  FFE2         	movff	??_ISR+7,fsr1h
  3929  000EC4  C00B  FFE1         	movff	??_ISR+6,fsr1l
  3930  000EC8  C00A  FFEA         	movff	??_ISR+5,fsr0h
  3931  000ECC  C009  FFE9         	movff	??_ISR+4,fsr0l
  3932  000ED0  C008  FFFB         	movff	??_ISR+3,pclatu
  3933  000ED4  C007  FFFA         	movff	??_ISR+2,pclath
  3934  000ED8  923F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3935  000EDA  0011               	retfie		f
  3936  000EDC                     __end_of_ISR:
  3937                           	opt stack 0
  3938                           pclatu	equ	0xFFB
  3939                           pclath	equ	0xFFA
  3940                           tblptru	equ	0xFF8
  3941                           tblptrh	equ	0xFF7
  3942                           tblptrl	equ	0xFF6
  3943                           tablat	equ	0xFF5
  3944                           prodh	equ	0xFF4
  3945                           prodl	equ	0xFF3
  3946                           intcon	equ	0xFF2
  3947                           intcon2	equ	0xFF1
  3948                           intcon3	equ	0xFF0
  3949                           fsr0h	equ	0xFEA
  3950                           fsr0l	equ	0xFE9
  3951                           wreg	equ	0xFE8
  3952                           postinc1	equ	0xFE6
  3953                           fsr1h	equ	0xFE2
  3954                           fsr1l	equ	0xFE1
  3955                           indf2	equ	0xFDF
  3956                           postinc2	equ	0xFDE
  3957                           fsr2h	equ	0xFDA
  3958                           fsr2l	equ	0xFD9
  3959                           status	equ	0xFD8
  3960                           
  3961 ;; *************** function i2_DutyCycle_PWM *****************
  3962 ;; Defined at:
  3963 ;;		line 43 in file "PWM.c"
  3964 ;; Parameters:    Size  Location     Type
  3965 ;;  Valor           2    0[COMRAM] unsigned int 
  3966 ;; Auto vars:     Size  Location     Type
  3967 ;;		None
  3968 ;; Return value:  Size  Location     Type
  3969 ;;                  1    wreg      void 
  3970 ;; Registers used:
  3971 ;;		wreg, status,2, status,0
  3972 ;; Tracked objects:
  3973 ;;		On entry : 0/0
  3974 ;;		On exit  : 0/0
  3975 ;;		Unchanged: 0/0
  3976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3977 ;;      Params:         2       0       0       0       0       0       0       0       0
  3978 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3979 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3980 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3981 ;;Total ram usage:        4 bytes
  3982 ;; Hardware stack levels used:    1
  3983 ;; This function calls:
  3984 ;;		Nothing
  3985 ;; This function is called by:
  3986 ;;		_ISR
  3987 ;; This function uses a non-reentrant model
  3988 ;;
  3989                           
  3990                           	psect	text28
  3991  001282                     __ptext28:
  3992                           	opt stack 0
  3993  001282                     i2_DutyCycle_PWM:
  3994                           	opt stack 24
  3995                           
  3996                           ;PWM.c: 44: CCP1CONbits.DC1B0 = Valor;
  3997                           
  3998                           ;incstack = 0
  3999  001282  B001               	btfsc	i2DutyCycle_PWM@Valor,0,c
  4000  001284  D002               	bra	i2u105_45
  4001  001286  98BD               	bcf	4029,4,c	;volatile
  4002  001288  D001               	bra	i2u105_46
  4003  00128A                     i2u105_45:
  4004  00128A  88BD               	bsf	4029,4,c	;volatile
  4005  00128C                     i2u105_46:
  4006                           
  4007                           ;PWM.c: 45: CCP1CONbits.DC1B1 = Valor >> 1;
  4008  00128C  90D8               	bcf	status,0,c
  4009  00128E  3002               	rrcf	i2DutyCycle_PWM@Valor+1,w,c
  4010  001290  6E04               	movwf	(??i2_DutyCycle_PWM+1)& (0+255),c
  4011  001292  3001               	rrcf	i2DutyCycle_PWM@Valor,w,c
  4012  001294  6E03               	movwf	??i2_DutyCycle_PWM& (0+255),c
  4013  001296  3A03               	swapf	??i2_DutyCycle_PWM,f,c
  4014  001298  4603               	rlncf	??i2_DutyCycle_PWM,f,c
  4015  00129A  50BD               	movf	4029,w,c	;volatile
  4016  00129C  1803               	xorwf	??i2_DutyCycle_PWM,w,c
  4017  00129E  0BDF               	andlw	-33
  4018  0012A0  1803               	xorwf	??i2_DutyCycle_PWM,w,c
  4019  0012A2  6EBD               	movwf	4029,c	;volatile
  4020                           
  4021                           ;PWM.c: 46: CCPR1L = Valor >> 2;
  4022  0012A4  C001  F003         	movff	i2DutyCycle_PWM@Valor,??i2_DutyCycle_PWM
  4023  0012A8  C002  F004         	movff	i2DutyCycle_PWM@Valor+1,??i2_DutyCycle_PWM+1
  4024  0012AC  90D8               	bcf	status,0,c
  4025  0012AE  3204               	rrcf	??i2_DutyCycle_PWM+1,f,c
  4026  0012B0  3203               	rrcf	??i2_DutyCycle_PWM,f,c
  4027  0012B2  90D8               	bcf	status,0,c
  4028  0012B4  3204               	rrcf	??i2_DutyCycle_PWM+1,f,c
  4029  0012B6  3203               	rrcf	??i2_DutyCycle_PWM,f,c
  4030  0012B8  5003               	movf	??i2_DutyCycle_PWM,w,c
  4031  0012BA  6EBE               	movwf	4030,c	;volatile
  4032  0012BC  0012               	return		;funcret
  4033  0012BE                     __end_ofi2_DutyCycle_PWM:
  4034                           	opt stack 0
  4035                           pclatu	equ	0xFFB
  4036                           pclath	equ	0xFFA
  4037                           tblptru	equ	0xFF8
  4038                           tblptrh	equ	0xFF7
  4039                           tblptrl	equ	0xFF6
  4040                           tablat	equ	0xFF5
  4041                           prodh	equ	0xFF4
  4042                           prodl	equ	0xFF3
  4043                           intcon	equ	0xFF2
  4044                           intcon2	equ	0xFF1
  4045                           intcon3	equ	0xFF0
  4046                           fsr0h	equ	0xFEA
  4047                           fsr0l	equ	0xFE9
  4048                           wreg	equ	0xFE8
  4049                           postinc1	equ	0xFE6
  4050                           fsr1h	equ	0xFE2
  4051                           fsr1l	equ	0xFE1
  4052                           indf2	equ	0xFDF
  4053                           postinc2	equ	0xFDE
  4054                           fsr2h	equ	0xFDA
  4055                           fsr2l	equ	0xFD9
  4056                           status	equ	0xFD8
  4057                           pclatu	equ	0xFFB
  4058                           pclath	equ	0xFFA
  4059                           tblptru	equ	0xFF8
  4060                           tblptrh	equ	0xFF7
  4061                           tblptrl	equ	0xFF6
  4062                           tablat	equ	0xFF5
  4063                           prodh	equ	0xFF4
  4064                           prodl	equ	0xFF3
  4065                           intcon	equ	0xFF2
  4066                           intcon2	equ	0xFF1
  4067                           intcon3	equ	0xFF0
  4068                           fsr0h	equ	0xFEA
  4069                           fsr0l	equ	0xFE9
  4070                           wreg	equ	0xFE8
  4071                           postinc1	equ	0xFE6
  4072                           fsr1h	equ	0xFE2
  4073                           fsr1l	equ	0xFE1
  4074                           indf2	equ	0xFDF
  4075                           postinc2	equ	0xFDE
  4076                           fsr2h	equ	0xFDA
  4077                           fsr2l	equ	0xFD9
  4078                           status	equ	0xFD8
  4079                           
  4080                           	psect	rparam
  4081  0000                     pclatu	equ	0xFFB
  4082                           pclath	equ	0xFFA
  4083                           tblptru	equ	0xFF8
  4084                           tblptrh	equ	0xFF7
  4085                           tblptrl	equ	0xFF6
  4086                           tablat	equ	0xFF5
  4087                           prodh	equ	0xFF4
  4088                           prodl	equ	0xFF3
  4089                           intcon	equ	0xFF2
  4090                           intcon2	equ	0xFF1
  4091                           intcon3	equ	0xFF0
  4092                           fsr0h	equ	0xFEA
  4093                           fsr0l	equ	0xFE9
  4094                           wreg	equ	0xFE8
  4095                           postinc1	equ	0xFE6
  4096                           fsr1h	equ	0xFE2
  4097                           fsr1l	equ	0xFE1
  4098                           indf2	equ	0xFDF
  4099                           postinc2	equ	0xFDE
  4100                           fsr2h	equ	0xFDA
  4101                           fsr2l	equ	0xFD9
  4102                           status	equ	0xFD8
  4103                           
  4104                           	psect	temp
  4105  00003F                     btemp:
  4106                           	opt stack 0
  4107  00003F                     	ds	1
  4108  0000                     int$flags	set	btemp
  4109                           pclatu	equ	0xFFB
  4110                           pclath	equ	0xFFA
  4111                           tblptru	equ	0xFF8
  4112                           tblptrh	equ	0xFF7
  4113                           tblptrl	equ	0xFF6
  4114                           tablat	equ	0xFF5
  4115                           prodh	equ	0xFF4
  4116                           prodl	equ	0xFF3
  4117                           intcon	equ	0xFF2
  4118                           intcon2	equ	0xFF1
  4119                           intcon3	equ	0xFF0
  4120                           fsr0h	equ	0xFEA
  4121                           fsr0l	equ	0xFE9
  4122                           wreg	equ	0xFE8
  4123                           postinc1	equ	0xFE6
  4124                           fsr1h	equ	0xFE2
  4125                           fsr1l	equ	0xFE1
  4126                           indf2	equ	0xFDF
  4127                           postinc2	equ	0xFDE
  4128                           fsr2h	equ	0xFDA
  4129                           fsr2l	equ	0xFD9
  4130                           status	equ	0xFD8


Data Sizes:
    Strings     116
    Constant    0
    Data        2
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     56      62
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    cadastrarSenha@pass	PTR unsigned char  size(2) Largest target is 2
		 -> main@pass(COMRAM[2]), 

    cmpPass@toque	PTR unsigned char  size(2) Largest target is 2
		 -> cadastrarSenha@temp2(COMRAM[2]), main@toc(COMRAM[2]), 

    cmpPass@pass	PTR unsigned char  size(2) Largest target is 2
		 -> cadastrarSenha@temp1(COMRAM[2]), main@pass(COMRAM[2]), 

    destravarPorta@pass	PTR unsigned char  size(2) Largest target is 2
		 -> main@pass(COMRAM[2]), 

    destravarPorta@toque	PTR unsigned char  size(2) Largest target is 2
		 -> main@toc(COMRAM[2]), 

    lerToque@toque	PTR unsigned char  size(2) Largest target is 2
		 -> cadastrarSenha@temp2(COMRAM[2]), cadastrarSenha@temp1(COMRAM[2]), 

    cmpSignal@toc	PTR unsigned char  size(2) Largest target is 2
		 -> cadastrarSenha@temp2(COMRAM[2]), main@toc(COMRAM[2]), 

    cmpSignal@pass	PTR unsigned char  size(2) Largest target is 2
		 -> cadastrarSenha@temp1(COMRAM[2]), main@pass(COMRAM[2]), 

    readSignal@signal	PTR unsigned char  size(2) Largest target is 2
		 -> cadastrarSenha@temp2(COMRAM[2]), cadastrarSenha@temp1(COMRAM[2]), main@toc(COMRAM[2]), 

    write_LCD@c	PTR unsigned char  size(2) Largest target is 14
		 -> STR_18(CODE[11]), STR_17(CODE[6]), STR_16(CODE[6]), STR_15(CODE[11]), 
		 -> STR_14(CODE[6]), STR_13(CODE[13]), STR_12(CODE[6]), STR_11(CODE[13]), 
		 -> STR_10(CODE[14]), STR_9(CODE[10]), STR_8(CODE[10]), STR_7(CODE[10]), 
		 -> STR_6(CODE[14]), STR_5(CODE[10]), STR_4(CODE[12]), STR_3(CODE[6]), 
		 -> STR_2(CODE[14]), STR_1(CODE[14]), 


Critical Paths under _main in COMRAM

    _main->_cadastrarSenha
    _init_LCD->_send_cfg
    _destravarPorta->_readSignal
    _cadastrarSenha->_lerToque
    _lerToque->_readSignal
    _readSignal->_read_ADC
    _confirmarSenha->_write_LCD
    _checkUSART->_cmp_MSG2
    _cmpPass->_write_LCD
    _write_LCD->_send_msg
    _send_msg->_ena_pulse
    _set_line->_send_cfg
    _clearLCD->_send_cfg
    _send_cfg->_ena_pulse

Critical Paths under _ISR in COMRAM

    _ISR->i2_DutyCycle_PWM

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   30020
                                             52 COMRAM     4     4      0
                     _cadastrarSenha
                     _destravarPorta
                           _init_ADC
                        _init_INTRB2
                           _init_LCD
                           _init_PWM
                          _init_UART
 ---------------------------------------------------------------------------------
 (1) _init_UART                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_PWM                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_LCD                                             0     0      0      15
                           _send_cfg
 ---------------------------------------------------------------------------------
 (1) _init_INTRB2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _destravarPorta                                       8     4      4   10936
                                             36 COMRAM     8     4      4
                      _DutyCycle_PWM
                         _checkUSART
                           _clearLCD
                            _cmpPass
                         _readSignal
                           _read_ADC
                           _send_msg
                           _set_line
                          _write_LCD
 ---------------------------------------------------------------------------------
 (2) _DutyCycle_PWM                                        4     2      2     270
                                             20 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _cadastrarSenha                                      12    10      2   18913
                                             40 COMRAM    12    10      2
                           _clearLCD
                            _cmpPass
                     _confirmarSenha
                           _lerToque
                           _set_line
                          _write_LCD
 ---------------------------------------------------------------------------------
 (2) _lerToque                                             4     2      2    5554
                                             36 COMRAM     4     2      2
                           _clearLCD
                         _readSignal
                           _read_ADC
                           _send_msg
                           _set_line
                          _write_LCD
 ---------------------------------------------------------------------------------
 (2) _readSignal                                          12     8      4    1207
                                             24 COMRAM    12     8      4
                           _read_ADC
 ---------------------------------------------------------------------------------
 (2) _read_ADC                                             4     2      2      23
                                             20 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _confirmarSenha                                       2     0      2    4116
                                             29 COMRAM     2     0      2
                         _checkUSART
                           _clearLCD
                           _set_line
                          _write_LCD
 ---------------------------------------------------------------------------------
 (2) _checkUSART                                           3     3      0     179
                                             24 COMRAM     3     3      0
                    _UART_Data_Ready
                          _UART_Read
                           _cmp_MSG1
                           _cmp_MSG2
 ---------------------------------------------------------------------------------
 (3) _cmp_MSG2                                             4     2      2      66
                                             20 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _cmp_MSG1                                             3     1      2      22
                                             20 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (3) _UART_Read                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _UART_Data_Ready                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _cmpPass                                              6     2      4    4889
                                             29 COMRAM     6     2      4
                                _bip
                           _clearLCD
                          _cmpSignal
                           _set_line
                          _write_LCD
 ---------------------------------------------------------------------------------
 (2) _write_LCD                                            6     4      2    1257
                                             23 COMRAM     6     4      2
                           _send_msg
 ---------------------------------------------------------------------------------
 (3) _send_msg                                             2     2      0      15
                                             21 COMRAM     2     2      0
                          _ena_pulse
 ---------------------------------------------------------------------------------
 (2) _set_line                                             5     1      4    2665
                                             23 COMRAM     5     1      4
                           _send_cfg
 ---------------------------------------------------------------------------------
 (3) _cmpSignal                                            6     2      4     216
                                             20 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _clearLCD                                             0     0      0      15
                           _send_cfg
 ---------------------------------------------------------------------------------
 (2) _send_cfg                                             2     2      0      15
                                             21 COMRAM     2     2      0
                          _ena_pulse
 ---------------------------------------------------------------------------------
 (3) _ena_pulse                                            1     1      0       0
                                             20 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _bip                                                  8     4      4     391
                                             20 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                 16    16      0     118
                                              4 COMRAM    16    16      0
                    i2_DutyCycle_PWM
 ---------------------------------------------------------------------------------
 (7) i2_DutyCycle_PWM                                      4     2      2     118
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _cadastrarSenha
     _clearLCD
       _send_cfg
         _ena_pulse
     _cmpPass
       _bip
       _clearLCD
         _send_cfg
           _ena_pulse
       _cmpSignal
       _set_line
         _send_cfg
           _ena_pulse
       _write_LCD
         _send_msg
           _ena_pulse
     _confirmarSenha
       _checkUSART
         _UART_Data_Ready
         _UART_Read
         _cmp_MSG1
         _cmp_MSG2
       _clearLCD
         _send_cfg
           _ena_pulse
       _set_line
         _send_cfg
           _ena_pulse
       _write_LCD
         _send_msg
           _ena_pulse
     _lerToque
       _clearLCD
         _send_cfg
           _ena_pulse
       _readSignal
         _read_ADC
       _read_ADC
       _send_msg
         _ena_pulse
       _set_line
         _send_cfg
           _ena_pulse
       _write_LCD
         _send_msg
           _ena_pulse
     _set_line
       _send_cfg
         _ena_pulse
     _write_LCD
       _send_msg
         _ena_pulse
   _destravarPorta
     _DutyCycle_PWM
     _checkUSART
       _UART_Data_Ready
       _UART_Read
       _cmp_MSG1
       _cmp_MSG2
     _clearLCD
       _send_cfg
         _ena_pulse
     _cmpPass
       _bip
       _clearLCD
         _send_cfg
           _ena_pulse
       _cmpSignal
       _set_line
         _send_cfg
           _ena_pulse
       _write_LCD
         _send_msg
           _ena_pulse
     _readSignal
       _read_ADC
     _read_ADC
     _send_msg
       _ena_pulse
     _set_line
       _send_cfg
         _ena_pulse
     _write_LCD
       _send_msg
         _ena_pulse
   _init_ADC
   _init_INTRB2
   _init_LCD
     _send_cfg
       _ena_pulse
   _init_PWM
   _init_UART

 _ISR (ROOT)
   i2_DutyCycle_PWM

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     38      3E       1       66.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      3E      20        0.0%
DATA                 0      0      3E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Tue Jul 11 00:25:30 2017

             __CFG_BOR$ON 000000               __CFG_BORV$3 000000              __CFG_CP0$OFF 000000  
            __CFG_CP1$OFF 000000              __CFG_CP2$OFF 000000              __CFG_CP3$OFF 000000  
                     l210 1026                       l153 143A                       l318 109E  
                     l239 0F98                       l169 127C                       l199 13DC  
                     l288 0D36              __CFG_CPB$OFF 000000                       _PR2 000FCB  
            __CFG_CPD$OFF 000000                       u700 0FDA                       _ISR 0008  
                     u810 0F58                       u714 0FEA                       u715 0FE6  
                     u770 0F00                       u828 0F5A                       u845 1212  
                     u846 1214                       u788 0F02                       _bip 0EDC  
        ??_cadastrarSenha 002B                       wreg 000FE8              __CFG_FOSC$HS 000000  
            __CFG_LVP$OFF 000000                      ?_ISR 0001              __CFG_WDT$OFF 000000  
                    l1504 1396                      l1602 0EF6                      l1530 11EA  
                    ?_bip 0015                      l1612 0F4E                      l1516 1268  
                    l1606 0F28                      l1526 11CA                      l1710 10AA  
                    l1616 0F82                      l1608 0F3E                      l1536 13CC  
                    l1570 0FCA                      l1650 0D08                      l1642 0CC6  
                    l1634 0C76                      l1722 0ABE                      l1810 096C  
                    l1802 092A                      l1556 1162                      l1652 0D20  
                    l1636 0C8C                      l1812 0984                      l1590 11B6  
                    l1574 0FFA                      l1566 0FB2                      l1646 0CE4  
                    l1654 0D24                      l1806 0948                      l1814 0988  
                    l1672 0DB6                      l1568 0FC0                      l1816 0998  
                    l1578 100E                      l1684 0E0E                      l1838 0A3A  
                    l1790 08D0                      l1784 08C0           ?_confirmarSenha 001E  
                    l1698 1080                      l1794 08DA                      l1796 08F0  
                    l1888 10E2                      STR_1 0801                      STR_2 0801  
                    STR_3 086F                      STR_4 0837                      STR_5 0859  
                    STR_6 080F                      STR_7 0859                      STR_8 0813  
                    STR_9 0859                      _BRGH 007D62                      _CREN 007D5C  
                    u1107 0B0C                      u1117 0B74                      u1207 0F18  
                    u1127 0C20                      u1217 0F70                      u1137 1000  
                    u1147 1336                      u1157 134A                      u1167 13B2  
                    u1177 12C6                      u1097 0A1E                      u1187 12D8  
                    u1197 12EA                      _RCIF 007CF5                      i2l29 0EA0  
                    _SPEN 007D5F                      _TRMT 007D61                      _TXEN 007D65  
                    _SYNC 007D64                      bip@j 001B                      _main 10B2  
                    fsr0h 000FEA                      fsr1h 000FE2                      fsr2h 000FDA  
                    fsr0l 000FE9                      indf2 000FDF                      fsr1l 000FE1  
                    fsr2l 000FD9                      btemp 003F                      prodh 000FF4  
                    prodl 000FF3                      start 000E             __CFG_IESO$OFF 000000  
            ?_init_INTRB2 0001             __CFG_MCLRE$ON 000000              ___param_bank 000000  
  __size_of_DutyCycle_PWM 003C                     ??_ISR 0005                     ??_bip 0019  
           __CFG_PLLDIV$1 000000            __CFG_CCP2MX$ON 000000                     ?_main 0001  
                   _ADRES 000FC3                     STR_10 080F                     STR_11 081D  
                   STR_12 0869                     STR_13 082A                     STR_14 0869  
                   STR_15 084E                     STR_16 0869                     STR_17 0863  
                   STR_18 0843                     _T2CON 000FCA                     _RCREG 000FAE  
                   _TMR0H 000FD7                     _TMR0L 000FD6                     _SPBRG 000FAF  
                   _PORTD 000F83             __CFG_USBDIV$1 000000                     _TRISB 000F93  
                   _TRISD 000F95                     _TRISE 000F96                     _TXREG 000FAD  
           __CFG_PWRT$OFF 000000             __CFG_WRT0$OFF 000000             __CFG_WRT1$OFF 000000  
           __CFG_WRT2$OFF 000000             __CFG_WRT3$OFF 000000           __end_of_cmpPass 0E18  
          __CFG_EBTR0$OFF 000000            __CFG_FCMEN$OFF 000000            __CFG_EBTR1$OFF 000000  
          __CFG_EBTR2$OFF 000000            __CFG_EBTR3$OFF 000000        __size_of_UART_Read 0008  
           __CFG_WRTB$OFF 000000             __CFG_WRTC$OFF 000000             __CFG_WRTD$OFF 000000  
          __CFG_EBTRB$OFF 000000                     pclath 000FFA                     tablat 000FF5  
                   status 000FD8            __CFG_ICPRT$OFF 000000           __initialization 12F6  
            __end_of_main 1114             checkUSART@msg 001B                    ??_main 0035  
           __activetblptr 000001             _DutyCycle_PWM 120A                    _ADCON0 000FC2  
                  _ADCON1 000FC1                    _ADCON2 000FC0                    _CCPR1L 000FBE  
        ??_destravarPorta 0029                    _TRISC6 007CA6                    _TRISC7 007CA7  
        __end_of_clearLCD 1452          __end_of_cmp_MSG1 13A0          __end_of_cmp_MSG2 1282  
__size_ofi2_DutyCycle_PWM 003C            __CFG_XINST$OFF 000000         __end_of_UART_Read 1442  
          __CFG_STVREN$ON 000000          __end_of_init_ADC 142A               readSignal@i 0021  
             readSignal@j 0023          __end_of_lerToque 0D38          __end_of_init_LCD 1382  
        __end_of_read_ADC 13F2          __end_of_init_PWM 1418                 ??_cmpPass 0022  
        __end_of_send_cfg 13BE          __end_of_send_msg 1358              __pdataCOMRAM 003D  
        __end_of_set_line 13DA              __mediumconst 0000                    tblptrh 000FF7  
                  tblptrl 000FF6            ?_DutyCycle_PWM 0015                    tblptru 000FF8  
              __accesstop 0060   __end_of__initialization 1316           __CFG_PBADEN$OFF 000000  
           ___rparam_used 000001            __pcstackCOMRAM 0001      __size_of_init_INTRB2 0010  
      __size_of_cmpSignal 004C          ??_confirmarSenha 0020        __size_of_ena_pulse 0038  
         destravarPorta@i 002B                _checkUSART 1114        __size_of_init_UART 0014  
__size_of_UART_Data_Ready 0008         ??i2_DutyCycle_PWM 0003                   _CCP1CON 000FBD  
         ??_DutyCycle_PWM 0017                 ?_clearLCD 0001                 ?_cmp_MSG1 0015  
               ?_cmp_MSG2 0015               send_cfg@cmd 0017                 ?_init_ADC 0001  
               ?_lerToque 0025                 ?_init_LCD 0001           __CFG_VREGEN$OFF 000000  
               ?_read_ADC 0015                 ?_init_PWM 0001               send_msg@msg 0017  
      __size_of_write_LCD 004A         __end_of_cmpSignal 11C0                 ?_send_cfg 0001  
                 __Hparam 0000                 ?_send_msg 0001         __end_of_ena_pulse 12F6  
                 __Lparam 0000                 ?_set_line 0018                _readSignal 0F9A  
            __psmallconst 0800                   __pcinit 12F6                   __ramtop 0800  
                 _cmpPass 0D38                   __ptext0 10B2                   __ptext1 13F2  
                 __ptext2 1406                   __ptext3 1358                   __ptext4 142A  
                 __ptext5 1418                   __ptext6 0876                   __ptext7 120A  
                 __ptext8 0A80                   __ptext9 0C2E         __end_of_init_UART 1406  
               _T0CONbits 000FD5        cadastrarSenha@pass 0029              __size_of_ISR 0ED4  
                 bip@time 0017              __size_of_bip 00BE                ??_clearLCD 0018  
      destravarPorta@pass 0025                ??_cmp_MSG1 0017                ??_cmp_MSG2 0017  
             set_line@pos 001A               ?_checkUSART 0001                   main@toc 0035  
          __pintcode_body 0E18      end_of_initialization 1316                ??_init_ADC 0015  
              ??_lerToque 0027                ??_init_LCD 0018                ??_read_ADC 0017  
              ??_init_PWM 0015   __size_of_cadastrarSenha 01AE                   int_func 0E18  
              ??_send_cfg 0016                ??_send_msg 0016                ??_set_line 001C  
          set_line@cursor 001C                   postinc1 000FE6                   postinc2 000FDE  
       ??_UART_Data_Ready 0015                 _UART_Read 143A                 _PORTBbits 000F81  
               _PORTCbits 000F82                 _PORTEbits 000F84        DutyCycle_PWM@Valor 0015  
       __end_of_write_LCD 120A                 _TRISAbits 000F92                 _TRISBbits 000F93  
               _TRISCbits 000F94               _CCP1CONbits 000FBD       __size_of_checkUSART 0060  
             ?_readSignal 0019                ?_UART_Read 0001             __pidataCOMRAM 1452  
     start_initialization 12F6               __end_of_ISR 0EDC               __end_of_bip 0F9A  
            checkUSART@op 0019           i2_DutyCycle_PWM 1282             ??_init_INTRB2 0015  
       _buttonCancel_Lock 003B   __size_of_destravarPorta 020A             lerToque@toque 0025  
        __CFG_LPT1OSC$OFF 000000               __pbssCOMRAM 0039         __size_of_clearLCD 0008  
           read_ADC@value 0017         __size_of_cmp_MSG1 001E         __size_of_cmp_MSG2 003C  
     __size_of_readSignal 00A2            _cadastrarSenha 0A80         __size_of_init_ADC 0012  
       __size_of_lerToque 010A         __size_of_init_LCD 002A         __size_of_read_ADC 0018  
       __size_of_init_PWM 0012                 __pintcode 0008                 _cmpSignal 1174  
       __size_of_send_cfg 001E         __size_of_send_msg 0030         __size_of_set_line 001C  
               _ena_pulse 12BE           cadastrarSenha@i 002D           cadastrarSenha@j 002F  
     __end_of_init_INTRB2 143A               ??_UART_Read 0015                  ?_cmpPass 001E  
               _doorState 003D               __smallconst 0800          readSignal@limite 001F  
               bip@rounds 0015     __end_of_DutyCycle_PWM 1246          readSignal@signal 0019  
               _init_UART 13F2              ??_checkUSART 0019   __end_ofi2_DutyCycle_PWM 12BE  
  __end_of_cadastrarSenha 0C2E   __size_of_confirmarSenha 0076           _UART_Data_Ready 1442  
                i2u105_45 128A                  i2u105_46 128C                  i2u122_47 0E86  
       _buttonConfirm_Cad 0039          __CFG_WDTPS$32768 000000                ?_cmpSignal 0015  
              ?_ena_pulse 0001        __end_of_checkUSART 1174             cmpSignal@pass 0015  
              _ADCON0bits 000FC2                ?_init_UART 0001                 _write_LCD 11C0  
             _INTCON2bits 000FF1               _INTCON3bits 000FF0           ?_cadastrarSenha 0029  
               lerToque@i 0027               _init_INTRB2 142A                  __Hrparam 0000  
                __Lrparam 0000              __Lsmallconst 0800            _destravarPorta 0876  
            ??_readSignal 001D          __size_of_cmpPass 00E0                  _clearLCD 144A  
                _cmp_MSG1 1382                  _cmp_MSG2 1246              cmpPass@toque 0020  
              ?_write_LCD 0018                  __ptext10 0F9A                  __ptext11 13DA  
                __ptext20 1328                  __ptext12 103C                  __ptext21 13BE  
                __ptext13 1114                  __ptext22 1174                  __ptext14 1246  
                __ptext23 144A                  __ptext15 1382                  __ptext24 13A0  
                __ptext16 143A                  __ptext25 12BE                  __ptext17 1442  
                __ptext26 0EDC                  __ptext18 0D38                  __ptext19 11C0  
                __ptext28 1282             readSignal@pos 001B   __end_of_UART_Data_Ready 144A  
        ?i2_DutyCycle_PWM 0001       cadastrarSenha@temp1 0033       cadastrarSenha@temp2 0031  
                _init_ADC 1418                  _lerToque 0C2E                  _init_LCD 1358  
                _read_ADC 13DA                  _init_PWM 1406        __end_of_readSignal 103C  
           __size_of_main 0062                  _send_cfg 13A0                  _send_msg 1328  
     destravarPorta@toque 0027                  cmpPass@i 0022    __end_of_destravarPorta 0A80  
              write_LCD@c 0018                write_LCD@i 001C                  _set_line 13BE  
            set_line@line 0018               ??_cmpSignal 0019               cmp_MSG1@msg 0017  
             cmp_MSG2@msg 0018                  int$flags 003F              cmpSignal@toc 0017  
             ??_ena_pulse 0015                  main@pass 0037     __CFG_CPUDIV$OSC1_PLL2 000000  
    i2DutyCycle_PWM@Valor 0001                _INTCONbits 000FF2               ??_init_UART 0015  
                intlevel2 0000               cmpPass@pass 001E            _confirmarSenha 103C  
         ?_destravarPorta 0025               ??_write_LCD 001A          ?_UART_Data_Ready 0001  
  __end_of_confirmarSenha 10B2  
