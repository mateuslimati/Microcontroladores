

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Fri Jun 30 17:31:32 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    24                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    25                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    26                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    27  0000                     
    28                           ; Version 1.41
    29                           ; Generated 25/01/2017 GMT
    30                           ; 
    31                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC18F4550 Definitions
    60                           ; 
    61                           ; SFR Addresses
    62  0000                     _ADRES	set	4035
    63  0000                     _ADCON0bits	set	4034
    64  0000                     _ADCON2	set	4032
    65  0000                     _ADCON1	set	4033
    66  0000                     _ADCON0	set	4034
    67  0000                     _TRISAbits	set	3986
    68  0000                     _RCREG	set	4014
    69  0000                     _TXREG	set	4013
    70  0000                     _SPBRG	set	4015
    71  0000                     _PORTCbits	set	3970
    72  0000                     _TRISBbits	set	3987
    73  0000                     _TRISCbits	set	3988
    74  0000                     _TRISE	set	3990
    75  0000                     _TRISB	set	3987
    76  0000                     _PORTBbits	set	3969
    77  0000                     _PORTD	set	3971
    78  0000                     _PORTEbits	set	3972
    79  0000                     _T0CONbits	set	4053
    80  0000                     _TRISD	set	3989
    81  0000                     _TMR0L	set	4054
    82  0000                     _TMR0H	set	4055
    83  0000                     _INTCONbits	set	4082
    84  0000                     _RCIF	set	31989
    85  0000                     _TRMT	set	32097
    86  0000                     _TXEN	set	32101
    87  0000                     _CREN	set	32092
    88  0000                     _TRISC6	set	31910
    89  0000                     _TRISC7	set	31911
    90  0000                     _SPEN	set	32095
    91  0000                     _SYNC	set	32100
    92  0000                     _BRGH	set	32098
    93                           
    94                           	psect	smallconst
    95  000800                     __psmallconst:
    96                           	opt stack 0
    97  000800  00                 	db	0
    98  000801                     STR_1:
    99  000801  4D                 	db	77	;'M'
   100  000802  69                 	db	105	;'i'
   101  000803  63                 	db	99	;'c'
   102  000804  72                 	db	114	;'r'
   103  000805  6F                 	db	111	;'o'
   104  000806  63                 	db	99	;'c'
   105  000807  6F                 	db	111	;'o'
   106  000808  6E                 	db	110	;'n'
   107  000809  74                 	db	116	;'t'
   108  00080A  72                 	db	114	;'r'
   109  00080B  6F                 	db	111	;'o'
   110  00080C  6C                 	db	108	;'l'
   111  00080D  61                 	db	97	;'a'
   112  00080E  64                 	db	100	;'d'
   113  00080F  6F                 	db	111	;'o'
   114  000810  72                 	db	114	;'r'
   115  000811  65                 	db	101	;'e'
   116  000812  73                 	db	115	;'s'
   117  000813  00                 	db	0
   118  000814                     STR_3:
   119  000814  75                 	db	117	;'u'
   120  000815  6E                 	db	110	;'n'
   121  000816  64                 	db	100	;'d'
   122  000817  6F                 	db	111	;'o'
   123  000818  73                 	db	115	;'s'
   124  000819  20                 	db	32
   125  00081A  70                 	db	112	;'p'
   126  00081B  61                 	db	97	;'a'
   127  00081C  72                 	db	114	;'r'
   128  00081D  61                 	db	97	;'a'
   129  00081E  20                 	db	32
   130  00081F  62                 	db	98	;'b'
   131  000820  61                 	db	97	;'a'
   132  000821  74                 	db	116	;'t'
   133  000822  65                 	db	101	;'e'
   134  000823  72                 	db	114	;'r'
   135  000824  00                 	db	0
   136  000825                     STR_2:
   137  000825  56                 	db	86	;'V'
   138  000826  6F                 	db	111	;'o'
   139  000827  63                 	db	99	;'c'
   140  000828  65                 	db	101	;'e'
   141  000829  20                 	db	32
   142  00082A  74                 	db	116	;'t'
   143  00082B  65                 	db	101	;'e'
   144  00082C  6D                 	db	109	;'m'
   145  00082D  20                 	db	32
   146  00082E  35                 	db	53	;'5'
   147  00082F  20                 	db	32
   148  000830  73                 	db	115	;'s'
   149  000831  65                 	db	101	;'e'
   150  000832  67                 	db	103	;'g'
   151  000833  2D                 	db	45
   152  000834  00                 	db	0
   153  000835                     STR_6:
   154  000835  42                 	db	66	;'B'
   155  000836  61                 	db	97	;'a'
   156  000837  74                 	db	116	;'t'
   157  000838  61                 	db	97	;'a'
   158  000839  20                 	db	32
   159  00083A  6E                 	db	110	;'n'
   160  00083B  61                 	db	97	;'a'
   161  00083C  20                 	db	32
   162  00083D  70                 	db	112	;'p'
   163  00083E  6F                 	db	111	;'o'
   164  00083F  72                 	db	114	;'r'
   165  000840  74                 	db	116	;'t'
   166  000841  61                 	db	97	;'a'
   167  000842  00                 	db	0
   168  000843                     STR_10:
   169  000843  6E                 	db	110	;'n'
   170  000844  E3                 	db	-29
   171  000845  6F                 	db	111	;'o'
   172  000846  20                 	db	32
   173  000847  63                 	db	99	;'c'
   174  000848  6F                 	db	111	;'o'
   175  000849  69                 	db	105	;'i'
   176  00084A  6E                 	db	110	;'n'
   177  00084B  63                 	db	99	;'c'
   178  00084C  69                 	db	105	;'i'
   179  00084D  64                 	db	100	;'d'
   180  00084E  65                 	db	101	;'e'
   181  00084F  6D                 	db	109	;'m'
   182  000850  00                 	db	0
   183  000851                     STR_5:
   184  000851  46                 	db	70	;'F'
   185  000852  69                 	db	105	;'i'
   186  000853  6E                 	db	110	;'n'
   187  000854  61                 	db	97	;'a'
   188  000855  6C                 	db	108	;'l'
   189  000856  69                 	db	105	;'i'
   190  000857  7A                 	db	122	;'z'
   191  000858  61                 	db	97	;'a'
   192  000859  64                 	db	100	;'d'
   193  00085A  61                 	db	97	;'a'
   194  00085B  00                 	db	0
   195  00085C                     STR_7:
   196  00085C  41                 	db	65	;'A'
   197  00085D  73                 	db	115	;'s'
   198  00085E  20                 	db	32
   199  00085F  73                 	db	115	;'s'
   200  000860  65                 	db	101	;'e'
   201  000861  6E                 	db	110	;'n'
   202  000862  68                 	db	104	;'h'
   203  000863  61                 	db	97	;'a'
   204  000864  73                 	db	115	;'s'
   205  000865  00                 	db	0
   206  000866                     STR_4:
   207  000866  4C                 	db	76	;'L'
   208  000867  65                 	db	101	;'e'
   209  000868  69                 	db	105	;'i'
   210  000869  74                 	db	116	;'t'
   211  00086A  75                 	db	117	;'u'
   212  00086B  72                 	db	114	;'r'
   213  00086C  61                 	db	97	;'a'
   214  00086D  00                 	db	0
   215  0000                     
   216                           ; #config settings
   217  00086E  00                 	db	0	; dummy byte at the end
   218  0000                     
   219                           	psect	cinit
   220  000E1C                     __pcinit:
   221                           	opt stack 0
   222  000E1C                     start_initialization:
   223                           	opt stack 0
   224  000E1C                     __initialization:
   225                           	opt stack 0
   226                           
   227                           ; Clear objects allocated to COMRAM (2 bytes)
   228  000E1C  6A2B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   229  000E1E  6A2A               	clrf	__pbssCOMRAM& (0+255),c
   230  000E20                     end_of_initialization:
   231                           	opt stack 0
   232  000E20                     __end_of__initialization:
   233                           	opt stack 0
   234  000E20  902C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   235  000E22  922C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   236  000E24  0E00               	movlw	low (__Lsmallconst shr (0+16))
   237  000E26  6EF8               	movwf	tblptru,c
   238  000E28  0E08               	movlw	high __Lsmallconst
   239  000E2A  6EF7               	movwf	tblptrh,c
   240  000E2C  0100               	movlb	0
   241  000E2E  EF38  F004         	goto	_main	;jump to C main() function
   242                           tblptru	equ	0xFF8
   243                           tblptrh	equ	0xFF7
   244                           
   245                           	psect	bssCOMRAM
   246  00002A                     __pbssCOMRAM:
   247                           	opt stack 0
   248  00002A                     _i:
   249                           	opt stack 0
   250  00002A                     	ds	2
   251                           tblptru	equ	0xFF8
   252                           tblptrh	equ	0xFF7
   253                           
   254                           	psect	cstackCOMRAM
   255  000001                     __pcstackCOMRAM:
   256                           	opt stack 0
   257  000001                     ??_INT:
   258  000001                     
   259                           ; 1 bytes @ 0x0
   260  000001                     	ds	17
   261  000012                     ??_ena_pulse:
   262  000012                     ?_cmpSignal:
   263                           	opt stack 0
   264  000012                     ?_ADCRead:
   265                           	opt stack 0
   266  000012                     cmpSignal@pass:
   267                           	opt stack 0
   268                           
   269                           ; 2 bytes @ 0x11
   270  000012                     	ds	1
   271  000013                     ??_send_cfg:
   272  000013                     ??_send_msg:
   273                           
   274                           ; 1 bytes @ 0x12
   275  000013                     	ds	1
   276  000014                     send_cfg@cmd:
   277                           	opt stack 0
   278  000014                     send_msg@msg:
   279                           	opt stack 0
   280  000014                     ADCRead@value:
   281                           	opt stack 0
   282  000014                     cmpSignal@toc:
   283                           	opt stack 0
   284                           
   285                           ; 2 bytes @ 0x13
   286  000014                     	ds	1
   287  000015                     write_LCD@c:
   288                           	opt stack 0
   289  000015                     set_line@line:
   290                           	opt stack 0
   291                           
   292                           ; 2 bytes @ 0x14
   293  000015                     	ds	1
   294  000016                     readSignal@signal:
   295                           	opt stack 0
   296                           
   297                           ; 2 bytes @ 0x15
   298  000016                     	ds	1
   299  000017                     ??_write_LCD:
   300  000017                     set_line@pos:
   301                           	opt stack 0
   302                           
   303                           ; 2 bytes @ 0x16
   304  000017                     	ds	1
   305  000018                     readSignal@pos:
   306                           	opt stack 0
   307                           
   308                           ; 2 bytes @ 0x17
   309  000018                     	ds	1
   310  000019                     set_line@cursor:
   311                           	opt stack 0
   312  000019                     write_LCD@i:
   313                           	opt stack 0
   314                           
   315                           ; 2 bytes @ 0x18
   316  000019                     	ds	1
   317  00001A                     ??_readSignal:
   318                           
   319                           ; 1 bytes @ 0x19
   320  00001A                     	ds	2
   321  00001C                     readSignal@limite:
   322                           	opt stack 0
   323                           
   324                           ; 2 bytes @ 0x1B
   325  00001C                     	ds	2
   326  00001E                     readSignal@i:
   327                           	opt stack 0
   328                           
   329                           ; 2 bytes @ 0x1D
   330  00001E                     	ds	2
   331  000020                     readSignal@j:
   332                           	opt stack 0
   333                           
   334                           ; 2 bytes @ 0x1F
   335  000020                     	ds	2
   336  000022                     ??_main:
   337                           
   338                           ; 1 bytes @ 0x21
   339  000022                     	ds	2
   340  000024                     main@pass:
   341                           	opt stack 0
   342                           
   343                           ; 2 bytes @ 0x23
   344  000024                     	ds	2
   345  000026                     main@toc:
   346                           	opt stack 0
   347                           
   348                           ; 2 bytes @ 0x25
   349  000026                     	ds	2
   350  000028                     main@i:
   351                           	opt stack 0
   352                           
   353                           ; 2 bytes @ 0x27
   354  000028                     	ds	2
   355                           tblptru	equ	0xFF8
   356                           tblptrh	equ	0xFF7
   357                           
   358 ;;
   359 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   360 ;;
   361 ;; *************** function _main *****************
   362 ;; Defined at:
   363 ;;		line 89 in file "main.c"
   364 ;; Parameters:    Size  Location     Type
   365 ;;		None
   366 ;; Auto vars:     Size  Location     Type
   367 ;;  i               2   39[COMRAM] int 
   368 ;;  toc             2   37[COMRAM] unsigned char [2]
   369 ;;  pass            2   35[COMRAM] unsigned char [2]
   370 ;; Return value:  Size  Location     Type
   371 ;;                  1    wreg      void 
   372 ;; Registers used:
   373 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   374 ;; Tracked objects:
   375 ;;		On entry : 0/0
   376 ;;		On exit  : 0/0
   377 ;;		Unchanged: 0/0
   378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   379 ;;      Params:         0       0       0       0       0       0       0       0       0
   380 ;;      Locals:         6       0       0       0       0       0       0       0       0
   381 ;;      Temps:          2       0       0       0       0       0       0       0       0
   382 ;;      Totals:         8       0       0       0       0       0       0       0       0
   383 ;;Total ram usage:        8 bytes
   384 ;; Hardware stack levels required when called:    4
   385 ;; This function calls:
   386 ;;		_ADCInit
   387 ;;		_clearLCD
   388 ;;		_cmpSignal
   389 ;;		_init_LCD
   390 ;;		_init_UART
   391 ;;		_init_timer
   392 ;;		_readSignal
   393 ;;		_send_msg
   394 ;;		_set_line
   395 ;;		_write_LCD
   396 ;; This function is called by:
   397 ;;		Startup code after reset
   398 ;; This function uses a non-reentrant model
   399 ;;
   400                           
   401                           	psect	text0
   402  000870                     __ptext0:
   403                           	opt stack 0
   404  000870                     _main:
   405                           	opt stack 27
   406                           
   407                           ;main.c: 91: init_timer();
   408                           
   409                           ;incstack = 0
   410  000870  ECBF  F006         	call	_init_timer	;wreg free
   411                           
   412                           ;main.c: 92: init_LCD();
   413  000874  ECD2  F006         	call	_init_LCD	;wreg free
   414                           
   415                           ;main.c: 93: init_UART();
   416  000878  EC19  F007         	call	_init_UART	;wreg free
   417                           
   418                           ;main.c: 95: TRISCbits.RC2 = 0;
   419  00087C  9494               	bcf	3988,2,c	;volatile
   420                           
   421                           ;main.c: 96: TRISBbits.RB5 = 0;
   422  00087E  9A93               	bcf	3987,5,c	;volatile
   423                           
   424                           ;main.c: 98: set_line(0, 0);
   425  000880  0E00               	movlw	0
   426  000882  6E16               	movwf	set_line@line+1,c
   427  000884  0E00               	movlw	0
   428  000886  6E15               	movwf	set_line@line,c
   429  000888  0E00               	movlw	0
   430  00088A  6E18               	movwf	set_line@pos+1,c
   431  00088C  0E00               	movlw	0
   432  00088E  6E17               	movwf	set_line@pos,c
   433  000890  ECF4  F006         	call	_set_line	;wreg free
   434                           
   435                           ;main.c: 99: write_LCD("Microcontroladores");
   436  000894  0E01               	movlw	low STR_1
   437  000896  6E15               	movwf	write_LCD@c,c
   438  000898  0E08               	movlw	high STR_1
   439  00089A  6E16               	movwf	write_LCD@c+1,c
   440  00089C  EC66  F006         	call	_write_LCD	;wreg free
   441                           
   442                           ;main.c: 101: ADCInit();
   443  0008A0  EC23  F007         	call	_ADCInit	;wreg free
   444                           
   445                           ;main.c: 102: int i = 0;
   446  0008A4  0E00               	movlw	0
   447  0008A6  6E29               	movwf	main@i+1,c
   448  0008A8  0E00               	movlw	0
   449  0008AA  6E28               	movwf	main@i,c
   450                           
   451                           ;main.c: 103: clearLCD();
   452  0008AC  EC2C  F007         	call	_clearLCD	;wreg free
   453                           
   454                           ;main.c: 105: char pass[2];
   455                           ;main.c: 106: pass[0] = 0x00;
   456  0008B0  0E00               	movlw	0
   457  0008B2  6E24               	movwf	main@pass,c
   458                           
   459                           ;main.c: 107: pass[1] = 0x00;
   460  0008B4  0E00               	movlw	0
   461  0008B6  6E25               	movwf	main@pass+1,c
   462                           
   463                           ;main.c: 108: char toc[2];
   464                           ;main.c: 109: toc[0] = 0x00;
   465  0008B8  0E00               	movlw	0
   466  0008BA  6E26               	movwf	main@toc,c
   467                           
   468                           ;main.c: 110: toc[1] = 0x00;
   469  0008BC  0E00               	movlw	0
   470  0008BE  6E27               	movwf	main@toc+1,c
   471                           
   472                           ;main.c: 113: write_LCD("Voce tem 5 seg-");
   473  0008C0  0E25               	movlw	low STR_2
   474  0008C2  6E15               	movwf	write_LCD@c,c
   475  0008C4  0E08               	movlw	high STR_2
   476  0008C6  6E16               	movwf	write_LCD@c+1,c
   477  0008C8  EC66  F006         	call	_write_LCD	;wreg free
   478                           
   479                           ;main.c: 114: set_line(1,0);
   480  0008CC  0E00               	movlw	0
   481  0008CE  6E16               	movwf	set_line@line+1,c
   482  0008D0  0E01               	movlw	1
   483  0008D2  6E15               	movwf	set_line@line,c
   484  0008D4  0E00               	movlw	0
   485  0008D6  6E18               	movwf	set_line@pos+1,c
   486  0008D8  0E00               	movlw	0
   487  0008DA  6E17               	movwf	set_line@pos,c
   488  0008DC  ECF4  F006         	call	_set_line	;wreg free
   489                           
   490                           ;main.c: 115: write_LCD("undos para bater");
   491  0008E0  0E14               	movlw	low STR_3
   492  0008E2  6E15               	movwf	write_LCD@c,c
   493  0008E4  0E08               	movlw	high STR_3
   494  0008E6  6E16               	movwf	write_LCD@c+1,c
   495  0008E8  EC66  F006         	call	_write_LCD	;wreg free
   496                           
   497                           ;main.c: 116: _delay((unsigned long)((3000)*(16000000/4000.0)));
   498  0008EC  0E3D               	movlw	61
   499  0008EE  6E23               	movwf	(??_main+1)& (0+255),c
   500  0008F0  0EE1               	movlw	225
   501  0008F2  6E22               	movwf	??_main& (0+255),c
   502  0008F4  0E40               	movlw	64
   503  0008F6                     u507:
   504  0008F6  2EE8               	decfsz	wreg,f,c
   505  0008F8  D7FE               	bra	u507
   506  0008FA  2E22               	decfsz	??_main& (0+255),f,c
   507  0008FC  D7FC               	bra	u507
   508  0008FE  2E23               	decfsz	(??_main+1)& (0+255),f,c
   509  000900  D7FA               	bra	u507
   510                           
   511                           ;main.c: 118: while(i < 4){
   512  000902  D040               	goto	l1311
   513  000904                     l1291:
   514                           
   515                           ;main.c: 119: clearLCD();
   516  000904  EC2C  F007         	call	_clearLCD	;wreg free
   517                           
   518                           ;main.c: 120: send_msg('1'+ i);
   519  000908  5028               	movf	main@i,w,c
   520  00090A  0F31               	addlw	49
   521  00090C  ECA7  F006         	call	_send_msg
   522                           
   523                           ;main.c: 121: if(i == 0)
   524  000910  5028               	movf	main@i,w,c
   525  000912  1029               	iorwf	main@i+1,w,c
   526  000914  A4D8               	btfss	status,2,c
   527  000916  D00B               	goto	l1299
   528                           
   529                           ;main.c: 122: readSignal(&pass[0], 0);
   530  000918  0E24               	movlw	low main@pass
   531  00091A  6E16               	movwf	readSignal@signal,c
   532  00091C  0E00               	movlw	high main@pass
   533  00091E  6E17               	movwf	readSignal@signal+1,c
   534  000920  0E00               	movlw	0
   535  000922  6E19               	movwf	readSignal@pos+1,c
   536  000924  0E00               	movlw	0
   537  000926  6E18               	movwf	readSignal@pos,c
   538  000928  ECEF  F005         	call	_readSignal	;wreg free
   539  00092C  D029               	goto	l1309
   540  00092E                     l1299:
   541                           
   542                           ;main.c: 123: else if(i == 1)
   543  00092E  0428               	decf	main@i,w,c
   544  000930  1029               	iorwf	main@i+1,w,c
   545  000932  A4D8               	btfss	status,2,c
   546  000934  D00B               	goto	l1303
   547                           
   548                           ;main.c: 124: readSignal(&pass[0], 1);
   549  000936  0E24               	movlw	low main@pass
   550  000938  6E16               	movwf	readSignal@signal,c
   551  00093A  0E00               	movlw	high main@pass
   552  00093C  6E17               	movwf	readSignal@signal+1,c
   553  00093E  0E00               	movlw	0
   554  000940  6E19               	movwf	readSignal@pos+1,c
   555  000942  0E01               	movlw	1
   556  000944  6E18               	movwf	readSignal@pos,c
   557  000946  ECEF  F005         	call	_readSignal	;wreg free
   558  00094A  D01A               	goto	l1309
   559  00094C                     l1303:
   560                           
   561                           ;main.c: 125: else if(i == 2)
   562  00094C  0E02               	movlw	2
   563  00094E  1828               	xorwf	main@i,w,c
   564  000950  1029               	iorwf	main@i+1,w,c
   565  000952  A4D8               	btfss	status,2,c
   566  000954  D00B               	goto	l1307
   567                           
   568                           ;main.c: 126: readSignal(&pass[1], 0);
   569  000956  0E25               	movlw	low (main@pass+1)
   570  000958  6E16               	movwf	readSignal@signal,c
   571  00095A  0E00               	movlw	high (main@pass+1)
   572  00095C  6E17               	movwf	readSignal@signal+1,c
   573  00095E  0E00               	movlw	0
   574  000960  6E19               	movwf	readSignal@pos+1,c
   575  000962  0E00               	movlw	0
   576  000964  6E18               	movwf	readSignal@pos,c
   577  000966  ECEF  F005         	call	_readSignal	;wreg free
   578  00096A  D00A               	goto	l1309
   579  00096C                     l1307:
   580                           
   581                           ;main.c: 127: else
   582                           ;main.c: 128: readSignal(&pass[1], 1);
   583  00096C  0E25               	movlw	low (main@pass+1)
   584  00096E  6E16               	movwf	readSignal@signal,c
   585  000970  0E00               	movlw	high (main@pass+1)
   586  000972  6E17               	movwf	readSignal@signal+1,c
   587  000974  0E00               	movlw	0
   588  000976  6E19               	movwf	readSignal@pos+1,c
   589  000978  0E01               	movlw	1
   590  00097A  6E18               	movwf	readSignal@pos,c
   591  00097C  ECEF  F005         	call	_readSignal	;wreg free
   592  000980                     l1309:
   593                           
   594                           ;main.c: 129: i++;
   595  000980  4A28               	infsnz	main@i,f,c
   596  000982  2A29               	incf	main@i+1,f,c
   597  000984                     l1311:
   598  000984  BE29               	btfsc	main@i+1,7,c
   599  000986  D7BE               	goto	l1291
   600  000988  5029               	movf	main@i+1,w,c
   601  00098A  E104               	bnz	l1313
   602  00098C  0E04               	movlw	4
   603  00098E  5C28               	subwf	main@i,w,c
   604  000990  A0D8               	btfss	status,0,c
   605  000992  D7B8               	goto	l1291
   606  000994                     l1313:
   607                           
   608                           ;main.c: 130: }
   609                           ;main.c: 131: i = 0;
   610  000994  0E00               	movlw	0
   611  000996  6E29               	movwf	main@i+1,c
   612  000998  0E00               	movlw	0
   613  00099A  6E28               	movwf	main@i,c
   614                           
   615                           ;main.c: 133: clearLCD();
   616  00099C  EC2C  F007         	call	_clearLCD	;wreg free
   617                           
   618                           ;main.c: 134: set_line(0,5);
   619  0009A0  0E00               	movlw	0
   620  0009A2  6E16               	movwf	set_line@line+1,c
   621  0009A4  0E00               	movlw	0
   622  0009A6  6E15               	movwf	set_line@line,c
   623  0009A8  0E00               	movlw	0
   624  0009AA  6E18               	movwf	set_line@pos+1,c
   625  0009AC  0E05               	movlw	5
   626  0009AE  6E17               	movwf	set_line@pos,c
   627  0009B0  ECF4  F006         	call	_set_line	;wreg free
   628                           
   629                           ;main.c: 135: write_LCD("Leitura");
   630  0009B4  0E66               	movlw	low STR_4
   631  0009B6  6E15               	movwf	write_LCD@c,c
   632  0009B8  0E08               	movlw	high STR_4
   633  0009BA  6E16               	movwf	write_LCD@c+1,c
   634  0009BC  EC66  F006         	call	_write_LCD	;wreg free
   635                           
   636                           ;main.c: 136: set_line(1,3);
   637  0009C0  0E00               	movlw	0
   638  0009C2  6E16               	movwf	set_line@line+1,c
   639  0009C4  0E01               	movlw	1
   640  0009C6  6E15               	movwf	set_line@line,c
   641  0009C8  0E00               	movlw	0
   642  0009CA  6E18               	movwf	set_line@pos+1,c
   643  0009CC  0E03               	movlw	3
   644  0009CE  6E17               	movwf	set_line@pos,c
   645  0009D0  ECF4  F006         	call	_set_line	;wreg free
   646                           
   647                           ;main.c: 137: write_LCD("Finalizada");
   648  0009D4  0E51               	movlw	low STR_5
   649  0009D6  6E15               	movwf	write_LCD@c,c
   650  0009D8  0E08               	movlw	high STR_5
   651  0009DA  6E16               	movwf	write_LCD@c+1,c
   652  0009DC  EC66  F006         	call	_write_LCD	;wreg free
   653                           
   654                           ;main.c: 138: _delay((unsigned long)((3000)*(16000000/4000.0)));
   655  0009E0  0E3D               	movlw	61
   656  0009E2  6E23               	movwf	(??_main+1)& (0+255),c
   657  0009E4  0EE1               	movlw	225
   658  0009E6  6E22               	movwf	??_main& (0+255),c
   659  0009E8  0E40               	movlw	64
   660  0009EA                     u517:
   661  0009EA  2EE8               	decfsz	wreg,f,c
   662  0009EC  D7FE               	bra	u517
   663  0009EE  2E22               	decfsz	??_main& (0+255),f,c
   664  0009F0  D7FC               	bra	u517
   665  0009F2  2E23               	decfsz	(??_main+1)& (0+255),f,c
   666  0009F4  D7FA               	bra	u517
   667  0009F6                     l1327:
   668                           
   669                           ;main.c: 141: clearLCD();
   670  0009F6  EC2C  F007         	call	_clearLCD	;wreg free
   671                           
   672                           ;main.c: 142: set_line(0,0);
   673  0009FA  0E00               	movlw	0
   674  0009FC  6E16               	movwf	set_line@line+1,c
   675  0009FE  0E00               	movlw	0
   676  000A00  6E15               	movwf	set_line@line,c
   677  000A02  0E00               	movlw	0
   678  000A04  6E18               	movwf	set_line@pos+1,c
   679  000A06  0E00               	movlw	0
   680  000A08  6E17               	movwf	set_line@pos,c
   681  000A0A  ECF4  F006         	call	_set_line	;wreg free
   682                           
   683                           ;main.c: 143: write_LCD("Bata na porta");
   684  000A0E  0E35               	movlw	low STR_6
   685  000A10  6E15               	movwf	write_LCD@c,c
   686  000A12  0E08               	movlw	high STR_6
   687  000A14  6E16               	movwf	write_LCD@c+1,c
   688  000A16  EC66  F006         	call	_write_LCD	;wreg free
   689                           
   690                           ;main.c: 144: _delay((unsigned long)((3000)*(16000000/4000.0)));
   691  000A1A  0E3D               	movlw	61
   692  000A1C  6E23               	movwf	(??_main+1)& (0+255),c
   693  000A1E  0EE1               	movlw	225
   694  000A20  6E22               	movwf	??_main& (0+255),c
   695  000A22  0E40               	movlw	64
   696  000A24                     u527:
   697  000A24  2EE8               	decfsz	wreg,f,c
   698  000A26  D7FE               	bra	u527
   699  000A28  2E22               	decfsz	??_main& (0+255),f,c
   700  000A2A  D7FC               	bra	u527
   701  000A2C  2E23               	decfsz	(??_main+1)& (0+255),f,c
   702  000A2E  D7FA               	bra	u527
   703                           
   704                           ;main.c: 145: toc[0] = 0x00;
   705  000A30  0E00               	movlw	0
   706  000A32  6E26               	movwf	main@toc,c
   707                           
   708                           ;main.c: 146: toc[1] = 0x00;
   709  000A34  0E00               	movlw	0
   710  000A36  6E27               	movwf	main@toc+1,c
   711                           
   712                           ;main.c: 148: while(i < 4){
   713  000A38  D040               	goto	l1359
   714  000A3A                     l1339:
   715                           
   716                           ;main.c: 149: clearLCD();
   717  000A3A  EC2C  F007         	call	_clearLCD	;wreg free
   718                           
   719                           ;main.c: 150: send_msg('1'+ i);
   720  000A3E  5028               	movf	main@i,w,c
   721  000A40  0F31               	addlw	49
   722  000A42  ECA7  F006         	call	_send_msg
   723                           
   724                           ;main.c: 151: if(i == 0)
   725  000A46  5028               	movf	main@i,w,c
   726  000A48  1029               	iorwf	main@i+1,w,c
   727  000A4A  A4D8               	btfss	status,2,c
   728  000A4C  D00B               	goto	l1347
   729                           
   730                           ;main.c: 152: readSignal(&toc[0], 0);
   731  000A4E  0E26               	movlw	low main@toc
   732  000A50  6E16               	movwf	readSignal@signal,c
   733  000A52  0E00               	movlw	high main@toc
   734  000A54  6E17               	movwf	readSignal@signal+1,c
   735  000A56  0E00               	movlw	0
   736  000A58  6E19               	movwf	readSignal@pos+1,c
   737  000A5A  0E00               	movlw	0
   738  000A5C  6E18               	movwf	readSignal@pos,c
   739  000A5E  ECEF  F005         	call	_readSignal	;wreg free
   740  000A62  D029               	goto	l1357
   741  000A64                     l1347:
   742                           
   743                           ;main.c: 153: else if(i == 1)
   744  000A64  0428               	decf	main@i,w,c
   745  000A66  1029               	iorwf	main@i+1,w,c
   746  000A68  A4D8               	btfss	status,2,c
   747  000A6A  D00B               	goto	l1351
   748                           
   749                           ;main.c: 154: readSignal(&toc[0], 1);
   750  000A6C  0E26               	movlw	low main@toc
   751  000A6E  6E16               	movwf	readSignal@signal,c
   752  000A70  0E00               	movlw	high main@toc
   753  000A72  6E17               	movwf	readSignal@signal+1,c
   754  000A74  0E00               	movlw	0
   755  000A76  6E19               	movwf	readSignal@pos+1,c
   756  000A78  0E01               	movlw	1
   757  000A7A  6E18               	movwf	readSignal@pos,c
   758  000A7C  ECEF  F005         	call	_readSignal	;wreg free
   759  000A80  D01A               	goto	l1357
   760  000A82                     l1351:
   761                           
   762                           ;main.c: 155: else if(i == 2)
   763  000A82  0E02               	movlw	2
   764  000A84  1828               	xorwf	main@i,w,c
   765  000A86  1029               	iorwf	main@i+1,w,c
   766  000A88  A4D8               	btfss	status,2,c
   767  000A8A  D00B               	goto	l1355
   768                           
   769                           ;main.c: 156: readSignal(&toc[1], 0);
   770  000A8C  0E27               	movlw	low (main@toc+1)
   771  000A8E  6E16               	movwf	readSignal@signal,c
   772  000A90  0E00               	movlw	high (main@toc+1)
   773  000A92  6E17               	movwf	readSignal@signal+1,c
   774  000A94  0E00               	movlw	0
   775  000A96  6E19               	movwf	readSignal@pos+1,c
   776  000A98  0E00               	movlw	0
   777  000A9A  6E18               	movwf	readSignal@pos,c
   778  000A9C  ECEF  F005         	call	_readSignal	;wreg free
   779  000AA0  D00A               	goto	l1357
   780  000AA2                     l1355:
   781                           
   782                           ;main.c: 157: else
   783                           ;main.c: 158: readSignal(&toc[1], 1);
   784  000AA2  0E27               	movlw	low (main@toc+1)
   785  000AA4  6E16               	movwf	readSignal@signal,c
   786  000AA6  0E00               	movlw	high (main@toc+1)
   787  000AA8  6E17               	movwf	readSignal@signal+1,c
   788  000AAA  0E00               	movlw	0
   789  000AAC  6E19               	movwf	readSignal@pos+1,c
   790  000AAE  0E01               	movlw	1
   791  000AB0  6E18               	movwf	readSignal@pos,c
   792  000AB2  ECEF  F005         	call	_readSignal	;wreg free
   793  000AB6                     l1357:
   794                           
   795                           ;main.c: 159: i++;
   796  000AB6  4A28               	infsnz	main@i,f,c
   797  000AB8  2A29               	incf	main@i+1,f,c
   798  000ABA                     l1359:
   799  000ABA  BE29               	btfsc	main@i+1,7,c
   800  000ABC  D7BE               	goto	l1339
   801  000ABE  5029               	movf	main@i+1,w,c
   802  000AC0  E104               	bnz	l1361
   803  000AC2  0E04               	movlw	4
   804  000AC4  5C28               	subwf	main@i,w,c
   805  000AC6  A0D8               	btfss	status,0,c
   806  000AC8  D7B8               	goto	l1339
   807  000ACA                     l1361:
   808                           
   809                           ;main.c: 160: }
   810                           ;main.c: 161: i = 0;
   811  000ACA  0E00               	movlw	0
   812  000ACC  6E29               	movwf	main@i+1,c
   813  000ACE  0E00               	movlw	0
   814  000AD0  6E28               	movwf	main@i,c
   815                           
   816                           ;main.c: 163: i = cmpSignal(pass, toc);
   817  000AD2  0E24               	movlw	low main@pass
   818  000AD4  6E12               	movwf	cmpSignal@pass,c
   819  000AD6  0E00               	movlw	high main@pass
   820  000AD8  6E13               	movwf	cmpSignal@pass+1,c
   821  000ADA  0E26               	movlw	low main@toc
   822  000ADC  6E14               	movwf	cmpSignal@toc,c
   823  000ADE  0E00               	movlw	high main@toc
   824  000AE0  6E15               	movwf	cmpSignal@toc+1,c
   825  000AE2  EC40  F006         	call	_cmpSignal	;wreg free
   826  000AE6  C012  F028         	movff	?_cmpSignal,main@i
   827  000AEA  C013  F029         	movff	?_cmpSignal+1,main@i+1
   828                           
   829                           ;main.c: 165: if(i == 1){
   830  000AEE  0428               	decf	main@i,w,c
   831  000AF0  1029               	iorwf	main@i+1,w,c
   832  000AF2  A4D8               	btfss	status,2,c
   833  000AF4  D03F               	goto	l1389
   834                           
   835                           ;main.c: 166: clearLCD();
   836  000AF6  EC2C  F007         	call	_clearLCD	;wreg free
   837                           
   838                           ;main.c: 167: set_line(0,3);
   839  000AFA  0E00               	movlw	0
   840  000AFC  6E16               	movwf	set_line@line+1,c
   841  000AFE  0E00               	movlw	0
   842  000B00  6E15               	movwf	set_line@line,c
   843  000B02  0E00               	movlw	0
   844  000B04  6E18               	movwf	set_line@pos+1,c
   845  000B06  0E03               	movlw	3
   846  000B08  6E17               	movwf	set_line@pos,c
   847  000B0A  ECF4  F006         	call	_set_line	;wreg free
   848                           
   849                           ;main.c: 168: write_LCD("As senhas");
   850  000B0E  0E5C               	movlw	low STR_7
   851  000B10  6E15               	movwf	write_LCD@c,c
   852  000B12  0E08               	movlw	high STR_7
   853  000B14  6E16               	movwf	write_LCD@c+1,c
   854  000B16  EC66  F006         	call	_write_LCD	;wreg free
   855                           
   856                           ;main.c: 169: set_line(1,3);
   857  000B1A  0E00               	movlw	0
   858  000B1C  6E16               	movwf	set_line@line+1,c
   859  000B1E  0E01               	movlw	1
   860  000B20  6E15               	movwf	set_line@line,c
   861  000B22  0E00               	movlw	0
   862  000B24  6E18               	movwf	set_line@pos+1,c
   863  000B26  0E03               	movlw	3
   864  000B28  6E17               	movwf	set_line@pos,c
   865  000B2A  ECF4  F006         	call	_set_line	;wreg free
   866                           
   867                           ;main.c: 170: write_LCD("coincidem");
   868  000B2E  0E47               	movlw	low (STR_10+4)
   869  000B30  6E15               	movwf	write_LCD@c,c
   870  000B32  0E08               	movlw	high (STR_10+4)
   871  000B34  6E16               	movwf	write_LCD@c+1,c
   872  000B36  EC66  F006         	call	_write_LCD	;wreg free
   873                           
   874                           ;main.c: 171: PORTCbits.RC2 = 1;
   875  000B3A  8482               	bsf	3970,2,c	;volatile
   876                           
   877                           ;main.c: 172: PORTBbits.RB5 = 0;
   878  000B3C  9A81               	bcf	3969,5,c	;volatile
   879                           
   880                           ;main.c: 173: _delay((unsigned long)((1000)*(16000000/4000.0)));
   881  000B3E  0E15               	movlw	21
   882  000B40  6E23               	movwf	(??_main+1)& (0+255),c
   883  000B42  0E4B               	movlw	75
   884  000B44  6E22               	movwf	??_main& (0+255),c
   885  000B46  0EBE               	movlw	190
   886  000B48                     u537:
   887  000B48  2EE8               	decfsz	wreg,f,c
   888  000B4A  D7FE               	bra	u537
   889  000B4C  2E22               	decfsz	??_main& (0+255),f,c
   890  000B4E  D7FC               	bra	u537
   891  000B50  2E23               	decfsz	(??_main+1)& (0+255),f,c
   892  000B52  D7FA               	bra	u537
   893  000B54  D000               	nop2	
   894                           
   895                           ;main.c: 174: PORTCbits.RC2 = 0;
   896  000B56  9482               	bcf	3970,2,c	;volatile
   897                           
   898                           ;main.c: 175: PORTBbits.RB5 = 1;
   899  000B58  8A81               	bsf	3969,5,c	;volatile
   900                           
   901                           ;main.c: 176: _delay((unsigned long)((1000)*(16000000/4000.0)));
   902  000B5A  0E15               	movlw	21
   903  000B5C  6E23               	movwf	(??_main+1)& (0+255),c
   904  000B5E  0E4B               	movlw	75
   905  000B60  6E22               	movwf	??_main& (0+255),c
   906  000B62  0EBE               	movlw	190
   907  000B64                     u547:
   908  000B64  2EE8               	decfsz	wreg,f,c
   909  000B66  D7FE               	bra	u547
   910  000B68  2E22               	decfsz	??_main& (0+255),f,c
   911  000B6A  D7FC               	bra	u547
   912  000B6C  2E23               	decfsz	(??_main+1)& (0+255),f,c
   913  000B6E  D7FA               	bra	u547
   914  000B70  D000               	nop2	
   915                           
   916                           ;main.c: 177: }
   917  000B72  D02E               	goto	l1401
   918  000B74                     l1389:
   919                           
   920                           ;main.c: 178: else{
   921                           ;main.c: 179: clearLCD();
   922  000B74  EC2C  F007         	call	_clearLCD	;wreg free
   923                           
   924                           ;main.c: 180: set_line(0,3);
   925  000B78  0E00               	movlw	0
   926  000B7A  6E16               	movwf	set_line@line+1,c
   927  000B7C  0E00               	movlw	0
   928  000B7E  6E15               	movwf	set_line@line,c
   929  000B80  0E00               	movlw	0
   930  000B82  6E18               	movwf	set_line@pos+1,c
   931  000B84  0E03               	movlw	3
   932  000B86  6E17               	movwf	set_line@pos,c
   933  000B88  ECF4  F006         	call	_set_line	;wreg free
   934                           
   935                           ;main.c: 181: write_LCD("As senhas");
   936  000B8C  0E5C               	movlw	low STR_7
   937  000B8E  6E15               	movwf	write_LCD@c,c
   938  000B90  0E08               	movlw	high STR_7
   939  000B92  6E16               	movwf	write_LCD@c+1,c
   940  000B94  EC66  F006         	call	_write_LCD	;wreg free
   941                           
   942                           ;main.c: 182: set_line(1,2);
   943  000B98  0E00               	movlw	0
   944  000B9A  6E16               	movwf	set_line@line+1,c
   945  000B9C  0E01               	movlw	1
   946  000B9E  6E15               	movwf	set_line@line,c
   947  000BA0  0E00               	movlw	0
   948  000BA2  6E18               	movwf	set_line@pos+1,c
   949  000BA4  0E02               	movlw	2
   950  000BA6  6E17               	movwf	set_line@pos,c
   951  000BA8  ECF4  F006         	call	_set_line	;wreg free
   952                           
   953                           ;main.c: 183: write_LCD("não coincidem");
   954  000BAC  0E43               	movlw	low STR_10
   955  000BAE  6E15               	movwf	write_LCD@c,c
   956  000BB0  0E08               	movlw	high STR_10
   957  000BB2  6E16               	movwf	write_LCD@c+1,c
   958  000BB4  EC66  F006         	call	_write_LCD	;wreg free
   959                           
   960                           ;main.c: 184: _delay((unsigned long)((2000)*(16000000/4000.0)));
   961  000BB8  0E29               	movlw	41
   962  000BBA  6E23               	movwf	(??_main+1)& (0+255),c
   963  000BBC  0E96               	movlw	150
   964  000BBE  6E22               	movwf	??_main& (0+255),c
   965  000BC0  0E7F               	movlw	127
   966  000BC2                     u557:
   967  000BC2  2EE8               	decfsz	wreg,f,c
   968  000BC4  D7FE               	bra	u557
   969  000BC6  2E22               	decfsz	??_main& (0+255),f,c
   970  000BC8  D7FC               	bra	u557
   971  000BCA  2E23               	decfsz	(??_main+1)& (0+255),f,c
   972  000BCC  D7FA               	bra	u557
   973  000BCE  F000               	nop	
   974  000BD0                     l1401:
   975                           
   976                           ;main.c: 185: }
   977                           ;main.c: 188: PORTCbits.RC2 = 0;
   978  000BD0  9482               	bcf	3970,2,c	;volatile
   979                           
   980                           ;main.c: 189: PORTBbits.RB5 = 0;
   981  000BD2  9A81               	bcf	3969,5,c	;volatile
   982                           
   983                           ;main.c: 191: i = 0;
   984  000BD4  0E00               	movlw	0
   985  000BD6  6E29               	movwf	main@i+1,c
   986  000BD8  0E00               	movlw	0
   987  000BDA  6E28               	movwf	main@i,c
   988                           
   989                           ;main.c: 192: }while(1);
   990  000BDC  D70C               	goto	l1327
   991  000BDE                     __end_of_main:
   992                           	opt stack 0
   993                           tblptru	equ	0xFF8
   994                           tblptrh	equ	0xFF7
   995                           wreg	equ	0xFE8
   996                           status	equ	0xFD8
   997                           
   998 ;; *************** function _write_LCD *****************
   999 ;; Defined at:
  1000 ;;		line 58 in file "LCD.c"
  1001 ;; Parameters:    Size  Location     Type
  1002 ;;  c               2   20[COMRAM] PTR unsigned char 
  1003 ;;		 -> STR_10(14), STR_9(10), STR_8(10), STR_7(10), 
  1004 ;;		 -> STR_6(14), STR_5(11), STR_4(8), STR_3(17), 
  1005 ;;		 -> STR_2(16), STR_1(19), 
  1006 ;; Auto vars:     Size  Location     Type
  1007 ;;  i               2   24[COMRAM] int 
  1008 ;; Return value:  Size  Location     Type
  1009 ;;                  1    wreg      void 
  1010 ;; Registers used:
  1011 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1012 ;; Tracked objects:
  1013 ;;		On entry : 0/0
  1014 ;;		On exit  : 0/0
  1015 ;;		Unchanged: 0/0
  1016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1017 ;;      Params:         2       0       0       0       0       0       0       0       0
  1018 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1019 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1020 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1021 ;;Total ram usage:        6 bytes
  1022 ;; Hardware stack levels used:    1
  1023 ;; Hardware stack levels required when called:    3
  1024 ;; This function calls:
  1025 ;;		_send_msg
  1026 ;; This function is called by:
  1027 ;;		_main
  1028 ;; This function uses a non-reentrant model
  1029 ;;
  1030                           
  1031                           	psect	text1
  1032  000CCC                     __ptext1:
  1033                           	opt stack 0
  1034  000CCC                     _write_LCD:
  1035                           	opt stack 27
  1036                           
  1037                           ;LCD.c: 60: int i = 0;
  1038                           
  1039                           ;incstack = 0
  1040  000CCC  0E00               	movlw	0
  1041  000CCE  6E1A               	movwf	write_LCD@i+1,c
  1042  000CD0  0E00               	movlw	0
  1043  000CD2  6E19               	movwf	write_LCD@i,c
  1044                           
  1045                           ;LCD.c: 61: for(; c[i] != '\0'; i++)
  1046  000CD4  D010               	goto	l1215
  1047  000CD6                     l1211:
  1048                           
  1049                           ;LCD.c: 62: send_msg(c[i]);
  1050  000CD6  5019               	movf	write_LCD@i,w,c
  1051  000CD8  2415               	addwf	write_LCD@c,w,c
  1052  000CDA  6E17               	movwf	??_write_LCD& (0+255),c
  1053  000CDC  501A               	movf	write_LCD@i+1,w,c
  1054  000CDE  2016               	addwfc	write_LCD@c+1,w,c
  1055  000CE0  6E18               	movwf	(??_write_LCD+1)& (0+255),c
  1056  000CE2  C017  FFF6         	movff	??_write_LCD,tblptrl
  1057  000CE6  C018  FFF7         	movff	??_write_LCD+1,tblptrh
  1058  000CEA                     	if	0	;tblptru may be non-zero
  1059  000CEA                     	endif
  1060  000CEA                     	if	0	;tblptru may be non-zero
  1061  000CEA                     	endif
  1062  000CEA  0008               	tblrd		*
  1063  000CEC  50F5               	movf	tablat,w,c
  1064  000CEE  ECA7  F006         	call	_send_msg
  1065  000CF2  4A19               	infsnz	write_LCD@i,f,c
  1066  000CF4  2A1A               	incf	write_LCD@i+1,f,c
  1067  000CF6                     l1215:
  1068  000CF6  5019               	movf	write_LCD@i,w,c
  1069  000CF8  2415               	addwf	write_LCD@c,w,c
  1070  000CFA  6E17               	movwf	??_write_LCD& (0+255),c
  1071  000CFC  501A               	movf	write_LCD@i+1,w,c
  1072  000CFE  2016               	addwfc	write_LCD@c+1,w,c
  1073  000D00  6E18               	movwf	(??_write_LCD+1)& (0+255),c
  1074  000D02  C017  FFF6         	movff	??_write_LCD,tblptrl
  1075  000D06  C018  FFF7         	movff	??_write_LCD+1,tblptrh
  1076  000D0A                     	if	0	;tblptru may be non-zero
  1077  000D0A                     	endif
  1078  000D0A                     	if	0	;tblptru may be non-zero
  1079  000D0A                     	endif
  1080  000D0A  0008               	tblrd		*
  1081  000D0C  50F5               	movf	tablat,w,c
  1082  000D0E  0900               	iorlw	0
  1083  000D10  B4D8               	btfsc	status,2,c
  1084  000D12  0012               	return	
  1085  000D14  D7E0               	goto	l1211
  1086  000D16                     __end_of_write_LCD:
  1087                           	opt stack 0
  1088                           tblptru	equ	0xFF8
  1089                           tblptrh	equ	0xFF7
  1090                           tblptrl	equ	0xFF6
  1091                           tablat	equ	0xFF5
  1092                           wreg	equ	0xFE8
  1093                           status	equ	0xFD8
  1094                           
  1095 ;; *************** function _send_msg *****************
  1096 ;; Defined at:
  1097 ;;		line 35 in file "LCD.c"
  1098 ;; Parameters:    Size  Location     Type
  1099 ;;  msg             1    wreg     unsigned char 
  1100 ;; Auto vars:     Size  Location     Type
  1101 ;;  msg             1   19[COMRAM] unsigned char 
  1102 ;; Return value:  Size  Location     Type
  1103 ;;                  1    wreg      void 
  1104 ;; Registers used:
  1105 ;;		wreg, status,2, cstack
  1106 ;; Tracked objects:
  1107 ;;		On entry : 0/0
  1108 ;;		On exit  : 0/0
  1109 ;;		Unchanged: 0/0
  1110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1111 ;;      Params:         0       0       0       0       0       0       0       0       0
  1112 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1113 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1114 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1115 ;;Total ram usage:        2 bytes
  1116 ;; Hardware stack levels used:    1
  1117 ;; Hardware stack levels required when called:    2
  1118 ;; This function calls:
  1119 ;;		_ena_pulse
  1120 ;; This function is called by:
  1121 ;;		_write_LCD
  1122 ;;		_main
  1123 ;; This function uses a non-reentrant model
  1124 ;;
  1125                           
  1126                           	psect	text2
  1127  000D4E                     __ptext2:
  1128                           	opt stack 0
  1129  000D4E                     _send_msg:
  1130                           	opt stack 27
  1131                           
  1132                           ;incstack = 0
  1133                           ;send_msg@msg stored from wreg
  1134  000D4E  6E14               	movwf	send_msg@msg,c
  1135                           
  1136                           ;LCD.c: 37: PORTD = msg;
  1137  000D50  C014  FF83         	movff	send_msg@msg,3971	;volatile
  1138                           
  1139                           ;LCD.c: 38: PORTBbits.RB3 = 1;
  1140  000D54  8681               	bsf	3969,3,c	;volatile
  1141                           
  1142                           ;LCD.c: 39: _delay((unsigned long)((1)*(16000000/4000.0)));
  1143  000D56  0E06               	movlw	6
  1144  000D58  6E13               	movwf	??_send_msg& (0+255),c
  1145  000D5A  0E30               	movlw	48
  1146  000D5C                     u567:
  1147  000D5C  2EE8               	decfsz	wreg,f,c
  1148  000D5E  D7FE               	bra	u567
  1149  000D60  2E13               	decfsz	??_send_msg& (0+255),f,c
  1150  000D62  D7FC               	bra	u567
  1151  000D64  D000               	nop2	
  1152                           
  1153                           ;LCD.c: 40: ena_pulse();
  1154  000D66  EC8B  F006         	call	_ena_pulse	;wreg free
  1155                           
  1156                           ;LCD.c: 41: _delay((unsigned long)((1)*(16000000/4000.0)));
  1157  000D6A  0E06               	movlw	6
  1158  000D6C  6E13               	movwf	??_send_msg& (0+255),c
  1159  000D6E  0E30               	movlw	48
  1160  000D70                     u577:
  1161  000D70  2EE8               	decfsz	wreg,f,c
  1162  000D72  D7FE               	bra	u577
  1163  000D74  2E13               	decfsz	??_send_msg& (0+255),f,c
  1164  000D76  D7FC               	bra	u577
  1165  000D78  D000               	nop2	
  1166                           
  1167                           ;LCD.c: 42: PORTBbits.RB3 = 0;
  1168  000D7A  9681               	bcf	3969,3,c	;volatile
  1169  000D7C  0012               	return		;funcret
  1170  000D7E                     __end_of_send_msg:
  1171                           	opt stack 0
  1172                           tblptru	equ	0xFF8
  1173                           tblptrh	equ	0xFF7
  1174                           tblptrl	equ	0xFF6
  1175                           tablat	equ	0xFF5
  1176                           wreg	equ	0xFE8
  1177                           status	equ	0xFD8
  1178                           
  1179 ;; *************** function _set_line *****************
  1180 ;; Defined at:
  1181 ;;		line 65 in file "LCD.c"
  1182 ;; Parameters:    Size  Location     Type
  1183 ;;  line            2   20[COMRAM] int 
  1184 ;;  pos             2   22[COMRAM] int 
  1185 ;; Auto vars:     Size  Location     Type
  1186 ;;  cursor          1   24[COMRAM] unsigned char 
  1187 ;; Return value:  Size  Location     Type
  1188 ;;                  1    wreg      void 
  1189 ;; Registers used:
  1190 ;;		wreg, status,2, status,0, cstack
  1191 ;; Tracked objects:
  1192 ;;		On entry : 0/0
  1193 ;;		On exit  : 0/0
  1194 ;;		Unchanged: 0/0
  1195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1196 ;;      Params:         4       0       0       0       0       0       0       0       0
  1197 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1198 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1199 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1200 ;;Total ram usage:        5 bytes
  1201 ;; Hardware stack levels used:    1
  1202 ;; Hardware stack levels required when called:    3
  1203 ;; This function calls:
  1204 ;;		_send_cfg
  1205 ;; This function is called by:
  1206 ;;		_main
  1207 ;; This function uses a non-reentrant model
  1208 ;;
  1209                           
  1210                           	psect	text3
  1211  000DE8                     __ptext3:
  1212                           	opt stack 0
  1213  000DE8                     _set_line:
  1214                           	opt stack 27
  1215                           
  1216                           ;LCD.c: 67: char cursor;
  1217                           ;LCD.c: 68: if(line == 0)
  1218                           
  1219                           ;incstack = 0
  1220  000DE8  5015               	movf	set_line@line,w,c
  1221  000DEA  1016               	iorwf	set_line@line+1,w,c
  1222  000DEC  A4D8               	btfss	status,2,c
  1223  000DEE  D003               	goto	l1221
  1224                           
  1225                           ;LCD.c: 69: cursor = 0x80 + pos;
  1226  000DF0  5017               	movf	set_line@pos,w,c
  1227  000DF2  0F80               	addlw	128
  1228  000DF4  D002               	goto	L1
  1229  000DF6                     l1221:
  1230                           
  1231                           ;LCD.c: 70: else
  1232                           ;LCD.c: 71: cursor = 0xC0 + pos;
  1233  000DF6  5017               	movf	set_line@pos,w,c
  1234  000DF8  0FC0               	addlw	192
  1235  000DFA                     L1:
  1236  000DFA  6E19               	movwf	set_line@cursor,c
  1237                           
  1238                           ;LCD.c: 72: send_cfg(cursor);
  1239  000DFC  5019               	movf	set_line@cursor,w,c
  1240  000DFE  ECE5  F006         	call	_send_cfg
  1241  000E02  0012               	return		;funcret
  1242  000E04                     __end_of_set_line:
  1243                           	opt stack 0
  1244                           tblptru	equ	0xFF8
  1245                           tblptrh	equ	0xFF7
  1246                           tblptrl	equ	0xFF6
  1247                           tablat	equ	0xFF5
  1248                           wreg	equ	0xFE8
  1249                           status	equ	0xFD8
  1250                           
  1251 ;; *************** function _readSignal *****************
  1252 ;; Defined at:
  1253 ;;		line 13 in file "ReadSignal.c"
  1254 ;; Parameters:    Size  Location     Type
  1255 ;;  signal          2   21[COMRAM] PTR unsigned char 
  1256 ;;		 -> main@toc(2), main@pass(2), 
  1257 ;;  pos             2   23[COMRAM] int 
  1258 ;; Auto vars:     Size  Location     Type
  1259 ;;  j               2   31[COMRAM] int 
  1260 ;;  i               2   29[COMRAM] int 
  1261 ;;  limite          2   27[COMRAM] int 
  1262 ;; Return value:  Size  Location     Type
  1263 ;;                  1    wreg      void 
  1264 ;; Registers used:
  1265 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1266 ;; Tracked objects:
  1267 ;;		On entry : 0/0
  1268 ;;		On exit  : 0/0
  1269 ;;		Unchanged: 0/0
  1270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1271 ;;      Params:         4       0       0       0       0       0       0       0       0
  1272 ;;      Locals:         6       0       0       0       0       0       0       0       0
  1273 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1274 ;;      Totals:        12       0       0       0       0       0       0       0       0
  1275 ;;Total ram usage:       12 bytes
  1276 ;; Hardware stack levels used:    1
  1277 ;; Hardware stack levels required when called:    2
  1278 ;; This function calls:
  1279 ;;		_ADCRead
  1280 ;; This function is called by:
  1281 ;;		_main
  1282 ;; This function uses a non-reentrant model
  1283 ;;
  1284                           
  1285                           	psect	text4
  1286  000BDE                     __ptext4:
  1287                           	opt stack 0
  1288  000BDE                     _readSignal:
  1289                           	opt stack 28
  1290                           
  1291                           ;ReadSignal.c: 15: int j = 0;
  1292                           
  1293                           ;incstack = 0
  1294  000BDE  0E00               	movlw	0
  1295  000BE0  6E21               	movwf	readSignal@j+1,c
  1296  000BE2  0E00               	movlw	0
  1297  000BE4  6E20               	movwf	readSignal@j,c
  1298                           
  1299                           ;ReadSignal.c: 16: if(pos == 1)
  1300  000BE6  0418               	decf	readSignal@pos,w,c
  1301  000BE8  1019               	iorwf	readSignal@pos+1,w,c
  1302  000BEA  A4D8               	btfss	status,2,c
  1303  000BEC  D004               	goto	l1231
  1304                           
  1305                           ;ReadSignal.c: 17: j = 4;
  1306  000BEE  0E00               	movlw	0
  1307  000BF0  6E21               	movwf	readSignal@j+1,c
  1308  000BF2  0E04               	movlw	4
  1309  000BF4  6E20               	movwf	readSignal@j,c
  1310  000BF6                     l1231:
  1311                           
  1312                           ;ReadSignal.c: 18: int limite;
  1313                           ;ReadSignal.c: 19: limite = j + 4;
  1314  000BF6  0E04               	movlw	4
  1315  000BF8  2420               	addwf	readSignal@j,w,c
  1316  000BFA  6E1C               	movwf	readSignal@limite,c
  1317  000BFC  0E00               	movlw	0
  1318  000BFE  2021               	addwfc	readSignal@j+1,w,c
  1319  000C00  6E1D               	movwf	readSignal@limite+1,c
  1320                           
  1321                           ;ReadSignal.c: 20: int i;
  1322                           ;ReadSignal.c: 22: while(j < limite){
  1323  000C02  D033               	goto	l200
  1324  000C04                     l1233:
  1325                           
  1326                           ;ReadSignal.c: 24: i = 0;
  1327  000C04  0E00               	movlw	0
  1328  000C06  6E1F               	movwf	readSignal@i+1,c
  1329  000C08  0E00               	movlw	0
  1330  000C0A  6E1E               	movwf	readSignal@i,c
  1331                           
  1332                           ;ReadSignal.c: 25: while(i < 500){
  1333  000C0C  D022               	goto	l1243
  1334  000C0E                     l1235:
  1335                           
  1336                           ;ReadSignal.c: 26: if(ADCRead() > 9){
  1337  000C0E  EC02  F007         	call	_ADCRead	;wreg free
  1338  000C12  5013               	movf	?_ADCRead+1,w,c
  1339  000C14  E104               	bnz	u350
  1340  000C16  0E0A               	movlw	10
  1341  000C18  5C12               	subwf	?_ADCRead,w,c
  1342  000C1A  A0D8               	btfss	status,0,c
  1343  000C1C  D010               	goto	l1239
  1344  000C1E                     u350:
  1345                           
  1346                           ;ReadSignal.c: 27: *signal |= (0x03<<j);
  1347  000C1E  C020  F01A         	movff	readSignal@j,??_readSignal
  1348  000C22  0E03               	movlw	3
  1349  000C24  6E1B               	movwf	(??_readSignal+1)& (0+255),c
  1350  000C26  2A1A               	incf	??_readSignal,f,c
  1351  000C28  D002               	goto	u364
  1352  000C2A                     u365:
  1353  000C2A  90D8               	bcf	status,0,c
  1354  000C2C  361B               	rlcf	??_readSignal+1,f,c
  1355  000C2E                     u364:
  1356  000C2E  2E1A               	decfsz	??_readSignal,f,c
  1357  000C30  D7FC               	goto	u365
  1358  000C32  C016  FFD9         	movff	readSignal@signal,fsr2l
  1359  000C36  C017  FFDA         	movff	readSignal@signal+1,fsr2h
  1360  000C3A  501B               	movf	??_readSignal+1,w,c
  1361  000C3C  12DF               	iorwf	indf2,f,c
  1362  000C3E                     l1239:
  1363                           
  1364                           ;ReadSignal.c: 29: }
  1365                           ;ReadSignal.c: 30: _delay((unsigned long)((1)*(16000000/4000.0)));
  1366  000C3E  0E06               	movlw	6
  1367  000C40  6E1A               	movwf	??_readSignal& (0+255),c
  1368  000C42  0E30               	movlw	48
  1369  000C44                     u587:
  1370  000C44  2EE8               	decfsz	wreg,f,c
  1371  000C46  D7FE               	bra	u587
  1372  000C48  2E1A               	decfsz	??_readSignal& (0+255),f,c
  1373  000C4A  D7FC               	bra	u587
  1374  000C4C  D000               	nop2	
  1375                           
  1376                           ;ReadSignal.c: 31: i++;
  1377  000C4E  4A1E               	infsnz	readSignal@i,f,c
  1378  000C50  2A1F               	incf	readSignal@i+1,f,c
  1379  000C52                     l1243:
  1380  000C52  BE1F               	btfsc	readSignal@i+1,7,c
  1381  000C54  D7DC               	goto	l1235
  1382  000C56  0EF4               	movlw	244
  1383  000C58  5C1E               	subwf	readSignal@i,w,c
  1384  000C5A  0E01               	movlw	1
  1385  000C5C  581F               	subwfb	readSignal@i+1,w,c
  1386  000C5E  A0D8               	btfss	status,0,c
  1387  000C60  D7D6               	goto	l1235
  1388                           
  1389                           ;ReadSignal.c: 32: }
  1390                           ;ReadSignal.c: 33: j+=2;
  1391  000C62  0E02               	movlw	2
  1392  000C64  2620               	addwf	readSignal@j,f,c
  1393  000C66  0E00               	movlw	0
  1394  000C68  2221               	addwfc	readSignal@j+1,f,c
  1395  000C6A                     l200:
  1396  000C6A  501C               	movf	readSignal@limite,w,c
  1397  000C6C  5C20               	subwf	readSignal@j,w,c
  1398  000C6E  5021               	movf	readSignal@j+1,w,c
  1399  000C70  0A80               	xorlw	128
  1400  000C72  6E1A               	movwf	??_readSignal& (0+255),c
  1401  000C74  501D               	movf	readSignal@limite+1,w,c
  1402  000C76  0A80               	xorlw	128
  1403  000C78  581A               	subwfb	??_readSignal& (0+255),w,c
  1404  000C7A  B0D8               	btfsc	status,0,c
  1405  000C7C  0012               	return	
  1406  000C7E  D7C2               	goto	l1233
  1407  000C80                     __end_of_readSignal:
  1408                           	opt stack 0
  1409                           tblptru	equ	0xFF8
  1410                           tblptrh	equ	0xFF7
  1411                           tblptrl	equ	0xFF6
  1412                           tablat	equ	0xFF5
  1413                           wreg	equ	0xFE8
  1414                           indf2	equ	0xFDF
  1415                           fsr2h	equ	0xFDA
  1416                           fsr2l	equ	0xFD9
  1417                           status	equ	0xFD8
  1418                           
  1419 ;; *************** function _ADCRead *****************
  1420 ;; Defined at:
  1421 ;;		line 19 in file "ADC.c"
  1422 ;; Parameters:    Size  Location     Type
  1423 ;;		None
  1424 ;; Auto vars:     Size  Location     Type
  1425 ;;  value           2   19[COMRAM] unsigned int 
  1426 ;; Return value:  Size  Location     Type
  1427 ;;                  2   17[COMRAM] unsigned int 
  1428 ;; Registers used:
  1429 ;;		None
  1430 ;; Tracked objects:
  1431 ;;		On entry : 0/0
  1432 ;;		On exit  : 0/0
  1433 ;;		Unchanged: 0/0
  1434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1435 ;;      Params:         2       0       0       0       0       0       0       0       0
  1436 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1437 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1438 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1439 ;;Total ram usage:        4 bytes
  1440 ;; Hardware stack levels used:    1
  1441 ;; Hardware stack levels required when called:    1
  1442 ;; This function calls:
  1443 ;;		Nothing
  1444 ;; This function is called by:
  1445 ;;		_readSignal
  1446 ;; This function uses a non-reentrant model
  1447 ;;
  1448                           
  1449                           	psect	text5
  1450  000E04                     __ptext5:
  1451                           	opt stack 0
  1452  000E04                     _ADCRead:
  1453                           	opt stack 28
  1454                           
  1455                           ;ADC.c: 20: unsigned int value;
  1456                           ;ADC.c: 21: ADCON0bits.GO = 1;
  1457                           
  1458                           ;incstack = 0
  1459  000E04  82C2               	bsf	4034,1,c	;volatile
  1460  000E06                     l189:
  1461  000E06  B2C2               	btfsc	4034,1,c	;volatile
  1462  000E08  D7FE               	goto	l189
  1463                           
  1464                           ;ADC.c: 24: value = ADRES;
  1465  000E0A  CFC3 F014          	movff	4035,ADCRead@value	;volatile
  1466  000E0E  CFC4 F015          	movff	4036,ADCRead@value+1	;volatile
  1467                           
  1468                           ;ADC.c: 26: return value;
  1469  000E12  C014  F012         	movff	ADCRead@value,?_ADCRead
  1470  000E16  C015  F013         	movff	ADCRead@value+1,?_ADCRead+1
  1471  000E1A  0012               	return		;funcret
  1472  000E1C                     __end_of_ADCRead:
  1473                           	opt stack 0
  1474                           tblptru	equ	0xFF8
  1475                           tblptrh	equ	0xFF7
  1476                           tblptrl	equ	0xFF6
  1477                           tablat	equ	0xFF5
  1478                           wreg	equ	0xFE8
  1479                           indf2	equ	0xFDF
  1480                           fsr2h	equ	0xFDA
  1481                           fsr2l	equ	0xFD9
  1482                           status	equ	0xFD8
  1483                           
  1484 ;; *************** function _init_timer *****************
  1485 ;; Defined at:
  1486 ;;		line 31 in file "Interrupt.c"
  1487 ;; Parameters:    Size  Location     Type
  1488 ;;		None
  1489 ;; Auto vars:     Size  Location     Type
  1490 ;;		None
  1491 ;; Return value:  Size  Location     Type
  1492 ;;                  1    wreg      void 
  1493 ;; Registers used:
  1494 ;;		wreg, status,2
  1495 ;; Tracked objects:
  1496 ;;		On entry : 0/0
  1497 ;;		On exit  : 0/0
  1498 ;;		Unchanged: 0/0
  1499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1500 ;;      Params:         0       0       0       0       0       0       0       0       0
  1501 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1502 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1503 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1504 ;;Total ram usage:        0 bytes
  1505 ;; Hardware stack levels used:    1
  1506 ;; Hardware stack levels required when called:    1
  1507 ;; This function calls:
  1508 ;;		Nothing
  1509 ;; This function is called by:
  1510 ;;		_main
  1511 ;; This function uses a non-reentrant model
  1512 ;;
  1513                           
  1514                           	psect	text6
  1515  000D7E                     __ptext6:
  1516                           	opt stack 0
  1517  000D7E                     _init_timer:
  1518                           	opt stack 29
  1519                           
  1520                           ;Interrupt.c: 33: TRISD = 0x00;
  1521                           
  1522                           ;incstack = 0
  1523  000D7E  0E00               	movlw	0
  1524  000D80  6E95               	movwf	3989,c	;volatile
  1525                           
  1526                           ;Interrupt.c: 35: INTCONbits.GIE = 0;
  1527  000D82  9EF2               	bcf	intcon,7,c	;volatile
  1528                           
  1529                           ;Interrupt.c: 36: INTCONbits.PEIE = 1;
  1530  000D84  8CF2               	bsf	intcon,6,c	;volatile
  1531                           
  1532                           ;Interrupt.c: 37: INTCONbits.TMR0IF = 0x00;
  1533  000D86  94F2               	bcf	intcon,2,c	;volatile
  1534                           
  1535                           ;Interrupt.c: 38: INTCONbits.TMR0IE = 1;
  1536  000D88  8AF2               	bsf	intcon,5,c	;volatile
  1537                           
  1538                           ;Interrupt.c: 41: T0CONbits.T08BIT = 0;
  1539  000D8A  9CD5               	bcf	4053,6,c	;volatile
  1540                           
  1541                           ;Interrupt.c: 42: T0CONbits.T0CS = 0;
  1542  000D8C  9AD5               	bcf	4053,5,c	;volatile
  1543                           
  1544                           ;Interrupt.c: 43: T0CONbits.PSA = 0;
  1545  000D8E  96D5               	bcf	4053,3,c	;volatile
  1546                           
  1547                           ;Interrupt.c: 44: T0CONbits.T0PS2 = 1;
  1548  000D90  84D5               	bsf	4053,2,c	;volatile
  1549                           
  1550                           ;Interrupt.c: 45: T0CONbits.T0PS1 = 0;
  1551  000D92  92D5               	bcf	4053,1,c	;volatile
  1552                           
  1553                           ;Interrupt.c: 46: T0CONbits.T0PS0 = 0;
  1554  000D94  90D5               	bcf	4053,0,c	;volatile
  1555                           
  1556                           ;Interrupt.c: 47: TMR0H = 0xB;
  1557  000D96  0E0B               	movlw	11
  1558  000D98  6ED7               	movwf	4055,c	;volatile
  1559                           
  1560                           ;Interrupt.c: 48: TMR0L = 0xDC;
  1561  000D9A  0EDC               	movlw	220
  1562  000D9C  6ED6               	movwf	4054,c	;volatile
  1563                           
  1564                           ;Interrupt.c: 49: T0CONbits.TMR0ON = 1;
  1565  000D9E  8ED5               	bsf	4053,7,c	;volatile
  1566                           
  1567                           ;Interrupt.c: 51: INTCONbits.GIE = 1;
  1568  000DA0  8EF2               	bsf	intcon,7,c	;volatile
  1569  000DA2  0012               	return		;funcret
  1570  000DA4                     __end_of_init_timer:
  1571                           	opt stack 0
  1572                           tblptru	equ	0xFF8
  1573                           tblptrh	equ	0xFF7
  1574                           tblptrl	equ	0xFF6
  1575                           tablat	equ	0xFF5
  1576                           intcon	equ	0xFF2
  1577                           wreg	equ	0xFE8
  1578                           indf2	equ	0xFDF
  1579                           fsr2h	equ	0xFDA
  1580                           fsr2l	equ	0xFD9
  1581                           status	equ	0xFD8
  1582                           
  1583 ;; *************** function _init_UART *****************
  1584 ;; Defined at:
  1585 ;;		line 10 in file "USART.c"
  1586 ;; Parameters:    Size  Location     Type
  1587 ;;		None
  1588 ;; Auto vars:     Size  Location     Type
  1589 ;;		None
  1590 ;; Return value:  Size  Location     Type
  1591 ;;                  1    wreg      void 
  1592 ;; Registers used:
  1593 ;;		wreg, status,2
  1594 ;; Tracked objects:
  1595 ;;		On entry : 0/0
  1596 ;;		On exit  : 0/0
  1597 ;;		Unchanged: 0/0
  1598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1599 ;;      Params:         0       0       0       0       0       0       0       0       0
  1600 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1601 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1602 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1603 ;;Total ram usage:        0 bytes
  1604 ;; Hardware stack levels used:    1
  1605 ;; Hardware stack levels required when called:    1
  1606 ;; This function calls:
  1607 ;;		Nothing
  1608 ;; This function is called by:
  1609 ;;		_main
  1610 ;; This function uses a non-reentrant model
  1611 ;;
  1612                           
  1613                           	psect	text7
  1614  000E32                     __ptext7:
  1615                           	opt stack 0
  1616  000E32                     _init_UART:
  1617                           	opt stack 29
  1618                           
  1619                           ;USART.c: 12: SPBRG = 12;
  1620                           
  1621                           ;incstack = 0
  1622  000E32  0E0C               	movlw	12
  1623  000E34  6EAF               	movwf	4015,c	;volatile
  1624                           
  1625                           ;USART.c: 13: BRGH = 0;
  1626  000E36  94AC               	bcf	4012,2,c	;volatile
  1627                           
  1628                           ;USART.c: 14: SYNC = 0;
  1629  000E38  98AC               	bcf	4012,4,c	;volatile
  1630                           
  1631                           ;USART.c: 15: SPEN = 1;
  1632  000E3A  8EAB               	bsf	4011,7,c	;volatile
  1633                           
  1634                           ;USART.c: 16: TRISC7 = 1;
  1635  000E3C  8E94               	bsf	3988,7,c	;volatile
  1636                           
  1637                           ;USART.c: 17: TRISC6 = 1;
  1638  000E3E  8C94               	bsf	3988,6,c	;volatile
  1639                           
  1640                           ;USART.c: 18: CREN = 1;
  1641  000E40  88AB               	bsf	4011,4,c	;volatile
  1642                           
  1643                           ;USART.c: 19: TXEN = 1;
  1644  000E42  8AAC               	bsf	4012,5,c	;volatile
  1645  000E44  0012               	return		;funcret
  1646  000E46                     __end_of_init_UART:
  1647                           	opt stack 0
  1648                           tblptru	equ	0xFF8
  1649                           tblptrh	equ	0xFF7
  1650                           tblptrl	equ	0xFF6
  1651                           tablat	equ	0xFF5
  1652                           intcon	equ	0xFF2
  1653                           wreg	equ	0xFE8
  1654                           indf2	equ	0xFDF
  1655                           fsr2h	equ	0xFDA
  1656                           fsr2l	equ	0xFD9
  1657                           status	equ	0xFD8
  1658                           
  1659 ;; *************** function _init_LCD *****************
  1660 ;; Defined at:
  1661 ;;		line 45 in file "LCD.c"
  1662 ;; Parameters:    Size  Location     Type
  1663 ;;		None
  1664 ;; Auto vars:     Size  Location     Type
  1665 ;;		None
  1666 ;; Return value:  Size  Location     Type
  1667 ;;                  1    wreg      void 
  1668 ;; Registers used:
  1669 ;;		wreg, status,2, cstack
  1670 ;; Tracked objects:
  1671 ;;		On entry : 0/0
  1672 ;;		On exit  : 0/0
  1673 ;;		Unchanged: 0/0
  1674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1675 ;;      Params:         0       0       0       0       0       0       0       0       0
  1676 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1677 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1678 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1679 ;;Total ram usage:        0 bytes
  1680 ;; Hardware stack levels used:    1
  1681 ;; Hardware stack levels required when called:    3
  1682 ;; This function calls:
  1683 ;;		_send_cfg
  1684 ;; This function is called by:
  1685 ;;		_main
  1686 ;; This function uses a non-reentrant model
  1687 ;;
  1688                           
  1689                           	psect	text8
  1690  000DA4                     __ptext8:
  1691                           	opt stack 0
  1692  000DA4                     _init_LCD:
  1693                           	opt stack 27
  1694                           
  1695                           ;LCD.c: 47: TRISB = 0x00;
  1696                           
  1697                           ;incstack = 0
  1698  000DA4  0E00               	movlw	0
  1699  000DA6  6E93               	movwf	3987,c	;volatile
  1700                           
  1701                           ;LCD.c: 48: TRISE = 0x00;
  1702  000DA8  0E00               	movlw	0
  1703  000DAA  6E96               	movwf	3990,c	;volatile
  1704                           
  1705                           ;LCD.c: 49: PORTD = 0x00;
  1706  000DAC  0E00               	movlw	0
  1707  000DAE  6E83               	movwf	3971,c	;volatile
  1708                           
  1709                           ;LCD.c: 51: send_cfg(0x01);
  1710  000DB0  0E01               	movlw	1
  1711  000DB2  ECE5  F006         	call	_send_cfg
  1712                           
  1713                           ;LCD.c: 52: send_cfg(0x38);
  1714  000DB6  0E38               	movlw	56
  1715  000DB8  ECE5  F006         	call	_send_cfg
  1716                           
  1717                           ;LCD.c: 53: send_cfg(0x80);
  1718  000DBC  0E80               	movlw	128
  1719  000DBE  ECE5  F006         	call	_send_cfg
  1720                           
  1721                           ;LCD.c: 54: send_cfg(0x0F);
  1722  000DC2  0E0F               	movlw	15
  1723  000DC4  ECE5  F006         	call	_send_cfg
  1724  000DC8  0012               	return		;funcret
  1725  000DCA                     __end_of_init_LCD:
  1726                           	opt stack 0
  1727                           tblptru	equ	0xFF8
  1728                           tblptrh	equ	0xFF7
  1729                           tblptrl	equ	0xFF6
  1730                           tablat	equ	0xFF5
  1731                           intcon	equ	0xFF2
  1732                           wreg	equ	0xFE8
  1733                           indf2	equ	0xFDF
  1734                           fsr2h	equ	0xFDA
  1735                           fsr2l	equ	0xFD9
  1736                           status	equ	0xFD8
  1737                           
  1738 ;; *************** function _cmpSignal *****************
  1739 ;; Defined at:
  1740 ;;		line 37 in file "ReadSignal.c"
  1741 ;; Parameters:    Size  Location     Type
  1742 ;;  pass            2   17[COMRAM] PTR unsigned char 
  1743 ;;		 -> main@pass(2), 
  1744 ;;  toc             2   19[COMRAM] PTR unsigned char 
  1745 ;;		 -> main@toc(2), 
  1746 ;; Auto vars:     Size  Location     Type
  1747 ;;		None
  1748 ;; Return value:  Size  Location     Type
  1749 ;;                  2   17[COMRAM] int 
  1750 ;; Registers used:
  1751 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  1752 ;; Tracked objects:
  1753 ;;		On entry : 0/0
  1754 ;;		On exit  : 0/0
  1755 ;;		Unchanged: 0/0
  1756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1757 ;;      Params:         4       0       0       0       0       0       0       0       0
  1758 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1759 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1760 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1761 ;;Total ram usage:        6 bytes
  1762 ;; Hardware stack levels used:    1
  1763 ;; Hardware stack levels required when called:    1
  1764 ;; This function calls:
  1765 ;;		Nothing
  1766 ;; This function is called by:
  1767 ;;		_main
  1768 ;; This function uses a non-reentrant model
  1769 ;;
  1770                           
  1771                           	psect	text9
  1772  000C80                     __ptext9:
  1773                           	opt stack 0
  1774  000C80                     _cmpSignal:
  1775                           	opt stack 29
  1776                           
  1777                           ;ReadSignal.c: 39: if(pass[0] == toc[0] && pass[1] == toc[1])
  1778                           
  1779                           ;incstack = 0
  1780  000C80  C014  FFD9         	movff	cmpSignal@toc,fsr2l
  1781  000C84  C015  FFDA         	movff	cmpSignal@toc+1,fsr2h
  1782  000C88  C012  FFE1         	movff	cmpSignal@pass,fsr1l
  1783  000C8C  C013  FFE2         	movff	cmpSignal@pass+1,fsr1h
  1784  000C90  50DE               	movf	postinc2,w,c
  1785  000C92  18E6               	xorwf	postinc1,w,c
  1786  000C94  A4D8               	btfss	status,2,c
  1787  000C96  D015               	goto	l1255
  1788  000C98  EE20 F001          	lfsr	2,1
  1789  000C9C  5014               	movf	cmpSignal@toc,w,c
  1790  000C9E  26D9               	addwf	fsr2l,f,c
  1791  000CA0  5015               	movf	cmpSignal@toc+1,w,c
  1792  000CA2  22DA               	addwfc	fsr2h,f,c
  1793  000CA4  EE10 F001          	lfsr	1,1
  1794  000CA8  5012               	movf	cmpSignal@pass,w,c
  1795  000CAA  26E1               	addwf	fsr1l,f,c
  1796  000CAC  5013               	movf	cmpSignal@pass+1,w,c
  1797  000CAE  22E2               	addwfc	fsr1h,f,c
  1798  000CB0  50DE               	movf	postinc2,w,c
  1799  000CB2  18E6               	xorwf	postinc1,w,c
  1800  000CB4  A4D8               	btfss	status,2,c
  1801  000CB6  D005               	goto	l1255
  1802                           
  1803                           ;ReadSignal.c: 40: return 1;
  1804  000CB8  0E00               	movlw	0
  1805  000CBA  6E13               	movwf	?_cmpSignal+1,c
  1806  000CBC  0E01               	movlw	1
  1807  000CBE  6E12               	movwf	?_cmpSignal,c
  1808  000CC0  0012               	return	
  1809  000CC2                     l1255:
  1810                           
  1811                           ;ReadSignal.c: 41: return 0;
  1812  000CC2  0E00               	movlw	0
  1813  000CC4  6E13               	movwf	?_cmpSignal+1,c
  1814  000CC6  0E00               	movlw	0
  1815  000CC8  6E12               	movwf	?_cmpSignal,c
  1816  000CCA  0012               	return	
  1817  000CCC                     __end_of_cmpSignal:
  1818                           	opt stack 0
  1819                           tblptru	equ	0xFF8
  1820                           tblptrh	equ	0xFF7
  1821                           tblptrl	equ	0xFF6
  1822                           tablat	equ	0xFF5
  1823                           intcon	equ	0xFF2
  1824                           wreg	equ	0xFE8
  1825                           postinc1	equ	0xFE6
  1826                           fsr1h	equ	0xFE2
  1827                           fsr1l	equ	0xFE1
  1828                           indf2	equ	0xFDF
  1829                           postinc2	equ	0xFDE
  1830                           fsr2h	equ	0xFDA
  1831                           fsr2l	equ	0xFD9
  1832                           status	equ	0xFD8
  1833                           
  1834 ;; *************** function _clearLCD *****************
  1835 ;; Defined at:
  1836 ;;		line 31 in file "LCD.c"
  1837 ;; Parameters:    Size  Location     Type
  1838 ;;		None
  1839 ;; Auto vars:     Size  Location     Type
  1840 ;;		None
  1841 ;; Return value:  Size  Location     Type
  1842 ;;                  1    wreg      void 
  1843 ;; Registers used:
  1844 ;;		wreg, cstack
  1845 ;; Tracked objects:
  1846 ;;		On entry : 0/0
  1847 ;;		On exit  : 0/0
  1848 ;;		Unchanged: 0/0
  1849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1850 ;;      Params:         0       0       0       0       0       0       0       0       0
  1851 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1852 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1853 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1854 ;;Total ram usage:        0 bytes
  1855 ;; Hardware stack levels used:    1
  1856 ;; Hardware stack levels required when called:    3
  1857 ;; This function calls:
  1858 ;;		_send_cfg
  1859 ;; This function is called by:
  1860 ;;		_main
  1861 ;; This function uses a non-reentrant model
  1862 ;;
  1863                           
  1864                           	psect	text10
  1865  000E58                     __ptext10:
  1866                           	opt stack 0
  1867  000E58                     _clearLCD:
  1868                           	opt stack 27
  1869                           
  1870                           ;LCD.c: 32: send_cfg(0x01);
  1871                           
  1872                           ;incstack = 0
  1873  000E58  0E01               	movlw	1
  1874  000E5A  ECE5  F006         	call	_send_cfg
  1875  000E5E  0012               	return		;funcret
  1876  000E60                     __end_of_clearLCD:
  1877                           	opt stack 0
  1878                           tblptru	equ	0xFF8
  1879                           tblptrh	equ	0xFF7
  1880                           tblptrl	equ	0xFF6
  1881                           tablat	equ	0xFF5
  1882                           intcon	equ	0xFF2
  1883                           wreg	equ	0xFE8
  1884                           postinc1	equ	0xFE6
  1885                           fsr1h	equ	0xFE2
  1886                           fsr1l	equ	0xFE1
  1887                           indf2	equ	0xFDF
  1888                           postinc2	equ	0xFDE
  1889                           fsr2h	equ	0xFDA
  1890                           fsr2l	equ	0xFD9
  1891                           status	equ	0xFD8
  1892                           
  1893 ;; *************** function _send_cfg *****************
  1894 ;; Defined at:
  1895 ;;		line 22 in file "LCD.c"
  1896 ;; Parameters:    Size  Location     Type
  1897 ;;  cmd             1    wreg     unsigned char 
  1898 ;; Auto vars:     Size  Location     Type
  1899 ;;  cmd             1   19[COMRAM] unsigned char 
  1900 ;; Return value:  Size  Location     Type
  1901 ;;                  1    wreg      void 
  1902 ;; Registers used:
  1903 ;;		wreg, cstack
  1904 ;; Tracked objects:
  1905 ;;		On entry : 0/0
  1906 ;;		On exit  : 0/0
  1907 ;;		Unchanged: 0/0
  1908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1909 ;;      Params:         0       0       0       0       0       0       0       0       0
  1910 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1911 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1912 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1913 ;;Total ram usage:        2 bytes
  1914 ;; Hardware stack levels used:    1
  1915 ;; Hardware stack levels required when called:    2
  1916 ;; This function calls:
  1917 ;;		_ena_pulse
  1918 ;; This function is called by:
  1919 ;;		_clearLCD
  1920 ;;		_init_LCD
  1921 ;;		_set_line
  1922 ;; This function uses a non-reentrant model
  1923 ;;
  1924                           
  1925                           	psect	text11
  1926  000DCA                     __ptext11:
  1927                           	opt stack 0
  1928  000DCA                     _send_cfg:
  1929                           	opt stack 27
  1930                           
  1931                           ;incstack = 0
  1932                           ;send_cfg@cmd stored from wreg
  1933  000DCA  6E14               	movwf	send_cfg@cmd,c
  1934                           
  1935                           ;LCD.c: 24: PORTD = cmd;
  1936  000DCC  C014  FF83         	movff	send_cfg@cmd,3971	;volatile
  1937                           
  1938                           ;LCD.c: 25: PORTBbits.RB3 = 0;
  1939  000DD0  9681               	bcf	3969,3,c	;volatile
  1940                           
  1941                           ;LCD.c: 26: ena_pulse();
  1942  000DD2  EC8B  F006         	call	_ena_pulse	;wreg free
  1943                           
  1944                           ;LCD.c: 27: _delay((unsigned long)((1)*(16000000/4000.0)));
  1945  000DD6  0E06               	movlw	6
  1946  000DD8  6E13               	movwf	??_send_cfg& (0+255),c
  1947  000DDA  0E30               	movlw	48
  1948  000DDC                     u597:
  1949  000DDC  2EE8               	decfsz	wreg,f,c
  1950  000DDE  D7FE               	bra	u597
  1951  000DE0  2E13               	decfsz	??_send_cfg& (0+255),f,c
  1952  000DE2  D7FC               	bra	u597
  1953  000DE4  D000               	nop2	
  1954  000DE6  0012               	return		;funcret
  1955  000DE8                     __end_of_send_cfg:
  1956                           	opt stack 0
  1957                           tblptru	equ	0xFF8
  1958                           tblptrh	equ	0xFF7
  1959                           tblptrl	equ	0xFF6
  1960                           tablat	equ	0xFF5
  1961                           intcon	equ	0xFF2
  1962                           wreg	equ	0xFE8
  1963                           postinc1	equ	0xFE6
  1964                           fsr1h	equ	0xFE2
  1965                           fsr1l	equ	0xFE1
  1966                           indf2	equ	0xFDF
  1967                           postinc2	equ	0xFDE
  1968                           fsr2h	equ	0xFDA
  1969                           fsr2l	equ	0xFD9
  1970                           status	equ	0xFD8
  1971                           
  1972 ;; *************** function _ena_pulse *****************
  1973 ;; Defined at:
  1974 ;;		line 11 in file "LCD.c"
  1975 ;; Parameters:    Size  Location     Type
  1976 ;;		None
  1977 ;; Auto vars:     Size  Location     Type
  1978 ;;		None
  1979 ;; Return value:  Size  Location     Type
  1980 ;;                  1    wreg      void 
  1981 ;; Registers used:
  1982 ;;		wreg
  1983 ;; Tracked objects:
  1984 ;;		On entry : 0/0
  1985 ;;		On exit  : 0/0
  1986 ;;		Unchanged: 0/0
  1987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1988 ;;      Params:         0       0       0       0       0       0       0       0       0
  1989 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1990 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1991 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1992 ;;Total ram usage:        1 bytes
  1993 ;; Hardware stack levels used:    1
  1994 ;; Hardware stack levels required when called:    1
  1995 ;; This function calls:
  1996 ;;		Nothing
  1997 ;; This function is called by:
  1998 ;;		_send_cfg
  1999 ;;		_send_msg
  2000 ;; This function uses a non-reentrant model
  2001 ;;
  2002                           
  2003                           	psect	text12
  2004  000D16                     __ptext12:
  2005                           	opt stack 0
  2006  000D16                     _ena_pulse:
  2007                           	opt stack 27
  2008                           
  2009                           ;LCD.c: 13: PORTEbits.RE1 = 0;
  2010                           
  2011                           ;incstack = 0
  2012  000D16  9284               	bcf	3972,1,c	;volatile
  2013                           
  2014                           ;LCD.c: 14: _delay((unsigned long)((1)*(16000000/4000.0)));
  2015  000D18  0E06               	movlw	6
  2016  000D1A  6E12               	movwf	??_ena_pulse& (0+255),c
  2017  000D1C  0E30               	movlw	48
  2018  000D1E                     u607:
  2019  000D1E  2EE8               	decfsz	wreg,f,c
  2020  000D20  D7FE               	bra	u607
  2021  000D22  2E12               	decfsz	??_ena_pulse& (0+255),f,c
  2022  000D24  D7FC               	bra	u607
  2023  000D26  D000               	nop2	
  2024                           
  2025                           ;LCD.c: 15: PORTEbits.RE1 = 1;
  2026  000D28  8284               	bsf	3972,1,c	;volatile
  2027                           
  2028                           ;LCD.c: 16: _delay((unsigned long)((1)*(16000000/4000.0)));
  2029  000D2A  0E06               	movlw	6
  2030  000D2C  6E12               	movwf	??_ena_pulse& (0+255),c
  2031  000D2E  0E30               	movlw	48
  2032  000D30                     u617:
  2033  000D30  2EE8               	decfsz	wreg,f,c
  2034  000D32  D7FE               	bra	u617
  2035  000D34  2E12               	decfsz	??_ena_pulse& (0+255),f,c
  2036  000D36  D7FC               	bra	u617
  2037  000D38  D000               	nop2	
  2038                           
  2039                           ;LCD.c: 17: PORTEbits.RE1 = 0;
  2040  000D3A  9284               	bcf	3972,1,c	;volatile
  2041                           
  2042                           ;LCD.c: 18: _delay((unsigned long)((1)*(16000000/4000.0)));
  2043  000D3C  0E06               	movlw	6
  2044  000D3E  6E12               	movwf	??_ena_pulse& (0+255),c
  2045  000D40  0E30               	movlw	48
  2046  000D42                     u627:
  2047  000D42  2EE8               	decfsz	wreg,f,c
  2048  000D44  D7FE               	bra	u627
  2049  000D46  2E12               	decfsz	??_ena_pulse& (0+255),f,c
  2050  000D48  D7FC               	bra	u627
  2051  000D4A  D000               	nop2	
  2052  000D4C  0012               	return		;funcret
  2053  000D4E                     __end_of_ena_pulse:
  2054                           	opt stack 0
  2055                           tblptru	equ	0xFF8
  2056                           tblptrh	equ	0xFF7
  2057                           tblptrl	equ	0xFF6
  2058                           tablat	equ	0xFF5
  2059                           intcon	equ	0xFF2
  2060                           wreg	equ	0xFE8
  2061                           postinc1	equ	0xFE6
  2062                           fsr1h	equ	0xFE2
  2063                           fsr1l	equ	0xFE1
  2064                           indf2	equ	0xFDF
  2065                           postinc2	equ	0xFDE
  2066                           fsr2h	equ	0xFDA
  2067                           fsr2l	equ	0xFD9
  2068                           status	equ	0xFD8
  2069                           
  2070 ;; *************** function _ADCInit *****************
  2071 ;; Defined at:
  2072 ;;		line 11 in file "ADC.c"
  2073 ;; Parameters:    Size  Location     Type
  2074 ;;		None
  2075 ;; Auto vars:     Size  Location     Type
  2076 ;;		None
  2077 ;; Return value:  Size  Location     Type
  2078 ;;                  1    wreg      void 
  2079 ;; Registers used:
  2080 ;;		wreg, status,2
  2081 ;; Tracked objects:
  2082 ;;		On entry : 0/0
  2083 ;;		On exit  : 0/0
  2084 ;;		Unchanged: 0/0
  2085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2086 ;;      Params:         0       0       0       0       0       0       0       0       0
  2087 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2088 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2089 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2090 ;;Total ram usage:        0 bytes
  2091 ;; Hardware stack levels used:    1
  2092 ;; Hardware stack levels required when called:    1
  2093 ;; This function calls:
  2094 ;;		Nothing
  2095 ;; This function is called by:
  2096 ;;		_main
  2097 ;; This function uses a non-reentrant model
  2098 ;;
  2099                           
  2100                           	psect	text13
  2101  000E46                     __ptext13:
  2102                           	opt stack 0
  2103  000E46                     _ADCInit:
  2104                           	opt stack 29
  2105                           
  2106                           ;ADC.c: 12: TRISAbits.TRISA0 = 1;
  2107                           
  2108                           ;incstack = 0
  2109  000E46  8092               	bsf	3986,0,c	;volatile
  2110                           
  2111                           ;ADC.c: 13: ADCON0 = 0;
  2112  000E48  0E00               	movlw	0
  2113  000E4A  6EC2               	movwf	4034,c	;volatile
  2114                           
  2115                           ;ADC.c: 14: ADCON1 = 0x0e;
  2116  000E4C  0E0E               	movlw	14
  2117  000E4E  6EC1               	movwf	4033,c	;volatile
  2118                           
  2119                           ;ADC.c: 15: ADCON2 = 0xd9;
  2120  000E50  0ED9               	movlw	217
  2121  000E52  6EC0               	movwf	4032,c	;volatile
  2122                           
  2123                           ;ADC.c: 16: ADCON0bits.ADON = 1;
  2124  000E54  80C2               	bsf	4034,0,c	;volatile
  2125  000E56  0012               	return		;funcret
  2126  000E58                     __end_of_ADCInit:
  2127                           	opt stack 0
  2128                           tblptru	equ	0xFF8
  2129                           tblptrh	equ	0xFF7
  2130                           tblptrl	equ	0xFF6
  2131                           tablat	equ	0xFF5
  2132                           intcon	equ	0xFF2
  2133                           wreg	equ	0xFE8
  2134                           postinc1	equ	0xFE6
  2135                           fsr1h	equ	0xFE2
  2136                           fsr1l	equ	0xFE1
  2137                           indf2	equ	0xFDF
  2138                           postinc2	equ	0xFDE
  2139                           fsr2h	equ	0xFDA
  2140                           fsr2l	equ	0xFD9
  2141                           status	equ	0xFD8
  2142                           
  2143 ;; *************** function _INT *****************
  2144 ;; Defined at:
  2145 ;;		line 12 in file "Interrupt.c"
  2146 ;; Parameters:    Size  Location     Type
  2147 ;;		None
  2148 ;; Auto vars:     Size  Location     Type
  2149 ;;		None
  2150 ;; Return value:  Size  Location     Type
  2151 ;;                  1    wreg      void 
  2152 ;; Registers used:
  2153 ;;		wreg, status,2, status,0
  2154 ;; Tracked objects:
  2155 ;;		On entry : 0/0
  2156 ;;		On exit  : 0/0
  2157 ;;		Unchanged: 0/0
  2158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2159 ;;      Params:         0       0       0       0       0       0       0       0       0
  2160 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2161 ;;      Temps:         17       0       0       0       0       0       0       0       0
  2162 ;;      Totals:        17       0       0       0       0       0       0       0       0
  2163 ;;Total ram usage:       17 bytes
  2164 ;; Hardware stack levels used:    1
  2165 ;; This function calls:
  2166 ;;		Nothing
  2167 ;; This function is called by:
  2168 ;;		Interrupt level 1
  2169 ;; This function uses a non-reentrant model
  2170 ;;
  2171                           
  2172                           	psect	intcodelo
  2173  000018                     __pintcodelo:
  2174                           	opt stack 0
  2175  000018                     _INT:
  2176                           	opt stack 27
  2177                           
  2178                           ;incstack = 0
  2179  000018  802C               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  2180  00001A  CFD8 F001          	movff	status,??_INT
  2181  00001E  CFE8 F002          	movff	wreg,??_INT+1
  2182  000022  CFE0 F003          	movff	bsr,??_INT+2
  2183  000026  CFFA F004          	movff	pclath,??_INT+3
  2184  00002A  CFFB F005          	movff	pclatu,??_INT+4
  2185  00002E  CFE9 F006          	movff	fsr0l,??_INT+5
  2186  000032  CFEA F007          	movff	fsr0h,??_INT+6
  2187  000036  CFE1 F008          	movff	fsr1l,??_INT+7
  2188  00003A  CFE2 F009          	movff	fsr1h,??_INT+8
  2189  00003E  CFD9 F00A          	movff	fsr2l,??_INT+9
  2190  000042  CFDA F00B          	movff	fsr2h,??_INT+10
  2191  000046  CFF3 F00C          	movff	prodl,??_INT+11
  2192  00004A  CFF4 F00D          	movff	prodh,??_INT+12
  2193  00004E  CFF6 F00E          	movff	tblptrl,??_INT+13
  2194  000052  CFF7 F00F          	movff	tblptrh,??_INT+14
  2195  000056  CFF8 F010          	movff	tblptru,??_INT+15
  2196  00005A  CFF5 F011          	movff	tablat,??_INT+16
  2197                           
  2198                           ;Interrupt.c: 14: if(INTCONbits.TMR0IF == 1){
  2199  00005E  A4F2               	btfss	intcon,2,c	;volatile
  2200  000060  D011               	goto	i1l18
  2201                           
  2202                           ;Interrupt.c: 15: INTCONbits.TMR0IF = 0;
  2203  000062  94F2               	bcf	intcon,2,c	;volatile
  2204                           
  2205                           ;Interrupt.c: 17: TMR0H = 0xB;
  2206  000064  0E0B               	movlw	11
  2207  000066  6ED7               	movwf	4055,c	;volatile
  2208                           
  2209                           ;Interrupt.c: 18: TMR0L = 0xDC;
  2210  000068  0EDC               	movlw	220
  2211  00006A  6ED6               	movwf	4054,c	;volatile
  2212                           
  2213                           ;Interrupt.c: 20: if(i == 0){
  2214  00006C  502A               	movf	_i,w,c
  2215  00006E  102B               	iorwf	_i+1,w,c
  2216  000070  A4D8               	btfss	status,2,c
  2217  000072  D004               	goto	i1l1019
  2218                           
  2219                           ;Interrupt.c: 21: i = 1;
  2220  000074  0E00               	movlw	0
  2221  000076  6E2B               	movwf	_i+1,c
  2222  000078  0E01               	movlw	1
  2223  00007A  D003               	goto	L2
  2224  00007C                     i1l1019:
  2225                           
  2226                           ;Interrupt.c: 24: else{
  2227                           ;Interrupt.c: 25: i = 0;
  2228  00007C  0E00               	movlw	0
  2229  00007E  6E2B               	movwf	_i+1,c
  2230  000080  0E00               	movlw	0
  2231  000082                     L2:
  2232  000082  6E2A               	movwf	_i,c
  2233  000084                     i1l18:
  2234  000084  C011  FFF5         	movff	??_INT+16,tablat
  2235  000088  C010  FFF8         	movff	??_INT+15,tblptru
  2236  00008C  C00F  FFF7         	movff	??_INT+14,tblptrh
  2237  000090  C00E  FFF6         	movff	??_INT+13,tblptrl
  2238  000094  C00D  FFF4         	movff	??_INT+12,prodh
  2239  000098  C00C  FFF3         	movff	??_INT+11,prodl
  2240  00009C  C00B  FFDA         	movff	??_INT+10,fsr2h
  2241  0000A0  C00A  FFD9         	movff	??_INT+9,fsr2l
  2242  0000A4  C009  FFE2         	movff	??_INT+8,fsr1h
  2243  0000A8  C008  FFE1         	movff	??_INT+7,fsr1l
  2244  0000AC  C007  FFEA         	movff	??_INT+6,fsr0h
  2245  0000B0  C006  FFE9         	movff	??_INT+5,fsr0l
  2246  0000B4  C005  FFFB         	movff	??_INT+4,pclatu
  2247  0000B8  C004  FFFA         	movff	??_INT+3,pclath
  2248  0000BC  C003  FFE0         	movff	??_INT+2,bsr
  2249  0000C0  C002  FFE8         	movff	??_INT+1,wreg
  2250  0000C4  C001  FFD8         	movff	??_INT,status
  2251  0000C8  902C               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  2252  0000CA  0010               	retfie	
  2253  0000CC                     __end_of_INT:
  2254                           	opt stack 0
  2255                           pclatu	equ	0xFFB
  2256                           pclath	equ	0xFFA
  2257                           tblptru	equ	0xFF8
  2258                           tblptrh	equ	0xFF7
  2259                           tblptrl	equ	0xFF6
  2260                           tablat	equ	0xFF5
  2261                           prodh	equ	0xFF4
  2262                           prodl	equ	0xFF3
  2263                           intcon	equ	0xFF2
  2264                           fsr0h	equ	0xFEA
  2265                           fsr0l	equ	0xFE9
  2266                           wreg	equ	0xFE8
  2267                           postinc1	equ	0xFE6
  2268                           fsr1h	equ	0xFE2
  2269                           fsr1l	equ	0xFE1
  2270                           bsr	equ	0xFE0
  2271                           indf2	equ	0xFDF
  2272                           postinc2	equ	0xFDE
  2273                           fsr2h	equ	0xFDA
  2274                           fsr2l	equ	0xFD9
  2275                           status	equ	0xFD8
  2276                           pclatu	equ	0xFFB
  2277                           pclath	equ	0xFFA
  2278                           tblptru	equ	0xFF8
  2279                           tblptrh	equ	0xFF7
  2280                           tblptrl	equ	0xFF6
  2281                           tablat	equ	0xFF5
  2282                           prodh	equ	0xFF4
  2283                           prodl	equ	0xFF3
  2284                           intcon	equ	0xFF2
  2285                           fsr0h	equ	0xFEA
  2286                           fsr0l	equ	0xFE9
  2287                           wreg	equ	0xFE8
  2288                           postinc1	equ	0xFE6
  2289                           fsr1h	equ	0xFE2
  2290                           fsr1l	equ	0xFE1
  2291                           bsr	equ	0xFE0
  2292                           indf2	equ	0xFDF
  2293                           postinc2	equ	0xFDE
  2294                           fsr2h	equ	0xFDA
  2295                           fsr2l	equ	0xFD9
  2296                           status	equ	0xFD8
  2297                           
  2298                           	psect	rparam
  2299  0000                     pclatu	equ	0xFFB
  2300                           pclath	equ	0xFFA
  2301                           tblptru	equ	0xFF8
  2302                           tblptrh	equ	0xFF7
  2303                           tblptrl	equ	0xFF6
  2304                           tablat	equ	0xFF5
  2305                           prodh	equ	0xFF4
  2306                           prodl	equ	0xFF3
  2307                           intcon	equ	0xFF2
  2308                           fsr0h	equ	0xFEA
  2309                           fsr0l	equ	0xFE9
  2310                           wreg	equ	0xFE8
  2311                           postinc1	equ	0xFE6
  2312                           fsr1h	equ	0xFE2
  2313                           fsr1l	equ	0xFE1
  2314                           bsr	equ	0xFE0
  2315                           indf2	equ	0xFDF
  2316                           postinc2	equ	0xFDE
  2317                           fsr2h	equ	0xFDA
  2318                           fsr2l	equ	0xFD9
  2319                           status	equ	0xFD8
  2320                           
  2321                           	psect	temp
  2322  00002C                     btemp:
  2323                           	opt stack 0
  2324  00002C                     	ds	1
  2325  0000                     int$flags	set	btemp
  2326                           pclatu	equ	0xFFB
  2327                           pclath	equ	0xFFA
  2328                           tblptru	equ	0xFF8
  2329                           tblptrh	equ	0xFF7
  2330                           tblptrl	equ	0xFF6
  2331                           tablat	equ	0xFF5
  2332                           prodh	equ	0xFF4
  2333                           prodl	equ	0xFF3
  2334                           intcon	equ	0xFF2
  2335                           fsr0h	equ	0xFEA
  2336                           fsr0l	equ	0xFE9
  2337                           wreg	equ	0xFE8
  2338                           postinc1	equ	0xFE6
  2339                           fsr1h	equ	0xFE2
  2340                           fsr1l	equ	0xFE1
  2341                           bsr	equ	0xFE0
  2342                           indf2	equ	0xFDF
  2343                           postinc2	equ	0xFDE
  2344                           fsr2h	equ	0xFDA
  2345                           fsr2l	equ	0xFD9
  2346                           status	equ	0xFD8


Data Sizes:
    Strings     109
    Constant    0
    Data        0
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     41      43
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    cmpSignal@toc	PTR unsigned char  size(2) Largest target is 2
		 -> main@toc(COMRAM[2]), 

    cmpSignal@pass	PTR unsigned char  size(2) Largest target is 2
		 -> main@pass(COMRAM[2]), 

    readSignal@signal	PTR unsigned char  size(2) Largest target is 2
		 -> main@toc(COMRAM[2]), main@pass(COMRAM[2]), 

    write_LCD@c	PTR unsigned char  size(2) Largest target is 19
		 -> STR_10(CODE[14]), STR_9(CODE[10]), STR_8(CODE[10]), STR_7(CODE[10]), 
		 -> STR_6(CODE[14]), STR_5(CODE[11]), STR_4(CODE[8]), STR_3(CODE[17]), 
		 -> STR_2(CODE[16]), STR_1(CODE[19]), 


Critical Paths under _main in COMRAM

    _main->_readSignal
    _write_LCD->_send_msg
    _send_msg->_ena_pulse
    _set_line->_send_cfg
    _readSignal->_ADCRead
    _init_LCD->_send_cfg
    _clearLCD->_send_cfg
    _send_cfg->_ena_pulse

Critical Paths under _INT in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _INT in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INT in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INT in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INT in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INT in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INT in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INT in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INT in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0    4022
                                             33 COMRAM     8     8      0
                            _ADCInit
                           _clearLCD
                          _cmpSignal
                           _init_LCD
                          _init_UART
                         _init_timer
                         _readSignal
                           _send_msg
                           _set_line
                          _write_LCD
 ---------------------------------------------------------------------------------
 (1) _write_LCD                                            6     4      2     745
                                             20 COMRAM     6     4      2
                           _send_msg
 ---------------------------------------------------------------------------------
 (2) _send_msg                                             2     2      0      15
                                             18 COMRAM     2     2      0
                          _ena_pulse
 ---------------------------------------------------------------------------------
 (1) _set_line                                             5     1      4    1257
                                             20 COMRAM     5     1      4
                           _send_cfg
 ---------------------------------------------------------------------------------
 (1) _readSignal                                          12     8      4    1207
                                             21 COMRAM    12     8      4
                            _ADCRead
 ---------------------------------------------------------------------------------
 (2) _ADCRead                                              4     2      2      23
                                             17 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _init_timer                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_UART                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_LCD                                             0     0      0      15
                           _send_cfg
 ---------------------------------------------------------------------------------
 (1) _cmpSignal                                            6     2      4     216
                                             17 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _clearLCD                                             0     0      0      15
                           _send_cfg
 ---------------------------------------------------------------------------------
 (2) _send_cfg                                             2     2      0      15
                                             18 COMRAM     2     2      0
                          _ena_pulse
 ---------------------------------------------------------------------------------
 (3) _ena_pulse                                            1     1      0       0
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADCInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INT                                                 17    17      0       0
                                              0 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCInit
   _clearLCD
     _send_cfg
       _ena_pulse
   _cmpSignal
   _init_LCD
     _send_cfg
       _ena_pulse
   _init_UART
   _init_timer
   _readSignal
     _ADCRead
   _send_msg
     _ena_pulse
   _set_line
     _send_cfg
       _ena_pulse
   _write_LCD
     _send_msg
       _ena_pulse

 _INT (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     29      2B       1       45.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      2B      20        0.0%
DATA                 0      0      2B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Fri Jun 30 17:31:32 2017

                      _i 002A              __CFG_BOR$ON 000000                       bsr 000FE0  
            __CFG_BORV$3 000000             __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000  
           __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000                      l200 0C6A  
                    l189 0E06             __CFG_CPB$OFF 000000                      _INT 0018  
                    u350 0C1E             __CFG_CPD$OFF 000000                      u507 08F6  
                    u364 0C2E                      u365 0C2A                      u517 09EA  
                    u607 0D1E                      u527 0A24                      u617 0D30  
                    u537 0B48                      u627 0D42                      u547 0B64  
                    u557 0BC2                      u567 0D5C                      u577 0D70  
                    u587 0C44                      u597 0DDC          __end_of_ADCInit 0E58  
        __end_of_ADCRead 0E1C                      wreg 000FE8             __CFG_FOSC$HS 000000  
           __CFG_LVP$OFF 000000                     ?_INT 0001             __CFG_WDT$OFF 000000  
                   l1211 0CD6                     l1221 0DF6                     l1231 0BF6  
                   l1215 0CF6                     l1303 094C                     l1311 0984  
                   l1233 0C04                     l1401 0BD0                     l1313 0994  
                   l1235 0C0E                     l1243 0C52                     l1307 096C  
                   l1309 0980                     l1255 0CC2                     l1239 0C3E  
                   l1351 0A82                     l1327 09F6                     l1361 0ACA  
                   l1355 0AA2                     l1347 0A64                     l1339 0A3A  
                   l1291 0904                     l1357 0AB6                     l1359 0ABA  
                   l1299 092E                     l1389 0B74                     STR_1 0801  
                   STR_2 0825                     STR_3 0814                     STR_4 0866  
                   STR_5 0851                     STR_6 0835                     STR_7 085C  
                   STR_8 0847                     STR_9 085C                     _BRGH 007D62  
                   _CREN 007D5C                     i1l18 0084                     _RCIF 007CF5  
                   _SPEN 007D5F                     _TRMT 007D61                     _TXEN 007D65  
                   _SYNC 007D64                     _main 0870                     fsr0h 000FEA  
                   fsr1h 000FE2                     fsr2h 000FDA                     fsr0l 000FE9  
                   indf2 000FDF                     fsr1l 000FE1                     fsr2l 000FD9  
                   btemp 002C                     prodh 000FF4                     prodl 000FF3  
                   start 00CC            __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000  
           ___param_bank 000000                    ??_INT 0001            __CFG_PLLDIV$1 000000  
         __CFG_CCP2MX$ON 000000                    ?_main 0001                    _ADRES 000FC3  
                  STR_10 0843                    _RCREG 000FAE                    _TMR0H 000FD7  
                  _TMR0L 000FD6                    _SPBRG 000FAF                    _PORTD 000F83  
          __CFG_USBDIV$1 000000                    _TRISB 000F93                    _TRISD 000F95  
                  _TRISE 000F96                    _TXREG 000FAD            __CFG_PWRT$OFF 000000  
          __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000  
          __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000  
         __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000  
          __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000  
         __CFG_EBTRB$OFF 000000                    main@i 0028                    pclath 000FFA  
                  tablat 000FF5                    status 000FD8           __CFG_ICPRT$OFF 000000  
         __CFG_PBADEN$ON 000000          __initialization 0E1C             __end_of_main 0BDE  
              ??_ADCInit 0012                ??_ADCRead 0014                   ??_main 0022  
          __activetblptr 000001                   _ADCON0 000FC2                   _ADCON1 000FC1  
                 _ADCON2 000FC0                   i1l1019 007C                   _TRISC6 007CA6  
                 _TRISC7 007CA7         __end_of_clearLCD 0E60           __CFG_XINST$OFF 000000  
         __CFG_STVREN$ON 000000              readSignal@i 001E              readSignal@j 0020  
       __end_of_init_LCD 0DCA         __end_of_send_cfg 0DE8         __end_of_send_msg 0D7E  
       __end_of_set_line 0E04             __mediumconst 0000                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8               __accesstop 0060  
__end_of__initialization 0E20            ___rparam_used 000001           __pcstackCOMRAM 0001  
     __size_of_cmpSignal 004C       __size_of_ena_pulse 0038       __size_of_init_UART 0014  
                _ADCInit 0E46                  _ADCRead 0E04             ADCRead@value 0014  
              ?_clearLCD 0001              send_cfg@cmd 0014                ?_init_LCD 0001  
        __CFG_VREGEN$OFF 000000              send_msg@msg 0014       __size_of_write_LCD 004A  
      __end_of_cmpSignal 0CCC                ?_send_cfg 0001                  __Hparam 0000  
              ?_send_msg 0001        __end_of_ena_pulse 0D4E                  __Lparam 0000  
              ?_set_line 0015               _readSignal 0BDE             __psmallconst 0800  
                __pcinit 0E1C               _init_timer 0D7E                  __ramtop 0800  
                __ptext0 0870                  __ptext1 0CCC                  __ptext2 0D4E  
                __ptext3 0DE8                  __ptext4 0BDE                  __ptext5 0E04  
                __ptext6 0D7E                  __ptext7 0E32                  __ptext8 0DA4  
                __ptext9 0C80        __end_of_init_UART 0E46                _T0CONbits 000FD5  
           __size_of_INT 00B4               ??_clearLCD 0015              set_line@pos 0017  
                main@toc 0026     end_of_initialization 0E20               ??_init_LCD 0015  
             ??_send_cfg 0013               ??_send_msg 0013               ??_set_line 0019  
         set_line@cursor 0019                  postinc1 000FE6                  postinc2 000FDE  
              _PORTBbits 000F81                _PORTCbits 000F82                _PORTEbits 000F84  
      __end_of_write_LCD 0D16                _TRISAbits 000F92                _TRISBbits 000F93  
              _TRISCbits 000F94              ?_readSignal 0016              ?_init_timer 0001  
    start_initialization 0E1C              __end_of_INT 00CC         __CFG_LPT1OSC$OFF 000000  
               ?_ADCInit 0001                 ?_ADCRead 0012              __pbssCOMRAM 002A  
      __size_of_clearLCD 0008      __size_of_readSignal 00A2      __size_of_init_timer 0026  
      __size_of_init_LCD 0026                _cmpSignal 0C80        __size_of_send_cfg 001E  
      __size_of_send_msg 0030        __size_of_set_line 001C                _ena_pulse 0D16  
            __pintcodelo 0018              __smallconst 0800         readSignal@limite 001C  
       readSignal@signal 0016                _init_UART 0E32         __CFG_WDTPS$32768 000000  
             ?_cmpSignal 0012               ?_ena_pulse 0001            cmpSignal@pass 0012  
       __size_of_ADCInit 0012         __size_of_ADCRead 0018               _ADCON0bits 000FC2  
             ?_init_UART 0001                _write_LCD 0CCC                 __Hrparam 0000  
               __Lrparam 0000             __Lsmallconst 0800             ??_readSignal 001A  
           ??_init_timer 0012                 _clearLCD 0E58               ?_write_LCD 0015  
               __ptext10 0E58                 __ptext11 0DCA                 __ptext12 0D16  
               __ptext13 0E46            readSignal@pos 0018                 _init_LCD 0DA4  
     __end_of_readSignal 0C80            __size_of_main 036E       __end_of_init_timer 0DA4  
               _send_cfg 0DCA                 _send_msg 0D4E               write_LCD@c 0015  
             write_LCD@i 0019                 _set_line 0DE8             set_line@line 0015  
            ??_cmpSignal 0016                 int$flags 002C             cmpSignal@toc 0014  
            ??_ena_pulse 0012                 main@pass 0024    __CFG_CPUDIV$OSC1_PLL2 000000  
             _INTCONbits 000FF2              ??_init_UART 0012                 intlevel1 0000  
            ??_write_LCD 0017  
