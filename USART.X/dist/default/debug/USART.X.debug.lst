

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Tue Jun  6 14:07:16 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    21                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    22                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    23                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    24  0000                     
    25                           ; Version 1.41
    26                           ; Generated 25/01/2017 GMT
    27                           ; 
    28                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    29                           ; All rights reserved.
    30                           ; 
    31                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    32                           ; 
    33                           ; Redistribution and use in source and binary forms, with or without modification, are
    34                           ; permitted provided that the following conditions are met:
    35                           ; 
    36                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    37                           ;        conditions and the following disclaimer.
    38                           ; 
    39                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    40                           ;        of conditions and the following disclaimer in the documentation and/or other
    41                           ;        materials provided with the distribution.
    42                           ; 
    43                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    44                           ;        software without specific prior written permission.
    45                           ; 
    46                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    47                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    48                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    49                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    50                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    51                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    52                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    53                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    54                           ; 
    55                           ; 
    56                           ; Code-generator required, PIC18F4550 Definitions
    57                           ; 
    58                           ; SFR Addresses
    59  0000                     _RCREG	set	4014
    60  0000                     _TXREG	set	4013
    61  0000                     _SPBRG	set	4015
    62  0000                     _TRISE	set	3990
    63  0000                     _PORTEbits	set	3972
    64  0000                     _T0CONbits	set	4053
    65  0000                     _TRISD	set	3989
    66  0000                     _PORTD	set	3971
    67  0000                     _TMR0L	set	4054
    68  0000                     _TMR0H	set	4055
    69  0000                     _INTCONbits	set	4082
    70  0000                     _RCIF	set	31989
    71  0000                     _TRMT	set	32097
    72  0000                     _TXEN	set	32101
    73  0000                     _CREN	set	32092
    74  0000                     _TRISC6	set	31910
    75  0000                     _TRISC7	set	31911
    76  0000                     _SPEN	set	32095
    77  0000                     _SYNC	set	32100
    78  0000                     _BRGH	set	32098
    79                           
    80                           	psect	smallconst
    81  000800                     __psmallconst:
    82                           	opt stack 0
    83  000800  00                 	db	0
    84  000801                     STR_1:
    85  000801  4E                 	db	78	;'N'
    86  000802  41                 	db	65	;'A'
    87  000803  4F                 	db	79	;'O'
    88  000804  20                 	db	32
    89  000805  46                 	db	70	;'F'
    90  000806  49                 	db	73	;'I'
    91  000807  51                 	db	81	;'Q'
    92  000808  55                 	db	85	;'U'
    93  000809  45                 	db	69	;'E'
    94  00080A  4D                 	db	77	;'M'
    95  00080B  20                 	db	32
    96  00080C  44                 	db	68	;'D'
    97  00080D  45                 	db	69	;'E'
    98  00080E  20                 	db	32
    99  00080F  41                 	db	65	;'A'
   100  000810  46                 	db	70	;'F'
   101  000811  00                 	db	0
   102                           
   103                           ; #config settings
   104  000812  00                 	db	0	; dummy byte at the end
   105  0000                     
   106                           	psect	cinit
   107  00094A                     __pcinit:
   108                           	opt stack 0
   109  00094A                     start_initialization:
   110                           	opt stack 0
   111  00094A                     __initialization:
   112                           	opt stack 0
   113                           
   114                           ; Clear objects allocated to COMRAM (2 bytes)
   115  00094A  6A1B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   116  00094C  6A1A               	clrf	__pbssCOMRAM& (0+255),c
   117  00094E                     end_of_initialization:
   118                           	opt stack 0
   119  00094E                     __end_of__initialization:
   120                           	opt stack 0
   121  00094E  901C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   122  000950  921C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   123  000952  0E00               	movlw	low (__Lsmallconst shr (0+16))
   124  000954  6EF8               	movwf	tblptru,c
   125  000956  0E08               	movlw	high __Lsmallconst
   126  000958  6EF7               	movwf	tblptrh,c
   127  00095A  0100               	movlb	0
   128  00095C  EF2F  F004         	goto	_main	;jump to C main() function
   129                           tblptru	equ	0xFF8
   130                           tblptrh	equ	0xFF7
   131                           
   132                           	psect	bssCOMRAM
   133  00001A                     __pbssCOMRAM:
   134                           	opt stack 0
   135  00001A                     _i:
   136                           	opt stack 0
   137  00001A                     	ds	2
   138                           tblptru	equ	0xFF8
   139                           tblptrh	equ	0xFF7
   140                           
   141                           	psect	cstackCOMRAM
   142  000001                     __pcstackCOMRAM:
   143                           	opt stack 0
   144  000001                     ??_INT:
   145  000001                     
   146                           ; 1 bytes @ 0x0
   147  000001                     	ds	17
   148  000012                     ??_ena_pulse:
   149                           
   150                           ; 1 bytes @ 0x11
   151  000012                     	ds	1
   152  000013                     send_cfg@cmd:
   153                           	opt stack 0
   154  000013                     send_msg@msg:
   155                           	opt stack 0
   156                           
   157                           ; 1 bytes @ 0x12
   158  000013                     	ds	1
   159  000014                     write_LCD@c:
   160                           	opt stack 0
   161  000014                     set_line@line:
   162                           	opt stack 0
   163                           
   164                           ; 2 bytes @ 0x13
   165  000014                     	ds	2
   166  000016                     ??_write_LCD:
   167  000016                     set_line@pos:
   168                           	opt stack 0
   169                           
   170                           ; 2 bytes @ 0x15
   171  000016                     	ds	2
   172  000018                     set_line@cursor:
   173                           	opt stack 0
   174  000018                     write_LCD@j:
   175                           	opt stack 0
   176                           
   177                           ; 2 bytes @ 0x17
   178  000018                     	ds	2
   179  00001A                     tblptru	equ	0xFF8
   180                           tblptrh	equ	0xFF7
   181                           
   182                           ; 1 bytes @ 0x19
   183 ;;
   184 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   185 ;;
   186 ;; *************** function _main *****************
   187 ;; Defined at:
   188 ;;		line 83 in file "main.c"
   189 ;; Parameters:    Size  Location     Type
   190 ;;		None
   191 ;; Auto vars:     Size  Location     Type
   192 ;;		None
   193 ;; Return value:  Size  Location     Type
   194 ;;                  1    wreg      void 
   195 ;; Registers used:
   196 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   197 ;; Tracked objects:
   198 ;;		On entry : 0/0
   199 ;;		On exit  : 0/0
   200 ;;		Unchanged: 0/0
   201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   202 ;;      Params:         0       0       0       0       0       0       0       0       0
   203 ;;      Locals:         0       0       0       0       0       0       0       0       0
   204 ;;      Temps:          0       0       0       0       0       0       0       0       0
   205 ;;      Totals:         0       0       0       0       0       0       0       0       0
   206 ;;Total ram usage:        0 bytes
   207 ;; Hardware stack levels required when called:    4
   208 ;; This function calls:
   209 ;;		_UART_Data_Ready
   210 ;;		_UART_Read
   211 ;;		_init_LCD
   212 ;;		_init_UART
   213 ;;		_init_timer
   214 ;;		_set_line
   215 ;;		_write_LCD
   216 ;; This function is called by:
   217 ;;		Startup code after reset
   218 ;; This function uses a non-reentrant model
   219 ;;
   220                           
   221                           	psect	text0
   222  00085E                     __ptext0:
   223                           	opt stack 0
   224  00085E                     _main:
   225                           	opt stack 27
   226                           
   227                           ;main.c: 85: TRISD = 0x00;
   228                           
   229                           ;incstack = 0
   230  00085E  0E00               	movlw	0
   231  000860  6E95               	movwf	3989,c	;volatile
   232                           
   233                           ;main.c: 86: init_timer();
   234  000862  EC6E  F004         	call	_init_timer	;wreg free
   235                           
   236                           ;main.c: 87: init_LCD();
   237  000866  EC93  F004         	call	_init_LCD	;wreg free
   238                           
   239                           ;main.c: 88: init_UART();
   240  00086A  ECB0  F004         	call	_init_UART	;wreg free
   241                           
   242                           ;main.c: 90: set_line(0, 0);
   243  00086E  0E00               	movlw	0
   244  000870  6E15               	movwf	set_line@line+1,c
   245  000872  0E00               	movlw	0
   246  000874  6E14               	movwf	set_line@line,c
   247  000876  0E00               	movlw	0
   248  000878  6E17               	movwf	set_line@pos+1,c
   249  00087A  0E00               	movlw	0
   250  00087C  6E16               	movwf	set_line@pos,c
   251  00087E  EC81  F004         	call	_set_line	;wreg free
   252                           
   253                           ;main.c: 91: write_LCD("NAO FIQUEM DE AF");
   254  000882  0E01               	movlw	low STR_1
   255  000884  6E14               	movwf	write_LCD@c,c
   256  000886  0E08               	movlw	high STR_1
   257  000888  6E15               	movwf	write_LCD@c+1,c
   258  00088A  EC0A  F004         	call	_write_LCD	;wreg free
   259                           
   260                           ;main.c: 93: PORTD = 0;
   261  00088E  0E00               	movlw	0
   262  000890  D007               	goto	L1
   263  000892                     l936:
   264                           
   265                           ;main.c: 96: if(UART_Data_Ready())
   266  000892  ECCC  F004         	call	_UART_Data_Ready	;wreg free
   267  000896  0900               	iorlw	0
   268  000898  B4D8               	btfsc	status,2,c
   269  00089A  D7FB               	goto	l936
   270                           
   271                           ;main.c: 97: PORTD = UART_Read();
   272  00089C  ECC8  F004         	call	_UART_Read	;wreg free
   273  0008A0                     L1:
   274  0008A0  6E83               	movwf	3971,c	;volatile
   275                           
   276                           ;main.c: 98: }while(1);
   277  0008A2  D7F7               	goto	l936
   278  0008A4                     __end_of_main:
   279                           	opt stack 0
   280                           tblptru	equ	0xFF8
   281                           tblptrh	equ	0xFF7
   282                           status	equ	0xFD8
   283                           
   284 ;; *************** function _write_LCD *****************
   285 ;; Defined at:
   286 ;;		line 49 in file "LCD.c"
   287 ;; Parameters:    Size  Location     Type
   288 ;;  c               2   19[COMRAM] PTR unsigned char 
   289 ;;		 -> STR_1(17), 
   290 ;; Auto vars:     Size  Location     Type
   291 ;;  j               2   23[COMRAM] int 
   292 ;; Return value:  Size  Location     Type
   293 ;;                  1    wreg      void 
   294 ;; Registers used:
   295 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   296 ;; Tracked objects:
   297 ;;		On entry : 0/0
   298 ;;		On exit  : 0/0
   299 ;;		Unchanged: 0/0
   300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   301 ;;      Params:         2       0       0       0       0       0       0       0       0
   302 ;;      Locals:         2       0       0       0       0       0       0       0       0
   303 ;;      Temps:          2       0       0       0       0       0       0       0       0
   304 ;;      Totals:         6       0       0       0       0       0       0       0       0
   305 ;;Total ram usage:        6 bytes
   306 ;; Hardware stack levels used:    1
   307 ;; Hardware stack levels required when called:    3
   308 ;; This function calls:
   309 ;;		_send_msg
   310 ;; This function is called by:
   311 ;;		_main
   312 ;; This function uses a non-reentrant model
   313 ;;
   314                           
   315                           	psect	text1
   316  000814                     __ptext1:
   317                           	opt stack 0
   318  000814                     _write_LCD:
   319                           	opt stack 27
   320                           
   321                           ;LCD.c: 51: int j = 0;
   322                           
   323                           ;incstack = 0
   324  000814  0E00               	movlw	0
   325  000816  6E19               	movwf	write_LCD@j+1,c
   326  000818  0E00               	movlw	0
   327  00081A  6E18               	movwf	write_LCD@j,c
   328                           
   329                           ;LCD.c: 52: for(; c[j] != '\0'; j++)
   330  00081C  D010               	goto	l910
   331  00081E                     l906:
   332                           
   333                           ;LCD.c: 53: send_msg(c[j]);
   334  00081E  5018               	movf	write_LCD@j,w,c
   335  000820  2414               	addwf	write_LCD@c,w,c
   336  000822  6E16               	movwf	??_write_LCD& (0+255),c
   337  000824  5019               	movf	write_LCD@j+1,w,c
   338  000826  2015               	addwfc	write_LCD@c+1,w,c
   339  000828  6E17               	movwf	(??_write_LCD+1)& (0+255),c
   340  00082A  C016  FFF6         	movff	??_write_LCD,tblptrl
   341  00082E  C017  FFF7         	movff	??_write_LCD+1,tblptrh
   342  000832                     	if	0	;tblptru may be non-zero
   343  000832                     	endif
   344  000832                     	if	0	;tblptru may be non-zero
   345  000832                     	endif
   346  000832  0008               	tblrd		*
   347  000834  50F5               	movf	tablat,w,c
   348  000836  ECBA  F004         	call	_send_msg
   349  00083A  4A18               	infsnz	write_LCD@j,f,c
   350  00083C  2A19               	incf	write_LCD@j+1,f,c
   351  00083E                     l910:
   352  00083E  5018               	movf	write_LCD@j,w,c
   353  000840  2414               	addwf	write_LCD@c,w,c
   354  000842  6E16               	movwf	??_write_LCD& (0+255),c
   355  000844  5019               	movf	write_LCD@j+1,w,c
   356  000846  2015               	addwfc	write_LCD@c+1,w,c
   357  000848  6E17               	movwf	(??_write_LCD+1)& (0+255),c
   358  00084A  C016  FFF6         	movff	??_write_LCD,tblptrl
   359  00084E  C017  FFF7         	movff	??_write_LCD+1,tblptrh
   360  000852                     	if	0	;tblptru may be non-zero
   361  000852                     	endif
   362  000852                     	if	0	;tblptru may be non-zero
   363  000852                     	endif
   364  000852  0008               	tblrd		*
   365  000854  50F5               	movf	tablat,w,c
   366  000856  0900               	iorlw	0
   367  000858  B4D8               	btfsc	status,2,c
   368  00085A  0012               	return	
   369  00085C  D7E0               	goto	l906
   370  00085E                     __end_of_write_LCD:
   371                           	opt stack 0
   372                           tblptru	equ	0xFF8
   373                           tblptrh	equ	0xFF7
   374                           tblptrl	equ	0xFF6
   375                           tablat	equ	0xFF5
   376                           status	equ	0xFD8
   377                           
   378 ;; *************** function _send_msg *****************
   379 ;; Defined at:
   380 ;;		line 30 in file "LCD.c"
   381 ;; Parameters:    Size  Location     Type
   382 ;;  msg             1    wreg     unsigned char 
   383 ;; Auto vars:     Size  Location     Type
   384 ;;  msg             1   18[COMRAM] unsigned char 
   385 ;; Return value:  Size  Location     Type
   386 ;;                  1    wreg      void 
   387 ;; Registers used:
   388 ;;		wreg, cstack
   389 ;; Tracked objects:
   390 ;;		On entry : 0/0
   391 ;;		On exit  : 0/0
   392 ;;		Unchanged: 0/0
   393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   394 ;;      Params:         0       0       0       0       0       0       0       0       0
   395 ;;      Locals:         1       0       0       0       0       0       0       0       0
   396 ;;      Temps:          0       0       0       0       0       0       0       0       0
   397 ;;      Totals:         1       0       0       0       0       0       0       0       0
   398 ;;Total ram usage:        1 bytes
   399 ;; Hardware stack levels used:    1
   400 ;; Hardware stack levels required when called:    2
   401 ;; This function calls:
   402 ;;		_ena_pulse
   403 ;; This function is called by:
   404 ;;		_write_LCD
   405 ;; This function uses a non-reentrant model
   406 ;;
   407                           
   408                           	psect	text2
   409  000974                     __ptext2:
   410                           	opt stack 0
   411  000974                     _send_msg:
   412                           	opt stack 27
   413                           
   414                           ;incstack = 0
   415                           ;send_msg@msg stored from wreg
   416  000974  6E13               	movwf	send_msg@msg,c
   417                           
   418                           ;LCD.c: 32: PORTD = msg;
   419  000976  C013  FF83         	movff	send_msg@msg,3971	;volatile
   420                           
   421                           ;LCD.c: 33: PORTEbits.RE2 = 1;
   422  00097A  8484               	bsf	3972,2,c	;volatile
   423                           
   424                           ;LCD.c: 34: ena_pulse();
   425  00097C  EC52  F004         	call	_ena_pulse	;wreg free
   426  000980  0012               	return		;funcret
   427  000982                     __end_of_send_msg:
   428                           	opt stack 0
   429                           tblptru	equ	0xFF8
   430                           tblptrh	equ	0xFF7
   431                           tblptrl	equ	0xFF6
   432                           tablat	equ	0xFF5
   433                           status	equ	0xFD8
   434                           
   435 ;; *************** function _set_line *****************
   436 ;; Defined at:
   437 ;;		line 56 in file "LCD.c"
   438 ;; Parameters:    Size  Location     Type
   439 ;;  line            2   19[COMRAM] int 
   440 ;;  pos             2   21[COMRAM] int 
   441 ;; Auto vars:     Size  Location     Type
   442 ;;  cursor          1   23[COMRAM] unsigned char 
   443 ;; Return value:  Size  Location     Type
   444 ;;                  1    wreg      void 
   445 ;; Registers used:
   446 ;;		wreg, status,2, status,0, cstack
   447 ;; Tracked objects:
   448 ;;		On entry : 0/0
   449 ;;		On exit  : 0/0
   450 ;;		Unchanged: 0/0
   451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   452 ;;      Params:         4       0       0       0       0       0       0       0       0
   453 ;;      Locals:         1       0       0       0       0       0       0       0       0
   454 ;;      Temps:          0       0       0       0       0       0       0       0       0
   455 ;;      Totals:         5       0       0       0       0       0       0       0       0
   456 ;;Total ram usage:        5 bytes
   457 ;; Hardware stack levels used:    1
   458 ;; Hardware stack levels required when called:    3
   459 ;; This function calls:
   460 ;;		_send_cfg
   461 ;; This function is called by:
   462 ;;		_main
   463 ;; This function uses a non-reentrant model
   464 ;;
   465                           
   466                           	psect	text3
   467  000902                     __ptext3:
   468                           	opt stack 0
   469  000902                     _set_line:
   470                           	opt stack 27
   471                           
   472                           ;LCD.c: 58: char cursor;
   473                           ;LCD.c: 59: if(line == 0)
   474                           
   475                           ;incstack = 0
   476  000902  5014               	movf	set_line@line,w,c
   477  000904  1015               	iorwf	set_line@line+1,w,c
   478  000906  A4D8               	btfss	status,2,c
   479  000908  D003               	goto	l916
   480                           
   481                           ;LCD.c: 60: cursor = 0x80 + pos;
   482  00090A  5016               	movf	set_line@pos,w,c
   483  00090C  0F80               	addlw	128
   484  00090E  D006               	goto	L2
   485  000910                     l916:
   486                           
   487                           ;LCD.c: 61: else if(line == 1)
   488  000910  0414               	decf	set_line@line,w,c
   489  000912  1015               	iorwf	set_line@line+1,w,c
   490  000914  A4D8               	btfss	status,2,c
   491  000916  D003               	goto	l920
   492                           
   493                           ;LCD.c: 62: cursor = 0xC0 + pos;
   494  000918  5016               	movf	set_line@pos,w,c
   495  00091A  0FC0               	addlw	192
   496  00091C                     L2:
   497  00091C  6E18               	movwf	set_line@cursor,c
   498  00091E                     l920:
   499                           
   500                           ;LCD.c: 64: send_cfg(cursor);
   501  00091E  5018               	movf	set_line@cursor,w,c
   502  000920  ECC1  F004         	call	_send_cfg
   503  000924  0012               	return		;funcret
   504  000926                     __end_of_set_line:
   505                           	opt stack 0
   506                           tblptru	equ	0xFF8
   507                           tblptrh	equ	0xFF7
   508                           tblptrl	equ	0xFF6
   509                           tablat	equ	0xFF5
   510                           status	equ	0xFD8
   511                           
   512 ;; *************** function _init_timer *****************
   513 ;; Defined at:
   514 ;;		line 30 in file "Interrupt.c"
   515 ;; Parameters:    Size  Location     Type
   516 ;;		None
   517 ;; Auto vars:     Size  Location     Type
   518 ;;		None
   519 ;; Return value:  Size  Location     Type
   520 ;;                  1    wreg      void 
   521 ;; Registers used:
   522 ;;		wreg, status,2
   523 ;; Tracked objects:
   524 ;;		On entry : 0/0
   525 ;;		On exit  : 0/0
   526 ;;		Unchanged: 0/0
   527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   528 ;;      Params:         0       0       0       0       0       0       0       0       0
   529 ;;      Locals:         0       0       0       0       0       0       0       0       0
   530 ;;      Temps:          0       0       0       0       0       0       0       0       0
   531 ;;      Totals:         0       0       0       0       0       0       0       0       0
   532 ;;Total ram usage:        0 bytes
   533 ;; Hardware stack levels used:    1
   534 ;; Hardware stack levels required when called:    1
   535 ;; This function calls:
   536 ;;		Nothing
   537 ;; This function is called by:
   538 ;;		_main
   539 ;; This function uses a non-reentrant model
   540 ;;
   541                           
   542                           	psect	text4
   543  0008DC                     __ptext4:
   544                           	opt stack 0
   545  0008DC                     _init_timer:
   546                           	opt stack 29
   547                           
   548                           ;Interrupt.c: 32: TRISD = 0x00;
   549                           
   550                           ;incstack = 0
   551  0008DC  0E00               	movlw	0
   552  0008DE  6E95               	movwf	3989,c	;volatile
   553                           
   554                           ;Interrupt.c: 34: INTCONbits.GIE = 0;
   555  0008E0  9EF2               	bcf	intcon,7,c	;volatile
   556                           
   557                           ;Interrupt.c: 35: INTCONbits.PEIE = 1;
   558  0008E2  8CF2               	bsf	intcon,6,c	;volatile
   559                           
   560                           ;Interrupt.c: 36: INTCONbits.TMR0IF = 0x00;
   561  0008E4  94F2               	bcf	intcon,2,c	;volatile
   562                           
   563                           ;Interrupt.c: 37: INTCONbits.TMR0IE = 1;
   564  0008E6  8AF2               	bsf	intcon,5,c	;volatile
   565                           
   566                           ;Interrupt.c: 40: T0CONbits.T08BIT = 0;
   567  0008E8  9CD5               	bcf	4053,6,c	;volatile
   568                           
   569                           ;Interrupt.c: 41: T0CONbits.T0CS = 0;
   570  0008EA  9AD5               	bcf	4053,5,c	;volatile
   571                           
   572                           ;Interrupt.c: 42: T0CONbits.PSA = 0;
   573  0008EC  96D5               	bcf	4053,3,c	;volatile
   574                           
   575                           ;Interrupt.c: 43: T0CONbits.T0PS2 = 1;
   576  0008EE  84D5               	bsf	4053,2,c	;volatile
   577                           
   578                           ;Interrupt.c: 44: T0CONbits.T0PS1 = 0;
   579  0008F0  92D5               	bcf	4053,1,c	;volatile
   580                           
   581                           ;Interrupt.c: 45: T0CONbits.T0PS0 = 0;
   582  0008F2  90D5               	bcf	4053,0,c	;volatile
   583                           
   584                           ;Interrupt.c: 46: TMR0H = 0xB;
   585  0008F4  0E0B               	movlw	11
   586  0008F6  6ED7               	movwf	4055,c	;volatile
   587                           
   588                           ;Interrupt.c: 47: TMR0L = 0xDC;
   589  0008F8  0EDC               	movlw	220
   590  0008FA  6ED6               	movwf	4054,c	;volatile
   591                           
   592                           ;Interrupt.c: 48: T0CONbits.TMR0ON = 1;
   593  0008FC  8ED5               	bsf	4053,7,c	;volatile
   594                           
   595                           ;Interrupt.c: 50: INTCONbits.GIE = 1;
   596  0008FE  8EF2               	bsf	intcon,7,c	;volatile
   597  000900  0012               	return		;funcret
   598  000902                     __end_of_init_timer:
   599                           	opt stack 0
   600                           tblptru	equ	0xFF8
   601                           tblptrh	equ	0xFF7
   602                           tblptrl	equ	0xFF6
   603                           tablat	equ	0xFF5
   604                           intcon	equ	0xFF2
   605                           status	equ	0xFD8
   606                           
   607 ;; *************** function _init_UART *****************
   608 ;; Defined at:
   609 ;;		line 10 in file "USART.c"
   610 ;; Parameters:    Size  Location     Type
   611 ;;		None
   612 ;; Auto vars:     Size  Location     Type
   613 ;;		None
   614 ;; Return value:  Size  Location     Type
   615 ;;                  1    wreg      void 
   616 ;; Registers used:
   617 ;;		wreg, status,2
   618 ;; Tracked objects:
   619 ;;		On entry : 0/0
   620 ;;		On exit  : 0/0
   621 ;;		Unchanged: 0/0
   622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   623 ;;      Params:         0       0       0       0       0       0       0       0       0
   624 ;;      Locals:         0       0       0       0       0       0       0       0       0
   625 ;;      Temps:          0       0       0       0       0       0       0       0       0
   626 ;;      Totals:         0       0       0       0       0       0       0       0       0
   627 ;;Total ram usage:        0 bytes
   628 ;; Hardware stack levels used:    1
   629 ;; Hardware stack levels required when called:    1
   630 ;; This function calls:
   631 ;;		Nothing
   632 ;; This function is called by:
   633 ;;		_main
   634 ;; This function uses a non-reentrant model
   635 ;;
   636                           
   637                           	psect	text5
   638  000960                     __ptext5:
   639                           	opt stack 0
   640  000960                     _init_UART:
   641                           	opt stack 29
   642                           
   643                           ;USART.c: 12: SPBRG = 12;
   644                           
   645                           ;incstack = 0
   646  000960  0E0C               	movlw	12
   647  000962  6EAF               	movwf	4015,c	;volatile
   648                           
   649                           ;USART.c: 13: BRGH = 0;
   650  000964  94AC               	bcf	4012,2,c	;volatile
   651                           
   652                           ;USART.c: 14: SYNC = 0;
   653  000966  98AC               	bcf	4012,4,c	;volatile
   654                           
   655                           ;USART.c: 15: SPEN = 1;
   656  000968  8EAB               	bsf	4011,7,c	;volatile
   657                           
   658                           ;USART.c: 16: TRISC7 = 1;
   659  00096A  8E94               	bsf	3988,7,c	;volatile
   660                           
   661                           ;USART.c: 17: TRISC6 = 1;
   662  00096C  8C94               	bsf	3988,6,c	;volatile
   663                           
   664                           ;USART.c: 18: CREN = 1;
   665  00096E  88AB               	bsf	4011,4,c	;volatile
   666                           
   667                           ;USART.c: 19: TXEN = 1;
   668  000970  8AAC               	bsf	4012,5,c	;volatile
   669  000972  0012               	return		;funcret
   670  000974                     __end_of_init_UART:
   671                           	opt stack 0
   672                           tblptru	equ	0xFF8
   673                           tblptrh	equ	0xFF7
   674                           tblptrl	equ	0xFF6
   675                           tablat	equ	0xFF5
   676                           intcon	equ	0xFF2
   677                           status	equ	0xFD8
   678                           
   679 ;; *************** function _init_LCD *****************
   680 ;; Defined at:
   681 ;;		line 38 in file "LCD.c"
   682 ;; Parameters:    Size  Location     Type
   683 ;;		None
   684 ;; Auto vars:     Size  Location     Type
   685 ;;		None
   686 ;; Return value:  Size  Location     Type
   687 ;;                  1    wreg      void 
   688 ;; Registers used:
   689 ;;		wreg, status,2, cstack
   690 ;; Tracked objects:
   691 ;;		On entry : 0/0
   692 ;;		On exit  : 0/0
   693 ;;		Unchanged: 0/0
   694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   695 ;;      Params:         0       0       0       0       0       0       0       0       0
   696 ;;      Locals:         0       0       0       0       0       0       0       0       0
   697 ;;      Temps:          0       0       0       0       0       0       0       0       0
   698 ;;      Totals:         0       0       0       0       0       0       0       0       0
   699 ;;Total ram usage:        0 bytes
   700 ;; Hardware stack levels used:    1
   701 ;; Hardware stack levels required when called:    3
   702 ;; This function calls:
   703 ;;		_send_cfg
   704 ;; This function is called by:
   705 ;;		_main
   706 ;; This function uses a non-reentrant model
   707 ;;
   708                           
   709                           	psect	text6
   710  000926                     __ptext6:
   711                           	opt stack 0
   712  000926                     _init_LCD:
   713                           	opt stack 27
   714                           
   715                           ;LCD.c: 40: TRISE = 0x00;
   716                           
   717                           ;incstack = 0
   718  000926  0E00               	movlw	0
   719  000928  6E96               	movwf	3990,c	;volatile
   720                           
   721                           ;LCD.c: 42: send_cfg(0x01);
   722  00092A  0E01               	movlw	1
   723  00092C  ECC1  F004         	call	_send_cfg
   724                           
   725                           ;LCD.c: 43: send_cfg(0x38);
   726  000930  0E38               	movlw	56
   727  000932  ECC1  F004         	call	_send_cfg
   728                           
   729                           ;LCD.c: 44: send_cfg(0x80);
   730  000936  0E80               	movlw	128
   731  000938  ECC1  F004         	call	_send_cfg
   732                           
   733                           ;LCD.c: 45: send_cfg(0xF);
   734  00093C  0E0F               	movlw	15
   735  00093E  ECC1  F004         	call	_send_cfg
   736                           
   737                           ;LCD.c: 46: send_cfg(0x01);
   738  000942  0E01               	movlw	1
   739  000944  ECC1  F004         	call	_send_cfg
   740  000948  0012               	return		;funcret
   741  00094A                     __end_of_init_LCD:
   742                           	opt stack 0
   743                           tblptru	equ	0xFF8
   744                           tblptrh	equ	0xFF7
   745                           tblptrl	equ	0xFF6
   746                           tablat	equ	0xFF5
   747                           intcon	equ	0xFF2
   748                           status	equ	0xFD8
   749                           
   750 ;; *************** function _send_cfg *****************
   751 ;; Defined at:
   752 ;;		line 22 in file "LCD.c"
   753 ;; Parameters:    Size  Location     Type
   754 ;;  cmd             1    wreg     unsigned char 
   755 ;; Auto vars:     Size  Location     Type
   756 ;;  cmd             1   18[COMRAM] unsigned char 
   757 ;; Return value:  Size  Location     Type
   758 ;;                  1    wreg      void 
   759 ;; Registers used:
   760 ;;		wreg, cstack
   761 ;; Tracked objects:
   762 ;;		On entry : 0/0
   763 ;;		On exit  : 0/0
   764 ;;		Unchanged: 0/0
   765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   766 ;;      Params:         0       0       0       0       0       0       0       0       0
   767 ;;      Locals:         1       0       0       0       0       0       0       0       0
   768 ;;      Temps:          0       0       0       0       0       0       0       0       0
   769 ;;      Totals:         1       0       0       0       0       0       0       0       0
   770 ;;Total ram usage:        1 bytes
   771 ;; Hardware stack levels used:    1
   772 ;; Hardware stack levels required when called:    2
   773 ;; This function calls:
   774 ;;		_ena_pulse
   775 ;; This function is called by:
   776 ;;		_init_LCD
   777 ;;		_set_line
   778 ;; This function uses a non-reentrant model
   779 ;;
   780                           
   781                           	psect	text7
   782  000982                     __ptext7:
   783                           	opt stack 0
   784  000982                     _send_cfg:
   785                           	opt stack 27
   786                           
   787                           ;incstack = 0
   788                           ;send_cfg@cmd stored from wreg
   789  000982  6E13               	movwf	send_cfg@cmd,c
   790                           
   791                           ;LCD.c: 24: PORTD = cmd;
   792  000984  C013  FF83         	movff	send_cfg@cmd,3971	;volatile
   793                           
   794                           ;LCD.c: 25: PORTEbits.RE2 = 0;
   795  000988  9484               	bcf	3972,2,c	;volatile
   796                           
   797                           ;LCD.c: 26: ena_pulse();
   798  00098A  EC52  F004         	call	_ena_pulse	;wreg free
   799  00098E  0012               	return		;funcret
   800  000990                     __end_of_send_cfg:
   801                           	opt stack 0
   802                           tblptru	equ	0xFF8
   803                           tblptrh	equ	0xFF7
   804                           tblptrl	equ	0xFF6
   805                           tablat	equ	0xFF5
   806                           intcon	equ	0xFF2
   807                           status	equ	0xFD8
   808                           
   809 ;; *************** function _ena_pulse *****************
   810 ;; Defined at:
   811 ;;		line 11 in file "LCD.c"
   812 ;; Parameters:    Size  Location     Type
   813 ;;		None
   814 ;; Auto vars:     Size  Location     Type
   815 ;;		None
   816 ;; Return value:  Size  Location     Type
   817 ;;                  1    wreg      void 
   818 ;; Registers used:
   819 ;;		wreg
   820 ;; Tracked objects:
   821 ;;		On entry : 0/0
   822 ;;		On exit  : 0/0
   823 ;;		Unchanged: 0/0
   824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   825 ;;      Params:         0       0       0       0       0       0       0       0       0
   826 ;;      Locals:         0       0       0       0       0       0       0       0       0
   827 ;;      Temps:          1       0       0       0       0       0       0       0       0
   828 ;;      Totals:         1       0       0       0       0       0       0       0       0
   829 ;;Total ram usage:        1 bytes
   830 ;; Hardware stack levels used:    1
   831 ;; Hardware stack levels required when called:    1
   832 ;; This function calls:
   833 ;;		Nothing
   834 ;; This function is called by:
   835 ;;		_send_cfg
   836 ;;		_send_msg
   837 ;; This function uses a non-reentrant model
   838 ;;
   839                           
   840                           	psect	text8
   841  0008A4                     __ptext8:
   842                           	opt stack 0
   843  0008A4                     _ena_pulse:
   844                           	opt stack 27
   845                           
   846                           ;LCD.c: 13: PORTEbits.RE1 = 0;
   847                           
   848                           ;incstack = 0
   849  0008A4  9284               	bcf	3972,1,c	;volatile
   850                           
   851                           ;LCD.c: 14: _delay((unsigned long)((10)*(8000000/4000.0)));
   852  0008A6  0E1A               	movlw	26
   853  0008A8  6E12               	movwf	??_ena_pulse& (0+255),c
   854  0008AA  0EF8               	movlw	248
   855  0008AC                     u157:
   856  0008AC  2EE8               	decfsz	wreg,f,c
   857  0008AE  D7FE               	bra	u157
   858  0008B0  2E12               	decfsz	??_ena_pulse& (0+255),f,c
   859  0008B2  D7FC               	bra	u157
   860  0008B4  D000               	nop2	
   861                           
   862                           ;LCD.c: 15: PORTEbits.RE1 = 1;
   863  0008B6  8284               	bsf	3972,1,c	;volatile
   864                           
   865                           ;LCD.c: 16: _delay((unsigned long)((10)*(8000000/4000.0)));
   866  0008B8  0E1A               	movlw	26
   867  0008BA  6E12               	movwf	??_ena_pulse& (0+255),c
   868  0008BC  0EF8               	movlw	248
   869  0008BE                     u167:
   870  0008BE  2EE8               	decfsz	wreg,f,c
   871  0008C0  D7FE               	bra	u167
   872  0008C2  2E12               	decfsz	??_ena_pulse& (0+255),f,c
   873  0008C4  D7FC               	bra	u167
   874  0008C6  D000               	nop2	
   875                           
   876                           ;LCD.c: 17: PORTEbits.RE1 = 0;
   877  0008C8  9284               	bcf	3972,1,c	;volatile
   878                           
   879                           ;LCD.c: 18: _delay((unsigned long)((10)*(8000000/4000.0)));
   880  0008CA  0E1A               	movlw	26
   881  0008CC  6E12               	movwf	??_ena_pulse& (0+255),c
   882  0008CE  0EF8               	movlw	248
   883  0008D0                     u177:
   884  0008D0  2EE8               	decfsz	wreg,f,c
   885  0008D2  D7FE               	bra	u177
   886  0008D4  2E12               	decfsz	??_ena_pulse& (0+255),f,c
   887  0008D6  D7FC               	bra	u177
   888  0008D8  D000               	nop2	
   889  0008DA  0012               	return		;funcret
   890  0008DC                     __end_of_ena_pulse:
   891                           	opt stack 0
   892                           tblptru	equ	0xFF8
   893                           tblptrh	equ	0xFF7
   894                           tblptrl	equ	0xFF6
   895                           tablat	equ	0xFF5
   896                           intcon	equ	0xFF2
   897                           wreg	equ	0xFE8
   898                           status	equ	0xFD8
   899                           
   900 ;; *************** function _UART_Read *****************
   901 ;; Defined at:
   902 ;;		line 41 in file "USART.c"
   903 ;; Parameters:    Size  Location     Type
   904 ;;		None
   905 ;; Auto vars:     Size  Location     Type
   906 ;;		None
   907 ;; Return value:  Size  Location     Type
   908 ;;                  1    wreg      unsigned char 
   909 ;; Registers used:
   910 ;;		wreg, status,2
   911 ;; Tracked objects:
   912 ;;		On entry : 0/0
   913 ;;		On exit  : 0/0
   914 ;;		Unchanged: 0/0
   915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   916 ;;      Params:         0       0       0       0       0       0       0       0       0
   917 ;;      Locals:         0       0       0       0       0       0       0       0       0
   918 ;;      Temps:          0       0       0       0       0       0       0       0       0
   919 ;;      Totals:         0       0       0       0       0       0       0       0       0
   920 ;;Total ram usage:        0 bytes
   921 ;; Hardware stack levels used:    1
   922 ;; Hardware stack levels required when called:    1
   923 ;; This function calls:
   924 ;;		Nothing
   925 ;; This function is called by:
   926 ;;		_main
   927 ;;		_UART_Read_Text
   928 ;; This function uses a non-reentrant model
   929 ;;
   930                           
   931                           	psect	text9
   932  000990                     __ptext9:
   933                           	opt stack 0
   934  000990                     _UART_Read:
   935                           	opt stack 29
   936  000990                     l127:
   937  000990  AA9E               	btfss	3998,5,c	;volatile
   938  000992  D7FE               	goto	l127
   939                           
   940                           ;USART.c: 43: return RCREG;
   941  000994  50AE               	movf	4014,w,c	;volatile
   942  000996  0012               	return	
   943  000998                     __end_of_UART_Read:
   944                           	opt stack 0
   945                           tblptru	equ	0xFF8
   946                           tblptrh	equ	0xFF7
   947                           tblptrl	equ	0xFF6
   948                           tablat	equ	0xFF5
   949                           intcon	equ	0xFF2
   950                           wreg	equ	0xFE8
   951                           status	equ	0xFD8
   952                           
   953 ;; *************** function _UART_Data_Ready *****************
   954 ;; Defined at:
   955 ;;		line 37 in file "USART.c"
   956 ;; Parameters:    Size  Location     Type
   957 ;;		None
   958 ;; Auto vars:     Size  Location     Type
   959 ;;		None
   960 ;; Return value:  Size  Location     Type
   961 ;;                  1    wreg      unsigned char 
   962 ;; Registers used:
   963 ;;		wreg
   964 ;; Tracked objects:
   965 ;;		On entry : 0/0
   966 ;;		On exit  : 0/0
   967 ;;		Unchanged: 0/0
   968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   969 ;;      Params:         0       0       0       0       0       0       0       0       0
   970 ;;      Locals:         0       0       0       0       0       0       0       0       0
   971 ;;      Temps:          0       0       0       0       0       0       0       0       0
   972 ;;      Totals:         0       0       0       0       0       0       0       0       0
   973 ;;Total ram usage:        0 bytes
   974 ;; Hardware stack levels used:    1
   975 ;; Hardware stack levels required when called:    1
   976 ;; This function calls:
   977 ;;		Nothing
   978 ;; This function is called by:
   979 ;;		_main
   980 ;; This function uses a non-reentrant model
   981 ;;
   982                           
   983                           	psect	text10
   984  000998                     __ptext10:
   985                           	opt stack 0
   986  000998                     _UART_Data_Ready:
   987                           	opt stack 29
   988                           
   989                           ;USART.c: 38: return RCIF;
   990                           
   991                           ;incstack = 0
   992  000998  0E00               	movlw	0
   993  00099A  BA9E               	btfsc	3998,5,c	;volatile
   994  00099C  0E01               	movlw	1
   995  00099E  0012               	return	
   996  0009A0                     __end_of_UART_Data_Ready:
   997                           	opt stack 0
   998                           tblptru	equ	0xFF8
   999                           tblptrh	equ	0xFF7
  1000                           tblptrl	equ	0xFF6
  1001                           tablat	equ	0xFF5
  1002                           intcon	equ	0xFF2
  1003                           wreg	equ	0xFE8
  1004                           status	equ	0xFD8
  1005                           
  1006 ;; *************** function _INT *****************
  1007 ;; Defined at:
  1008 ;;		line 11 in file "Interrupt.c"
  1009 ;; Parameters:    Size  Location     Type
  1010 ;;		None
  1011 ;; Auto vars:     Size  Location     Type
  1012 ;;		None
  1013 ;; Return value:  Size  Location     Type
  1014 ;;                  1    wreg      void 
  1015 ;; Registers used:
  1016 ;;		wreg, status,2, status,0
  1017 ;; Tracked objects:
  1018 ;;		On entry : 0/0
  1019 ;;		On exit  : 0/0
  1020 ;;		Unchanged: 0/0
  1021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1022 ;;      Params:         0       0       0       0       0       0       0       0       0
  1023 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1024 ;;      Temps:         17       0       0       0       0       0       0       0       0
  1025 ;;      Totals:        17       0       0       0       0       0       0       0       0
  1026 ;;Total ram usage:       17 bytes
  1027 ;; Hardware stack levels used:    1
  1028 ;; This function calls:
  1029 ;;		Nothing
  1030 ;; This function is called by:
  1031 ;;		Interrupt level 1
  1032 ;; This function uses a non-reentrant model
  1033 ;;
  1034                           
  1035                           	psect	intcodelo
  1036  000018                     __pintcodelo:
  1037                           	opt stack 0
  1038  000018                     _INT:
  1039                           	opt stack 27
  1040                           
  1041                           ;incstack = 0
  1042  000018  801C               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  1043  00001A  CFD8 F001          	movff	status,??_INT
  1044  00001E  CFE8 F002          	movff	wreg,??_INT+1
  1045  000022  CFE0 F003          	movff	bsr,??_INT+2
  1046  000026  CFFA F004          	movff	pclath,??_INT+3
  1047  00002A  CFFB F005          	movff	pclatu,??_INT+4
  1048  00002E  CFE9 F006          	movff	fsr0l,??_INT+5
  1049  000032  CFEA F007          	movff	fsr0h,??_INT+6
  1050  000036  CFE1 F008          	movff	fsr1l,??_INT+7
  1051  00003A  CFE2 F009          	movff	fsr1h,??_INT+8
  1052  00003E  CFD9 F00A          	movff	fsr2l,??_INT+9
  1053  000042  CFDA F00B          	movff	fsr2h,??_INT+10
  1054  000046  CFF3 F00C          	movff	prodl,??_INT+11
  1055  00004A  CFF4 F00D          	movff	prodh,??_INT+12
  1056  00004E  CFF6 F00E          	movff	tblptrl,??_INT+13
  1057  000052  CFF7 F00F          	movff	tblptrh,??_INT+14
  1058  000056  CFF8 F010          	movff	tblptru,??_INT+15
  1059  00005A  CFF5 F011          	movff	tablat,??_INT+16
  1060                           
  1061                           ;Interrupt.c: 13: if(INTCONbits.TMR0IF == 1){
  1062  00005E  A4F2               	btfss	intcon,2,c	;volatile
  1063  000060  D015               	goto	i1l20
  1064                           
  1065                           ;Interrupt.c: 14: INTCONbits.TMR0IF = 0;
  1066  000062  94F2               	bcf	intcon,2,c	;volatile
  1067                           
  1068                           ;Interrupt.c: 16: TMR0H = 0xB;
  1069  000064  0E0B               	movlw	11
  1070  000066  6ED7               	movwf	4055,c	;volatile
  1071                           
  1072                           ;Interrupt.c: 17: TMR0L = 0xDC;
  1073  000068  0EDC               	movlw	220
  1074  00006A  6ED6               	movwf	4054,c	;volatile
  1075                           
  1076                           ;Interrupt.c: 19: if(i == 0){
  1077  00006C  501A               	movf	_i,w,c
  1078  00006E  101B               	iorwf	_i+1,w,c
  1079  000070  A4D8               	btfss	status,2,c
  1080  000072  D006               	goto	i1l866
  1081                           
  1082                           ;Interrupt.c: 20: i = 1;
  1083  000074  0E00               	movlw	0
  1084  000076  6E1B               	movwf	_i+1,c
  1085  000078  0E01               	movlw	1
  1086  00007A  6E1A               	movwf	_i,c
  1087                           
  1088                           ;Interrupt.c: 21: PORTD = 0xAA;
  1089  00007C  0EAA               	movlw	170
  1090  00007E  D005               	goto	L3
  1091  000080                     i1l866:
  1092                           
  1093                           ;Interrupt.c: 23: else{
  1094                           ;Interrupt.c: 24: i = 0;
  1095  000080  0E00               	movlw	0
  1096  000082  6E1B               	movwf	_i+1,c
  1097  000084  0E00               	movlw	0
  1098  000086  6E1A               	movwf	_i,c
  1099                           
  1100                           ;Interrupt.c: 25: PORTD = 0x55;
  1101  000088  0E55               	movlw	85
  1102  00008A                     L3:
  1103  00008A  6E83               	movwf	3971,c	;volatile
  1104  00008C                     i1l20:
  1105  00008C  C011  FFF5         	movff	??_INT+16,tablat
  1106  000090  C010  FFF8         	movff	??_INT+15,tblptru
  1107  000094  C00F  FFF7         	movff	??_INT+14,tblptrh
  1108  000098  C00E  FFF6         	movff	??_INT+13,tblptrl
  1109  00009C  C00D  FFF4         	movff	??_INT+12,prodh
  1110  0000A0  C00C  FFF3         	movff	??_INT+11,prodl
  1111  0000A4  C00B  FFDA         	movff	??_INT+10,fsr2h
  1112  0000A8  C00A  FFD9         	movff	??_INT+9,fsr2l
  1113  0000AC  C009  FFE2         	movff	??_INT+8,fsr1h
  1114  0000B0  C008  FFE1         	movff	??_INT+7,fsr1l
  1115  0000B4  C007  FFEA         	movff	??_INT+6,fsr0h
  1116  0000B8  C006  FFE9         	movff	??_INT+5,fsr0l
  1117  0000BC  C005  FFFB         	movff	??_INT+4,pclatu
  1118  0000C0  C004  FFFA         	movff	??_INT+3,pclath
  1119  0000C4  C003  FFE0         	movff	??_INT+2,bsr
  1120  0000C8  C002  FFE8         	movff	??_INT+1,wreg
  1121  0000CC  C001  FFD8         	movff	??_INT,status
  1122  0000D0  901C               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  1123  0000D2  0010               	retfie	
  1124  0000D4                     __end_of_INT:
  1125                           	opt stack 0
  1126                           pclatu	equ	0xFFB
  1127                           pclath	equ	0xFFA
  1128                           tblptru	equ	0xFF8
  1129                           tblptrh	equ	0xFF7
  1130                           tblptrl	equ	0xFF6
  1131                           tablat	equ	0xFF5
  1132                           prodh	equ	0xFF4
  1133                           prodl	equ	0xFF3
  1134                           intcon	equ	0xFF2
  1135                           fsr0h	equ	0xFEA
  1136                           fsr0l	equ	0xFE9
  1137                           wreg	equ	0xFE8
  1138                           fsr1h	equ	0xFE2
  1139                           fsr1l	equ	0xFE1
  1140                           bsr	equ	0xFE0
  1141                           fsr2h	equ	0xFDA
  1142                           fsr2l	equ	0xFD9
  1143                           status	equ	0xFD8
  1144                           pclatu	equ	0xFFB
  1145                           pclath	equ	0xFFA
  1146                           tblptru	equ	0xFF8
  1147                           tblptrh	equ	0xFF7
  1148                           tblptrl	equ	0xFF6
  1149                           tablat	equ	0xFF5
  1150                           prodh	equ	0xFF4
  1151                           prodl	equ	0xFF3
  1152                           intcon	equ	0xFF2
  1153                           fsr0h	equ	0xFEA
  1154                           fsr0l	equ	0xFE9
  1155                           wreg	equ	0xFE8
  1156                           fsr1h	equ	0xFE2
  1157                           fsr1l	equ	0xFE1
  1158                           bsr	equ	0xFE0
  1159                           fsr2h	equ	0xFDA
  1160                           fsr2l	equ	0xFD9
  1161                           status	equ	0xFD8
  1162                           
  1163                           	psect	rparam
  1164  0000                     pclatu	equ	0xFFB
  1165                           pclath	equ	0xFFA
  1166                           tblptru	equ	0xFF8
  1167                           tblptrh	equ	0xFF7
  1168                           tblptrl	equ	0xFF6
  1169                           tablat	equ	0xFF5
  1170                           prodh	equ	0xFF4
  1171                           prodl	equ	0xFF3
  1172                           intcon	equ	0xFF2
  1173                           fsr0h	equ	0xFEA
  1174                           fsr0l	equ	0xFE9
  1175                           wreg	equ	0xFE8
  1176                           fsr1h	equ	0xFE2
  1177                           fsr1l	equ	0xFE1
  1178                           bsr	equ	0xFE0
  1179                           fsr2h	equ	0xFDA
  1180                           fsr2l	equ	0xFD9
  1181                           status	equ	0xFD8
  1182                           
  1183                           	psect	temp
  1184  00001C                     btemp:
  1185                           	opt stack 0
  1186  00001C                     	ds	1
  1187  0000                     int$flags	set	btemp
  1188                           pclatu	equ	0xFFB
  1189                           pclath	equ	0xFFA
  1190                           tblptru	equ	0xFF8
  1191                           tblptrh	equ	0xFF7
  1192                           tblptrl	equ	0xFF6
  1193                           tablat	equ	0xFF5
  1194                           prodh	equ	0xFF4
  1195                           prodl	equ	0xFF3
  1196                           intcon	equ	0xFF2
  1197                           fsr0h	equ	0xFEA
  1198                           fsr0l	equ	0xFE9
  1199                           wreg	equ	0xFE8
  1200                           fsr1h	equ	0xFE2
  1201                           fsr1l	equ	0xFE1
  1202                           bsr	equ	0xFE0
  1203                           fsr2h	equ	0xFDA
  1204                           fsr2l	equ	0xFD9
  1205                           status	equ	0xFD8


Data Sizes:
    Strings     17
    Constant    0
    Data        0
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     25      27
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    write_LCD@c	PTR unsigned char  size(2) Largest target is 17
		 -> STR_1(CODE[17]), 


Critical Paths under _main in COMRAM

    _main->_write_LCD
    _write_LCD->_send_msg
    _send_msg->_ena_pulse
    _set_line->_send_cfg
    _init_LCD->_send_cfg
    _send_cfg->_ena_pulse

Critical Paths under _INT in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _INT in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INT in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INT in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INT in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INT in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INT in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INT in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INT in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     439
                    _UART_Data_Ready
                          _UART_Read
                           _init_LCD
                          _init_UART
                         _init_timer
                           _set_line
                          _write_LCD
 ---------------------------------------------------------------------------------
 (1) _write_LCD                                            6     4      2     169
                                             19 COMRAM     6     4      2
                           _send_msg
 ---------------------------------------------------------------------------------
 (2) _send_msg                                             1     1      0      15
                                             18 COMRAM     1     1      0
                          _ena_pulse
 ---------------------------------------------------------------------------------
 (1) _set_line                                             5     1      4     255
                                             19 COMRAM     5     1      4
                           _send_cfg
 ---------------------------------------------------------------------------------
 (1) _init_timer                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_UART                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_LCD                                             0     0      0      15
                           _send_cfg
 ---------------------------------------------------------------------------------
 (2) _send_cfg                                             1     1      0      15
                                             18 COMRAM     1     1      0
                          _ena_pulse
 ---------------------------------------------------------------------------------
 (3) _ena_pulse                                            1     1      0       0
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_Read                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UART_Data_Ready                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INT                                                 17    17      0       0
                                              0 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UART_Data_Ready
   _UART_Read
   _init_LCD
     _send_cfg
       _ena_pulse
   _init_UART
   _init_timer
   _set_line
     _send_cfg
       _ena_pulse
   _write_LCD
     _send_msg
       _ena_pulse

 _INT (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     19      1B       1       28.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      1B      20        0.0%
DATA                 0      0      1B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Tue Jun  6 14:07:16 2017

                       _i 001A               __CFG_BOR$ON 000000                        bsr 000FE0  
             __CFG_BORV$3 000000              __CFG_CP0$OFF 000000              __CFG_CP1$OFF 000000  
            __CFG_CP2$OFF 000000              __CFG_CP3$OFF 000000                       l127 0990  
                     l910 083E                       l920 091E                       l906 081E  
                     l916 0910                       l936 0892              __CFG_CPB$OFF 000000  
                     _INT 0018                       u157 08AC                       u167 08BE  
                     u177 08D0              __CFG_CPD$OFF 000000                       wreg 000FE8  
            __CFG_FOSC$HS 000000              __CFG_LVP$OFF 000000                      ?_INT 0001  
            __CFG_WDT$OFF 000000                      STR_1 0801                      _BRGH 007D62  
                    _CREN 007D5C                      i1l20 008C                      _RCIF 007CF5  
                    _SPEN 007D5F                      _TRMT 007D61                      _TXEN 007D65  
                    _SYNC 007D64                      _main 085E                      fsr0h 000FEA  
                    fsr1h 000FE2                      fsr2h 000FDA                      fsr0l 000FE9  
                    fsr1l 000FE1                      fsr2l 000FD9                      btemp 001C  
                    prodh 000FF4                      prodl 000FF3                      start 00D4  
           __CFG_IESO$OFF 000000             __CFG_MCLRE$ON 000000              ___param_bank 000000  
                   ??_INT 0001             __CFG_PLLDIV$1 000000            __CFG_CCP2MX$ON 000000  
                   ?_main 0001                     i1l866 0080                     _RCREG 000FAE  
                   _TMR0H 000FD7                     _TMR0L 000FD6                     _SPBRG 000FAF  
                   _PORTD 000F83             __CFG_USBDIV$1 000000                     _TRISD 000F95  
                   _TRISE 000F96                     _TXREG 000FAD             __CFG_PWRT$OFF 000000  
           __CFG_WRT0$OFF 000000             __CFG_WRT1$OFF 000000             __CFG_WRT2$OFF 000000  
           __CFG_WRT3$OFF 000000            __CFG_EBTR0$OFF 000000            __CFG_FCMEN$OFF 000000  
          __CFG_EBTR1$OFF 000000            __CFG_EBTR2$OFF 000000            __CFG_EBTR3$OFF 000000  
      __size_of_UART_Read 0008             __CFG_WRTB$OFF 000000             __CFG_WRTC$OFF 000000  
           __CFG_WRTD$OFF 000000            __CFG_EBTRB$OFF 000000                     pclath 000FFA  
                   tablat 000FF5                     status 000FD8            __CFG_ICPRT$OFF 000000  
          __CFG_PBADEN$ON 000000           __initialization 094A              __end_of_main 08A4  
                  ??_main 001A             __activetblptr 000001                    _TRISC6 007CA6  
                  _TRISC7 007CA7            __CFG_XINST$OFF 000000         __end_of_UART_Read 0998  
          __CFG_STVREN$ON 000000          __end_of_init_LCD 094A          __end_of_send_cfg 0990  
        __end_of_send_msg 0982          __end_of_set_line 0926              __mediumconst 0000  
                  tblptrh 000FF7                    tblptrl 000FF6                    tblptru 000FF8  
              __accesstop 0060   __end_of__initialization 094E             ___rparam_used 000001  
          __pcstackCOMRAM 0001        __size_of_ena_pulse 0038        __size_of_init_UART 0014  
__size_of_UART_Data_Ready 0008               send_cfg@cmd 0013                 ?_init_LCD 0001  
         __CFG_VREGEN$OFF 000000               send_msg@msg 0013        __size_of_write_LCD 004A  
               ?_send_cfg 0001                   __Hparam 0000                 ?_send_msg 0001  
       __end_of_ena_pulse 08DC                   __Lparam 0000                 ?_set_line 0014  
            __psmallconst 0800                   __pcinit 094A                _init_timer 08DC  
                 __ramtop 0800                   __ptext0 085E                   __ptext1 0814  
                 __ptext2 0974                   __ptext3 0902                   __ptext4 08DC  
                 __ptext5 0960                   __ptext6 0926                   __ptext7 0982  
                 __ptext8 08A4                   __ptext9 0990         __end_of_init_UART 0974  
               _T0CONbits 000FD5              __size_of_INT 00BC               set_line@pos 0016  
    end_of_initialization 094E                ??_init_LCD 0014                ??_send_cfg 0013  
              ??_send_msg 0013                ??_set_line 0018            set_line@cursor 0018  
       ??_UART_Data_Ready 0012                 _UART_Read 0990                 _PORTEbits 000F84  
       __end_of_write_LCD 085E                ?_UART_Read 0001               ?_init_timer 0001  
     start_initialization 094A               __end_of_INT 00D4          __CFG_LPT1OSC$OFF 000000  
             __pbssCOMRAM 001A       __size_of_init_timer 0026         __size_of_init_LCD 0024  
       __size_of_send_cfg 000E         __size_of_send_msg 000E         __size_of_set_line 0024  
               _ena_pulse 08A4               __pintcodelo 0018               ??_UART_Read 0012  
             __smallconst 0800                 _init_UART 0960           _UART_Data_Ready 0998  
        __CFG_WDTPS$32768 000000                ?_ena_pulse 0001                ?_init_UART 0001  
               _write_LCD 0814                  __Hrparam 0000                  __Lrparam 0000  
            __Lsmallconst 0800              ??_init_timer 0012                ?_write_LCD 0014  
                __ptext10 0998   __end_of_UART_Data_Ready 09A0                  _init_LCD 0926  
           __size_of_main 0046        __end_of_init_timer 0902                  _send_cfg 0982  
                _send_msg 0974                write_LCD@c 0014                write_LCD@j 0018  
                _set_line 0902              set_line@line 0014                  int$flags 001C  
             ??_ena_pulse 0012     __CFG_CPUDIV$OSC1_PLL2 000000                _INTCONbits 000FF2  
             ??_init_UART 0012                  intlevel1 0000               ??_write_LCD 0016  
        ?_UART_Data_Ready 0001  
